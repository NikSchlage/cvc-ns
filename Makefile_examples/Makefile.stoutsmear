# ##########
work=/home/marcuspe/software/
srcdir=..

qlua_build_dir=$(work)/qlua/momproj/build-ubuntu18/

limedir=$(work)/lime-1.3.2/build-ubuntu18/

lemondir=$(work)/lemon/build-ubuntu18/

tmLQCD=$(work)/tmLQCD_main/low-memory-projection-exdefl/build-ubuntu18-4dim-openmp/
tmLQCD_src=$(work)/tmLQCD_main/low-memory-projection-exdefl

tmLQCD=$(work)/tmLQCD/build-ubuntu18-4dim-openmp/
tmLQCD_src=$(work)/tmLQCD

tmLQCD_libs=-lwrapper -lhmc -lmonomial -loperator -lsolver -linit -lmeas -llinalg -lhmc -lrational -lio -lsmear -lxchange -lbuffers 

fftwdir=$(work)/fftw/build-ubuntu18

arpackdir=$(qlua_build_dir)/arpack

lapackdir=$(qlua_build_dir)/lapack

lhpcdir=$(qlua_build_dir)/aff

hdf5_include_dir=/usr/include/hdf5/serial


CXX=mpicxx.mpich -fopenmp
CXXFLAGS= -Wall -pedantic -g -O3 -DF_ -DHAVE_MPI -DHAVE_TMLQCD_LIBWRAPPER -DPARALLELTXYZ -DHAVE_LIBLEMON -DTM_USE_MPI -DHAVE_LHPC_AFF -DHAVE_OPENMP -DLEMON_OFFSET_TYPE=uint64_t

# -DHAVE_HDF5

# -DDUMMY_SOLVER

CCDEP = g++
DEPFLAGS = -MM

INCLUDE = -I$(lemondir)/include -I$(limedir)/include/ -I$(srcdir) -I$(fftwdir)/include -I. -I$(tmLQCD_src)/include -I$(lhpcdir)/include -I$(hdf5_include_dir)/

LIBS = -L$(lhpcdir)/lib -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L$(tmLQCD)/lib/ $(tmLQCD_libs) -llemon -llime -lparpack -larpack $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff -lmpifort -lhdf5_serial

# LIBS = -L$(lhpcdir)/lib -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L$(tmLQCD)/lib/ -lwrapper -lhmc -lmonomial -loperator -lsolver -linit -lmeas -llinalg -lhmc -lxchange -lrational -lio -llemon -llime -lparpack -larpack $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff -lmpifort -lhdf5_serial

LDFLAGS = -fopenmp -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L/usr/lib/ -L$(tmLQCD)/lib $(tmLQCD_libs) -llemon -llime -lparpack -larpack  $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff -lmpifort -lhdf5_serial

# LDFLAGS = -fopenmp -L$(arpackdir)/lib -L$(lemondir)/lib -L$(limedir)/lib/ -L$(fftwdir)/lib -lfftw_mpi -lfftw -L/usr/lib/ -L$(tmLQCD)/lib -lwrapper -lhmc -lmonomial -loperator -lsolver -linit -lmeas -llinalg -lhmc -lxchange -lrational -lio -llemon -llime -lparpack -larpack  $(lapackdir)/lib/liblapack.a  $(lapackdir)/lib/librefblas.a  -llapack -lblas -lgfortran -lm -llhpc-aff -lmpifort -lhdf5_serial


LINK = $(CXX) -o $@ ${LDFLAGS}
COMPILE = ${CXX} $(INCLUDE) -o $@ ${CXXFLAGS}

MODULES = DML_crc32 dml getopt cvc_utils cvc_geometry mpi_init io io_utils propagator_io read_input_parser_cvc \
	  get_index gauge_io contractions_io ranlxd ranlxs Q_phi set_default \
	  Q_clover_phi gsp prepare_source matrix_init project make_x_orbits contract_cvc_tensor smearing_techniques \
	  prepare_propagator scalar_products clover rotations gitversion gamma dummy_solver contract_factorized \
	  uwerr derived_quantities incomp_gamma

HEADERS = getopt cvc_complex cvc_geometry cvc_linalg iblas icontract cvc_utils default_input_values dml global io io_utils \
	  mpi_init propagator_io read_input_parser get_index gauge_io contractions_io \
	  ranlxd ranlxs Q_phi set_default laplace_linalg Q_clover_phi \
	  gsp prepare_source matrix_init project make_x_orbits contract_cvc_tensor smearing_techniques \
	  prepare_propagator scalar_products clover rotations gamma gamma_mult_table dummy_solver contract_factorized \
	  uwerr derived_quantities incomp_gamma

PROGRAM = p2gg_contract twopt_invert_contract cpff_invert_contract cpff_tbc_invert_contract test_invert p2gg_invert_contract_exdefl \
	  jj_invert_contract p2gg_invert_contract_local cpff_xg_contract
  

 
all: dep $(PROGRAM) 


# ##########

read_input_parser_cvc.cpp: ${srcdir}/read_input_parser_cvc.l
	${LEX} -P cvc_ -i -t $< > ${srcdir}/read_input_parser_cvc.cpp

$(addsuffix .d,$(MODULES)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

$(addsuffix .d,$(PROGRAM)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

dep: $(addsuffix .d,$(MODULES) ${PROGRAM})

$(addsuffix .o,${MODULES}): %.o: ${srcdir}/%.cpp $(addprefix ${srcdir}/, $(addsuffix .h, ${HEADERS})) %.d
	${COMPILE} ${OPTARGS} -c $< 

$(addsuffix .o,${PROGRAM}): %.o: ${srcdir}/%.cpp %.d
	${COMPILE} ${OPTARGS} -c $< 

${PROGRAM}: %: %.o gitversion.cpp $(addsuffix .o,${MODULES})
	${LINK}  $(addsuffix .o,${MODULES}) $@.o $(LIBS)

gitversion.cpp: ${srcdir}/.git/HEAD ${srcdir}/.git/index
	echo "namespace cvc { const char *g_gitversion = \"$(shell cd ${srcdir} && git rev-parse HEAD && cd -)\"; }" > ${srcdir}/gitversion.cpp

# ##########


clean:
	rm -f *~ *.o *.d $(PROGRAM) ${srcdir}/gitversion.cpp

.PHONY: clean

# ##########
