
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 268
#define YY_END_OF_BUFFER 269
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2062] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  264,  264,  267,  267,  269,  266,  266,  265,
      263,  262,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  131,  134,  135,  136,  132,  133,  146,  266,

      137,  266,  266,  138,  266,  266,  140,  266,  266,  141,
      266,  266,  142,  266,  266,  139,  266,  266,  143,  266,
      266,  144,  266,  151,  152,  154,  155,  156,  266,  145,
      168,  266,  147,  266,  266,  148,  266,  266,  149,  266,
      266,  150,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  165,  166,  167,  169,  170,  266,  266,  172,  266,
      174,  153,  175,  176,  177,  180,  181,  182,  183,  266,
      178,  266,  266,  179,  266,  266,  184,  266,  266,  185,
      266,  186,  187,  266,  188,  266,  266,  189,  266,  266,
      190,  266,  266,  191,  266,  266,  192,  266,  266,  193,

      266,  266,  194,  266,  266,  195,  266,  266,  196,  266,
      266,  197,  266,  198,  199,  201,  200,  266,  202,  266,
      266,  266,  204,  266,  205,  266,  206,  266,  207,  266,
      208,  266,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  266,  266,  266,  266,  266,  223,  224,  225,  266,
      173,  266,  226,  227,  228,  229,  266,  266,  231,  233,
      241,  242,  234,  235,  236,  237,  238,  239,  240,  243,
      266,  244,  266,  245,  266,  246,  266,  247,  266,  248,
      266,  249,  266,  250,  266,  251,  266,  266,  266,  252,
      266,  253,  266,  254,  256,  257,  258,  259,  260,  261,

      264,  264,  263,  262,  266,  266,  263,  262,    0,  263,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,  131,  134,  135,  136,  132,
      133,  146,  137,    0,  137,    0,  138,    0,  138,    0,
      140,    0,  140,    0,  141,    0,  141,    0,  142,    0,
      142,    0,  139,    0,  139,    0,  143,    0,  143,    0,

      144,    0,  144,    0,  151,  152,  154,  155,  156,  145,
        0,  168,  147,    0,  147,    0,  148,    0,  148,    0,
      149,    0,  149,    0,  150,    0,  150,    0,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  169,
      170,  171,  172,    0,  172,    0,  174,  153,  175,  176,
      177,  180,  181,  182,  183,  178,    0,  178,    0,  179,
        0,  179,    0,  184,    0,  184,    0,  185,    0,  185,
        0,  186,  187,  188,    0,  188,    0,  189,    0,  189,
        0,  190,    0,  190,    0,  191,    0,  191,    0,  192,
        0,  192,    0,  193,    0,  193,    0,  194,    0,  194,

        0,  195,    0,  195,    0,  196,    0,  196,    0,  197,
        0,  197,    0,  198,  199,  201,  200,  202,    0,  202,
        0,  203,  204,    0,  204,    0,  205,  206,    0,  207,
        0,  208,    0,  209,    0,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  173,    0,  173,    0,  226,  227,  228,  229,  230,
      232,  231,  233,  241,  242,  234,  235,  236,  237,  238,
      239,  240,  243,  244,    0,  244,    0,  245,  246,    0,
      247,    0,  248,    0,  249,    0,  250,    0,  251,    0,
        0,    0,    0,  252,    0,  253,    0,  254,    0,  256,

      257,  258,  259,  260,  261,  264,  264,  263,  267,  267,
      263,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    2,    0,    0,    4,    0,    5,    0,    6,    0,
       12,    0,   11,    0,    0,    0,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,    0,  137,    0,  138,    0,
      140,    0,  141,    0,  142,    0,  139,    0,  143,    0,

      144,    0,  147,    0,  148,    0,  149,    0,  150,    0,
      172,    0,  178,    0,  179,    0,  184,    0,  185,    0,
      188,    0,  189,    0,  190,    0,  191,    0,  192,    0,
      193,    0,  194,    0,  195,    0,  196,    0,  197,    0,
      202,    0,  204,    0,  173,    0,  244,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
        4,    5,    6,   12,   11,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,    0,   54,    0,    0,
        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  255,    0,    0,   57,   56,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   15,    0,
        0,    0,   60,    0,   10,    0,    0,    0,   14,    0,
        0,   68,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,    0,   69,    0,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   55,   54,    0,
        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,    0,   22,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,

        0,  129,   10,    0,    0,   14,    0,   68,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,   69,   72,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,   22,    0,    0,    0,    0,
        0,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,    0,    9,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,    0,   24,    0,   25,    0,   26,    0,
        0,    0,    0,    0,   50,    0,   51,    0,   52,    0,
       53,    0,    0,    0,    0,    0,   61,    0,   62,    0,
       63,    0,   64,    0,    0,   19,   18,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,    8,    0,
        0,    0,    0,    0,    0,   84,    0,   85,    0,   86,
        0,   87,    0,    0,   70,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  112,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,   71,    0,
       73,    0,  113,   23,   24,   25,   26,    0,    0,    0,
        0,   48,   50,   51,   52,   53,    0,    0,   59,    0,
       58,    0,   61,   62,   63,   64,    0,   19,    0,    0,
        0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
        0,   43,    0,    0,    0,    0,   84,   85,   86,   87,
        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   17,   16,    0,    0,    0,    0,    0,    0,   36,
        0,    0,    0,   71,   73,  113,    0,    0,    0,   48,
        0,   49,   59,   58,    0,    0,    0,    0,    0,    0,
        0,   47,    0,    0,    0,    0,    0,   43,    0,   39,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   49,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
       39,    0,    0,    0,    0,  114,    0,    0,   34,    0,

        0,    0,    0,    0,   67,    0,   66,    0,    0,    0,
      106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,   95,    0,    0,    0,    0,    0,   74,   88,    0,
        0,    0,    0,  114,    0,   34,    0,    0,    0,    0,
        0,   65,   67,   66,    0,    0,  106,    0,    0,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   40,    0,    0,    0,  105,    0,    0,
        0,  125,    0,    0,   20,    0,    0,   95,    0,  126,

        0,    0,   46,    0,   45,    0,  128,   74,    0,   89,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
        0,    0,  100,    0,    0,    0,    0,    0,    0,   90,
        0,    0,    0,   44,    0,    0,    0,    0,    0,    0,
      105,    0,    0,  125,    0,    0,    0,    0,  126,    0,
       46,   45,  128,   89,    0,    0,    0,    0,   33,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,   90,    0,    0,   44,    0,  101,
        0,    0,    0,    0,    0,    0,  130,    0,   96,    0,
        0,    0,    0,   27,    0,    0,    0,    0,    0,   81,

        0,   82,    0,   33,    0,    0,    0,    0,    0,  108,
        0,   42,    0,    0,    0,    0,    0,  118,    0,  119,
        0,  120,    0,   91,    0,  101,    0,   37,    0,    0,
        0,    0,  130,   96,    0,    0,    0,   28,    0,   29,
       27,    0,    0,    0,    0,   81,   82,    0,    0,    0,
        0,    0,  108,    0,    0,    0,    0,    0,  118,  119,
      120,   91,    0,   41,   37,    0,    0,    0,    0,   75,
        0,  107,    0,    0,    0,   28,   29,    0,    0,   99,
        0,   94,    0,    0,   83,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,   41,    0,  115,    0,  116,

        0,  117,   75,  107,    0,    0,    0,    0,    0,   99,
       94,    0,   83,    0,  102,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,  115,  116,  117,    0,    0,
        0,    0,    0,    0,  102,    0,    0,   93,    0,    0,
        0,    0,    0,    0,    0,  124,    0,    0,    0,    0,
       97,    0,    0,   32,    0,  127,    0,   93,    0,  104,
        0,    0,    0,    0,    0,  124,    0,    0,    0,    0,
        0,   97,    0,   98,   32,  127,    0,  104,    0,    0,
        0,    0,    0,    0,  121,    0,  122,    0,  123,    0,
        0,   98,    0,  103,    0,    0,    0,    0,    0,  121,

      122,  123,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,  110,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,    0,    0,  109,    0,    0,
       30,    0,   80,    0,    0,    0,  109,    0,   31,   30,
       80,    0,    0,    0,    0,   76,    0,  111,   31,    0,
       77,    0,   78,    0,   79,   76,  111,   77,   78,   79,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    9,   10,    5,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,    1,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   45,   45,   45,   46,   45,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[2165] =
    {   0,
        0,    6,   77,   93,  109,  125,  141,  157,  173,  189,
      205,  221,  237,  253,  269,  285,  301,  317,  333,  349,
      365,  381,  397,  413,  429,  445,  461,  477,  493,  509,
      525,  541,  557,  573,  589,  605,  621,  637,  653,  669,
      685,  701,  717,  733,  749,  765,  781,  797,  813,  829,
      845,  861,  877,  893,  910,  923,  936,  955,  968,  981,
     1000, 1013, 1026, 1045, 1058, 1071, 1090, 1103, 1116, 1135,
     1179, 1195, 1211, 1227, 1243, 1259, 1275, 1291, 1308, 1353,
     1321, 1334, 1397, 1413, 1429, 1445, 1461, 1477, 1493, 1509,
     1525, 1541, 1557, 1573, 1589, 1605, 1621, 1637, 1653, 1669,

     1685, 1701, 1717, 1733, 1749, 1765, 1781, 1797, 1813, 1829,
     1845, 1861, 1877, 1893, 1909, 1925, 1941, 1957, 1973, 1989,
     2005, 2021, 2037, 2053, 2069, 2085, 2101, 2117, 2133, 2149,
     2165, 2181, 2197, 2213, 2229, 2245, 2261, 2277, 2293, 2309,
     2325, 2341, 2357, 2373, 2390, 2403, 2447, 2463, 2479, 2495,
     2511, 2527, 2543, 2559, 2575, 2591, 2607, 2623, 2639, 2655,
     2671, 2687, 2703, 2719, 2735, 2751, 2767, 2783, 2799, 2815,
     2831, 2847, 2863, 2879, 2423, 2896, 2909, 2922, 2941, 2954,
     2967, 2986, 2999, 3012, 3056, 3072, 3088, 3104, 3120, 3136,
     3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264, 3281, 3326,

     3032, 3294, 3370, 3386, 3403, 3448, 3493, 3538, 3582, 3598,
     3615, 3660, 3705, 3750, 3795, 3840, 3885, 3930, 3975, 4020,
     4065, 4110, 4155, 4200, 4244, 4260, 4276, 4292, 4308, 4324,
     4340, 4356, 4372, 4388, 4404, 4420, 4436, 4452, 4468, 4484,
     4500, 4516, 4532, 4548, 4564, 4580, 4596, 4612, 4628, 4644,
     4661, 4706, 4751, 4796, 4841, 4886, 4931, 4976, 5020, 5036,
     5053, 5098,  944,  989, 1034, 1079, 1068,10450,   80,10450,
    10450,10450, 1110,   81, 3284,   97,  100, 1118,  932,  116,
      134,  163, 5142, 3403, 5194,  159, 1110,  188, 3412, 5243,
       83,  194, 1333, 1361, 1369, 1376, 2402, 2921, 2966, 3012,

     3342, 3412, 3464, 3501, 3472, 3515, 3552, 3624, 3632, 3668,
     3640, 3682, 3713, 3727, 3759, 3766, 3808, 3816, 3848, 3862,
     3894, 3901, 3943, 3493, 3565, 3615, 3660, 3795, 3840, 3954,
     3930, 3984, 3991, 4033, 4041, 4073, 4087, 4119, 4126, 4168,
     4176, 4200, 4214,    0,    0,    0,    0,    0,    0,    0,
        0, 3975, 4020, 4065, 4155,    0,    0, 4222, 4669, 4683,
     4661, 4714, 4721, 4728, 4751, 4759, 4766, 4773, 4796, 4805,
     4812, 4854, 4862, 4894, 4908, 4940, 4947, 4989, 4997, 5061,
     5075, 4841, 4886, 5107, 5114, 5137, 5156, 5165, 5179, 5194,
     5272, 5301, 5314, 5321, 5335, 5343, 5350, 5364, 5372, 5379,

     5393, 5401, 5408, 5422, 5430, 5437, 5451, 5459, 5466, 5480,
     5488, 5495, 5509, 4976, 5053, 5516, 5523, 5537, 5544, 5558,
        0, 5566, 5573, 5587, 5594, 5601, 5614, 5621, 5632, 5639,
     5650, 5657, 5668, 5675, 5682, 5689, 5696, 5703, 5710, 5717,
     5724,    0,    0,    0,    0,    0, 5731, 5738, 5745, 5753,
     5760, 5774, 5781, 5788, 5801,    0,    0, 5808, 5815,    0,
        0, 5822,    0,    0,    0,    0,    0,    0,    0, 5829,
     5837, 5844, 5858, 5865, 5872, 5885, 5892, 5903, 5910, 5921,
     5928, 5939, 5946, 5957, 5964, 5975, 5982, 5993, 6000, 6011,
     6018, 6029, 6036, 6047,    0,    0,    0,    0, 6054,    0,

        0,  272,    0,    0,    0,  288,    0,    0,  560,10450,
      548, 1004,  573,  595,  607,  620,  623,  640,  661,  673,
      728,  738,  997,  882,  913,  973,  957,  977,   96,  115,
      147, 1020,  163,  195,  227,  242,  259, 1005, 1030, 3698,
     1053, 1049, 1067, 1103, 3271, 1107, 1096, 3321, 1093, 1094,
     1139, 1157, 5198, 3413, 1152, 1150, 1189, 3030, 1204, 1229,
     5190, 1248,  291,  563, 1340, 6061, 6068, 6075, 6082, 6089,
     6096, 6103, 6110, 6124, 6131, 6151, 6158, 6173, 6180, 6199,
     6206, 6222, 6229, 6247, 6254, 6271, 6278, 6295, 6302, 6320,
     6327, 6345, 6352, 6369, 6376, 6393, 6400, 6418, 6425, 6443,

     6450, 6467, 6474, 6491, 6498, 6505, 6515, 6522, 6529, 6540,
     6547, 6554, 6561, 6575, 6582, 6602, 6609, 6624, 6631, 6650,
     6657, 6673, 6680, 6698, 6705, 6722, 6729, 6746,    0,    0,
        0,    0,    0,    0,    0,    0, 6753, 6760, 6770, 6777,
        0,    0, 6784, 6798, 6805, 6825, 6832, 6846, 6853, 6860,
     6867, 6874, 6881, 6888, 6895, 6902, 6916, 6923, 6943, 6950,
     6965, 6972, 6991, 6998, 7014, 7021, 7039, 7046, 7063, 7070,
     7087, 7094, 7101, 7111, 7125, 7132, 7152, 7159, 7174, 7181,
     7200, 7207, 7223, 7230, 7248, 7255, 7272, 7279, 7296, 7303,
     7321, 7328, 7346, 7353, 7370, 7377, 7394, 7401, 7419, 7426,

     7444, 7451, 7468, 7475, 7492, 7499, 7517, 7524, 7542, 7549,
     7566, 7573, 7590, 7597, 7604, 7614, 7621, 7628, 7642, 7649,
     7669,    0, 7676, 7691, 7698, 7717, 7724, 7739, 7746, 7757,
     7764, 7775, 7782, 7793, 7800, 7807, 7814, 7821, 7828, 7835,
     7842, 7849, 7856,    0,    0,    0,    0,    0, 7863, 7870,
     7877, 7884, 7898, 7905, 7925, 7932, 7946, 7953,    0,    0,
     7960, 7967,    0,    0, 7974,    0,    0,    0,    0,    0,
        0,    0, 7981, 7988, 8002, 8009, 8029, 8036, 8050, 8057,
     8068, 8075, 8086, 8093, 8104, 8111, 8122, 8129, 8140, 8147,
     8158, 8165, 8176, 8187, 8194, 8205, 8212, 8223, 8230,    0,

        0,    0,    0, 8237,    0,    0, 1160,    0,    0, 1161,
        0, 1342, 1336, 3403, 1406, 1433, 1447,  977,  959, 1463,
     1482, 1495, 1503, 1514, 1541,  952,  932, 1559, 1564,  576,
      579,  595, 1595,  611,  643,  659,  691,  707,  739,  752,
      755,  771,  918,  914, 1597, 1185,  931, 1627, 1639, 1651,
     1662, 1687, 1822, 1833, 5195, 1852, 1868, 2204, 2220, 2230,
      907, 2252, 2259, 2299, 2310, 2324, 2361, 2362, 2421, 2461,
     2465, 2606, 2632,  877, 2661, 2662, 2690, 3015, 2699, 2725,
     2720, 2740, 2754,  932, 2770, 8244, 8251, 8258, 8265, 8272,
     8279, 8286, 8293, 8300, 8307, 8314, 8321, 8328, 8335, 8342,

     8349, 8356, 8363, 8370, 8377, 8384, 8391, 8398, 8405, 8412,
     8419, 8426, 8433, 8440, 8447, 8454, 8461, 8468, 8475, 8482,
     8489, 8496, 8503, 8510, 8517, 8524, 8531, 8538, 8545, 8552,
     8559, 8566, 8573, 8580, 8587, 8594, 8601, 8608, 8615, 8622,
     8629, 8636, 8643, 8650, 8657, 8664, 8671, 8678, 8689, 2805,
     2800, 1217, 1249, 2831, 2844, 2973, 3017, 5200, 3028, 3078,
     3081, 3110, 3114, 3170, 3499, 3176, 3189, 3222,  963, 3262,
     1008, 1053, 1167, 1230, 1280, 3266, 1281, 1296, 3258, 3294,
     3325, 3339, 3330, 3393, 3408, 3394, 3410, 3453, 3456, 3486,
     3487, 3498, 3536, 3620, 3636, 3655, 3682, 3677,  869, 3715,

     3684,  855, 3746, 3735, 1432, 1435, 3762, 3749, 3758, 1467,
     3815, 3802,  852, 3832, 3846, 3849, 3864, 3878, 8700,  839,
     3898, 1499, 1317, 1531, 1329, 3892,  836, 3900, 3975, 3980,
     3986, 4044, 4040, 4057, 4075, 4057, 4106, 4919, 4103, 4217,
     4110, 4109, 4700,  823, 4126, 1563, 1330, 1595, 4156, 4190,
     1627,  820, 1659,  807, 4203, 4217, 4281, 4300, 4656, 4658,
     4688, 1691, 4696, 1848, 1851, 4799, 4803, 4800, 4859, 4853,
     4879, 4910, 4947, 4945, 1883, 2232, 2235, 2248, 4942, 4992,
     4993, 2267, 2299, 4985, 4985, 5050, 5059, 5047, 5090, 5095,
      804, 8707, 8718, 5218, 5097, 2315, 2331, 5111, 5108, 5104,

     5132, 5134, 5138, 5176,  791, 2347, 5192, 2418, 5197, 5214,
     5246, 5247, 5233, 5239, 5254, 5256, 5256, 2482, 2399, 5252,
     6290, 2485, 2435, 2517, 2436, 5262, 5272, 2549, 2440, 5261,
     2581, 2443, 5255, 5304, 5315, 5323, 5322, 5377, 5378, 5379,
     2613, 2642, 5393, 2645, 2658, 2677, 2709, 5436, 5435, 5449,
     5468, 5481, 5480, 5527, 8703, 5534, 2725, 2757, 2773, 5535,
      788, 5529, 2789, 5740, 5740, 5747, 5759,  775, 6104, 5761,
     5828, 5829, 6085,  772, 8699, 6097, 6111, 6130, 6122, 8702,
     6149, 8711, 2805, 2837, 6175, 2853, 2868, 2874, 6169, 8749,
     6173, 6175,  759, 6204, 6224, 6212, 2904, 6231, 6218, 6241,

     3045, 2905, 2917, 3094, 3126, 2918, 6277, 2949, 6255, 6302,
     6285, 6313, 6309, 6333, 6357, 6359, 2962, 6374, 2994, 3041,
     6391,  726, 6396, 6383, 6407,  681, 6411, 6433, 6456, 6556,
     3187, 3044, 6557, 6559, 3190, 6573, 6565, 6571,  662, 6569,
     6605, 8725, 6611, 6614, 8725, 6628, 6619, 6657, 3222, 3253,
     3254, 3553, 6658,  646, 6672, 6678, 3556, 3587, 3588, 4311,
     6663, 6692, 6727, 3062,  633, 3107, 4314, 4346, 4378, 4410,
     6779, 4442, 4474, 3302, 6766, 6775, 6802, 6792, 6798, 6790,
      630, 6806, 6899, 6898, 3303, 4506, 3358, 4538, 3365, 6881,
     6907,  614,  598, 6917, 4570, 4602, 4634, 5023, 6924, 8775,

     6910, 6944, 6957, 6960, 6961, 6960, 6978, 7003,  585, 3413,
     7008, 7004, 8783, 3533, 7024, 7043, 7068, 7291, 7093, 8786,
     7098, 7099, 7117, 8751, 8794, 7118, 7117, 7114, 8798, 8801,
     8805, 8806, 3568, 8809, 3686, 8813, 3743, 8816, 3788, 7154,
     7162, 7163, 8824, 8831, 3832, 8834, 3833, 8835, 3878, 8839,
     3879, 7164, 8842, 8843, 7169, 8846, 3923, 8852, 3960, 8861,
     3970, 8864, 4013, 7194, 8865, 4014, 4057, 7210, 7226, 7228,
     7219, 7236, 8869, 7259, 7266, 7303, 7305, 4058, 4103, 8870,
     7323, 7316, 7340, 7372, 8873, 4104, 8874, 4148, 8882, 4193,
     8891, 4194, 7375, 8892, 4250, 7362, 7392, 7384, 7385, 8870,

     7425, 7422, 7448, 7471, 7476, 7465, 4263, 7487, 7495, 7488,
     7509, 7512, 7544, 8900, 8901, 4686, 7557, 7624, 7626, 7618,
     7636, 7634, 8904, 4699, 7635, 7631, 7658, 8909, 4789, 8910,
     4790, 8919, 4834, 4835, 4878, 4879, 4924, 7680, 7684, 7692,
     8922, 4925, 5026, 5091, 5092, 5136, 8927, 8928, 5195, 8931,
     5539, 7866, 5618, 5638, 5656, 5674, 7884, 5862, 7882,  582,
      566, 7901, 7897, 8932, 5909, 7894, 7883, 7907, 7976, 7971,
     8937, 5927, 8940, 7990, 8008,  550, 5945, 5963, 5981, 6017,
     7991, 6035, 8007, 8719,  503, 8762, 8788, 8830, 8895, 8906,
     8920, 8924, 8920, 8931,  500,  487, 8915, 8933, 8933, 8936,

     8958, 6053, 6128, 8921, 8934, 8944, 8941, 8942, 8944, 6151,
     8949, 8946, 8949, 6203, 6295, 6490, 8935, 8934, 8941, 6546,
     8986, 6579, 6602, 6654, 8954, 8947, 8949, 8962, 8962, 8976,
     8970, 6745, 8988, 8974, 8982, 9008, 8990, 6802, 9014, 6920,
     8980, 8982, 8989, 9021, 8997, 9026, 9004, 8997, 9038, 9049,
     9015, 9008, 9061, 9020, 9031,  484, 9031, 9027, 9020, 9041,
     9045, 9042, 6943, 9047, 9050, 9034, 9041, 9038, 9087, 9051,
     9048, 9058, 9057, 9049, 9058, 6995, 9069, 9071, 9112, 9062,
     9067, 9113, 9075, 9068, 9079, 9096, 9122, 9123, 7086, 9098,
     7129, 9091, 9092, 9113, 9140, 7152, 9106, 9141, 7204, 9115,

     9118, 9113, 9148, 9149, 7296, 9166, 7589, 9116, 9128, 9167,
     7646, 9124, 9171, 9124, 9145, 9143, 9145, 9148, 9150, 9145,
     9149, 9153, 9165, 9165, 9155, 9164, 9193, 7669, 9177, 9160,
     9199, 9166, 9181, 9221, 9178,  471, 9227, 7716, 9174, 9181,
     9230, 7721, 9233, 9239, 9240, 9245, 9248, 7763, 7781, 9251,
     9195, 9205, 9199, 7799, 9212, 7902,  468, 9228, 9223, 9238,
     9263, 8006, 8027, 8074, 9229, 9249, 8092, 9251, 9273, 8110,
     9242, 9242, 9234, 9243,  455, 9274, 9257, 9256, 9291, 9247,
     9252, 9247, 9267, 8128, 9259, 9276, 9302, 8146, 9273, 9284,
     9314, 8182, 9268, 9281, 8193, 9286, 9299, 8211, 9319, 8229,

     9287, 9324, 8706, 9332, 8755, 9337, 8897, 9325, 9342, 9347,
     9293, 9303, 9311, 9352, 9315, 9326, 9332, 9340, 9360, 9327,
     9335, 9365, 9369, 9331, 9349, 9338, 9352, 9335, 9378, 9382,
     9366, 9357, 9393, 9397, 9406, 9360, 9367, 9383, 9376, 9393,
     9411, 9415, 9421, 9425, 9432, 9378, 9402, 9405, 9439, 9400,
     9449, 9450, 9453, 9457, 9458, 9461, 9415, 9466, 9467, 9401,
     9428, 9426, 9446, 9476,  452, 9479, 9483, 9453, 9445, 9461,
     9454, 9486, 9489, 9494, 9504, 9507, 9457, 9511, 9514, 9517,
     9518,  439, 9472, 9463, 9470, 9522, 9527, 9531, 9535, 9521,
     9540, 9543, 9544, 9548, 9515, 9513, 9517, 9521, 9555, 9561,

     9566, 9570, 9518, 9573, 9526,  436, 9537, 9530, 9576, 9583,
     9542, 9587, 9564, 9571, 9570, 9558, 9595, 9596, 9599, 9603,
     9604, 9607, 9608, 9621, 9625, 9626, 9629, 9630, 9593, 9636,
     9637,  423, 9640, 9644, 9626, 9626, 9648, 9649, 9654, 9655,
     9658, 9637, 9665, 9666, 9637, 9672, 9676, 9677, 9652, 9662,
     9652, 9659, 9686, 9651, 9689, 9661,  420, 9655, 9694, 9698,
     9702, 9707, 9714, 9715, 9719, 9722, 9723, 9726, 9727, 9731,
     9732, 9735, 9709, 9701, 9712, 9745, 9749, 9721, 9750, 9753,
     9754, 9757, 9726, 9760, 9761, 9765, 9754, 9743, 9744, 9746,
     9778, 9782, 9758, 9760, 9756, 9787, 9790, 9791, 9798, 9795,

     9802, 9808, 9815, 9819, 9775, 9781, 9799, 9786, 9783, 9825,
     9826, 9788, 9830, 9831, 9834, 9800, 9839, 9808, 9810, 9843,
      407, 9827, 9815, 9824, 9852, 9856, 9859, 9860, 9822, 9827,
     9867, 9848, 9871, 9878, 9882, 9850, 9886, 9889, 9895, 9859,
     9847, 9856, 9871, 9869, 9899, 9906, 9879, 9868, 9871, 9914,
     9910, 9922, 9923, 9927, 9934, 9935, 9882, 9940, 9941, 9944,
     9908, 9898, 9922, 9935, 9932, 9954, 9961, 9962, 9966, 9938,
     9939, 9965, 9969, 9970, 9973, 9974, 9987, 9988, 9967, 9970,
     9975, 9957, 9959, 9995, 9996, 9999,10000,10007,10004, 9982,
     9987,10014,10024,10025, 9974, 9991,  404, 9992, 9990,10028,

    10029,10032,10018,10037,10042,10012,10022,10023,10018,10025,
    10015,10052,10055,10022,10018,10039,10030,10042,10031,10064,
    10065,10080,10083,  391,10048,10036,10092,10072,10093,10100,
    10101,10104,10105,10070,10113,10117,10121,10125,10122,10126,
    10130,10134,10135,10142,10143,10146,10147,10152,10153,10160,
    10164,10165,10168,10169,10172,10173,10177,10178,10182,10186,
    10450,10190,10195,10200,10205,10210,10215,10220,10225,10230,
    10235,10240,10245,10250,10255,10260,10265,10270,10275,10280,
    10285,10290,10295,10300,10305,10310,10315,10320,10325,10330,
    10335,10340,10345,10350,10355,10360,10362,10364,10366,10368,

    10370,10372,10374,10376,  429,10378,10380,10382,10384,10386,
    10388,10390,  416,10392,  413,  400,  397,  384,  381,  368,
      365,  352,  349,  336,  333,  320,  317,  301,10397,10402,
    10404,10406,10408,10410,10412,10414,10416,10418,  274,10420,
    10422,10424,10426,10428,10430,10432,  257,10434,  242,  223,
      210,  207,  191,  178,  175,  159,  143,  130,  127,  111,
       98,    0,10439,10444
    } ;

static yyconst flex_int16_t yy_def[2165] =
    {   0,
     2062, 2061, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2063, 2063, 2064, 2064, 2065, 2065,
     2066, 2066, 2067, 2067, 2068, 2068, 2069, 2069, 2070, 2070,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2071, 2071,
     2072, 2072, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,

     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2073, 2073, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2074, 2074, 2075, 2075, 2076, 2076,
     2077, 2077, 2078, 2078, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2079, 2079,

     2080, 2080, 2062, 2062, 2081, 2081, 2082, 2082, 2062, 2062,
     2083, 2083, 2084, 2084, 2085, 2085, 2086, 2086, 2087, 2087,
     2088, 2088, 2089, 2089, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2090, 2090, 2091, 2091, 2092, 2092, 2093, 2093, 2062, 2062,
     2094, 2094, 2095, 2095, 2096, 2096, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
     2104, 2061, 2061, 2061, 2061, 2105, 2106, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2107, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2108, 2109, 2110, 2111, 2112, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2113, 2114, 2061, 2061, 2115,
     2116, 2061, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2124, 2125, 2126, 2127, 2061, 2128,

     2129, 2129, 2129, 2129, 2130, 2130, 2130, 2130, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2131, 2132,
     2133, 2134, 2135, 2136, 2137, 2138, 2061, 2061, 2061, 2061,
     2139, 2140, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2141, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2142, 2143, 2144, 2145, 2146, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2147, 2148,
     2061, 2061, 2149, 2150, 2061, 2151, 2152, 2153, 2154, 2155,
     2156, 2157, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2158,

     2159, 2160, 2161, 2061, 2162, 2163, 2163, 2163, 2164, 2164,
     2164, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
        0, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061
    } ;

static yyconst flex_int16_t yy_nxt[10523] =
    {   0,
     2061,  269,  270,  269,  805,  271,  268,  269,  270,  269,
      268,  272,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  273,  274,  275,  276,  277,  278,
      279,  280,  281,  268,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  268,  268,  292,  268,  268,  268,
      268,  268,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  268,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  268,  268,  292,  268,  268,  268,  269,  270,
      269,  509,  271,  509,  563,  510,  563,  293,  293,  293,
      293,  293,  293,  293,  269,  270,  269,  529,  272,  529,

      564,  514,  803,  293,  293,  293,  293,  293,  293,  293,
      269,  270,  269,  531,  271,  802,  830,  519,  830,  294,
      294,  294,  294,  294,  294,  294,  269,  270,  269,  514,
      272,  801,  831,  520,  800,  294,  294,  294,  294,  294,
      294,  294,  269,  270,  269,  519,  271,  772,  832,  526,
      832,  295,  295,  295,  295,  295,  295,  295,  269,  270,
      269,  520,  272,  771,  834,  527,  834,  295,  295,  295,
      295,  295,  295,  295,  269,  270,  269,  526,  271,  770,
      835,  528,  769,  296,  296,  296,  296,  296,  296,  296,
      269,  270,  269,  527,  272,  768,  836,  549,  836,  296,

      296,  296,  296,  296,  296,  296,  269,  270,  269,  528,
      271,  767,  837,  552,  766,  297,  297,  297,  297,  297,
      297,  297,  269,  270,  269,  549,  272,  764,  838,  565,
      838,  297,  297,  297,  297,  297,  297,  297,  269,  270,
      269,  552,  271,  840,  839,  840,  763,  298,  298,  298,
      298,  298,  298,  298,  269,  270,  269,  565,  272,  841,
      842,  759,  842,  298,  298,  298,  298,  298,  298,  298,
      269,  270,  269,  807,  271,  807,  843,  808,  641,  299,
      299,  299,  299,  299,  299,  299,  269,  270,  269,  509,
      272,  810,  563,  811,  563,  299,  299,  299,  299,  299,

      299,  299,  269,  270,  269,  805,  271,  300,  564,  300,
      301,  302,  302,  302,  302,  302,  302,  302,  269,  270,
      269,  803,  272,  300,  802,  300,  301,  302,  302,  302,
      302,  302,  302,  302,  269,  270,  269,  801,  271,  303,
      800,  303,  304,  305,  305,  305,  305,  305,  305,  305,
      269,  270,  269,  772,  272,  303,  771,  303,  304,  305,
      305,  305,  305,  305,  305,  305,  269,  270,  269,  770,
      271,  306,  769,  306,  307,  308,  308,  308,  308,  308,
      308,  308,  269,  270,  269,  768,  272,  306,  767,  306,
      307,  308,  308,  308,  308,  308,  308,  308,  269,  270,

      269,  766,  271,  309,  764,  309,  310,  311,  311,  311,
      311,  311,  311,  311,  269,  270,  269,  763,  272,  309,
      759,  309,  310,  311,  311,  311,  311,  311,  311,  311,
      269,  270,  269,  641,  271,  312, 2034,  312,  313,  314,
      314,  314,  314,  314,  314,  314,  269,  270,  269, 2008,
      272,  312, 1941,  312,  313,  314,  314,  314,  314,  314,
      314,  314,  269,  270,  269, 1894,  271,  315, 1873,  315,
      316,  317,  317,  317,  317,  317,  317,  317,  269,  270,
      269, 1850,  272,  315, 1829,  315,  316,  317,  317,  317,
      317,  317,  317,  317,  269,  270,  269, 1811,  271,  318,

     1728,  318,  319,  320,  320,  320,  320,  320,  320,  320,
      269,  270,  269, 1715,  272,  318, 1694,  318,  319,  320,
      320,  320,  320,  320,  320,  320,  269,  270,  269, 1614,
      271,  321, 1558,  321,  322,  323,  323,  323,  323,  323,
      323,  323,  269,  270,  269, 1557,  272,  321, 1547,  321,
      322,  323,  323,  323,  323,  323,  323,  323,  269,  270,
      269,  509,  271,  509,  884,  510,  884,  324,  324,  324,
      324,  324,  324,  324,  269,  270,  269,  830,  272,  830,
      969,  812,  969,  324,  324,  324,  324,  324,  324,  324,
      269,  270,  269,  831,  271, 1543,  832,  814,  832,  325,

      325,  325,  325,  325,  325,  325,  269,  270,  269,  812,
      272, 1529,  834,  815,  834,  325,  325,  325,  325,  325,
      325,  325,  269,  270,  269,  814,  271, 1528,  835,  816,
     1404,  326,  326,  326,  326,  326,  326,  326,  269,  270,
      269,  815,  272, 1383,  971,  817,  971,  326,  326,  326,
      326,  326,  326,  326,  269,  270,  269,  816,  271, 1382,
      836,  818,  836,  327,  327,  327,  327,  327,  327,  327,
      269,  270,  269,  817,  272, 1374,  837,  819, 1355,  327,
      327,  327,  327,  327,  327,  327,  269,  270,  269,  818,
      271, 1341,  972,  820,  972,  328,  328,  328,  328,  328,

      328,  328,  269,  270,  269,  819,  272, 1318,  838,  821,
      838,  328,  328,  328,  328,  328,  328,  328,  269,  270,
      269,  820,  271,  329,  839,  329, 1305,  330,  330,  330,
      330,  330,  330,  330,  269,  270,  269,  821,  272,  329,
      973,  329,  973,  330,  330,  330,  330,  330,  330,  330,
      269,  270,  269,  840,  271,  840,  974,  822,  974,  331,
      331,  331,  331,  331,  331,  331,  269,  270,  269,  841,
      272, 1301,  842,  823,  842,  331,  331,  331,  331,  331,
      331,  331,  269,  270,  269,  822,  271,  332,  843,  332,
      333,  334,  334,  334,  334,  334,  334,  334,  269,  270,

      269,  823,  272,  332, 1278,  332,  333,  334,  334,  334,
      334,  334,  334,  334,  269,  270,  269, 1248,  271,  335,
     1240,  335,  336,  337,  337,  337,  337,  337,  337,  337,
      269,  270,  269, 1234,  272,  335, 1182,  335,  336,  337,
      337,  337,  337,  337,  337,  337,  269,  270,  269, 1171,
      271,  338, 1133,  338,  339,  340,  340,  340,  340,  340,
      340,  340,  269,  270,  269, 1130,  272,  338, 1121,  338,
      339,  340,  340,  340,  340,  340,  340,  340,  269,  270,
      269, 1099,  271,  341, 1094,  341,  342,  343,  343,  343,
      343,  343,  343,  343,  269,  270,  269, 1086,  272,  341,

     1072,  341,  342,  343,  343,  343,  343,  343,  343,  343,
      268,  269,  270,  269, 1068,  271,  268,  268,  268,  975,
      825,  975, 1007,  268,  269,  270,  269,  268,  272,  268,
      268,  268,  978,  884,  978,  884,  268,  269,  270,  269,
      268,  271,  268,  268,  268,  502,  270,  502,  825,  503,
      524,  826,  994,  268,  268,  268,  269,  270,  269,  976,
      272,  268,  268,  268,  969,  525,  969,  268,  268,  269,
      270,  269,  268,  271,  268,  268,  268,  966,  524,  826,
      268,  268,  269,  270,  269,  268,  272,  268,  268,  268,
      502,  270,  502,  525,  504,  827,  828,  965,  268,  268,

      268,  269,  270,  269,  958,  271,  268,  268,  268,  971,
      829,  971,  268,  268,  269,  270,  269,  268,  272,  268,
      268,  268,  957,  827,  828,  268,  268,  269,  270,  269,
      268,  271,  268,  268,  268,  269,  270,  506,  829,  507,
      833,  844,  824,  268,  268,  268,  269,  270,  269,  813,
      272,  268,  268,  268,  972,  845,  972,  268,  268,  269,
      270,  269,  268,  271,  268,  268,  268, 2061,  833,  844,
      268,  268,  269,  270,  269,  268,  272,  268,  268,  268,
      269,  270,  506,  845,  508,  851,  852, 2061,  268,  268,
      268,  269,  270,  269, 2061,  271,  268,  268,  268,  853,

     2061, 2061,  268,  268,  269,  270,  269,  268,  272,  268,
      268,  268, 2061,  851,  852,  268,  268,  269,  270,  269,
      268,  271,  268,  268,  268,  860,  861,  853,  550,  854,
      865,  866, 2061,  268,  268,  268,  269,  270,  269,  511,
      272,  268,  268,  268,  521,  551,  512,  268,  855,  513,
      522, 2061,  268,  860,  861,  523,  550,  854,  865,  866,
      268,  807,  509,  807,  810,  808,  811,  511,  973, 2061,
      973,  867,  521,  551,  512,  868,  874,  513,  522,  268,
      269,  270,  269,  523,  271, 2061,  846,  875,  846,  352,
      352,  352,  352,  352,  352,  352,  269,  270,  269,  867,

      272, 2061,  847,  868,  874,  352,  352,  352,  352,  352,
      352,  352,  269,  270,  269,  875,  271, 2061, 1022,  876,
     1022,  353,  353,  353,  353,  353,  353,  353,  269,  270,
      269,  974,  272,  974, 1023,  879, 2061,  353,  353,  353,
      353,  353,  353,  353,  269,  270,  269,  876,  271, 2061,
     1024,  880, 1024,  354,  354,  354,  354,  354,  354,  354,
      269,  270,  269,  879,  272, 2061, 1025,  883, 2061,  354,
      354,  354,  354,  354,  354,  354,  269,  270,  269,  880,
      271,  975, 1046,  975, 1046,  355,  355,  355,  355,  355,
      355,  355,  269,  270,  269,  883,  272,  978, 1047,  978,

     2061,  355,  355,  355,  355,  355,  355,  355,  268,  269,
      270,  269,  268,  271,  268,  268,  268,  268, 1096, 2061,
     1096,  268,  269,  270,  269,  268,  271,  268,  268,  268,
     1097, 1123, 1097, 1123,  268,  269,  270,  269,  268,  272,
      268,  268,  268,  566,  566,  566,  566,  566,  566,  566,
     2061,  268,  268,  268,  269,  270,  269,  268,  272,  268,
      268,  268,  268, 2061, 2061,  268,  885,  950,  951, 2061,
      268,  567,  567,  567,  567,  567,  567,  567,  268,  568,
      568,  568,  568,  568,  568,  568,  569,  569,  569,  569,
      569,  569,  569, 2061,  885,  950,  951,  268,  269,  270,

      269, 2061,  271,  358, 2061,  358,  359,  360,  360,  360,
      360,  360,  360,  360,  269,  270,  269, 2061,  272,  358,
     2061,  358,  359,  360,  360,  360,  360,  360,  360,  360,
      269,  270,  269, 1075,  271, 1075, 1077,  954, 1077,  361,
      361,  361,  361,  361,  361,  361,  269,  270,  269, 1076,
      272, 2061, 1078,  955, 2061,  361,  361,  361,  361,  361,
      361,  361,  269,  270,  269,  954,  271, 2061, 1082,  956,
     1082,  362,  362,  362,  362,  362,  362,  362,  269,  270,
      269,  955,  272, 2061, 1083,  959, 2061,  362,  362,  362,
      362,  362,  362,  362,  269,  270,  269,  956,  271, 2061,

     1022,  960, 1022,  363,  363,  363,  363,  363,  363,  363,
      269,  270,  269,  959,  272, 2061, 1023,  961, 2061,  363,
      363,  363,  363,  363,  363,  363,  269,  270,  269,  960,
      271, 2061, 1024,  962, 1024,  364,  364,  364,  364,  364,
      364,  364,  269,  270,  269,  961,  272, 2061, 1025,  963,
     2061,  364,  364,  364,  364,  364,  364,  364,  269,  270,
      269,  962,  271, 2061, 1046,  964, 1046,  365,  365,  365,
      365,  365,  365,  365,  269,  270,  269,  963,  272, 2061,
     1047,  967, 2061,  365,  365,  365,  365,  365,  365,  365,
      269,  270,  269,  964,  271, 2061, 1124,  968, 1124,  366,

      366,  366,  366,  366,  366,  366,  269,  270,  269,  967,
      272, 2061, 1125,  970, 2061,  366,  366,  366,  366,  366,
      366,  366,  269,  270,  269,  968,  271, 2061, 1128,  977,
     1128,  367,  367,  367,  367,  367,  367,  367,  269,  270,
      269,  970,  272, 2061, 1129,  979, 2061,  367,  367,  367,
      367,  367,  367,  367,  269,  270,  269,  977,  271, 2061,
     1131,  980, 1131,  368,  368,  368,  368,  368,  368,  368,
      269,  270,  269,  979,  272, 2061, 1132,  981, 2061,  368,
      368,  368,  368,  368,  368,  368,  269,  270,  269,  980,
      271, 2061, 1141,  982, 1141,  369,  369,  369,  369,  369,

      369,  369,  269,  270,  269,  981,  272, 2061, 1142,  983,
     2061,  369,  369,  369,  369,  369,  369,  369,  269,  270,
      269,  982,  271,  370, 2061,  370,  371,  372,  372,  372,
      372,  372,  372,  372,  269,  270,  269,  983,  272,  370,
     2061,  370,  371,  372,  372,  372,  372,  372,  372,  372,
      269,  270,  269, 2061,  271,  373, 2061,  373,  374,  375,
      375,  375,  375,  375,  375,  375,  269,  270,  269, 2061,
      272,  373, 2061,  373,  374,  375,  375,  375,  375,  375,
      375,  375,  269,  270,  269, 2061,  271,  376, 2061,  376,
      377,  378,  378,  378,  378,  378,  378,  378,  269,  270,

      269, 2061,  272,  376, 2061,  376,  377,  378,  378,  378,
      378,  378,  378,  378,  269,  270,  269, 2061,  271,  379,
     2061,  379,  380,  381,  381,  381,  381,  381,  381,  381,
      269,  270,  269, 2061,  272,  379, 2061,  379,  380,  381,
      381,  381,  381,  381,  381,  381,  269,  270,  269, 1144,
      271, 1144, 1146,  984, 1146,  382,  382,  382,  382,  382,
      382,  382,  269,  270,  269, 1145,  272, 2061, 1147,  985,
     2061,  382,  382,  382,  382,  382,  382,  382,  269,  270,
      269,  984,  271, 2061, 1075,  989, 1075,  383,  383,  383,
      383,  383,  383,  383,  269,  270,  269,  985,  272, 2061,

     1076,  990, 2061,  383,  383,  383,  383,  383,  383,  383,
      269,  270,  269,  989,  271,  384, 2061,  384,  385,  386,
      386,  386,  386,  386,  386,  386,  269,  270,  269,  990,
      272,  384, 2061,  384,  385,  386,  386,  386,  386,  386,
      386,  386,  269,  270,  269, 2061,  271,  387, 2061,  387,
      388,  389,  389,  389,  389,  389,  389,  389,  269,  270,
      269, 2061,  272,  387, 2061,  387,  388,  389,  389,  389,
      389,  389,  389,  389,  269,  270,  269, 2061,  271,  390,
     2061,  390,  391,  392,  392,  392,  392,  392,  392,  392,
      269,  270,  269, 2061,  272,  390, 2061,  390,  391,  392,

      392,  392,  392,  392,  392,  392,  269,  270,  269, 2061,
      271,  393, 2061,  393,  394,  395,  395,  395,  395,  395,
      395,  395,  269,  270,  269, 2061,  272,  393, 2061,  393,
      394,  395,  395,  395,  395,  395,  395,  395,  269,  270,
      269, 2061,  271,  396, 2061,  396,  397,  398,  398,  398,
      398,  398,  398,  398,  269,  270,  269, 2061,  272,  396,
     2061,  396,  397,  398,  398,  398,  398,  398,  398,  398,
      269,  270,  269, 2061,  271,  399, 2061,  399,  400,  401,
      401,  401,  401,  401,  401,  401,  269,  270,  269, 2061,
      272,  399, 2061,  399,  400,  401,  401,  401,  401,  401,

      401,  401,  269,  270,  269, 2061,  271,  402, 2061,  402,
      403,  404,  404,  404,  404,  404,  404,  404,  269,  270,
      269, 2061,  272,  402, 2061,  402,  403,  404,  404,  404,
      404,  404,  404,  404,  269,  270,  269, 2061,  271,  405,
     2061,  405,  406,  407,  407,  407,  407,  407,  407,  407,
      269,  270,  269, 2061,  272,  405, 2061,  405,  406,  407,
      407,  407,  407,  407,  407,  407,  269,  270,  269, 2061,
      271,  408, 2061,  408,  409,  410,  410,  410,  410,  410,
      410,  410,  269,  270,  269, 2061,  272,  408, 2061,  408,
      409,  410,  410,  410,  410,  410,  410,  410,  269,  270,

      269, 2061,  271,  411, 2061,  411,  412,  413,  413,  413,
      413,  413,  413,  413,  269,  270,  269, 2061,  272,  411,
     2061,  411,  412,  413,  413,  413,  413,  413,  413,  413,
      269,  270,  269, 1158,  271, 1158, 1077,  991, 1077,  414,
      414,  414,  414,  414,  414,  414,  269,  270,  269, 1159,
      272, 1159, 1078,  992, 2061,  414,  414,  414,  414,  414,
      414,  414,  269,  270,  269,  991,  271, 2061, 1082,  993,
     1082,  415,  415,  415,  415,  415,  415,  415,  269,  270,
      269,  992,  272, 2061, 1083,  995, 2061,  415,  415,  415,
      415,  415,  415,  415,  269,  270,  269,  993,  271, 2061,

     1163,  996, 1163,  416,  416,  416,  416,  416,  416,  416,
      269,  270,  269,  995,  272, 2061, 1096,  997, 1096,  416,
      416,  416,  416,  416,  416,  416,  269,  270,  269,  996,
      271, 2061, 1097,  998, 1097,  417,  417,  417,  417,  417,
      417,  417,  269,  270,  269,  997,  272, 2061, 1183,  999,
     1183,  417,  417,  417,  417,  417,  417,  417,  269,  270,
      269,  998,  271,  418, 1184,  418,  419,  420,  420,  420,
      420,  420,  420,  420,  269,  270,  269,  999,  272,  418,
     2061,  418,  419,  420,  420,  420,  420,  420,  420,  420,
      268,  269,  270,  269, 1000,  271,  268,  268,  268, 1001,

     1197, 2061, 1197,  268,  269,  270,  269,  268,  272,  268,
      268,  268,  570,  570,  570,  570,  570,  570,  570, 1186,
      268, 1186, 1000,  268,  269,  270,  269, 1001,  271,  268,
      268,  268, 2061, 2061,  268, 1187, 1123, 1203, 1123, 1203,
      268, 1206, 1002, 1206, 1208, 2061, 1208,  268,  269,  270,
      269, 2061,  271,  422, 2061,  422,  423,  424,  424,  424,
      424,  424,  424,  424,  269,  270,  269,  268,  272,  422,
     1002,  422,  423,  424,  424,  424,  424,  424,  424,  424,
      269,  270,  269, 1118,  271, 1118, 1201, 1003, 1201,  425,
      425,  425,  425,  425,  425,  425,  269,  270,  269, 1119,

      272, 2061, 1202, 1004, 2061,  425,  425,  425,  425,  425,
      425,  425,  269,  270,  269, 1003,  271,  426, 1124,  426,
     1124,  427,  427,  427,  427,  427,  427,  427,  269,  270,
      269, 1004,  272,  426, 1125,  426, 2061,  427,  427,  427,
      427,  427,  427,  427,  269,  270,  269, 2061,  271,  428,
     1128,  428, 1128,  429,  429,  429,  429,  429,  429,  429,
      269,  270,  269, 2061,  272,  428, 1129,  428, 2061,  429,
      429,  429,  429,  429,  429,  429,  269,  270,  269, 2061,
      271,  430, 1131,  430, 1131,  431,  431,  431,  431,  431,
      431,  431,  269,  270,  269, 2061,  272,  430, 1132,  430,

     2061,  431,  431,  431,  431,  431,  431,  431,  269,  270,
      269, 2061,  271,  432, 1141,  432, 1141,  433,  433,  433,
      433,  433,  433,  433,  269,  270,  269, 2061,  272,  432,
     1142,  432, 2061,  433,  433,  433,  433,  433,  433,  433,
      269,  270,  269, 1217,  271, 1217, 1144, 1005, 1144,  434,
      434,  434,  434,  434,  434,  434,  269,  270,  269, 1219,
      272, 1219, 1145, 1006, 2061,  434,  434,  434,  434,  434,
      434,  434,  269,  270,  269, 1005,  271, 2061, 1146, 1008,
     1146,  435,  435,  435,  435,  435,  435,  435,  269,  270,
      269, 1006,  272, 2061, 1147, 1009, 2061,  435,  435,  435,

      435,  435,  435,  435,  269,  270,  269, 1008,  271, 2061,
     1220, 1010, 1220,  436,  436,  436,  436,  436,  436,  436,
      269,  270,  269, 1009,  272, 2061, 1231, 1013, 1231,  436,
      436,  436,  436,  436,  436,  436,  269,  270,  269, 1010,
      271, 2061, 1232, 1014, 2061,  437,  437,  437,  437,  437,
      437,  437,  269,  270,  269, 1013,  272, 2061, 1158, 1015,
     1158,  437,  437,  437,  437,  437,  437,  437,  269,  270,
      269, 1014,  271, 2061, 1159, 1016, 1159,  438,  438,  438,
      438,  438,  438,  438,  269,  270,  269, 1015,  272, 2061,
     1163, 1017, 1163,  438,  438,  438,  438,  438,  438,  438,

      269,  270,  269, 1016,  271, 2061, 1183, 1018, 1183,  439,
      439,  439,  439,  439,  439,  439,  269,  270,  269, 1017,
      272, 2061, 1184, 1020, 2061,  439,  439,  439,  439,  439,
      439,  439,  269,  270,  269, 1018,  271, 2061, 1264, 1021,
     1264,  440,  440,  440,  440,  440,  440,  440,  269,  270,
      269, 1020,  272, 2061, 1186, 1026, 1186,  440,  440,  440,
      440,  440,  440,  440,  269,  270,  269, 1021,  271, 1266,
     1187, 1266, 1027,  441,  441,  441,  441,  441,  441,  441,
      269,  270,  269, 1026,  272, 1267, 1268, 1269, 1270,  441,
      441,  441,  441,  441,  441,  441,  268,  269,  270,  269,

     1027,  272,  268,  268,  268, 1197, 1285, 1197, 1285,  268,
      269,  270,  269,  268,  271,  268,  268,  268, 1203, 1206,
     1203, 1206,  268,  269,  270,  269,  268,  272,  268,  268,
      268,  571,  571,  571,  571,  571,  571,  571, 2061,  268,
      268,  268,  269,  270,  269, 2061,  271,  268,  268,  268,
     1208, 2061, 1208,  268,  268,  269,  270,  269,  268,  272,
      268,  268,  268, 1217, 2061, 1217,  268,  268,  269,  270,
      269,  268,  271,  268,  268,  268,  572,  572,  572,  572,
      572,  572,  572, 2061,  268,  268,  268,  269,  270,  269,
     2061,  272,  268,  268,  268, 1219, 2061, 1219,  268,  268,

      269,  270,  269,  268,  271,  268,  268,  268, 1028, 2061,
     2061,  268,  268,  269,  270,  269,  268,  272,  268,  268,
      268,  573,  574,  574,  574,  574,  574,  574,  574,  268,
      268, 2061,  268,  269,  270,  269, 1028,  271,  268,  268,
      268, 2061, 1220,  268, 1220, 1310, 1201, 1310, 1201,  268,
     1029, 1033,  877, 1011, 2061, 2061,  268,  269,  270,  269,
     1012,  271, 1202, 1264,  878, 1264,  447,  447,  447,  447,
      447,  447,  447,  269,  270,  269,  268,  272, 1029, 1033,
      877, 1011,  447,  447,  447,  447,  447,  447,  447,  269,
      270,  269,  878,  271, 2061, 1286, 1034, 1286,  448,  448,

      448,  448,  448,  448,  448,  269,  270,  269, 1266,  272,
     1266, 1287, 1035, 2061,  448,  448,  448,  448,  448,  448,
      448,  269,  270,  269, 1034,  271, 2061, 1288, 1036, 1288,
      449,  449,  449,  449,  449,  449,  449,  269,  270,  269,
     1035,  272, 2061, 1289, 1037, 2061,  449,  449,  449,  449,
      449,  449,  449,  269,  270,  269, 1036,  271,  450, 2061,
      450,  451,  452,  452,  452,  452,  452,  452,  452,  269,
      270,  269, 1037,  272,  450, 2061,  450,  451,  452,  452,
      452,  452,  452,  452,  452,  269,  270,  269, 1231,  271,
     1231, 1313, 1038, 1313,  453,  453,  453,  453,  453,  453,

      453,  269,  270,  269, 1232,  272, 2061, 1314, 1041, 2061,
      453,  453,  453,  453,  453,  453,  453,  269,  270,  269,
     1038,  271, 2061, 1332, 1042, 1332,  454,  454,  454,  454,
      454,  454,  454,  269,  270,  269, 1041,  272, 2061, 1333,
     1043, 2061,  454,  454,  454,  454,  454,  454,  454,  269,
      270,  269, 1042,  271, 1334, 1336, 1334, 1336,  455,  455,
      455,  455,  455,  455,  455,  269,  270,  269, 1043,  272,
     1335, 1337, 2061, 2061,  455,  455,  455,  455,  455,  455,
      455,  268,  269,  270,  269,  268,  271,  268,  268,  268,
      268, 1044, 1045, 1048,  268,  269,  270,  269,  268,  272,

      268,  268,  268, 1367, 1285, 1367, 1285, 2061,  856,  515,
     2061,  268,  857,  858,  859, 2061,  516,  517, 2061, 1044,
     1045, 1048,  518, 1049, 2061,  268,  268,  269,  270,  269,
      268,  272,  268,  268,  268,  268,  856,  515,  268,  862,
      857,  858,  859,  268,  516,  517,  863, 2061,  864, 1050,
      518, 1049,  575,  575,  575,  575,  575,  575,  575, 1378,
     2061, 1378, 1051, 2061,  576, 1052, 1379,  862, 1379, 2061,
      268,  269,  270,  269,  863,  271,  864, 1050,  458, 2061,
      459,  459,  459,  459,  459,  459,  459,  269,  270,  269,
     1051,  272,  576, 1052,  458, 2061,  459,  459,  459,  459,

      459,  459,  459,  268,  269,  270,  269,  268,  271,  268,
      268,  268,  268,  536, 1310, 2061, 1310, 1053,  537, 2061,
      268,  573,  574,  574,  574,  574,  574,  574,  574, 2061,
     1054,  872,  952,  538,  553, 1055, 1056, 2061,  539,  873,
      953,  540,  554,  555,  556, 1053, 2061,  268,  268,  269,
      270,  269,  268,  272,  268,  268,  268,  268, 1054,  872,
      952,  538,  553, 1055, 1056,  268,  539,  873,  953,  540,
      554,  555,  556,  577,  578,  578,  578,  578,  578,  578,
      578,  577,  578,  578,  578,  578,  578,  578,  578, 2061,
     1057, 1058,  268,  268,  269,  270,  269,  268,  271,  268,

      268,  268,  268,  605,  605,  605,  605,  605,  605,  605,
      268,  579,  579,  579,  579,  579,  579,  579, 1057, 1058,
     1039, 1059, 1060,  580,  581,  582,  582,  582,  582,  582,
      582,  582, 1040, 1061, 1407, 2061, 1407,  268,  268,  269,
      270,  269,  268,  272,  268,  268,  268,  268, 1039, 1059,
     1060,  580, 2061, 2061, 1338,  268, 1338, 1344, 1062, 1344,
     1040, 1061,  583,  583,  583,  583,  583,  583,  583, 1434,
     1339, 1434, 2061, 1345,  584,  606,  606,  606,  606,  606,
      606,  606,  268,  269,  270,  269, 1062,  271, 1346, 1348,
     1346, 1348,  462,  462,  462,  462,  462,  462,  462,  269,

      270,  269,  584,  272, 1347, 1349, 2061, 2061,  462,  462,
      462,  462,  462,  462,  462,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268,  607,  607,  607,  607,  607,
      607,  607,  268,  581,  582,  582,  582,  582,  582,  582,
      582,  585,  586,  586,  586,  586,  586,  586,  586,  585,
      586,  586,  586,  586,  586,  586,  586, 1063, 1064,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
      608,  608,  608,  608,  608,  608,  608,  268,  587,  587,
      587,  587,  587,  587,  587, 1063, 1064, 1435, 1065, 1435,
      588,  589,  590,  590,  590,  590,  590,  590,  590,  846,

     2061,  846, 1066, 1067,  268,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268,  847, 1065,  848,  588,  849,
     1071, 2061,  268,  591,  591,  591,  591,  591,  591,  591,
     1066, 1067, 2061, 1069,  850,  592,  589,  590,  590,  590,
      590,  590,  590,  590, 1436,  848, 1436,  849, 1071,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
     1070, 1069,  850,  592, 1073, 1074, 2061,  268,  593,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595, 2061, 2061, 1079, 1080, 1081,  596, 1437,
     2061, 1437, 1073, 1074,  268,  268,  269,  270,  269,  268,

      271,  268,  268,  268,  268,  609,  609,  609,  609,  609,
      609,  609,  268, 1079, 1080, 1081,  596,  593,  594,  594,
      594,  594,  594,  594,  594,  597,  598,  598,  598,  598,
      598,  598,  598, 1443, 1444, 1443, 1444, 1084, 1085,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
      610,  610,  610,  610,  610,  610,  610,  268,  599,  599,
      599,  599,  599,  599,  599, 1084, 1085, 1087, 1088, 1089,
      600,  597,  598,  598,  598,  598,  598,  598,  598, 1445,
     1446, 1445, 1446, 2061,  268,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268, 1087, 1088, 1089,  600, 1090,

     1091, 2061,  268,  601,  602,  602,  602,  602,  602,  602,
      602,  603,  603,  603,  603,  603,  603,  603, 2061, 2061,
     1095, 1098, 1100,  604, 1453, 2061, 1453, 1090, 1091,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
      612,  612,  612,  612,  612,  612,  612,  268, 1095, 1098,
     1100,  604,  601,  602,  602,  602,  602,  602,  602,  602,
      611, 1454,  611, 1454,  610,  610,  610,  610,  610,  610,
      610, 1455, 2061, 1455,  268,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268,  637,  637,  637,  637,  637,
      637,  637,  268,  613,  614,  614,  614,  614,  614,  614,

      614,  615,  615,  615,  615,  615,  615,  615, 2061, 2061,
     1101, 1102, 1103,  616, 1456, 1458, 1456, 1458, 2061,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
      638,  638,  638,  638,  638,  638,  638,  268, 1101, 1102,
     1103,  616,  613,  614,  614,  614,  614,  614,  614,  614,
      617,  618,  618,  618,  618,  618,  618,  618, 1367, 1378,
     1367, 1378, 1104, 1105,  268,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268,  639,  639,  639,  639,  639,
      639,  639,  268,  619,  619,  619,  619,  619,  619,  619,
     1104, 1105, 1106, 1107, 1108,  620,  617,  618,  618,  618,

      618,  618,  618,  618, 1379, 1477, 1379, 1477, 2061,  268,
      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
     1106, 1107, 1108,  620, 1109, 1113, 2061,  268,  621,  622,
      622,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  623,  623, 2061, 2061, 1116, 1117, 1122,  624, 1478,
     2061, 1478, 1109, 1113,  268,  268,  269,  270,  269,  268,
      271,  268,  268,  268,  268,  640,  640,  640,  640,  640,
      640,  640,  268, 1116, 1117, 1122,  624,  621,  622,  622,
      622,  622,  622,  622,  622,  625,  626,  626,  626,  626,
      626,  626,  626, 1126, 1479, 1480, 1479, 1480, 2061,  268,

      268,  269,  270,  269,  268,  272,  268,  268,  268,  268,
      627,  627,  627,  627,  627,  627,  627,  268, 2061, 2061,
     1127, 1126,  628,  625,  626,  626,  626,  626,  626,  626,
      626,  643,  644,  644,  644,  644,  644,  644,  644, 1114,
     1134, 1135, 2061, 2061,  268,  269,  270,  269, 1127,  271,
      628, 1482, 1115, 1482,  470,  470,  470,  470,  470,  470,
      470,  269,  270,  269, 1407,  272, 1407, 1114, 1134, 1135,
      470,  470,  470,  470,  470,  470,  470,  269,  270,  269,
     1115,  271,  471, 2061,  471,  472,  473,  473,  473,  473,
      473,  473,  473,  269,  270,  269, 2061,  272,  471, 2061,

      471,  472,  473,  473,  473,  473,  473,  473,  473,  269,
      270,  269, 1350,  271, 1350, 1356, 1136, 1356,  474,  474,
      474,  474,  474,  474,  474,  269,  270,  269, 1351,  272,
     2061, 1357, 1137, 2061,  474,  474,  474,  474,  474,  474,
      474,  269,  270,  269, 1136,  271,  475, 1358,  475, 1358,
      476,  476,  476,  476,  476,  476,  476,  269,  270,  269,
     1137,  272,  475, 1359,  475, 2061,  476,  476,  476,  476,
      476,  476,  476,  269,  270,  269, 2061,  271,  477, 1360,
      477, 1360,  478,  478,  478,  478,  478,  478,  478,  269,
      270,  269, 2061,  272,  477, 1361,  477, 2061,  478,  478,

      478,  478,  478,  478,  478,  269,  270,  269, 2061,  271,
      479, 1362,  479, 1362,  480,  480,  480,  480,  480,  480,
      480,  269,  270,  269, 2061,  272,  479, 1363,  479, 2061,
      480,  480,  480,  480,  480,  480,  480,  269,  270,  269,
     2061,  271,  481, 1272,  481, 1272,  482,  482,  482,  482,
      482,  482,  482,  269,  270,  269, 2061,  272,  481, 1274,
      481, 2061,  482,  482,  482,  482,  482,  482,  482,  269,
      270,  269, 2061,  271,  483, 1365,  483, 1365,  484,  484,
      484,  484,  484,  484,  484,  269,  270,  269, 2061,  272,
      483, 1366,  483, 2061,  484,  484,  484,  484,  484,  484,

      484,  269,  270,  269, 2061,  271,  485, 1286,  485, 1286,
      486,  486,  486,  486,  486,  486,  486,  269,  270,  269,
     2061,  272,  485, 1287,  485, 2061,  486,  486,  486,  486,
      486,  486,  486,  269,  270,  269, 2061,  271,  487, 1288,
      487, 1288,  488,  488,  488,  488,  488,  488,  488,  269,
      270,  269, 2061,  272,  487, 1289,  487, 2061,  488,  488,
      488,  488,  488,  488,  488,  269,  270,  269, 2061,  271,
      489, 1385,  489, 1385,  490,  490,  490,  490,  490,  490,
      490,  269,  270,  269, 2061,  272,  489, 1386,  489, 2061,
      490,  490,  490,  490,  490,  490,  490,  269,  270,  269,

     2061,  271,  491, 1387,  491, 1387,  492,  492,  492,  492,
      492,  492,  492,  269,  270,  269, 2061,  272,  491, 1388,
      491, 2061,  492,  492,  492,  492,  492,  492,  492,  269,
      270,  269, 2061,  271,  493, 1389,  493, 1389,  494,  494,
      494,  494,  494,  494,  494,  269,  270,  269, 2061,  272,
      493, 1390,  493, 2061,  494,  494,  494,  494,  494,  494,
      494,  268,  269,  270,  269,  268,  271,  268,  268,  268,
      268,  647,  647,  647,  647,  647,  647,  647,  268,  645,
      645,  645,  645,  645,  645,  645, 2061, 1503, 1138, 1503,
     1139,  646,  643,  644,  644,  644,  644,  644,  644,  644,

     1510, 1118, 1510, 1118, 2061,  268,  268,  269,  270,  269,
      268,  272,  268,  268,  268,  268, 1138, 1119, 1139,  646,
     1140, 1143, 2061,  268,  648,  648,  648,  648,  648,  648,
      648,  649,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  650, 1120, 2061, 2061, 1140, 1143,
      268,  268,  269,  270,  269,  268,  271,  268,  268,  268,
      268,  651,  651,  651,  651,  651,  651,  651,  268,  652,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  653,  653,  654,  654,  654,  654,  654,  654,  654,
     1514, 1515, 1514, 1515, 2061,  268,  268,  269,  270,  269,

      268,  272,  268,  268,  268,  268,  655,  655,  655,  655,
      655,  655,  655,  268,  656,  657,  657,  657,  657,  657,
      657,  657,  658,  658,  658,  658,  658,  658,  658, 2061,
     2061, 1148, 1149, 1150,  659, 1516, 1434, 1516, 1434, 2061,
      268,  268,  269,  270,  269,  268,  271,  268,  268,  268,
      268,  672,  672,  672,  672,  672,  672,  672,  268, 1148,
     1149, 1150,  659,  656,  657,  657,  657,  657,  657,  657,
      657,  660,  661,  661,  661,  661,  661,  661,  661, 1435,
     1436, 1435, 1436, 1151, 1152,  268,  268,  269,  270,  269,
      268,  272,  268,  268,  268,  268,  673,  673,  673,  673,

      673,  673,  673,  268,  662,  662,  662,  662,  662,  662,
      662, 1151, 1152, 1153, 2061, 2061,  663,  660,  661,  661,
      661,  661,  661,  661,  661, 1437, 1520, 1437, 1520, 2061,
      268,  268,  269,  270,  269,  268,  271,  268,  268,  268,
      268, 1153, 1110, 1154,  663, 1111, 1155, 2061,  268,  664,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  666,  666, 1112, 2061, 1156, 1157, 1160,  667,
     1110, 1154, 2061, 1111, 1155,  268,  268,  269,  270,  269,
      268,  272,  268,  268,  268,  268,  714,  714,  714,  714,
      714,  714,  714,  268, 1156, 1157, 1160,  667,  664,  665,

      665,  665,  665,  665,  665,  665,  668,  669,  669,  669,
      669,  669,  669,  669, 1161, 1162, 1164, 1165, 2061, 2061,
      268,  269,  270,  269, 1391,  271, 1391, 1443, 2061, 1443,
      499,  499,  499,  499,  499,  499,  499,  269,  270,  269,
     1392,  272, 1161, 1162, 1164, 1165,  499,  499,  499,  499,
      499,  499,  499,  268,  269,  270,  269,  268,  271,  268,
      268,  268,  268,  715,  715,  715,  715,  715,  715,  715,
      268,  670,  670,  670,  670,  670,  670,  670, 2061, 2061,
     1166, 1167, 1168,  671,  668,  669,  669,  669,  669,  669,
      669,  669, 1444, 1445, 1444, 1445, 2061,  268,  268,  269,

      270,  269,  268,  272,  268,  268,  268,  268, 1166, 1167,
     1168,  671, 1169, 1170, 2061,  268,  674,  675,  675,  675,
      675,  675,  675,  675,  676,  676,  676,  676,  676,  676,
      676, 2061, 1174, 1175, 1176, 1177,  677, 1446, 2061, 1446,
     1169, 1170,  268,  529, 2061,  529,  674,  675,  675,  675,
      675,  675,  675,  675, 1178, 2061, 2061,  530, 1179,  531,
     1174, 1175, 1176, 1177,  677,  678,  679,  679,  679,  679,
      679,  679,  679, 1180,  532,  680,  680,  680,  680,  680,
      680,  680, 1178,  533,  534,  535, 1179,  681,  678,  679,
      679,  679,  679,  679,  679,  679, 1523, 1181, 1523, 2061,

     2061, 1180,  532,  682,  683,  683,  683,  683,  683,  683,
      683,  533,  534,  535,  541,  681,  869,  986, 1030,  881,
      542, 1031, 1185,  543,  987, 1181,  544,  870,  882,  545,
      546,  988,  547, 2061,  871, 1032, 1172, 2061, 1188,  548,
     1189, 2061,  541, 1173,  869,  986, 1030,  881,  542, 1031,
     1185,  543,  987, 2061,  544,  870,  882,  545,  546,  988,
      547,  557,  871, 1032, 1172,  558, 1188, 1190, 1189,  559,
     1191, 1173, 1192,  560, 1193,  561, 1194, 1195, 1196, 1198,
     1204,  562,  684,  684,  684,  684,  684,  684,  684,  557,
     1205, 1207, 1209,  558,  685, 1190, 2061,  559, 1191, 2061,

     1192,  560, 1193,  561, 1194, 1195, 1196, 1198, 1204,  562,
      682,  683,  683,  683,  683,  683,  683,  683, 1205, 1207,
     1209, 2061,  685,  686,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688, 2061, 1210,
     1211, 1212, 1213,  689,  686,  687,  687,  687,  687,  687,
      687,  687,  690,  691,  691,  691,  691,  691,  691,  691,
      692,  692,  692,  692,  692,  692,  692, 1210, 1211, 1212,
     1213,  689,  693,  690,  691,  691,  691,  691,  691,  691,
      691,  694,  695,  695,  695,  695,  695,  695,  695,  696,
      696,  696,  696,  696,  696,  696, 2061, 1214, 1215, 1216,

      693,  697,  694,  695,  695,  695,  695,  695,  695,  695,
      698,  699,  699,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700, 1214, 1215, 1216, 1218,  697,
      701,  698,  699,  699,  699,  699,  699,  699,  699,  702,
      703,  703,  703,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704, 2061, 1221, 1218, 1222,  701,  705,
      702,  703,  703,  703,  703,  703,  703,  703,  706,  707,
      707,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  708,  708, 1221, 1223, 1222, 1224,  705,  709,  706,
      707,  707,  707,  707,  707,  707,  707,  710,  711,  711,

      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712, 1223, 1225, 1224, 1226,  709,  713,  710,  711,
      711,  711,  711,  711,  711,  711,  716,  716,  716,  716,
      716,  716,  716,  717,  717,  717,  717,  717,  717,  717,
     1524, 1225, 1524, 1226, 2061,  713,  718,  719,  719,  719,
      719,  719,  719,  719,  720,  720,  720,  720,  720,  720,
      720, 2061, 1227, 1230, 1233, 1235,  721,  718,  719,  719,
      719,  719,  719,  719,  719,  723,  724,  724,  724,  724,
      724,  724,  724,  725,  725,  725,  725,  725,  725,  725,
     1227, 1230, 1233, 1235,  721,  726,  723,  724,  724,  724,

      724,  724,  724,  724,  727,  727,  727,  727,  727,  727,
      727,  728,  728,  728,  728,  728,  728,  728, 2061, 1453,
      729, 1453,  729,  726,  728,  728,  728,  728,  728,  728,
      728,  730,  730,  730,  730,  730,  730,  730,  731, 1454,
      731, 1454,  730,  730,  730,  730,  730,  730,  730,  732,
      732,  732,  732,  732,  732,  732,  733, 1455,  733, 1455,
      732,  732,  732,  732,  732,  732,  732,  734,  734,  734,
      734,  734,  734,  734,  735, 1456,  735, 1456,  734,  734,
      734,  734,  734,  734,  734,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  737,  737,  738,

      738,  738,  738,  738,  738,  738,  739,  739,  739,  739,
      739,  739,  739,  740,  740,  740,  740,  740,  740,  740,
      741,  741,  741,  741,  741,  741,  741,  742,  742,  742,
      742,  742,  742,  742,  743,  743,  743,  743,  743,  743,
      743,  749,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750,  751,  751,  751,  751,  751,
      751,  751,  752,  753,  753,  753,  753,  753,  753,  753,
      754,  754,  754,  754,  754,  754,  754, 1236, 1237, 1238,
     1239, 1243,  755,  752,  753,  753,  753,  753,  753,  753,
      753,  756,  756,  756,  756,  756,  756,  756,  757,  757,

      757,  757,  757,  757,  757, 1236, 1237, 1238, 1239, 1243,
      755,  758,  758,  758,  758,  758,  758,  758,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762,  765,  765,  765,  765,  765,  765,  765,  773,
      773,  773,  773,  773,  773,  773,  774,  775,  775,  775,
      775,  775,  775,  775,  776,  776,  776,  776,  776,  776,
      776, 1244, 1246, 1458, 1245, 1458,  777,  774,  775,  775,
      775,  775,  775,  775,  775,  778,  778,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  779,  779, 1244,
     1246,  780, 1245,  780,  777,  779,  779,  779,  779,  779,

      779,  779,  781,  781,  781,  781,  781,  781,  781,  782,
     1532,  782, 1532,  781,  781,  781,  781,  781,  781,  781,
      783,  783,  783,  783,  783,  783,  783,  784, 1538,  784,
     1538,  783,  783,  783,  783,  783,  783,  783,  785,  785,
      785,  785,  785,  785,  785,  786, 1477,  786, 1477,  785,
      785,  785,  785,  785,  785,  785,  787,  787,  787,  787,
      787,  787,  787,  788, 1478,  788, 1478,  787,  787,  787,
      787,  787,  787,  787,  789,  789,  789,  789,  789,  789,
      789,  790, 1479,  790, 1479,  789,  789,  789,  789,  789,
      789,  789,  791,  791,  791,  791,  791,  791,  791,  792,

      793,  792, 2061,  791,  791,  791,  791,  791,  791,  791,
      794,  794,  794,  794,  794,  794,  794,  795, 1480,  795,
     1480,  794,  794,  794,  794,  794,  794,  794,  796,  796,
      796,  796,  796,  796,  796,  797, 1482,  797, 1482,  796,
      796,  796,  796,  796,  796,  796,  798,  798,  798,  798,
      798,  798,  798,  799, 1563,  799, 1563,  798,  798,  798,
      798,  798,  798,  798,  804,  804,  804,  804,  804,  804,
      804,  566,  566,  566,  566,  566,  566,  566,  567,  567,
      567,  567,  567,  567,  567,  568,  568,  568,  568,  568,
      568,  568,  569,  569,  569,  569,  569,  569,  569,  570,

      570,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  571,  571,  572,  572,  572,  572,  572,  572,  572,
      575,  575,  575,  575,  575,  575,  575, 1247, 1253, 1503,
     1241, 1503,  576,  573,  574,  574,  574,  574,  574,  574,
      574,  575,  575,  575,  575,  575,  575,  575, 1254, 1242,
     1255, 1256, 1510,  576, 1510, 1247, 1253,  886, 1241,  886,
      576,  887,  887,  887,  887,  887,  887,  887,  579,  579,
      579,  579,  579,  579,  579, 1261, 1254, 2061, 1255, 1256,
      580,  576,  577,  578,  578,  578,  578,  578,  578,  578,
      579,  579,  579,  579,  579,  579,  579, 1265, 1271, 1276,

     2061, 1277,  580, 1261, 1514,  888, 1514,  888,  580,  889,
      889,  889,  889,  889,  889,  889,  583,  583,  583,  583,
      583,  583,  583, 2061, 1279, 1265, 1271, 1276,  584, 1277,
      580,  581,  582,  582,  582,  582,  582,  582,  582,  583,
      583,  583,  583,  583,  583,  583, 1280, 1281, 2061, 1282,
     1283,  584, 1279,  890, 2061,  890,  584,  891,  891,  891,
      891,  891,  891,  891,  587,  587,  587,  587,  587,  587,
      587, 1284, 2061, 2061, 1280, 1281,  588, 1282, 1283,  584,
      585,  586,  586,  586,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  587,  587, 1290, 1515, 1291, 1515, 1284,

      588,  892, 2061,  892,  588,  893,  893,  893,  893,  893,
      893,  893,  591,  591,  591,  591,  591,  591,  591, 1199,
     1292, 2061, 1293, 1290,  592, 1291, 1200, 2061,  588,  589,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591, 1294, 1295, 2061, 1199, 1292,  592,
     1293,  894,  592,  894, 1200,  895,  895,  895,  895,  895,
      895,  895,  595,  595,  595,  595,  595,  595,  595, 1296,
     2061, 2061, 1294, 1295,  596, 2061, 2061,  592,  593,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595, 1297, 2061, 1298, 1299, 1296,  596,  896,

     2061,  896,  596,  897,  897,  897,  897,  897,  897,  897,
      599,  599,  599,  599,  599,  599,  599, 1300, 1302, 2061,
     1303, 1297,  600, 1298, 1299, 2061,  596,  597,  598,  598,
      598,  598,  598,  598,  598,  599,  599,  599,  599,  599,
      599,  599, 1304, 1306, 2061, 1300, 1302,  600, 1303,  898,
      600,  898, 2061,  899,  899,  899,  899,  899,  899,  899,
      603,  603,  603,  603,  603,  603,  603, 1307, 2061, 2061,
     1304, 1306,  604, 2061, 2061,  600,  601,  602,  602,  602,
      602,  602,  602,  602,  603,  603,  603,  603,  603,  603,
      603, 1516, 2061, 1516, 1308, 1307,  604,  900, 2061,  900,

      604,  901,  901,  901,  901,  901,  901,  901,  605,  605,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      606,  606, 1308, 2061,  604,  607,  607,  607,  607,  607,
      607,  607,  608,  608,  608,  608,  608,  608,  608,  609,
      609,  609,  609,  609,  609,  609,  611, 1520,  611, 1520,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  612,  612,  612,  612,  612,  612,
      612,  615,  615,  615,  615,  615,  615,  615, 1309, 1311,
     1576, 1312, 1576,  616,  613,  614,  614,  614,  614,  614,
      614,  614,  615,  615,  615,  615,  615,  615,  615, 1315,

     1316, 1317, 1319, 1523,  616, 1523, 1309, 1311,  902, 1312,
      902,  616,  903,  903,  903,  903,  903,  903,  903,  619,
      619,  619,  619,  619,  619,  619, 1320, 1315, 1316, 1317,
     1319,  620,  616,  617,  618,  618,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  619,  619, 1325, 1326,
     1329, 2061, 1330,  620, 1320, 1524,  904, 1524,  904,  620,
      905,  905,  905,  905,  905,  905,  905,  623,  623,  623,
      623,  623,  623,  623, 2061, 1331, 1325, 1326, 1329,  624,
     1330,  620,  621,  622,  622,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  623,  623,  623, 1340, 1342, 2061,

     1343, 1352,  624, 1331,  906, 2061,  906,  624,  907,  907,
      907,  907,  907,  907,  907,  627,  627,  627,  627,  627,
      627,  627, 1353, 2061, 2061, 1340, 1342,  628, 1343, 1352,
      624,  625,  626,  626,  626,  626,  626,  626,  626,  627,
      627,  627,  627,  627,  627,  627, 1532, 2061, 1532, 1354,
     1353,  628,  908, 2061,  908,  628,  909,  909,  909,  909,
      909,  909,  909,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,  638,  638, 1354, 2061,  628,
      639,  639,  639,  639,  639,  639,  639,  640,  640,  640,
      640,  640,  640,  640,  645,  645,  645,  645,  645,  645,

      645, 1364, 1368, 1538, 1369, 1538,  646,  643,  644,  644,
      644,  644,  644,  644,  644,  645,  645,  645,  645,  645,
      645,  645, 1370, 1371, 1372, 1373, 1375,  646, 2061, 1364,
     1368,  910, 1369,  910,  646,  911,  911,  911,  911,  911,
      911,  911,  647,  647,  647,  647,  647,  647,  647, 2061,
     1370, 1371, 1372, 1373, 1375,  646,  648,  648,  648,  648,
      648,  648,  648,  649,  649,  649,  649,  649,  649,  649,
      650,  650,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  651,  651,  652,  652,  652,  652,  652,  652,
      652,  653,  653,  653,  653,  653,  653,  653,  654,  654,

      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  658,  658,  658,  658,  658,  658,  658, 1376,
     1377, 1591, 1380, 1591,  659,  656,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,
     1381, 1384, 1393, 1396, 1563,  659, 1563, 1376, 1377,  912,
     1380,  912,  659,  913,  913,  913,  913,  913,  913,  913,
      662,  662,  662,  662,  662,  662,  662, 1397, 1381, 1384,
     1393, 1396,  663,  659,  660,  661,  661,  661,  661,  661,
      661,  661,  662,  662,  662,  662,  662,  662,  662, 1398,
     1399, 1400, 2061, 1401,  663, 1397, 1576,  914, 1576,  914,

      663,  915,  915,  915,  915,  915,  915,  915,  666,  666,
      666,  666,  666,  666,  666, 2061, 1402, 1398, 1399, 1400,
      667, 1401,  663,  664,  665,  665,  665,  665,  665,  665,
      665,  666,  666,  666,  666,  666,  666,  666, 1403, 1405,
     2061, 1406, 1408,  667, 1402,  916, 2061,  916,  667,  917,
      917,  917,  917,  917,  917,  917,  670,  670,  670,  670,
      670,  670,  670, 1409, 2061, 2061, 1403, 1405,  671, 1406,
     1408,  667,  668,  669,  669,  669,  669,  669,  669,  669,
      670,  670,  670,  670,  670,  670,  670, 1649, 2061, 1649,
     1410, 1409,  671,  918, 2061,  918,  671,  919,  919,  919,

      919,  919,  919,  919,  672,  672,  672,  672,  672,  672,
      672,  673,  673,  673,  673,  673,  673,  673, 1410, 2061,
      671,  676,  676,  676,  676,  676,  676,  676, 1413, 1418,
     1591, 1419, 1591,  677,  674,  675,  675,  675,  675,  675,
      675,  675,  676,  676,  676,  676,  676,  676,  676, 1420,
     1425, 1426, 1427, 1654,  677, 1654, 1413, 1418,  920, 1419,
      920,  677,  921,  921,  921,  921,  921,  921,  921,  680,
      680,  680,  680,  680,  680,  680, 1438, 1420, 1425, 1426,
     1427,  681,  677,  678,  679,  679,  679,  679,  679,  679,
      679,  680,  680,  680,  680,  680,  680,  680, 1439, 1440,

     1447, 2061, 1452,  681, 1438, 1656,  922, 1656,  922,  681,
      923,  923,  923,  923,  923,  923,  923,  684,  684,  684,
      684,  684,  684,  684, 2061, 1457, 1439, 1440, 1447,  685,
     1452,  681,  682,  683,  683,  683,  683,  683,  683,  683,
      684,  684,  684,  684,  684,  684,  684, 1459, 1460, 2061,
     1461, 1462,  685, 1457,  924, 2061,  924,  685,  925,  925,
      925,  925,  925,  925,  925,  688,  688,  688,  688,  688,
      688,  688, 1463, 2061, 2061, 1459, 1460,  689, 1461, 1462,
      685,  686,  687,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688, 1467, 1663, 1468, 1663,

     1463,  689,  926, 2061,  926,  689,  927,  927,  927,  927,
      927,  927,  927,  692,  692,  692,  692,  692,  692,  692,
     1411, 1469, 2061, 1470, 1467,  693, 1468, 1412, 2061,  689,
      690,  691,  691,  691,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  692,  692, 1473, 1474, 2061, 1411, 1469,
      693, 1470,  928,  693,  928, 1412,  929,  929,  929,  929,
      929,  929,  929,  696,  696,  696,  696,  696,  696,  696,
     1475, 2061, 2061, 1473, 1474,  697, 2061, 2061,  693,  694,
      695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
      696,  696,  696,  696, 1476, 2061, 1481, 1483, 1475,  697,

      930, 2061,  930,  697,  931,  931,  931,  931,  931,  931,
      931,  700,  700,  700,  700,  700,  700,  700, 1484, 1485,
     2061, 1486, 1476,  701, 1481, 1483, 2061,  697,  698,  699,
      699,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700, 1489, 1490, 2061, 1484, 1485,  701, 1486,
      932,  701,  932, 2061,  933,  933,  933,  933,  933,  933,
      933,  704,  704,  704,  704,  704,  704,  704, 1491, 2061,
     2061, 1489, 1490,  705, 2061, 2061,  701,  702,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704, 1492, 2061, 1493, 1494, 1491,  705,  934, 2061,

      934,  705,  935,  935,  935,  935,  935,  935,  935,  708,
      708,  708,  708,  708,  708,  708, 1495, 1496, 2061, 1497,
     1492,  709, 1493, 1494, 2061,  705,  706,  707,  707,  707,
      707,  707,  707,  707,  708,  708,  708,  708,  708,  708,
      708, 1498, 1499, 2061, 1495, 1496,  709, 1497,  936,  709,
      936, 2061,  937,  937,  937,  937,  937,  937,  937,  712,
      712,  712,  712,  712,  712,  712, 1500, 2061, 2061, 1498,
     1499,  713, 2061, 2061,  709,  710,  711,  711,  711,  711,
      711,  711,  711,  712,  712,  712,  712,  712,  712,  712,
     1664, 2061, 1664, 1504, 1500,  713,  938, 2061,  938,  713,

      939,  939,  939,  939,  939,  939,  939,  714,  714,  714,
      714,  714,  714,  714,  715,  715,  715,  715,  715,  715,
      715, 1504, 2061,  713,  716,  716,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  717,  717,  720,  720,
      720,  720,  720,  720,  720, 1505, 1506, 1667, 1507, 1667,
      721,  718,  719,  719,  719,  719,  719,  719,  719,  720,
      720,  720,  720,  720,  720,  720, 1508, 1509, 1511, 1512,
     1684,  721, 1684, 1505, 1506,  940, 1507,  940,  721,  941,
      941,  941,  941,  941,  941,  941,  725,  725,  725,  725,
      725,  725,  725, 1513, 1508, 1509, 1511, 1512,  726,  721,

      723,  724,  724,  724,  724,  724,  724,  724,  725,  725,
      725,  725,  725,  725,  725, 1517, 1518, 1695, 1519, 1695,
      726, 1513, 1698,  942, 1698,  942,  726,  943,  943,  943,
      943,  943,  943,  943,  727,  727,  727,  727,  727,  727,
      727, 2061, 2061, 1517, 1518,  729, 1519,  729,  726,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  731, 1708,  731, 1708,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  733, 1649,  733, 1649,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  735,

     1654,  735, 1654,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  736,  736,  736,
      736,  736,  736,  736,  737,  737,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  738,  738,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      740,  740,  741,  741,  741,  741,  741,  741,  741,  742,
      742,  742,  742,  742,  742,  742,  743,  743,  743,  743,
      743,  743,  743,  749,  749,  749,  749,  749,  749,  749,
      750,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  751,  754,  754,  754,  754,  754,  754,

      754, 1525, 1526, 1656, 1527, 1656,  755,  752,  753,  753,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      754,  754, 1530, 1531, 1533, 1534, 1535,  755, 2061, 1525,
     1526,  944, 1527,  944,  755,  945,  945,  945,  945,  945,
      945,  945,  756,  756,  756,  756,  756,  756,  756, 2061,
     1530, 1531, 1533, 1534, 1535,  755,  757,  757,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  758,  758,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762,  765,  765,  765,  765,  765,  765,
      765,  773,  773,  773,  773,  773,  773,  773,  776,  776,

      776,  776,  776,  776,  776, 1536, 1537, 1719, 1541, 1719,
      777,  774,  775,  775,  775,  775,  775,  775,  775,  776,
      776,  776,  776,  776,  776,  776, 1542, 1544, 1663, 1545,
     1663,  777, 2061, 1536, 1537,  946, 1541,  946,  777,  947,
      947,  947,  947,  947,  947,  947,  778,  778,  778,  778,
      778,  778,  778, 2061, 1542, 1544,  780, 1545,  780,  777,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  782, 1664,  782, 1664,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  784, 1667,  784, 1667,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      786, 1723,  786, 1723,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  788, 1684,
      788, 1684,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  790, 1741,  790, 1741,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  792,  793,  792, 2061,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  948, 1744,  948, 1744,  949,  949,  949,  949,
      949,  949,  949,  795, 1695,  795, 1695,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  797, 1698,  797, 1698,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  799,
     1749,  799, 1749,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  804,  804,  804,
      804,  804,  804,  804,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  907,  907,  907,  907,  907,  907,

      907,  907,  907,  907,  907,  907,  907,  907,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  921,  921,  921,  921,  921,  921,  921,  921,

      921,  921,  921,  921,  921,  921,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  949,  949,
      949,  949,  949,  949,  949,  948, 1019,  948, 2061,  949,

      949,  949,  949,  949,  949,  949, 1092, 1751, 1092, 1751,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1092, 1228, 1092, 2061, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1229, 1249, 1262, 2061, 1257,
     1250, 1251, 1252, 1258, 1259, 1260, 1263, 1327, 2061, 2061,
     1272, 1321, 1272, 1228, 1322, 1323, 1752, 1328, 1752, 2061,
     1546, 1273, 1324, 1229, 1249, 1262, 1274, 1257, 1250, 1251,
     1252, 1258, 1259, 1260, 1263, 1327, 1394, 1421, 1394, 1321,
     2061, 2061, 1322, 1323, 1313, 1328, 1313, 1414, 1546, 1414,
     1324, 2061, 1395, 1422, 1275, 1423, 1548, 1423, 1415, 1428,

     1314, 1428, 1430, 1416, 1430, 1421, 1432, 1332, 1432, 1332,
     1334, 1424, 1334, 2061, 1336, 1429, 1336, 1338, 1431, 1338,
     2061, 1422, 1433, 1333, 1548, 1441, 1335, 1441, 2061, 1549,
     1337, 1417, 1344, 1339, 1344, 1346, 1348, 1346, 1348, 2061,
     1350, 1442, 1350, 1448, 1450, 1448, 1450, 1356, 1345, 1356,
     2061, 1347, 1349, 1358, 2061, 1358, 1351, 1549, 2061, 1449,
     1451, 1550, 1360, 1357, 1360, 1362, 1365, 1362, 1365, 1359,
     1464, 1471, 1464, 1471, 1385, 1387, 1385, 1387, 1361, 2061,
     2061, 1363, 1366, 1389, 2061, 1389, 1465, 1472, 1487, 1550,
     1386, 1388, 1391, 1394, 1391, 1394, 1488, 2061, 1753, 1390,

     1753, 1414, 1501, 1414, 1501, 1423, 2061, 1423, 1392, 1395,
     1428, 1430, 1428, 1430, 1466, 2061, 1487, 1416, 1502, 1551,
     1432, 1424, 1432, 1441, 1488, 1441, 1429, 1431, 1521, 1448,
     1521, 1448, 1450, 1464, 1450, 1464, 1433, 1552, 1471, 1442,
     1471, 1539, 1553, 1539, 1522, 1449, 1554, 1551, 1451, 1465,
     1555, 1556, 1559, 1560, 1472, 1561, 1562, 1540, 1564, 1501,
     1565, 1501, 1566, 1567, 1568, 1552, 1569, 1570, 1571, 1572,
     1553, 1573, 1574, 1575, 1554, 1502, 1577, 1578, 1555, 1556,
     1559, 1560, 1579, 1561, 1562, 1580, 1564, 1521, 1565, 1521,
     1566, 1567, 1568, 1581, 1569, 1570, 1571, 1572, 1582, 1573,

     1574, 1575, 1583, 1522, 1577, 1578, 1584, 1586, 1587, 1588,
     1579, 1588, 1590, 1580, 1585, 1539, 1592, 1539, 1593, 1594,
     1597, 1581, 1595, 1600, 1595, 1589, 1582, 1598, 1601, 1598,
     1583, 1540, 1603, 1608, 1584, 1586, 1587, 1602, 1596, 1604,
     1590, 1604, 1585, 1599, 1592, 1609, 1593, 1594, 1597, 1612,
     1606, 1600, 1606, 1613, 1615, 1605, 1601, 1617, 1618, 1619,
     1603, 1608, 1610, 1620, 1610, 1602, 1607, 1616, 1621, 1622,
     1623, 1624, 1625, 1609, 1626, 1629, 2061, 1612, 1611, 1630,
     1631, 1613, 1615, 1632, 1633, 1617, 1618, 1619, 1627, 1634,
     1627, 1620, 1635, 1636, 1639, 1616, 1621, 1622, 1623, 1624,

     1625, 2061, 1626, 1629, 1628, 1640, 1643, 1630, 1631, 1644,
     1645, 1632, 1633, 1637, 1641, 1637, 1641, 1634, 1646, 1650,
     1635, 1636, 1639, 1647, 1588, 1647, 1588, 1651, 1652, 1638,
     1642, 1653, 1655, 1640, 1643, 1657, 1658, 1644, 1645, 1648,
     1589, 1595, 1598, 1595, 1598, 1659, 1646, 1650, 1660, 1661,
     1604, 1661, 1604, 1665, 1666, 1651, 1652, 1596, 1599, 1653,
     1655, 1668, 1671, 1657, 1658, 1662, 1605, 1606, 1610, 1606,
     1610, 1672, 1669, 1659, 1669, 1673, 1660, 1674, 1675, 1676,
     1677, 1665, 1666, 1607, 1611, 1678, 1679, 1680, 1670, 1668,
     1671, 1681, 1682, 1683, 1627, 1685, 1627, 1686, 1689, 1672,

     1687, 1690, 1687, 1673, 1693, 1674, 1675, 1676, 1677, 1696,
     1628, 1697, 2061, 1678, 1679, 1680, 1688, 1711, 2061, 1681,
     1682, 1683, 1691, 1685, 1691, 1686, 1689, 1712, 1637, 1690,
     1637, 1641, 1693, 1641, 1699, 1713, 1699, 1696, 1692, 1697,
     1702, 1704, 1702, 1704, 1638, 1711, 1706, 1642, 1706, 1647,
     1700, 1647, 1709, 1714, 1709, 1712, 1703, 1705, 1716, 1717,
     1718, 1720, 1707, 1713, 1661, 1648, 1661, 1721, 1710, 1722,
     1724, 1725, 1726, 1727, 1669, 1729, 1669, 1729, 1701, 1731,
     1662, 1714, 1732, 1735, 1736, 1737, 1716, 1717, 1718, 1720,
     1670, 1730, 1733, 1738, 1733, 1721, 1739, 1722, 1724, 1725,

     1726, 1727, 1740, 1687, 1742, 1687, 1743, 1731, 1734, 1745,
     1732, 1735, 1736, 1737, 1746, 1691, 1747, 1691, 1748, 1688,
     1699, 1738, 1699, 1750, 1739, 1702, 1708, 1702, 1708, 1755,
     1740, 1692, 1742, 1704, 1743, 1704, 1700, 1745, 1706, 1756,
     1706, 1703, 1746, 1709, 1747, 1709, 1748, 1757, 1754, 1705,
     1754, 1750, 1760, 1758, 1707, 1758, 1761, 1755, 1762, 1710,
     1763, 1719, 1764, 1719, 1765, 1768, 1766, 1756, 1766, 1759,
     1723, 1769, 1723, 1770, 1771, 1757, 1772, 1773, 1774, 1729,
     1760, 1729, 1767, 1775, 1761, 1775, 1762, 1776, 1763, 1777,
     1764, 1781, 1765, 1768, 1733, 1730, 1733, 1782, 1778, 1769,

     1778, 1770, 1771, 1783, 1772, 1773, 1774, 1779, 1784, 1779,
     1734, 1785, 1741, 1795, 1741, 1776, 1786, 1777, 1786, 1781,
     1796, 2061, 1788, 1780, 1788, 1782, 1744, 1797, 1744, 1798,
     2061, 1783, 1787, 1791, 2061, 1791, 1784, 1803, 1789, 1785,
     1749, 1795, 1749, 1805, 1792, 1793, 1806, 2061, 1796, 1794,
     1751, 1752, 1751, 1752, 1753, 1797, 1753, 1798, 1754, 1799,
     1754, 1799, 1801, 1807, 1801, 1803, 1790, 1758, 1804, 1758,
     1804, 1805, 1808, 1813, 1806, 1800, 1814, 1809, 1802, 1809,
     1766, 1815, 1766, 1759, 1812, 1816, 1812, 1817, 1825, 1817,
     1819, 1807, 1819, 1810, 1830, 1821, 1767, 1821, 1831, 1832,

     1808, 1813, 2061, 1818, 1814, 1775, 1820, 1775, 1823, 1815,
     1823, 1822, 1778, 1816, 1778, 1779, 1825, 1779, 1826, 1827,
     1826, 1827, 1830, 1786, 1824, 1786, 1831, 1832, 1833, 2061,
     1833, 1780, 1788, 2061, 1788, 1828, 1834, 1842, 1834, 1787,
     1835, 1791, 1836, 1791, 1837, 1839, 1837, 1839, 1789, 1841,
     1843, 1841, 1844, 1845, 1848, 2061, 1799, 1794, 1799, 1849,
     1838, 1840, 1846, 1851, 1846, 1842, 1852, 1801, 1835, 1801,
     1836, 1847, 1800, 1847, 1804, 1854, 1804, 1809, 1843, 1809,
     1844, 1845, 1848, 1802, 1853, 1855, 1853, 1849, 1812, 1856,
     1812, 1851, 1857, 1810, 1852, 1858, 1817, 1859, 1817, 1859,

     1819, 2061, 1819, 1854, 1860, 1821, 1860, 1821, 1861, 1823,
     1861, 1823, 1818, 1855, 2061, 2061, 1820, 1856, 2061, 2061,
     1857, 1822, 1862, 1858, 1862, 1824, 1863, 1826, 1863, 1826,
     1827, 1865, 1827, 1865, 1866, 1867, 1868, 1869, 1871, 1869,
     1871, 1833, 1864, 1833, 1874, 1834, 1828, 1834, 1875, 1837,
     1876, 1837, 1876, 1870, 1872, 1839, 1877, 1839, 1877, 1841,
     1878, 1841, 1866, 1867, 1868, 1838, 1879, 1881, 1879, 1881,
     1883, 1840, 1874, 1846, 1886, 1846, 1875, 1847, 1884, 1847,
     1884, 1887, 1880, 1882, 1888, 1889, 1890, 1853, 1878, 1853,
     1891, 1893, 1891, 1895, 1885, 1859, 2061, 1859, 1883, 1860,

     2061, 1860, 1886, 1861, 2061, 1861, 1892, 2061, 1862, 1887,
     1862, 2061, 1888, 1889, 1890, 1863, 1896, 1863, 1896, 1893,
     1865, 1895, 1865, 1897, 1899, 1897, 1899, 1901, 1869, 1901,
     1869, 1864, 1903, 1871, 1903, 1871, 1904, 1907, 1904, 1898,
     1900, 1908, 1905, 1902, 1870, 1906, 1876, 1909, 1876, 1872,
     1877, 1879, 1877, 1879, 1910, 1881, 1910, 1881, 1911, 1912,
     1911, 1884, 1913, 1884, 1913, 1907, 1914, 1880, 1914, 1908,
     1905, 1882, 1916, 1906, 1917, 1909, 1918, 1885, 1919, 1891,
     1921, 1891, 1915, 1920, 1922, 1920, 1925, 1912, 1896, 1923,
     1896, 1897, 1926, 1897, 1926, 1892, 1927, 1924, 1927, 1899,

     1916, 1899, 1917, 1901, 1918, 1901, 1919, 1898, 1921, 1928,
     1929, 1928, 1922, 1930, 1925, 1900, 1903, 1923, 1903, 1902,
     1904, 1931, 1904, 1932, 1933, 1924, 1910, 1911, 1910, 1911,
     1934, 1913, 1914, 1913, 1914, 1935, 1936, 1935, 1929, 1939,
     1937, 1930, 1937, 1940, 1920, 1942, 1920, 1943, 1915, 1931,
     1944, 1932, 1933, 1945, 1948, 1945, 1938, 1926, 1934, 1926,
     1927, 1928, 1927, 1928, 1936, 1949, 1952, 1939, 1950, 1946,
     1950, 1940, 1953, 1942, 1953, 1943, 1957, 1961, 1944, 1955,
     1962, 1955, 1948, 1935, 1951, 1935, 1963, 1937, 1954, 1937,
     1958, 1964, 1958, 1949, 1952, 1956, 1959, 1947, 1959, 1965,

     1945, 1970, 1945, 1938, 1957, 1961, 1971, 1966, 1962, 1966,
     2061, 1972, 1960, 1972, 1963, 1950, 1946, 1950, 1977, 1964,
     1967, 1968, 1969, 1973, 1953, 1973, 1953, 1965, 1975, 1970,
     1975, 1951, 1979, 1980, 1971, 1955, 1976, 1955, 1976, 1974,
     1954, 1958, 1959, 1958, 1959, 1978, 1977, 1978, 1967, 1968,
     1969, 1956, 1981, 1982, 1983, 1966, 1990, 1966, 1960, 1991,
     1979, 1980, 1984, 1986, 1984, 1986, 1972, 1988, 1972, 1988,
     1973, 1992, 1973, 1992, 1975, 1976, 1975, 1976, 1985, 1987,
     1981, 1982, 1983, 1989, 1990, 1995, 1974, 1991, 1993, 1978,
     1993, 1978, 1996, 1997, 1998, 1999, 1984, 2000, 1984, 2000,

     1986, 2001, 1986, 2001, 1994, 2002, 2003, 2002, 1988, 2004,
     1988, 2006, 1985, 1995, 2007, 1992, 1987, 1992, 2009, 2010,
     1996, 1997, 1998, 1999, 1989, 1993, 2005, 1993, 2005, 2000,
     2001, 2000, 2001, 2002, 2003, 2002, 2011, 2004, 2012, 2006,
     2012, 1994, 2007, 2005, 2014, 2005, 2009, 2010, 2015, 2016,
     2017, 2018, 2019, 2012, 2013, 2012, 2020, 2021, 2020, 2022,
     2023, 2024, 2025, 2026, 2011, 2020, 2027, 2020, 2027, 2013,
     2035, 2036, 2014, 2037, 2061, 2037, 2015, 2016, 2017, 2018,
     2019, 2029, 2028, 2029, 2032, 2021, 2032, 2022, 2023, 2024,
     2025, 2026, 2030, 2027, 2029, 2027, 2029, 2031, 2035, 2036,

     2033, 2038, 2040, 2038, 2040, 2032, 2041, 2032, 2041, 2028,
     2031, 2042, 2043, 2044, 2045, 2061, 2045, 2039, 2047, 2061,
     2047, 2033, 2037, 2049, 2037, 2049, 2038, 2040, 2038, 2040,
     2046, 2041, 2061, 2041, 2048, 2050, 2052, 2050, 2052, 2042,
     2043, 2044, 2039, 2054, 2045, 2054, 2045, 2056, 2047, 2056,
     2047, 2051, 2053, 2057, 2049, 2057, 2049, 2061, 2061, 2055,
     2046, 2050, 2061, 2050, 2048, 2058, 2052, 2058, 2052, 2059,
     2054, 2059, 2054, 2060, 2056, 2060, 2056, 2051, 2057, 2058,
     2057, 2058, 2053, 2059, 2061, 2059, 2055, 2060, 2061, 2060,
      268,  268,  268,  268,  268,  344,  344,  344,  344,  344,

      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      347,  347,  347,  347,  347,  348,  348,  348,  348,  348,
      349,  349,  349,  349,  349,  350,  350,  350,  350,  350,
      351,  351,  351,  351,  351,  356,  356,  356,  356,  356,
      357,  357,  357,  357,  357,  421,  421,  421,  421,  421,
      442,  442,  442,  442,  442,  443,  443,  443,  443,  443,
      444,  444,  444,  444,  444,  445,  445,  445,  445,  445,
      446,  446,  446,  446,  446,  456,  456,  456,  456,  456,
      457,  457,  457,  457,  457,  460,  460,  460,  460,  460,
      461,  461,  461,  461,  461,  463,  463,  463,  463,  463,

      464,  464,  464,  464,  464,  465,  465,  465,  465,  465,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      468,  468,  468,  468,  468,  469,  469,  469,  469,  469,
      495,  495,  495,  495,  495,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  498,  498,  498,  498,  498,
      500,  500,  500,  500,  500,  501,  501,  501,  501,  501,
      505,  505,  505,  505,  505,  629,  629,  630,  630,  631,
      631,  632,  632,  633,  633,  634,  634,  635,  635,  636,
      636,  642,  642,  722,  722,  744,  744,  745,  745,  746,
      746,  747,  747,  748,  748,  760,  760,  806,  806, 2061,

      806,  806,  809, 2061, 2061,  809,  809,  629,  629,  630,
      630,  631,  631,  632,  632,  633,  633,  634,  634,  635,
      635,  636,  636,  642,  642,  722,  722,  744,  744,  745,
      745,  746,  746,  747,  747,  748,  748,  760,  760,  806,
      806, 2061,  806,  806,  809, 2061, 2061,  809,  809,  267,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061
    } ;

static yyconst flex_int16_t yy_chk[10523] =
    {   0,
        0,    1,    1,    1, 2162,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        3,  269,    3,  269,  291,  269,  291,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,  529,    4,  529,

      291,  274, 2161,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,  529,    5, 2160,  530,  276,  530,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    6,  274,
        6, 2159,  530,  277, 2158,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7,  276,    7, 2157,  531,  280,
      531,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,  277,    8, 2156,  533,  281,  533,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,  280,    9, 2155,
      533,  282, 2154,    9,    9,    9,    9,    9,    9,    9,
       10,   10,   10,  281,   10, 2153,  534,  286,  534,   10,

       10,   10,   10,   10,   10,   10,   11,   11,   11,  282,
       11, 2152,  534,  288, 2151,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  286,   12, 2150,  535,  292,
      535,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,  288,   13,  536,  535,  536, 2149,   13,   13,   13,
       13,   13,   13,   13,   14,   14,   14,  292,   14,  536,
      537, 2147,  537,   14,   14,   14,   14,   14,   14,   14,
       15,   15,   15,  502,   15,  502,  537,  502, 2139,   15,
       15,   15,   15,   15,   15,   15,   16,   16,   16,  506,
       16,  506,  563,  506,  563,   16,   16,   16,   16,   16,

       16,   16,   17,   17,   17, 2128,   17,   17,  563,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   18,   18,
       18, 2127,   18,   18, 2126,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   19,   19, 2125,   19,   19,
     2124,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   20,   20, 2123,   20,   20, 2122,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   21,   21, 2121,
       21,   21, 2120,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22, 2119,   22,   22, 2118,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   23,

       23, 2117,   23,   23, 2116,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   24,   24,   24, 2115,   24,   24,
     2113,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,   25, 2105,   25,   25, 2024,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   26,   26,   26, 1997,
       26,   26, 1921,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27, 1857,   27,   27, 1832,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   28,   28,
       28, 1806,   28,   28, 1782,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   29,   29, 1765,   29,   29,

     1675,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   30,   30, 1657,   30,   30, 1636,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   31,   31,   31, 1556,
       31,   31, 1496,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   32,   32,   32, 1495,   32,   32, 1485,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   33,
       33,  509,   33,  509,  564,  509,  564,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34,  830,   34,  830,
      831,  511,  831,   34,   34,   34,   34,   34,   34,   34,
       35,   35,   35,  830,   35, 1476,  832,  513,  832,   35,

       35,   35,   35,   35,   35,   35,   36,   36,   36,  511,
       36, 1461,  834,  514,  834,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37,  513,   37, 1460,  834,  515,
     1309,   37,   37,   37,   37,   37,   37,   37,   38,   38,
       38,  514,   38, 1293,  835,  516,  835,   38,   38,   38,
       38,   38,   38,   38,   39,   39,   39,  515,   39, 1292,
      836,  517,  836,   39,   39,   39,   39,   39,   39,   39,
       40,   40,   40,  516,   40, 1281,  836,  518, 1265,   40,
       40,   40,   40,   40,   40,   40,   41,   41,   41,  517,
       41, 1254,  837,  519,  837,   41,   41,   41,   41,   41,

       41,   41,   42,   42,   42,  518,   42, 1239,  838,  520,
      838,   42,   42,   42,   42,   42,   42,   42,   43,   43,
       43,  519,   43,   43,  838,   43, 1226,   43,   43,   43,
       43,   43,   43,   43,   44,   44,   44,  520,   44,   44,
      839,   44,  839,   44,   44,   44,   44,   44,   44,   44,
       45,   45,   45,  840,   45,  840,  841,  521,  841,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,  840,
       46, 1222,  842,  522,  842,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47,  521,   47,   47,  842,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   48,   48,

       48,  522,   48,   48, 1193,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   49,   49,   49, 1174,   49,   49,
     1168,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       50,   50,   50, 1161,   50,   50, 1105,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   51,   51,   51, 1091,
       51,   51, 1054,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1052,   52,   52, 1044,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   53,   53,
       53, 1027,   53,   53, 1020,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   54,   54,   54, 1013,   54,   54,

     1002,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   55,   55,   55,  999,   55,   55,   55,   55,  843,
      524,  843,  874,   56,   56,   56,   56,   55,   56,   56,
       56,   56,  847,  884,  847,  884,   57,   57,   57,   57,
       56,   57,   57,   57,   57,  263,  263,  263,  524,  263,
      279,  525,  861,   57,   55,   58,   58,   58,   58,  844,
       58,   58,   58,   58,  969,  279,  969,   56,   59,   59,
       59,   59,   58,   59,   59,   59,   59,  827,  279,  525,
       57,   60,   60,   60,   60,   59,   60,   60,   60,   60,
      264,  264,  264,  279,  264,  526,  527,  826,   60,   58,

       61,   61,   61,   61,  819,   61,   61,   61,   61,  971,
      528,  971,   59,   62,   62,   62,   62,   61,   62,   62,
       62,   62,  818,  526,  527,   60,   63,   63,   63,   63,
       62,   63,   63,   63,   63,  265,  265,  265,  528,  265,
      532,  538,  523,   63,   61,   64,   64,   64,   64,  512,
       64,   64,   64,   64,  972,  539,  972,   62,   65,   65,
       65,   65,   64,   65,   65,   65,   65,  267,  532,  538,
       63,   66,   66,   66,   66,   65,   66,   66,   66,   66,
      266,  266,  266,  539,  266,  541,  542,    0,   66,   64,
       67,   67,   67,   67,    0,   67,   67,   67,   67,  543,

        0,    0,   65,   68,   68,   68,   68,   67,   68,   68,
       68,   68,    0,  541,  542,   66,   69,   69,   69,   69,
       68,   69,   69,   69,   69,  546,  547,  543,  287,  544,
      549,  550,    0,   69,   67,   70,   70,   70,   70,  273,
       70,   70,   70,   70,  278,  287,  273,   68,  544,  273,
      278,    0,   70,  546,  547,  278,  287,  544,  549,  550,
       69,  807,  810,  807,  810,  807,  810,  273,  973,    0,
      973,  551,  278,  287,  273,  552,  555,  273,  278,   70,
       71,   71,   71,  278,   71,    0,  846,  556,  846,   71,
       71,   71,   71,   71,   71,   71,   72,   72,   72,  551,

       72,    0,  846,  552,  555,   72,   72,   72,   72,   72,
       72,   72,   73,   73,   73,  556,   73,    0,  952,  557,
      952,   73,   73,   73,   73,   73,   73,   73,   74,   74,
       74,  974,   74,  974,  952,  559,    0,   74,   74,   74,
       74,   74,   74,   74,   75,   75,   75,  557,   75,    0,
      953,  560,  953,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,  559,   76,    0,  953,  562,    0,   76,
       76,   76,   76,   76,   76,   76,   77,   77,   77,  560,
       77,  975,  977,  975,  977,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,  562,   78,  978,  977,  978,

        0,   78,   78,   78,   78,   78,   78,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 1023,    0,
     1023,   81,   81,   81,   81,   79,   81,   81,   81,   81,
     1025, 1047, 1025, 1047,   82,   82,   82,   82,   81,   82,
       82,   82,   82,  293,  293,  293,  293,  293,  293,  293,
        0,   82,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,    0,    0,   81,  565,  812,  813,    0,
       80,  294,  294,  294,  294,  294,  294,  294,   82,  295,
      295,  295,  295,  295,  295,  295,  296,  296,  296,  296,
      296,  296,  296,    0,  565,  812,  813,   80,   83,   83,

       83,    0,   83,   83,    0,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   84,   84,   84,    0,   84,   84,
        0,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85, 1005,   85, 1005, 1006,  815, 1006,   85,
       85,   85,   85,   85,   85,   85,   86,   86,   86, 1005,
       86,    0, 1006,  816,    0,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   87,  815,   87,    0, 1010,  817,
     1010,   87,   87,   87,   87,   87,   87,   87,   88,   88,
       88,  816,   88,    0, 1010,  820,    0,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,  817,   89,    0,

     1022,  821, 1022,   89,   89,   89,   89,   89,   89,   89,
       90,   90,   90,  820,   90,    0, 1022,  822,    0,   90,
       90,   90,   90,   90,   90,   90,   91,   91,   91,  821,
       91,    0, 1024,  823, 1024,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,  822,   92,    0, 1024,  824,
        0,   92,   92,   92,   92,   92,   92,   92,   93,   93,
       93,  823,   93,    0, 1046,  825, 1046,   93,   93,   93,
       93,   93,   93,   93,   94,   94,   94,  824,   94,    0,
     1046,  828,    0,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,  825,   95,    0, 1048,  829, 1048,   95,

       95,   95,   95,   95,   95,   95,   96,   96,   96,  828,
       96,    0, 1048,  833,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97,  829,   97,    0, 1051,  845,
     1051,   97,   97,   97,   97,   97,   97,   97,   98,   98,
       98,  833,   98,    0, 1051,  848,    0,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   99,  845,   99,    0,
     1053,  849, 1053,   99,   99,   99,   99,   99,   99,   99,
      100,  100,  100,  848,  100,    0, 1053,  850,    0,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  849,
      101,    0, 1062,  851, 1062,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102,  850,  102,    0, 1062,  852,
        0,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  851,  103,  103,    0,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  104,  104,  104,  852,  104,  104,
        0,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  106,    0,
      106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,

      108,    0,  108,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  109,  109,  109,    0,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,  110,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111, 1064,
      111, 1064, 1065,  853, 1065,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1064,  112,    0, 1065,  854,
        0,  112,  112,  112,  112,  112,  112,  112,  113,  113,
      113,  853,  113,    0, 1075,  856, 1075,  113,  113,  113,
      113,  113,  113,  113,  114,  114,  114,  854,  114,    0,

     1075,  857,    0,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  856,  115,  115,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  857,
      116,  116,    0,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117,    0,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  118,  118,
      118,    0,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,    0,  119,  119,
        0,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      120,  120,  120,    0,  120,  120,    0,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  121,  121,  121,    0,
      121,  121,    0,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,    0,  122,  122,    0,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  123,  123,
      123,    0,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  124,  124,  124,    0,  124,  124,
        0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,    0,
      126,  126,    0,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  127,  127,  127,    0,  127,  127,    0,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
      128,    0,  128,  128,    0,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  129,  129,  129,    0,  129,  129,
        0,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,    0,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,    0,
      131,  131,    0,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,    0,  132,  132,    0,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,

      133,    0,  133,  133,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,    0,  134,  134,
        0,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      135,  135,  135, 1076,  135, 1076, 1077,  858, 1077,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136, 1078,
      136, 1078, 1077,  859,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137,  858,  137,    0, 1082,  860,
     1082,  137,  137,  137,  137,  137,  137,  137,  138,  138,
      138,  859,  138,    0, 1082,  862,    0,  138,  138,  138,
      138,  138,  138,  138,  139,  139,  139,  860,  139,    0,

     1083,  863, 1083,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  862,  140,    0, 1096,  864, 1096,  140,
      140,  140,  140,  140,  140,  140,  141,  141,  141,  863,
      141,    0, 1097,  865, 1097,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142,  864,  142,    0, 1106,  866,
     1106,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  865,  143,  143, 1106,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  866,  144,  144,
        0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      145,  145,  145,  145,  867,  145,  145,  145,  145,  868,

     1119,    0, 1119,  146,  146,  146,  146,  145,  146,  146,
      146,  146,  297,  297,  297,  297,  297,  297,  297, 1108,
      146, 1108,  867,  175,  175,  175,  175,  868,  175,  175,
      175,  175,    0,    0,  145, 1108, 1123, 1125, 1123, 1125,
      175, 1129,  869, 1129, 1132,    0, 1132,  146,  147,  147,
      147,    0,  147,  147,    0,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  175,  148,  148,
      869,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      149,  149,  149, 1118,  149, 1118, 1122,  870, 1122,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1118,

      150,    0, 1122,  871,    0,  150,  150,  150,  150,  150,
      150,  150,  151,  151,  151,  870,  151,  151, 1124,  151,
     1124,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152,  871,  152,  152, 1124,  152,    0,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,    0,  153,  153,
     1128,  153, 1128,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,    0,  154,  154, 1128,  154,    0,  154,
      154,  154,  154,  154,  154,  154,  155,  155,  155,    0,
      155,  155, 1131,  155, 1131,  155,  155,  155,  155,  155,
      155,  155,  156,  156,  156,    0,  156,  156, 1131,  156,

        0,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,    0,  157,  157, 1141,  157, 1141,  157,  157,  157,
      157,  157,  157,  157,  158,  158,  158,    0,  158,  158,
     1141,  158,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159, 1142,  159, 1142, 1144,  872, 1144,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160, 1145,
      160, 1145, 1144,  873,    0,  160,  160,  160,  160,  160,
      160,  160,  161,  161,  161,  872,  161,    0, 1146,  875,
     1146,  161,  161,  161,  161,  161,  161,  161,  162,  162,
      162,  873,  162,    0, 1146,  876,    0,  162,  162,  162,

      162,  162,  162,  162,  163,  163,  163,  875,  163,    0,
     1147,  877, 1147,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  876,  164,    0, 1157,  879, 1157,  164,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  877,
      165,    0, 1157,  880,    0,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  879,  166,    0, 1158,  881,
     1158,  166,  166,  166,  166,  166,  166,  166,  167,  167,
      167,  880,  167,    0, 1159,  882, 1159,  167,  167,  167,
      167,  167,  167,  167,  168,  168,  168,  881,  168,    0,
     1163,  883, 1163,  168,  168,  168,  168,  168,  168,  168,

      169,  169,  169,  882,  169,    0, 1183,  885, 1183,  169,
      169,  169,  169,  169,  169,  169,  170,  170,  170,  883,
      170,    0, 1183,  950,    0,  170,  170,  170,  170,  170,
      170,  170,  171,  171,  171,  885,  171,    0, 1184,  951,
     1184,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      172,  950,  172,    0, 1186,  954, 1186,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  951,  173, 1187,
     1186, 1187,  955,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174,  954,  174, 1188, 1188, 1188, 1188,  174,
      174,  174,  174,  174,  174,  174,  176,  176,  176,  176,

      955,  176,  176,  176,  176, 1197, 1202, 1197, 1202,  177,
      177,  177,  177,  176,  177,  177,  177,  177, 1203, 1206,
     1203, 1206,  178,  178,  178,  178,  177,  178,  178,  178,
      178,  298,  298,  298,  298,  298,  298,  298,    0,  178,
      176,  179,  179,  179,  179,    0,  179,  179,  179,  179,
     1208,    0, 1208,  177,  180,  180,  180,  180,  179,  180,
      180,  180,  180, 1217,    0, 1217,  178,  181,  181,  181,
      181,  180,  181,  181,  181,  181,  299,  299,  299,  299,
      299,  299,  299,    0,  181,  179,  182,  182,  182,  182,
        0,  182,  182,  182,  182, 1219,    0, 1219,  180,  183,

      183,  183,  183,  182,  183,  183,  183,  183,  956,    0,
        0,  181,  184,  184,  184,  184,  183,  184,  184,  184,
      184,  300,  300,  300,  300,  300,  300,  300,  300,  184,
      182,    0,  201,  201,  201,  201,  956,  201,  201,  201,
      201,    0, 1220,  183, 1220, 1232, 1201, 1232, 1201,  201,
      957,  959,  558,  878,    0,    0,  184,  185,  185,  185,
      878,  185, 1201, 1264,  558, 1264,  185,  185,  185,  185,
      185,  185,  185,  186,  186,  186,  201,  186,  957,  959,
      558,  878,  186,  186,  186,  186,  186,  186,  186,  187,
      187,  187,  558,  187,    0, 1204,  960, 1204,  187,  187,

      187,  187,  187,  187,  187,  188,  188,  188, 1266,  188,
     1266, 1204,  961,    0,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  960,  189,    0, 1205,  962, 1205,
      189,  189,  189,  189,  189,  189,  189,  190,  190,  190,
      961,  190,    0, 1205,  963,    0,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191,  962,  191,  191,    0,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192,  963,  192,  192,    0,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193, 1231,  193,
     1231, 1235,  964, 1235,  193,  193,  193,  193,  193,  193,

      193,  194,  194,  194, 1231,  194,    0, 1235,  966,    0,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
      964,  195,    0, 1249,  967, 1249,  195,  195,  195,  195,
      195,  195,  195,  196,  196,  196,  966,  196,    0, 1249,
      968,    0,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197,  967,  197, 1250, 1251, 1250, 1251,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198,  968,  198,
     1250, 1251,    0,    0,  198,  198,  198,  198,  198,  198,
      198,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  970,  976,  979,  202,  202,  202,  202,  199,  202,

      202,  202,  202, 1274, 1285, 1274, 1285,    0,  545,  275,
        0,  202,  545,  545,  545,    0,  275,  275,    0,  970,
      976,  979,  275,  980,    0,  199,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  545,  275,  202,  548,
      545,  545,  545,  200,  275,  275,  548,    0,  548,  981,
      275,  980,  301,  301,  301,  301,  301,  301,  301, 1287,
        0, 1287,  982,    0,  301,  983, 1289,  548, 1289,    0,
      200,  203,  203,  203,  548,  203,  548,  981,  203,    0,
      203,  203,  203,  203,  203,  203,  203,  204,  204,  204,
      982,  204,  301,  983,  204,    0,  204,  204,  204,  204,

      204,  204,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  284, 1310,    0, 1310,  984,  284,    0,
      205,  302,  302,  302,  302,  302,  302,  302,  302,    0,
      985,  554,  814,  284,  289,  986,  987,    0,  284,  554,
      814,  284,  289,  289,  289,  984,    0,  205,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  985,  554,
      814,  284,  289,  986,  987,  206,  284,  554,  814,  284,
      289,  289,  289,  303,  303,  303,  303,  303,  303,  303,
      303,  305,  305,  305,  305,  305,  305,  305,  305,    0,
      988,  989,  206,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  324,  324,  324,  324,  324,  324,  324,
      207,  304,  304,  304,  304,  304,  304,  304,  988,  989,
      965,  990,  991,  304,  306,  306,  306,  306,  306,  306,
      306,  306,  965,  992, 1314,    0, 1314,  207,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  965,  990,
      991,  304,    0,    0, 1252,  208, 1252, 1257,  993, 1257,
      965,  992,  307,  307,  307,  307,  307,  307,  307, 1333,
     1252, 1333,    0, 1257,  307,  325,  325,  325,  325,  325,
      325,  325,  208,  209,  209,  209,  993,  209, 1258, 1259,
     1258, 1259,  209,  209,  209,  209,  209,  209,  209,  210,

      210,  210,  307,  210, 1258, 1259,    0,    0,  210,  210,
      210,  210,  210,  210,  210,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  326,  326,  326,  326,  326,
      326,  326,  211,  308,  308,  308,  308,  308,  308,  308,
      308,  309,  309,  309,  309,  309,  309,  309,  309,  311,
      311,  311,  311,  311,  311,  311,  311,  994,  995,  211,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      327,  327,  327,  327,  327,  327,  327,  212,  310,  310,
      310,  310,  310,  310,  310,  994,  995, 1335,  996, 1335,
      310,  312,  312,  312,  312,  312,  312,  312,  312,  540,

        0,  540,  997,  998,  212,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  540,  996,  540,  310,  540,
     1001,    0,  213,  313,  313,  313,  313,  313,  313,  313,
      997,  998,    0, 1000,  540,  313,  314,  314,  314,  314,
      314,  314,  314,  314, 1337,  540, 1337,  540, 1001,  213,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
     1000, 1000,  540,  313, 1003, 1004,    0,  214,  315,  315,
      315,  315,  315,  315,  315,  315,  316,  316,  316,  316,
      316,  316,  316,    0,    0, 1007, 1008, 1009,  316, 1339,
        0, 1339, 1003, 1004,  214,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  328,  328,  328,  328,  328,
      328,  328,  215, 1007, 1008, 1009,  316,  317,  317,  317,
      317,  317,  317,  317,  317,  318,  318,  318,  318,  318,
      318,  318,  318, 1345, 1347, 1345, 1347, 1011, 1012,  215,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      329,  329,  329,  329,  329,  329,  329,  216,  319,  319,
      319,  319,  319,  319,  319, 1011, 1012, 1014, 1015, 1016,
      319,  320,  320,  320,  320,  320,  320,  320,  320, 1349,
     1351, 1349, 1351,    0,  216,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217, 1014, 1015, 1016,  319, 1017,

     1018,    0,  217,  321,  321,  321,  321,  321,  321,  321,
      321,  322,  322,  322,  322,  322,  322,  322,    0,    0,
     1021, 1026, 1028,  322, 1357,    0, 1357, 1017, 1018,  217,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      331,  331,  331,  331,  331,  331,  331,  218, 1021, 1026,
     1028,  322,  323,  323,  323,  323,  323,  323,  323,  323,
      330, 1359,  330, 1359,  330,  330,  330,  330,  330,  330,
      330, 1361,    0, 1361,  218,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  352,  352,  352,  352,  352,
      352,  352,  219,  332,  332,  332,  332,  332,  332,  332,

      332,  333,  333,  333,  333,  333,  333,  333,    0,    0,
     1029, 1030, 1031,  333, 1363, 1366, 1363, 1366,    0,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      353,  353,  353,  353,  353,  353,  353,  220, 1029, 1030,
     1031,  333,  334,  334,  334,  334,  334,  334,  334,  334,
      335,  335,  335,  335,  335,  335,  335,  335, 1367, 1378,
     1367, 1378, 1032, 1033,  220,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  354,  354,  354,  354,  354,
      354,  354,  221,  336,  336,  336,  336,  336,  336,  336,
     1032, 1033, 1034, 1035, 1036,  336,  337,  337,  337,  337,

      337,  337,  337,  337, 1379, 1386, 1379, 1386,    0,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
     1034, 1035, 1036,  336, 1037, 1039,    0,  222,  338,  338,
      338,  338,  338,  338,  338,  338,  339,  339,  339,  339,
      339,  339,  339,    0,    0, 1041, 1042, 1045,  339, 1388,
        0, 1388, 1037, 1039,  222,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  355,  355,  355,  355,  355,
      355,  355,  223, 1041, 1042, 1045,  339,  340,  340,  340,
      340,  340,  340,  340,  340,  341,  341,  341,  341,  341,
      341,  341,  341, 1049, 1390, 1392, 1390, 1392,    0,  223,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      342,  342,  342,  342,  342,  342,  342,  224,    0,    0,
     1050, 1049,  342,  343,  343,  343,  343,  343,  343,  343,
      343,  358,  358,  358,  358,  358,  358,  358,  358, 1040,
     1055, 1056,    0,    0,  224,  225,  225,  225, 1050,  225,
      342, 1395, 1040, 1395,  225,  225,  225,  225,  225,  225,
      225,  226,  226,  226, 1407,  226, 1407, 1040, 1055, 1056,
      226,  226,  226,  226,  226,  226,  226,  227,  227,  227,
     1040,  227,  227,    0,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,    0,  228,  228,    0,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  229,
      229,  229, 1260,  229, 1260, 1267, 1057, 1267,  229,  229,
      229,  229,  229,  229,  229,  230,  230,  230, 1260,  230,
        0, 1267, 1058,    0,  230,  230,  230,  230,  230,  230,
      230,  231,  231,  231, 1057,  231,  231, 1268,  231, 1268,
      231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
     1058,  232,  232, 1268,  232,    0,  232,  232,  232,  232,
      232,  232,  232,  233,  233,  233,    0,  233,  233, 1269,
      233, 1269,  233,  233,  233,  233,  233,  233,  233,  234,
      234,  234,    0,  234,  234, 1269,  234,    0,  234,  234,

      234,  234,  234,  234,  234,  235,  235,  235,    0,  235,
      235, 1270,  235, 1270,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236,    0,  236,  236, 1270,  236,    0,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
        0,  237,  237, 1272,  237, 1272,  237,  237,  237,  237,
      237,  237,  237,  238,  238,  238,    0,  238,  238, 1272,
      238,    0,  238,  238,  238,  238,  238,  238,  238,  239,
      239,  239,    0,  239,  239, 1273,  239, 1273,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,    0,  240,
      240, 1273,  240,    0,  240,  240,  240,  240,  240,  240,

      240,  241,  241,  241,    0,  241,  241, 1286,  241, 1286,
      241,  241,  241,  241,  241,  241,  241,  242,  242,  242,
        0,  242,  242, 1286,  242,    0,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,    0,  243,  243, 1288,
      243, 1288,  243,  243,  243,  243,  243,  243,  243,  244,
      244,  244,    0,  244,  244, 1288,  244,    0,  244,  244,
      244,  244,  244,  244,  244,  245,  245,  245,    0,  245,
      245, 1295,  245, 1295,  245,  245,  245,  245,  245,  245,
      245,  246,  246,  246,    0,  246,  246, 1295,  246,    0,
      246,  246,  246,  246,  246,  246,  246,  247,  247,  247,

        0,  247,  247, 1296,  247, 1296,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,    0,  248,  248, 1296,
      248,    0,  248,  248,  248,  248,  248,  248,  248,  249,
      249,  249,    0,  249,  249, 1297,  249, 1297,  249,  249,
      249,  249,  249,  249,  249,  250,  250,  250,    0,  250,
      250, 1297,  250,    0,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  361,  361,  361,  361,  361,  361,  361,  251,  359,
      359,  359,  359,  359,  359,  359,    0, 1416, 1059, 1416,
     1060,  359,  360,  360,  360,  360,  360,  360,  360,  360,

     1424, 1043, 1424, 1043,    0,  251,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252, 1059, 1043, 1060,  359,
     1061, 1063,    0,  252,  362,  362,  362,  362,  362,  362,
      362,  363,  363,  363,  363,  363,  363,  363,  364,  364,
      364,  364,  364,  364,  364, 1043,    0,    0, 1061, 1063,
      252,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  365,  365,  365,  365,  365,  365,  365,  253,  366,
      366,  366,  366,  366,  366,  366,  367,  367,  367,  367,
      367,  367,  367,  368,  368,  368,  368,  368,  368,  368,
     1429, 1431, 1429, 1431,    0,  253,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  369,  369,  369,  369,
      369,  369,  369,  254,  370,  370,  370,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  371,  371,    0,
        0, 1066, 1067, 1068,  371, 1433, 1434, 1433, 1434,    0,
      254,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  382,  382,  382,  382,  382,  382,  382,  255, 1066,
     1067, 1068,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  373,  373,  373,  373,  373,  373,  373,  373, 1435,
     1436, 1435, 1436, 1069, 1070,  255,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  383,  383,  383,  383,

      383,  383,  383,  256,  374,  374,  374,  374,  374,  374,
      374, 1069, 1070, 1071,    0,    0,  374,  375,  375,  375,
      375,  375,  375,  375,  375, 1437, 1442, 1437, 1442,    0,
      256,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257, 1071, 1038, 1072,  374, 1038, 1072,    0,  257,  376,
      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,
      377,  377,  377,  377, 1038,    0, 1073, 1074, 1079,  377,
     1038, 1072,    0, 1038, 1072,  257,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  414,  414,  414,  414,
      414,  414,  414,  258, 1073, 1074, 1079,  377,  378,  378,

      378,  378,  378,  378,  378,  378,  379,  379,  379,  379,
      379,  379,  379,  379, 1080, 1081, 1084, 1085,    0,    0,
      258,  259,  259,  259, 1298,  259, 1298, 1443,    0, 1443,
      259,  259,  259,  259,  259,  259,  259,  260,  260,  260,
     1298,  260, 1080, 1081, 1084, 1085,  260,  260,  260,  260,
      260,  260,  260,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  415,  415,  415,  415,  415,  415,  415,
      261,  380,  380,  380,  380,  380,  380,  380,    0,    0,
     1086, 1087, 1088,  380,  381,  381,  381,  381,  381,  381,
      381,  381, 1444, 1445, 1444, 1445,    0,  261,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262, 1086, 1087,
     1088,  380, 1089, 1090,    0,  262,  384,  384,  384,  384,
      384,  384,  384,  384,  385,  385,  385,  385,  385,  385,
      385,    0, 1095, 1098, 1099, 1100,  385, 1446,    0, 1446,
     1089, 1090,  262,  283,    0,  283,  386,  386,  386,  386,
      386,  386,  386,  386, 1101,    0,    0,  283, 1102,  283,
     1095, 1098, 1099, 1100,  385,  387,  387,  387,  387,  387,
      387,  387,  387, 1103,  283,  388,  388,  388,  388,  388,
      388,  388, 1101,  283,  283,  283, 1102,  388,  389,  389,
      389,  389,  389,  389,  389,  389, 1449, 1104, 1449,    0,

        0, 1103,  283,  390,  390,  390,  390,  390,  390,  390,
      390,  283,  283,  283,  285,  388,  553,  855,  958,  561,
      285,  958, 1107,  285,  855, 1104,  285,  553,  561,  285,
      285,  855,  285,    0,  553,  958, 1094,    0, 1109,  285,
     1110,    0,  285, 1094,  553,  855,  958,  561,  285,  958,
     1107,  285,  855,    0,  285,  553,  561,  285,  285,  855,
      285,  290,  553,  958, 1094,  290, 1109, 1111, 1110,  290,
     1112, 1094, 1113,  290, 1114,  290, 1115, 1116, 1117, 1120,
     1126,  290,  391,  391,  391,  391,  391,  391,  391,  290,
     1127, 1130, 1133,  290,  391, 1111,    0,  290, 1112,    0,

     1113,  290, 1114,  290, 1115, 1116, 1117, 1120, 1126,  290,
      392,  392,  392,  392,  392,  392,  392,  392, 1127, 1130,
     1133,    0,  391,  393,  393,  393,  393,  393,  393,  393,
      393,  394,  394,  394,  394,  394,  394,  394,    0, 1134,
     1135, 1136, 1137,  394,  395,  395,  395,  395,  395,  395,
      395,  395,  396,  396,  396,  396,  396,  396,  396,  396,
      397,  397,  397,  397,  397,  397,  397, 1134, 1135, 1136,
     1137,  394,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  399,  399,  399,  399,  400,
      400,  400,  400,  400,  400,  400,    0, 1138, 1139, 1140,

      397,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      402,  402,  402,  402,  402,  402,  402,  402,  403,  403,
      403,  403,  403,  403,  403, 1138, 1139, 1140, 1143,  400,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,    0, 1148, 1143, 1149,  403,  406,
      407,  407,  407,  407,  407,  407,  407,  407,  408,  408,
      408,  408,  408,  408,  408,  408,  409,  409,  409,  409,
      409,  409,  409, 1148, 1150, 1149, 1151,  406,  409,  410,
      410,  410,  410,  410,  410,  410,  410,  411,  411,  411,

      411,  411,  411,  411,  411,  412,  412,  412,  412,  412,
      412,  412, 1150, 1152, 1151, 1153,  409,  412,  413,  413,
      413,  413,  413,  413,  413,  413,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  417,  417,
     1451, 1152, 1451, 1153,    0,  412,  418,  418,  418,  418,
      418,  418,  418,  418,  419,  419,  419,  419,  419,  419,
      419,    0, 1154, 1156, 1160, 1162,  419,  420,  420,  420,
      420,  420,  420,  420,  420,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,
     1154, 1156, 1160, 1162,  419,  423,  424,  424,  424,  424,

      424,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  426,  426,  426,  426,  426,  426,  426,    0, 1453,
      427, 1453,  427,  423,  427,  427,  427,  427,  427,  427,
      427,  428,  428,  428,  428,  428,  428,  428,  429, 1454,
      429, 1454,  429,  429,  429,  429,  429,  429,  429,  430,
      430,  430,  430,  430,  430,  430,  431, 1455,  431, 1455,
      431,  431,  431,  431,  431,  431,  431,  432,  432,  432,
      432,  432,  432,  432,  433, 1456,  433, 1456,  433,  433,
      433,  433,  433,  433,  433,  434,  434,  434,  434,  434,
      434,  434,  435,  435,  435,  435,  435,  435,  435,  436,

      436,  436,  436,  436,  436,  436,  437,  437,  437,  437,
      437,  437,  437,  438,  438,  438,  438,  438,  438,  438,
      439,  439,  439,  439,  439,  439,  439,  440,  440,  440,
      440,  440,  440,  440,  441,  441,  441,  441,  441,  441,
      441,  447,  447,  447,  447,  447,  447,  447,  448,  448,
      448,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  449,  450,  450,  450,  450,  450,  450,  450,  450,
      451,  451,  451,  451,  451,  451,  451, 1164, 1165, 1166,
     1167, 1170,  451,  452,  452,  452,  452,  452,  452,  452,
      452,  453,  453,  453,  453,  453,  453,  453,  454,  454,

      454,  454,  454,  454,  454, 1164, 1165, 1166, 1167, 1170,
      451,  455,  455,  455,  455,  455,  455,  455,  458,  458,
      458,  458,  458,  458,  458,  459,  459,  459,  459,  459,
      459,  459,  462,  462,  462,  462,  462,  462,  462,  470,
      470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
      471,  471,  471,  471,  472,  472,  472,  472,  472,  472,
      472, 1171, 1172, 1458, 1171, 1458,  472,  473,  473,  473,
      473,  473,  473,  473,  473,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475, 1171,
     1172,  476, 1171,  476,  472,  476,  476,  476,  476,  476,

      476,  476,  477,  477,  477,  477,  477,  477,  477,  478,
     1465,  478, 1465,  478,  478,  478,  478,  478,  478,  478,
      479,  479,  479,  479,  479,  479,  479,  480, 1472,  480,
     1472,  480,  480,  480,  480,  480,  480,  480,  481,  481,
      481,  481,  481,  481,  481,  482, 1477,  482, 1477,  482,
      482,  482,  482,  482,  482,  482,  483,  483,  483,  483,
      483,  483,  483,  484, 1478,  484, 1478,  484,  484,  484,
      484,  484,  484,  484,  485,  485,  485,  485,  485,  485,
      485,  486, 1479,  486, 1479,  486,  486,  486,  486,  486,
      486,  486,  487,  487,  487,  487,  487,  487,  487,  488,

      488,  488,    0,  488,  488,  488,  488,  488,  488,  488,
      489,  489,  489,  489,  489,  489,  489,  490, 1480,  490,
     1480,  490,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  492, 1482,  492, 1482,  492,
      492,  492,  492,  492,  492,  492,  493,  493,  493,  493,
      493,  493,  493,  494, 1502,  494, 1502,  494,  494,  494,
      494,  494,  494,  494,  499,  499,  499,  499,  499,  499,
      499,  566,  566,  566,  566,  566,  566,  566,  567,  567,
      567,  567,  567,  567,  567,  568,  568,  568,  568,  568,
      568,  568,  569,  569,  569,  569,  569,  569,  569,  570,

      570,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  571,  571,  572,  572,  572,  572,  572,  572,  572,
      573,  573,  573,  573,  573,  573,  573, 1173, 1176, 1503,
     1169, 1503,  573,  574,  574,  574,  574,  574,  574,  574,
      574,  575,  575,  575,  575,  575,  575,  575, 1177, 1169,
     1178, 1179, 1510,  575, 1510, 1173, 1176,  576, 1169,  576,
      573,  576,  576,  576,  576,  576,  576,  576,  577,  577,
      577,  577,  577,  577,  577, 1181, 1177,    0, 1178, 1179,
      577,  575,  578,  578,  578,  578,  578,  578,  578,  578,
      579,  579,  579,  579,  579,  579,  579, 1185, 1189, 1191,

        0, 1192,  579, 1181, 1514,  580, 1514,  580,  577,  580,
      580,  580,  580,  580,  580,  580,  581,  581,  581,  581,
      581,  581,  581,    0, 1194, 1185, 1189, 1191,  581, 1192,
      579,  582,  582,  582,  582,  582,  582,  582,  582,  583,
      583,  583,  583,  583,  583,  583, 1195, 1196,    0, 1198,
     1199,  583, 1194,  584,    0,  584,  581,  584,  584,  584,
      584,  584,  584,  584,  585,  585,  585,  585,  585,  585,
      585, 1200,    0,    0, 1195, 1196,  585, 1198, 1199,  583,
      586,  586,  586,  586,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  587,  587, 1207, 1515, 1209, 1515, 1200,

      587,  588,    0,  588,  585,  588,  588,  588,  588,  588,
      588,  588,  589,  589,  589,  589,  589,  589,  589, 1121,
     1210,    0, 1211, 1207,  589, 1209, 1121,    0,  587,  590,
      590,  590,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  591,  591, 1212, 1213,    0, 1121, 1210,  591,
     1211,  592,  589,  592, 1121,  592,  592,  592,  592,  592,
      592,  592,  593,  593,  593,  593,  593,  593,  593, 1214,
        0,    0, 1212, 1213,  593,    0,    0,  591,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595, 1215,    0, 1216, 1218, 1214,  595,  596,

        0,  596,  593,  596,  596,  596,  596,  596,  596,  596,
      597,  597,  597,  597,  597,  597,  597, 1221, 1223,    0,
     1224, 1215,  597, 1216, 1218,    0,  595,  598,  598,  598,
      598,  598,  598,  598,  598,  599,  599,  599,  599,  599,
      599,  599, 1225, 1227,    0, 1221, 1223,  599, 1224,  600,
      597,  600,    0,  600,  600,  600,  600,  600,  600,  600,
      601,  601,  601,  601,  601,  601,  601, 1228,    0,    0,
     1225, 1227,  601,    0,    0,  599,  602,  602,  602,  602,
      602,  602,  602,  602,  603,  603,  603,  603,  603,  603,
      603, 1516,    0, 1516, 1229, 1228,  603,  604,    0,  604,

      601,  604,  604,  604,  604,  604,  604,  604,  605,  605,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      606,  606, 1229,    0,  603,  607,  607,  607,  607,  607,
      607,  607,  608,  608,  608,  608,  608,  608,  608,  609,
      609,  609,  609,  609,  609,  609,  610, 1520,  610, 1520,
      610,  610,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  611,  611,  612,  612,  612,  612,  612,  612,
      612,  613,  613,  613,  613,  613,  613,  613, 1230, 1233,
     1522, 1234, 1522,  613,  614,  614,  614,  614,  614,  614,
      614,  614,  615,  615,  615,  615,  615,  615,  615, 1236,

     1237, 1238, 1240, 1523,  615, 1523, 1230, 1233,  616, 1234,
      616,  613,  616,  616,  616,  616,  616,  616,  616,  617,
      617,  617,  617,  617,  617,  617, 1241, 1236, 1237, 1238,
     1240,  617,  615,  618,  618,  618,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  619,  619, 1243, 1244,
     1246,    0, 1247,  619, 1241, 1524,  620, 1524,  620,  617,
      620,  620,  620,  620,  620,  620,  620,  621,  621,  621,
      621,  621,  621,  621,    0, 1248, 1243, 1244, 1246,  621,
     1247,  619,  622,  622,  622,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  623,  623,  623, 1253, 1255,    0,

     1256, 1261,  623, 1248,  624,    0,  624,  621,  624,  624,
      624,  624,  624,  624,  624,  625,  625,  625,  625,  625,
      625,  625, 1262,    0,    0, 1253, 1255,  625, 1256, 1261,
      623,  626,  626,  626,  626,  626,  626,  626,  626,  627,
      627,  627,  627,  627,  627,  627, 1532,    0, 1532, 1263,
     1262,  627,  628,    0,  628,  625,  628,  628,  628,  628,
      628,  628,  628,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,  638,  638, 1263,    0,  627,
      639,  639,  639,  639,  639,  639,  639,  640,  640,  640,
      640,  640,  640,  640,  643,  643,  643,  643,  643,  643,

      643, 1271, 1275, 1538, 1276, 1538,  643,  644,  644,  644,
      644,  644,  644,  644,  644,  645,  645,  645,  645,  645,
      645,  645, 1277, 1278, 1279, 1280, 1282,  645,    0, 1271,
     1275,  646, 1276,  646,  643,  646,  646,  646,  646,  646,
      646,  646,  647,  647,  647,  647,  647,  647,  647,    0,
     1277, 1278, 1279, 1280, 1282,  645,  648,  648,  648,  648,
      648,  648,  648,  649,  649,  649,  649,  649,  649,  649,
      650,  650,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  651,  651,  652,  652,  652,  652,  652,  652,
      652,  653,  653,  653,  653,  653,  653,  653,  654,  654,

      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656, 1283,
     1284, 1540, 1290, 1540,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,
     1291, 1294, 1299, 1301, 1563,  658, 1563, 1283, 1284,  659,
     1290,  659,  656,  659,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660, 1302, 1291, 1294,
     1299, 1301,  660,  658,  661,  661,  661,  661,  661,  661,
      661,  661,  662,  662,  662,  662,  662,  662,  662, 1303,
     1304, 1305,    0, 1306,  662, 1302, 1576,  663, 1576,  663,

      660,  663,  663,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  664,  664,    0, 1307, 1303, 1304, 1305,
      664, 1306,  662,  665,  665,  665,  665,  665,  665,  665,
      665,  666,  666,  666,  666,  666,  666,  666, 1308, 1311,
        0, 1312, 1315,  666, 1307,  667,    0,  667,  664,  667,
      667,  667,  667,  667,  667,  667,  668,  668,  668,  668,
      668,  668,  668, 1316,    0,    0, 1308, 1311,  668, 1312,
     1315,  666,  669,  669,  669,  669,  669,  669,  669,  669,
      670,  670,  670,  670,  670,  670,  670, 1589,    0, 1589,
     1317, 1316,  670,  671,    0,  671,  668,  671,  671,  671,

      671,  671,  671,  671,  672,  672,  672,  672,  672,  672,
      672,  673,  673,  673,  673,  673,  673,  673, 1317,    0,
      670,  674,  674,  674,  674,  674,  674,  674, 1319, 1321,
     1591, 1322, 1591,  674,  675,  675,  675,  675,  675,  675,
      675,  675,  676,  676,  676,  676,  676,  676,  676, 1323,
     1326, 1327, 1328, 1596,  676, 1596, 1319, 1321,  677, 1322,
      677,  674,  677,  677,  677,  677,  677,  677,  677,  678,
      678,  678,  678,  678,  678,  678, 1340, 1323, 1326, 1327,
     1328,  678,  676,  679,  679,  679,  679,  679,  679,  679,
      679,  680,  680,  680,  680,  680,  680,  680, 1341, 1342,

     1352,    0, 1355,  680, 1340, 1599,  681, 1599,  681,  678,
      681,  681,  681,  681,  681,  681,  681,  682,  682,  682,
      682,  682,  682,  682,    0, 1364, 1341, 1342, 1352,  682,
     1355,  680,  683,  683,  683,  683,  683,  683,  683,  683,
      684,  684,  684,  684,  684,  684,  684, 1368, 1369,    0,
     1370, 1371,  684, 1364,  685,    0,  685,  682,  685,  685,
      685,  685,  685,  685,  685,  686,  686,  686,  686,  686,
      686,  686, 1372,    0,    0, 1368, 1369,  686, 1370, 1371,
      684,  687,  687,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688, 1374, 1605, 1375, 1605,

     1372,  688,  689,    0,  689,  686,  689,  689,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  690,  690,
     1318, 1376,    0, 1377, 1374,  690, 1375, 1318,    0,  688,
      691,  691,  691,  691,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  692,  692, 1381, 1382,    0, 1318, 1376,
      692, 1377,  693,  690,  693, 1318,  693,  693,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  694,  694,
     1383,    0,    0, 1381, 1382,  694,    0,    0,  692,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
      696,  696,  696,  696, 1384,    0, 1393, 1396, 1383,  696,

      697,    0,  697,  694,  697,  697,  697,  697,  697,  697,
      697,  698,  698,  698,  698,  698,  698,  698, 1397, 1398,
        0, 1399, 1384,  698, 1393, 1396,    0,  696,  699,  699,
      699,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700, 1401, 1402,    0, 1397, 1398,  700, 1399,
      701,  698,  701,    0,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702, 1403,    0,
        0, 1401, 1402,  702,    0,    0,  700,  703,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704, 1404,    0, 1405, 1406, 1403,  704,  705,    0,

      705,  702,  705,  705,  705,  705,  705,  705,  705,  706,
      706,  706,  706,  706,  706,  706, 1408, 1409,    0, 1410,
     1404,  706, 1405, 1406,    0,  704,  707,  707,  707,  707,
      707,  707,  707,  707,  708,  708,  708,  708,  708,  708,
      708, 1411, 1412,    0, 1408, 1409,  708, 1410,  709,  706,
      709,    0,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710, 1413,    0,    0, 1411,
     1412,  710,    0,    0,  708,  711,  711,  711,  711,  711,
      711,  711,  711,  712,  712,  712,  712,  712,  712,  712,
     1607,    0, 1607, 1417, 1413,  712,  713,    0,  713,  710,

      713,  713,  713,  713,  713,  713,  713,  714,  714,  714,
      714,  714,  714,  714,  715,  715,  715,  715,  715,  715,
      715, 1417,    0,  712,  716,  716,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  718,  718, 1418, 1419, 1611, 1420, 1611,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  720,
      720,  720,  720,  720,  720,  720, 1421, 1422, 1425, 1426,
     1628,  720, 1628, 1418, 1419,  721, 1420,  721,  718,  721,
      721,  721,  721,  721,  721,  721,  723,  723,  723,  723,
      723,  723,  723, 1427, 1421, 1422, 1425, 1426,  723,  720,

      724,  724,  724,  724,  724,  724,  724,  724,  725,  725,
      725,  725,  725,  725,  725, 1438, 1439, 1638, 1440, 1638,
      725, 1427, 1642,  726, 1642,  726,  723,  726,  726,  726,
      726,  726,  726,  726,  727,  727,  727,  727,  727,  727,
      727,    0,    0, 1438, 1439,  728, 1440,  728,  725,  728,
      728,  728,  728,  728,  728,  728,  729,  729,  729,  729,
      729,  729,  729,  730, 1648,  730, 1648,  730,  730,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  731,  731,
      731,  732, 1649,  732, 1649,  732,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  734,

     1654,  734, 1654,  734,  734,  734,  734,  734,  734,  734,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,  736,  737,  737,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  738,  738,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      740,  740,  741,  741,  741,  741,  741,  741,  741,  742,
      742,  742,  742,  742,  742,  742,  743,  743,  743,  743,
      743,  743,  743,  749,  749,  749,  749,  749,  749,  749,
      750,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  751,  752,  752,  752,  752,  752,  752,

      752, 1452, 1457, 1656, 1459, 1656,  752,  753,  753,  753,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      754,  754, 1462, 1463, 1466, 1467, 1468,  754,    0, 1452,
     1457,  755, 1459,  755,  752,  755,  755,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  756,  756,  756,    0,
     1462, 1463, 1466, 1467, 1468,  754,  757,  757,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  758,  758,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762,  765,  765,  765,  765,  765,  765,
      765,  773,  773,  773,  773,  773,  773,  773,  774,  774,

      774,  774,  774,  774,  774, 1469, 1470, 1662, 1474, 1662,
      774,  775,  775,  775,  775,  775,  775,  775,  775,  776,
      776,  776,  776,  776,  776,  776, 1475, 1481, 1663, 1483,
     1663,  776,    0, 1469, 1470,  777, 1474,  777,  774,  777,
      777,  777,  777,  777,  777,  777,  778,  778,  778,  778,
      778,  778,  778,    0, 1475, 1481,  779, 1483,  779,  776,
      779,  779,  779,  779,  779,  779,  779,  780,  780,  780,
      780,  780,  780,  780,  781, 1664,  781, 1664,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782,  783, 1667,  783, 1667,  783,  783,  783,  783,

      783,  783,  783,  784,  784,  784,  784,  784,  784,  784,
      785, 1670,  785, 1670,  785,  785,  785,  785,  785,  785,
      785,  786,  786,  786,  786,  786,  786,  786,  787, 1684,
      787, 1684,  787,  787,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  788,  788,  789, 1688,  789, 1688,
      789,  789,  789,  789,  789,  789,  789,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,    0,  791,  791,
      791,  791,  791,  791,  791,  792,  792,  792,  792,  792,
      792,  792,  793, 1692,  793, 1692,  793,  793,  793,  793,
      793,  793,  793,  794, 1695,  794, 1695,  794,  794,  794,

      794,  794,  794,  794,  795,  795,  795,  795,  795,  795,
      795,  796, 1698,  796, 1698,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  798,
     1700,  798, 1700,  798,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799,  804,  804,  804,
      804,  804,  804,  804,  886,  886,  886,  886,  886,  886,
      886,  887,  887,  887,  887,  887,  887,  887,  888,  888,
      888,  888,  888,  888,  888,  889,  889,  889,  889,  889,
      889,  889,  890,  890,  890,  890,  890,  890,  890,  891,
      891,  891,  891,  891,  891,  891,  892,  892,  892,  892,

      892,  892,  892,  893,  893,  893,  893,  893,  893,  893,
      894,  894,  894,  894,  894,  894,  894,  895,  895,  895,
      895,  895,  895,  895,  896,  896,  896,  896,  896,  896,
      896,  897,  897,  897,  897,  897,  897,  897,  898,  898,
      898,  898,  898,  898,  898,  899,  899,  899,  899,  899,
      899,  899,  900,  900,  900,  900,  900,  900,  900,  901,
      901,  901,  901,  901,  901,  901,  902,  902,  902,  902,
      902,  902,  902,  903,  903,  903,  903,  903,  903,  903,
      904,  904,  904,  904,  904,  904,  904,  905,  905,  905,
      905,  905,  905,  905,  906,  906,  906,  906,  906,  906,

      906,  907,  907,  907,  907,  907,  907,  907,  908,  908,
      908,  908,  908,  908,  908,  909,  909,  909,  909,  909,
      909,  909,  910,  910,  910,  910,  910,  910,  910,  911,
      911,  911,  911,  911,  911,  911,  912,  912,  912,  912,
      912,  912,  912,  913,  913,  913,  913,  913,  913,  913,
      914,  914,  914,  914,  914,  914,  914,  915,  915,  915,
      915,  915,  915,  915,  916,  916,  916,  916,  916,  916,
      916,  917,  917,  917,  917,  917,  917,  917,  918,  918,
      918,  918,  918,  918,  918,  919,  919,  919,  919,  919,
      919,  919,  920,  920,  920,  920,  920,  920,  920,  921,

      921,  921,  921,  921,  921,  921,  922,  922,  922,  922,
      922,  922,  922,  923,  923,  923,  923,  923,  923,  923,
      924,  924,  924,  924,  924,  924,  924,  925,  925,  925,
      925,  925,  925,  925,  926,  926,  926,  926,  926,  926,
      926,  927,  927,  927,  927,  927,  927,  927,  928,  928,
      928,  928,  928,  928,  928,  929,  929,  929,  929,  929,
      929,  929,  930,  930,  930,  930,  930,  930,  930,  931,
      931,  931,  931,  931,  931,  931,  932,  932,  932,  932,
      932,  932,  932,  933,  933,  933,  933,  933,  933,  933,
      934,  934,  934,  934,  934,  934,  934,  935,  935,  935,

      935,  935,  935,  935,  936,  936,  936,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  937,  938,  938,
      938,  938,  938,  938,  938,  939,  939,  939,  939,  939,
      939,  939,  940,  940,  940,  940,  940,  940,  940,  941,
      941,  941,  941,  941,  941,  941,  942,  942,  942,  942,
      942,  942,  942,  943,  943,  943,  943,  943,  943,  943,
      944,  944,  944,  944,  944,  944,  944,  945,  945,  945,
      945,  945,  945,  945,  946,  946,  946,  946,  946,  946,
      946,  947,  947,  947,  947,  947,  947,  947,  948,  948,
      948,  948,  948,  948,  948,  949,  949,  949,    0,  949,

      949,  949,  949,  949,  949,  949, 1019, 1703, 1019, 1703,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1093, 1155, 1093,    0, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1155, 1175, 1182,    0, 1180,
     1175, 1175, 1175, 1180, 1180, 1180, 1182, 1245,    0,    0,
     1190, 1242, 1190, 1155, 1242, 1242, 1705, 1245, 1705,    0,
     1484, 1190, 1242, 1155, 1175, 1182, 1190, 1180, 1175, 1175,
     1175, 1180, 1180, 1180, 1182, 1245, 1300, 1324, 1300, 1242,
        0,    0, 1242, 1242, 1313, 1245, 1313, 1320, 1484, 1320,
     1242,    0, 1300, 1324, 1190, 1325, 1486, 1325, 1320, 1329,

     1313, 1329, 1330, 1320, 1330, 1324, 1331, 1332, 1331, 1332,
     1334, 1325, 1334,    0, 1336, 1329, 1336, 1338, 1330, 1338,
        0, 1324, 1331, 1332, 1486, 1343, 1334, 1343,    0, 1487,
     1336, 1320, 1344, 1338, 1344, 1346, 1348, 1346, 1348,    0,
     1350, 1343, 1350, 1353, 1354, 1353, 1354, 1356, 1344, 1356,
        0, 1346, 1348, 1358,    0, 1358, 1350, 1487,    0, 1353,
     1354, 1488, 1360, 1356, 1360, 1362, 1365, 1362, 1365, 1358,
     1373, 1380, 1373, 1380, 1385, 1387, 1385, 1387, 1360,    0,
        0, 1362, 1365, 1389,    0, 1389, 1373, 1380, 1400, 1488,
     1385, 1387, 1391, 1394, 1391, 1394, 1400,    0, 1707, 1389,

     1707, 1414, 1415, 1414, 1415, 1423,    0, 1423, 1391, 1394,
     1428, 1430, 1428, 1430, 1373,    0, 1400, 1414, 1415, 1489,
     1432, 1423, 1432, 1441, 1400, 1441, 1428, 1430, 1447, 1448,
     1447, 1448, 1450, 1464, 1450, 1464, 1432, 1490, 1471, 1441,
     1471, 1473, 1491, 1473, 1447, 1448, 1492, 1489, 1450, 1464,
     1493, 1494, 1497, 1498, 1471, 1499, 1500, 1473, 1504, 1501,
     1505, 1501, 1506, 1507, 1508, 1490, 1509, 1511, 1512, 1513,
     1491, 1517, 1518, 1519, 1492, 1501, 1525, 1526, 1493, 1494,
     1497, 1498, 1527, 1499, 1500, 1528, 1504, 1521, 1505, 1521,
     1506, 1507, 1508, 1529, 1509, 1511, 1512, 1513, 1530, 1517,

     1518, 1519, 1531, 1521, 1525, 1526, 1533, 1534, 1535, 1536,
     1527, 1536, 1537, 1528, 1533, 1539, 1541, 1539, 1542, 1543,
     1545, 1529, 1544, 1547, 1544, 1536, 1530, 1546, 1547, 1546,
     1531, 1539, 1548, 1551, 1533, 1534, 1535, 1547, 1544, 1549,
     1537, 1549, 1533, 1546, 1541, 1552, 1542, 1543, 1545, 1554,
     1550, 1547, 1550, 1555, 1557, 1549, 1547, 1558, 1559, 1560,
     1548, 1551, 1553, 1561, 1553, 1547, 1550, 1557, 1562, 1564,
     1565, 1566, 1567, 1552, 1568, 1570,    0, 1554, 1553, 1571,
     1572, 1555, 1557, 1573, 1574, 1558, 1559, 1560, 1569, 1575,
     1569, 1561, 1577, 1578, 1580, 1557, 1562, 1564, 1565, 1566,

     1567,    0, 1568, 1570, 1569, 1581, 1583, 1571, 1572, 1584,
     1585, 1573, 1574, 1579, 1582, 1579, 1582, 1575, 1586, 1590,
     1577, 1578, 1580, 1587, 1588, 1587, 1588, 1592, 1593, 1579,
     1582, 1594, 1597, 1581, 1583, 1600, 1601, 1584, 1585, 1587,
     1588, 1595, 1598, 1595, 1598, 1602, 1586, 1590, 1602, 1603,
     1604, 1603, 1604, 1608, 1609, 1592, 1593, 1595, 1598, 1594,
     1597, 1612, 1614, 1600, 1601, 1603, 1604, 1606, 1610, 1606,
     1610, 1615, 1613, 1602, 1613, 1616, 1602, 1617, 1618, 1619,
     1620, 1608, 1609, 1606, 1610, 1621, 1622, 1623, 1613, 1612,
     1614, 1624, 1625, 1626, 1627, 1629, 1627, 1630, 1632, 1615,

     1631, 1633, 1631, 1616, 1635, 1617, 1618, 1619, 1620, 1639,
     1627, 1640,    0, 1621, 1622, 1623, 1631, 1651,    0, 1624,
     1625, 1626, 1634, 1629, 1634, 1630, 1632, 1652, 1637, 1633,
     1637, 1641, 1635, 1641, 1643, 1653, 1643, 1639, 1634, 1640,
     1644, 1645, 1644, 1645, 1637, 1651, 1646, 1641, 1646, 1647,
     1643, 1647, 1650, 1655, 1650, 1652, 1644, 1645, 1658, 1659,
     1660, 1665, 1646, 1653, 1661, 1647, 1661, 1666, 1650, 1668,
     1671, 1672, 1673, 1674, 1669, 1676, 1669, 1676, 1643, 1677,
     1661, 1655, 1678, 1680, 1681, 1682, 1658, 1659, 1660, 1665,
     1669, 1676, 1679, 1683, 1679, 1666, 1685, 1668, 1671, 1672,

     1673, 1674, 1686, 1687, 1689, 1687, 1690, 1677, 1679, 1693,
     1678, 1680, 1681, 1682, 1694, 1691, 1696, 1691, 1697, 1687,
     1699, 1683, 1699, 1701, 1685, 1702, 1708, 1702, 1708, 1711,
     1686, 1691, 1689, 1704, 1690, 1704, 1699, 1693, 1706, 1712,
     1706, 1702, 1694, 1709, 1696, 1709, 1697, 1713, 1710, 1704,
     1710, 1701, 1715, 1714, 1706, 1714, 1716, 1711, 1717, 1709,
     1718, 1719, 1720, 1719, 1721, 1724, 1722, 1712, 1722, 1714,
     1723, 1725, 1723, 1726, 1727, 1713, 1728, 1728, 1728, 1729,
     1715, 1729, 1722, 1730, 1716, 1730, 1717, 1731, 1718, 1732,
     1720, 1736, 1721, 1724, 1733, 1729, 1733, 1737, 1734, 1725,

     1734, 1726, 1727, 1738, 1728, 1728, 1728, 1735, 1739, 1735,
     1733, 1740, 1741, 1746, 1741, 1731, 1742, 1732, 1742, 1736,
     1747,    0, 1743, 1735, 1743, 1737, 1744, 1748, 1744, 1750,
        0, 1738, 1742, 1745,    0, 1745, 1739, 1757, 1743, 1740,
     1749, 1746, 1749, 1760, 1745, 1745, 1761,    0, 1747, 1745,
     1751, 1752, 1751, 1752, 1753, 1748, 1753, 1750, 1754, 1755,
     1754, 1755, 1756, 1762, 1756, 1757, 1743, 1758, 1759, 1758,
     1759, 1760, 1763, 1768, 1761, 1755, 1769, 1764, 1756, 1764,
     1766, 1770, 1766, 1758, 1767, 1771, 1767, 1772, 1777, 1772,
     1773, 1762, 1773, 1764, 1783, 1774, 1766, 1774, 1784, 1785,

     1763, 1768,    0, 1772, 1769, 1775, 1773, 1775, 1776, 1770,
     1776, 1774, 1778, 1771, 1778, 1779, 1777, 1779, 1780, 1781,
     1780, 1781, 1783, 1786, 1776, 1786, 1784, 1785, 1787,    0,
     1787, 1779, 1788,    0, 1788, 1781, 1789, 1795, 1789, 1786,
     1790, 1791, 1790, 1791, 1792, 1793, 1792, 1793, 1788, 1794,
     1796, 1794, 1797, 1798, 1803,    0, 1799, 1791, 1799, 1805,
     1792, 1793, 1800, 1807, 1800, 1795, 1808, 1801, 1790, 1801,
     1790, 1802, 1799, 1802, 1804, 1811, 1804, 1809, 1796, 1809,
     1797, 1798, 1803, 1801, 1810, 1813, 1810, 1805, 1812, 1814,
     1812, 1807, 1815, 1809, 1808, 1816, 1817, 1818, 1817, 1818,

     1819,    0, 1819, 1811, 1820, 1821, 1820, 1821, 1822, 1823,
     1822, 1823, 1817, 1813,    0,    0, 1819, 1814,    0,    0,
     1815, 1821, 1824, 1816, 1824, 1823, 1825, 1826, 1825, 1826,
     1827, 1828, 1827, 1828, 1829, 1829, 1829, 1830, 1831, 1830,
     1831, 1833, 1825, 1833, 1835, 1834, 1827, 1834, 1836, 1837,
     1838, 1837, 1838, 1830, 1831, 1839, 1840, 1839, 1840, 1841,
     1842, 1841, 1829, 1829, 1829, 1837, 1843, 1844, 1843, 1844,
     1845, 1839, 1835, 1846, 1849, 1846, 1836, 1847, 1848, 1847,
     1848, 1850, 1843, 1844, 1851, 1852, 1854, 1853, 1842, 1853,
     1855, 1856, 1855, 1858, 1848, 1859,    0, 1859, 1845, 1860,

        0, 1860, 1849, 1861,    0, 1861, 1855,    0, 1862, 1850,
     1862,    0, 1851, 1852, 1854, 1863, 1864, 1863, 1864, 1856,
     1865, 1858, 1865, 1866, 1867, 1866, 1867, 1868, 1869, 1868,
     1869, 1863, 1870, 1871, 1870, 1871, 1872, 1874, 1872, 1866,
     1867, 1875, 1873, 1868, 1869, 1873, 1876, 1878, 1876, 1871,
     1877, 1879, 1877, 1879, 1880, 1881, 1880, 1881, 1882, 1883,
     1882, 1884, 1885, 1884, 1885, 1874, 1886, 1879, 1886, 1875,
     1873, 1881, 1887, 1873, 1888, 1878, 1889, 1884, 1890, 1891,
     1893, 1891, 1886, 1892, 1894, 1892, 1895, 1883, 1896, 1894,
     1896, 1897, 1898, 1897, 1898, 1891, 1900, 1894, 1900, 1899,

     1887, 1899, 1888, 1901, 1889, 1901, 1890, 1897, 1893, 1902,
     1905, 1902, 1894, 1906, 1895, 1899, 1903, 1894, 1903, 1901,
     1904, 1907, 1904, 1908, 1909, 1894, 1910, 1911, 1910, 1911,
     1912, 1913, 1914, 1913, 1914, 1915, 1916, 1915, 1905, 1918,
     1917, 1906, 1917, 1919, 1920, 1922, 1920, 1923, 1914, 1907,
     1924, 1908, 1909, 1925, 1929, 1925, 1917, 1926, 1912, 1926,
     1927, 1928, 1927, 1928, 1916, 1930, 1932, 1918, 1931, 1925,
     1931, 1919, 1933, 1922, 1933, 1923, 1936, 1940, 1924, 1934,
     1941, 1934, 1929, 1935, 1931, 1935, 1942, 1937, 1933, 1937,
     1938, 1943, 1938, 1930, 1932, 1934, 1939, 1925, 1939, 1944,

     1945, 1948, 1945, 1937, 1936, 1940, 1949, 1946, 1941, 1946,
        0, 1951, 1939, 1951, 1942, 1950, 1945, 1950, 1957, 1943,
     1947, 1947, 1947, 1952, 1953, 1952, 1953, 1944, 1954, 1948,
     1954, 1950, 1961, 1962, 1949, 1955, 1956, 1955, 1956, 1952,
     1953, 1958, 1959, 1958, 1959, 1960, 1957, 1960, 1947, 1947,
     1947, 1955, 1963, 1964, 1965, 1966, 1970, 1966, 1959, 1971,
     1961, 1962, 1967, 1968, 1967, 1968, 1972, 1969, 1972, 1969,
     1973, 1974, 1973, 1974, 1975, 1976, 1975, 1976, 1967, 1968,
     1963, 1964, 1965, 1969, 1970, 1979, 1973, 1971, 1977, 1978,
     1977, 1978, 1980, 1981, 1982, 1983, 1984, 1985, 1984, 1985,

     1986, 1987, 1986, 1987, 1977, 1989, 1990, 1989, 1988, 1991,
     1988, 1995, 1984, 1979, 1996, 1992, 1986, 1992, 1998, 1999,
     1980, 1981, 1982, 1983, 1988, 1993, 1994, 1993, 1994, 2000,
     2001, 2000, 2001, 2002, 1990, 2002, 2003, 1991, 2004, 1995,
     2004, 1993, 1996, 2005, 2006, 2005, 1998, 1999, 2007, 2008,
     2009, 2010, 2011, 2012, 2004, 2012, 2013, 2014, 2013, 2015,
     2016, 2017, 2018, 2019, 2003, 2020, 2021, 2020, 2021, 2012,
     2025, 2026, 2006, 2028,    0, 2028, 2007, 2008, 2009, 2010,
     2011, 2022, 2021, 2022, 2023, 2014, 2023, 2015, 2016, 2017,
     2018, 2019, 2022, 2027, 2029, 2027, 2029, 2022, 2025, 2026,

     2023, 2030, 2031, 2030, 2031, 2032, 2033, 2032, 2033, 2027,
     2029, 2034, 2034, 2034, 2035,    0, 2035, 2030, 2036,    0,
     2036, 2032, 2037, 2039, 2037, 2039, 2038, 2040, 2038, 2040,
     2035, 2041,    0, 2041, 2036, 2042, 2043, 2042, 2043, 2034,
     2034, 2034, 2038, 2044, 2045, 2044, 2045, 2046, 2047, 2046,
     2047, 2042, 2043, 2048, 2049, 2048, 2049,    0,    0, 2044,
     2045, 2050,    0, 2050, 2047, 2051, 2052, 2051, 2052, 2053,
     2054, 2053, 2054, 2055, 2056, 2055, 2056, 2050, 2057, 2058,
     2057, 2058, 2052, 2059,    0, 2059, 2054, 2060,    0, 2060,
     2062, 2062, 2062, 2062, 2062, 2063, 2063, 2063, 2063, 2063,

     2064, 2064, 2064, 2064, 2064, 2065, 2065, 2065, 2065, 2065,
     2066, 2066, 2066, 2066, 2066, 2067, 2067, 2067, 2067, 2067,
     2068, 2068, 2068, 2068, 2068, 2069, 2069, 2069, 2069, 2069,
     2070, 2070, 2070, 2070, 2070, 2071, 2071, 2071, 2071, 2071,
     2072, 2072, 2072, 2072, 2072, 2073, 2073, 2073, 2073, 2073,
     2074, 2074, 2074, 2074, 2074, 2075, 2075, 2075, 2075, 2075,
     2076, 2076, 2076, 2076, 2076, 2077, 2077, 2077, 2077, 2077,
     2078, 2078, 2078, 2078, 2078, 2079, 2079, 2079, 2079, 2079,
     2080, 2080, 2080, 2080, 2080, 2081, 2081, 2081, 2081, 2081,
     2082, 2082, 2082, 2082, 2082, 2083, 2083, 2083, 2083, 2083,

     2084, 2084, 2084, 2084, 2084, 2085, 2085, 2085, 2085, 2085,
     2086, 2086, 2086, 2086, 2086, 2087, 2087, 2087, 2087, 2087,
     2088, 2088, 2088, 2088, 2088, 2089, 2089, 2089, 2089, 2089,
     2090, 2090, 2090, 2090, 2090, 2091, 2091, 2091, 2091, 2091,
     2092, 2092, 2092, 2092, 2092, 2093, 2093, 2093, 2093, 2093,
     2094, 2094, 2094, 2094, 2094, 2095, 2095, 2095, 2095, 2095,
     2096, 2096, 2096, 2096, 2096, 2097, 2097, 2098, 2098, 2099,
     2099, 2100, 2100, 2101, 2101, 2102, 2102, 2103, 2103, 2104,
     2104, 2106, 2106, 2107, 2107, 2108, 2108, 2109, 2109, 2110,
     2110, 2111, 2111, 2112, 2112, 2114, 2114, 2129, 2129,    0,

     2129, 2129, 2130,    0,    0, 2130, 2130, 2131, 2131, 2132,
     2132, 2133, 2133, 2134, 2134, 2135, 2135, 2136, 2136, 2137,
     2137, 2138, 2138, 2140, 2140, 2141, 2141, 2142, 2142, 2143,
     2143, 2144, 2144, 2145, 2145, 2146, 2146, 2148, 2148, 2163,
     2163,    0, 2163, 2163, 2164,    0,    0, 2164, 2164, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 22 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "cvc_utils.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}




































































































































#line 3666 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define SOURCEID 16
#define SOURCEID2 17
#define GAUGEID 18
#define GAUGEID2 19
#define GAUGESTEP 20
#define NNSAVE 21
#define FFORMAT 22
#define BCT 23
#define BCX 24
#define BCY 25
#define BCZ 26
#define PREFIX 27
#define PREFIX2 28
#define PREFIX3 29
#define SEQPREFIX 30
#define SEQPREFIX2 31
#define GAUGEPREFIX 32
#define OUTPREFIX 33
#define PATHPREFIX 34
#define RESUME 35
#define SUBTRACT 36
#define SOURCELOC 37
#define SSEED 38
#define NOISETYPE 39
#define SRCTYPE 40
#define SPREC 41
#define MAXITER 42
#define SOURCEIDSTEP 43
#define HPEMIN 44
#define HPEMAX 45
#define HPEORD 46
#define CUTDIRT 47
#define CUTDIRX 48
#define CUTDIRY 49
#define CUTDIRZ 50
#define CUTANG 51
#define CUTRAD 52
#define RMIN 53
#define RMAX 54
#define AVGTT 55
#define AVGLL 56
#define MODEL_DCOEFFRE 57
#define MODEL_DCOEFFIM 58
#define MODEL_MRHO 59
#define FTRMAX1 60
#define FTRMAX2 61
#define FTRMAX3 62
#define FTRMAX4 63
#define PROPNORMSQR 64
#define QHATSQRMIN 65
#define QHATSQRMAX 66
#define NLONG 67
#define NAPE 68
#define NJACOBI 69
#define NHYP 70
#define ALPHAAPE 71
#define ALPHAHYP 72
#define KAPPAJACOBI 73
#define SRCTIMESLICE 74
#define SEQSRCTIMESLICE 75
#define SEQSRCLOCATIONX 76
#define SEQSRCLOCATIONY 77
#define SEQSRCLOCATIONZ 78
#define SEQSRCGAMMAID 79
#define MMSNOMASSES 80
#define NOLIGHTMASSES 81
#define NOSTRANGEMASSES 82
#define NOTPROCS 83
#define NOXPROCS 84
#define NOYPROCS 85
#define NOZPROCS 86
#define LOCLOC 87
#define LOCSME 88
#define SMELOC 89
#define SMESME 90
#define ROTATE 91
#define PROPPOS 92
#define GPUDEVICENUMBER 93
#define GPUPERNODE 94
#define RELDELTA 95
#define COHSRC 96
#define COHSRCBASE 97
#define COHSRCDELTA 98
#define GAUGEFILEFORMAT 99
#define RNGFILE 100
#define SRCINDEX 101
#define PROPBCTYPE 102
#define PROPGAMMA 103
#define PROPPREC 104
#define WRITESRC 105
#define READSRC 106
#define WRITEPROP 107
#define READPROP 108
#define READSEQPROP 109
#define WRITESEQSRC 110
#define WRITESEQPROP 111
#define NSAMPLE 112
#define ASOVERA 113
#define NUMTHREADS 114
#define SRCMOMX 115
#define SRCMOMY 116
#define SRCMOMZ 117
#define SNKMOMX 118
#define SNKMOMY 119
#define SNKMOMZ 120
#define SEQSRCMOM 121
#define SEQSRCMOMX 122
#define SEQSRCMOMY 123
#define SEQSRCMOMZ 124
#define CPUPREC 125
#define GPUPREC 126
#define GPUPRECSLOPPY 127
#define INVERTERTYPE 128
#define MMSID 129
#define CHKINVERSION 130
#define COMMENT 131
#define ERROR 132

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 188 "/opt/cvc_libwrapper/read_input_parser_cvc.l"

#line 4017 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2062 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2061 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 189 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 190 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 191 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 192 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 193 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 194 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 195 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 196 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 197 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 198 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 199 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 200 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 201 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 202 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 203 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 204 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 205 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 206 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 207 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 208 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 209 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 210 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 211 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 212 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 213 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 217 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 218 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 219 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 220 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 221 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 222 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 223 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 225 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 226 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 227 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 228 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 229 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 230 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 231 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 232 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 233 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 234 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 235 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 236 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 237 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 238 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 239 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 240 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 241 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 242 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 243 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 244 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 245 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 246 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 247 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 248 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 249 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 250 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 251 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 252 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 253 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 254 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 255 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 256 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 257 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 258 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 259 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 260 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 261 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 262 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 263 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 265 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 266 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 267 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 268 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 284 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 285 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 286 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 287 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 288 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 295 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 296 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 298 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 299 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 301 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 302 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 303 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 305 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 306 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 307 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 308 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 309 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 310 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 311 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 312 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 313 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 314 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 315 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 316 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 317 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 318 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 319 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 320 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 321 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 322 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 323 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
/* start namespace inclusion here */
case 131:
YY_RULE_SETUP
#line 328 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 332 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 336 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 340 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 344 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 348 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 352 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 356 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 360 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 364 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 368 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 372 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 376 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 380 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 384 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 388 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 392 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 396 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 400 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 404 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 408 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 412 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 416 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 420 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 424 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 428 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 432 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 436 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 440 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 445 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 450 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 455 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 459 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 463 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 467 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 471 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 475 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 479 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 483 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 487 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 495 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 513 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 517 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 521 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 525 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 529 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 533 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 537 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 541 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 545 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 549 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 553 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 557 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 561 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 565 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 569 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 573 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 577 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 581 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 585 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 589 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 593 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 597 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 601 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 605 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 609 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 613 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 617 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 621 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 625 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 629 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 633 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 637 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 642 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 646 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 650 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 659 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 663 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 667 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 672 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 678 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 682 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 686 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 690 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 694 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 698 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 702 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 707 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 713 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 719 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 725 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 731 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 737 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 742 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 746 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 751 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 756 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 761 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 765 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 773 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 778 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 783 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 787 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 797 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 805 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 813 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 821 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 829 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 838 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 847 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 856 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 864 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 868 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 872 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 876 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 880 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 885 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 890 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 895 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 900 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 905 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 910 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 915 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 920 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 926 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 933 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 943 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 953 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 963 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 967 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 971 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 980 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 984 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 988 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 992 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 997 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 1000 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 268:
YY_RULE_SETUP
#line 1007 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 5934 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2062 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2062 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2061);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1006 "/opt/cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

