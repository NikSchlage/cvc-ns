
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 292
#define YY_END_OF_BUFFER 293
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2316] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  288,  288,  291,  291,
      293,  290,  290,  289,  287,  286,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  143,  146,  147,  148,
      144,  145,  158,  290,  149,  290,  290,  150,  290,  290,
      152,  290,  290,  153,  290,  290,  154,  290,  290,  151,
      290,  290,  155,  290,  290,  156,  290,  163,  164,  166,
      167,  168,  290,  157,  180,  290,  159,  290,  290,  160,
      290,  290,  161,  290,  290,  162,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  177,  178,  179,  181,  182,
      290,  290,  184,  290,  186,  165,  187,  188,  189,  192,
      193,  194,  195,  290,  190,  290,  290,  191,  290,  290,

      196,  290,  290,  197,  290,  198,  199,  290,  200,  290,
      290,  201,  290,  290,  202,  290,  290,  203,  290,  290,
      204,  290,  290,  205,  290,  290,  206,  290,  290,  207,
      290,  290,  208,  290,  290,  209,  290,  210,  211,  213,
      212,  290,  214,  290,  290,  290,  216,  290,  217,  290,
      218,  290,  219,  290,  220,  290,  221,  222,  223,  224,
      225,  226,  227,  228,  229,  290,  290,  290,  290,  290,
      235,  236,  237,  290,  185,  290,  238,  239,  240,  241,
      290,  290,  243,  245,  253,  254,  246,  247,  248,  249,
      250,  251,  252,  255,  290,  256,  290,  257,  290,  258,

      290,  259,  290,  260,  290,  261,  290,  262,  290,  263,
      290,  290,  290,  264,  290,  265,  290,  266,  268,  269,
      270,  271,  272,  273,  274,  275,  276,  277,  278,  290,
      290,  281,  282,  283,  290,  290,  288,  288,  287,  286,
      290,  290,  287,  286,    0,  287,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        1,    0,  143,  146,  147,  148,  144,  145,  158,  149,
        0,  149,    0,  150,    0,  150,    0,  152,    0,  152,
        0,  153,    0,  153,    0,  154,    0,  154,    0,  151,
        0,  151,    0,  155,    0,  155,    0,  156,    0,  156,
        0,  163,  164,  166,  167,  168,  157,    0,  180,  159,
        0,  159,    0,  160,    0,  160,    0,  161,    0,  161,
        0,  162,    0,  162,    0,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  181,  182,  183,  184,
        0,  184,    0,  186,  165,  187,  188,  189,  192,  193,
      194,  195,  190,    0,  190,    0,  191,    0,  191,    0,

      196,    0,  196,    0,  197,    0,  197,    0,  198,  199,
      200,    0,  200,    0,  201,    0,  201,    0,  202,    0,
      202,    0,  203,    0,  203,    0,  204,    0,  204,    0,
      205,    0,  205,    0,  206,    0,  206,    0,  207,    0,
      207,    0,  208,    0,  208,    0,  209,    0,  209,    0,
      210,  211,  213,  212,  214,    0,  214,    0,  215,  216,
        0,  216,    0,  217,  218,    0,  219,    0,  220,    0,
      221,    0,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  236,  237,  185,    0,
      185,    0,  238,  239,  240,  241,  242,  244,  243,  245,

      253,  254,  246,  247,  248,  249,  250,  251,  252,  255,
      256,    0,  256,    0,  257,  258,    0,  259,    0,  260,
        0,  261,    0,  262,    0,  263,    0,    0,    0,    0,
      264,    0,  265,    0,  266,    0,  268,  269,  270,  271,
      272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
      282,  283,  284,  285,  288,  288,  287,  291,  291,  287,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        2,    0,    0,    0,    4,    0,    5,    0,    6,    0,
       12,    0,   11,    0,    0,    0,    7,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,    0,  149,    0,  150,    0,
      152,    0,  153,    0,  154,    0,  151,    0,  155,    0,
      156,    0,  159,    0,  160,    0,  161,    0,  162,    0,
      184,    0,  190,    0,  191,    0,  196,    0,  197,    0,
      200,    0,  201,    0,  202,    0,  203,    0,  204,    0,
      205,    0,  206,    0,  207,    0,  208,    0,  209,    0,
      214,    0,  216,    0,  185,    0,  256,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
        0,    4,    5,    6,   12,   11,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,   56,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   55,    0,   54,
        0,    0,    0,    0,   38,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  267,    0,    0,   57,   56,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,   60,    0,   10,    0,    0,
        0,   14,    0,    0,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,    0,    0,   69,    0,   72,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       55,   54,    0,    0,    0,   38,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   13,    0,    0,   22,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
       10,    0,    0,   14,    0,   68,    0,    0,    0,    0,
        0,    0,    0,    0,   21,    0,   69,   72,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,   22,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        9,    0,    8,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,    0,   24,    0,

       25,    0,   26,    0,    0,    0,    0,    0,   50,    0,
       51,    0,   52,    0,   53,    0,    0,    0,    0,    0,
       61,    0,   62,    0,   63,    0,   64,    0,    0,   19,
       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,    8,    0,
        0,    0,    0,    0,    0,   84,    0,   85,    0,   86,
        0,   87,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  112,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,   71,    0,

       73,    0,  113,   23,   24,   25,   26,    0,    0,    0,
        0,   48,   50,   51,   52,   53,    0,    0,   59,    0,
       58,    0,   61,   62,   63,   64,    0,   19,    0,    0,
        0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   43,    0,    0,
        0,    0,   84,   85,   86,   87,    0,   70,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,   16,    0,
        0,    0,    0,    0,    0,   36,    0,    0,    0,   71,
       73,  113,    0,    0,    0,   48,    0,   49,   59,   58,

        0,    0,    0,    0,    0,    0,    0,   47,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
        0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
        0,   39,    0,    0,    0,    0,  114,    0,    0,   34,
        0,    0,    0,    0,    0,   67,    0,   66,    0,    0,

        0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
        0,    0,   95,    0,    0,    0,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
        0,    0,    0,  114,    0,   34,    0,    0,    0,    0,
        0,   65,   67,   66,    0,    0,  106,    0,    0,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   40,    0,    0,    0,  105,    0,    0,
        0,  125,    0,    0,   20,    0,    0,   95,    0,  126,

        0,    0,   46,    0,   45,    0,  128,   74,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
        0,  100,    0,    0,    0,    0,    0,    0,   90,    0,
        0,    0,   44,    0,    0,    0,    0,    0,    0,  105,
        0,    0,  125,    0,    0,    0,    0,  126,    0,   46,
       45,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   89,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,   90,    0,    0,   44,    0,  101,    0,    0,

        0,    0,    0,    0,  130,    0,   96,    0,    0,    0,
        0,   27,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,    0,   82,    0,
       33,    0,    0,    0,    0,    0,  108,    0,   42,    0,
        0,    0,    0,    0,  118,    0,  119,    0,  120,    0,
       91,    0,  101,    0,   37,    0,    0,    0,    0,  130,
       96,    0,    0,    0,   28,    0,   29,   27,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   81,   82,    0,    0,    0,    0,    0,  108,    0,
        0,    0,    0,    0,  118,  119,  120,   91,    0,   41,

       37,    0,    0,    0,    0,   75,    0,  107,    0,    0,
        0,   28,   29,    0,    0,   99,    0,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,   92,    0,    0,    0,
       41,    0,  115,    0,  116,    0,  117,   75,  107,    0,
        0,    0,    0,    0,   99,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   83,    0,
      102,    0,    0,    0,    0,   92,    0,    0,    0,    0,
        0,  115,  116,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  102,    0,    0,   93,    0,    0,    0,    0,
        0,    0,    0,  124,    0,    0,    0,    0,   97,    0,
        0,   32,    0,  127,    0,    0,    0,    0,  133,    0,
        0,    0,    0,    0,  132,    0,    0,  131,    0,    0,
       93,    0,  104,    0,    0,    0,    0,    0,  124,    0,
        0,    0,    0,    0,   97,    0,   98,   32,  127,    0,
        0,    0,  133,    0,  140,    0,    0,    0,  132,    0,
      139,  131,    0,  138,    0,  104,    0,    0,    0,    0,
        0,    0,  121,    0,  122,    0,  123,    0,    0,   98,
        0,    0,    0,  140,    0,    0,    0,  139,  138,    0,

      103,    0,    0,    0,    0,    0,  121,  122,  123,    0,
        0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
        0,    0,    0,    0,    0,  110,    0,    0,  134,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
        0,  134,    0,    0,    0,    0,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  135,    0,  109,
        0,    0,   30,    0,   80,    0,    0,    0,    0,    0,
        0,    0,  109,    0,   31,   30,   80,    0,    0,    0,
        0,   76,    0,  111,    0,    0,    0,    0,   31,    0,
       77,    0,   78,    0,   79,   76,  111,    0,  137,    0,

      136,    0,    0,   77,   78,   79,  137,  136,    0,  142,
        0,  141,  142,  141,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    9,   10,    5,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,    1,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   45,   45,   45,   46,   45,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[2440] =
    {   0,
        0,    6,   77,   93,  109,  125,  141,  157,  173,  189,
      205,  221,  237,  253,  269,  285,  301,  317,  333,  349,
      365,  381,  397,  413,  429,  445,  461,  477,  493,  509,
      525,  541,  557,  573,  589,  605,  621,  637,  653,  669,
      685,  701,  717,  733,  749,  765,  781,  797,  813,  829,
      845,  861,  877,  893,  910,  923,  936,  955,  968,  981,
     1000, 1013, 1026, 1045, 1058, 1071, 1090, 1103, 1116, 1135,
     1179, 1195, 1211, 1227, 1243, 1259, 1275, 1291, 1308, 1353,
     1321, 1334, 1397, 1413, 1429, 1445, 1461, 1477, 1493, 1509,
     1525, 1541, 1557, 1573, 1589, 1605, 1621, 1637, 1653, 1669,

     1685, 1701, 1717, 1733, 1749, 1765, 1781, 1797, 1813, 1829,
     1845, 1861, 1877, 1893, 1909, 1925, 1941, 1957, 1973, 1989,
     2005, 2021, 2037, 2053, 2069, 2085, 2101, 2117, 2133, 2149,
     2165, 2181, 2197, 2213, 2229, 2245, 2261, 2277, 2293, 2309,
     2325, 2341, 2357, 2373, 2390, 2403, 2447, 2463, 2479, 2495,
     2511, 2527, 2543, 2559, 2575, 2591, 2607, 2623, 2639, 2655,
     2671, 2687, 2703, 2719, 2735, 2751, 2767, 2783, 2799, 2815,
     2831, 2847, 2863, 2879, 2423, 2896, 2909, 2922, 2941, 2954,
     2967, 2986, 2999, 3012, 3056, 3072, 3088, 3104, 3120, 3136,
     3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264, 3281, 3326,

     3032, 3294, 3370, 3386, 3403, 3448, 3493, 3538, 3582, 3598,
     3615, 3660, 3705, 3750, 3795, 3840, 3885, 3930, 3975, 4020,
     4065, 4110, 4155, 4200, 4244, 4260, 4276, 4292, 4308, 4324,
     4340, 4356, 4372, 4388, 4404, 4420, 4436, 4452, 4468, 4484,
     4500, 4516, 4532, 4548, 4564, 4580, 4596, 4612, 4628, 4644,
     4661, 4706, 4751, 4796, 4841, 4886, 4931, 4976, 5020, 5036,
     5053, 5098, 5143, 5188, 5233, 5278, 5323, 5368, 5412, 5428,
     5444, 5460, 3307, 3416, 3429, 3461, 5476, 5492, 5508, 5524,
     5540, 5556, 3474, 3506, 3519, 3628,  944,  989, 1034, 1079,
     1402,11298,   80,11298,11298,11298, 1110,   81, 3618,   97,

      100, 1118,  932,  116,  134,  163, 5572, 3660, 5624,  159,
     1110,  188, 3530, 5673,   83,  194, 1333, 1361, 1369, 1376,
     2402, 2921, 2966, 3012, 3342, 3307, 3429, 3554, 3474, 3519,
     3718, 3732, 3760, 3767, 3809, 3817, 3848, 3862, 3894, 3901,
     3943, 3951, 3983, 3997, 4029, 4036, 4078, 3334, 3750, 3795,
     3840, 3930, 3975, 4089, 4065, 4119, 4126, 4168, 4176, 4200,
     4214, 4222, 4669, 4683, 4715, 4722, 4764,    0,    0,    0,
        0,    0,    0,    0,    0, 4110, 4155, 4661, 4751,    0,
        0, 4772, 4804, 4818, 4796, 4849, 4856, 4863, 4886, 4894,
     4901, 4908, 4931, 4940, 4947, 4989, 4997, 5061, 5075, 5107,

     5114, 5156, 5164, 5196, 5210, 4976, 5053, 5242, 5249, 5291,
     5299, 5331, 5345, 5377, 5384, 5567, 5582, 5595, 5610, 5624,
     5702, 5731, 5744, 5751, 5765, 5773, 5780, 5794, 5802, 5809,
     5823, 5831, 5838, 5852, 5860, 5867, 5881, 5143, 5188, 5278,
     5323, 5889, 5896, 5910,    0, 5918, 5925, 5939, 5946, 5953,
     5966, 5973, 5984, 5991, 6002, 6009, 6020, 6027, 6034, 6041,
     6048, 6055, 6062, 6069, 6076,    0,    0,    0,    0,    0,
     6083, 6090, 6097, 6105, 6112, 6126, 6133, 6140, 6153,    0,
        0, 6160, 6167,    0,    0, 6174,    0,    0,    0,    0,
        0,    0,    0, 6181, 6189, 6196, 6210, 6217, 6224, 6237,

     6244, 6255, 6262, 6273, 6280, 6291, 6298, 6309, 6316, 6327,
     6334, 6345, 6352, 6363, 6370, 6381, 6388, 6399,    0,    0,
        0,    0, 6406,    0,    0,    0,    0, 6413, 6420,    0,
        0, 6427, 6434, 6441,    0,    0,    0,  272,    0,    0,
        0,  288,    0,    0,  560,11298,  548, 1348,  573,  595,
      607,  620,  623,  640,  661,  673,  728,  738, 1324,  882,
      913,  973,  957,  977,   96,  115,  147, 1007, 1021,  163,
      195,  227,  242,  259, 1019, 1060, 6457, 1054, 1062, 1069,
     1131, 3611, 1107, 1096, 5630, 1093, 1094, 1139, 1157, 5629,
     3670, 1163, 1182, 1205, 3030, 1220, 1245, 3520, 1347,  291,

      563, 1341, 6451, 6469, 6476, 6484, 6497, 6504, 6512, 6519,
     6533, 6540, 6560, 6567, 6582, 6589, 6608, 6615, 6631, 6638,
     6656, 6663, 6680, 6687, 6704, 6711, 6729, 6736, 6754, 6761,
     6778, 6785, 6802, 6809, 6827, 6834, 6852, 6859, 6876, 6883,
     6900, 6907, 6914, 6924, 6931, 6938, 6949, 6956, 6963, 6970,
     6984, 6991, 7011, 7018, 7033, 7040, 7059, 7066, 7082, 7089,
     7107, 7114, 7131, 7138, 7155,    0,    0,    0,    0,    0,
        0,    0,    0, 7162, 7169, 7179, 7186,    0,    0, 7193,
     7207, 7214, 7234, 7241, 7255, 7262, 7269, 7276, 7283, 7290,
     7297, 7304, 7311, 7325, 7332, 7352, 7359, 7374, 7381, 7400,

     7407, 7423, 7430, 7448, 7455, 7472, 7479, 7496, 7503, 7510,
     7520, 7534, 7541, 7561, 7568, 7583, 7590, 7609, 7616, 7632,
     7639, 7657, 7664, 7681, 7688, 7705, 7712, 7730, 7737, 7755,
     7762, 7779, 7786, 7803, 7810, 7828, 7835, 7853, 7860, 7877,
     7884, 7901, 7908, 7926, 7933, 7951, 7958, 7975, 7982, 7999,
     8006, 8013, 8023, 8030, 8037, 8051, 8058, 8078,    0, 8085,
     8100, 8107, 8126, 8133, 8148, 8155, 8166, 8173, 8184, 8191,
     8202, 8209, 8216, 8223, 8230, 8237, 8244, 8251, 8258, 8265,
        0,    0,    0,    0,    0, 8272, 8279, 8286, 8293, 8307,
     8314, 8334, 8341, 8355, 8362,    0,    0, 8369, 8376,    0,

        0, 8383,    0,    0,    0,    0,    0,    0,    0, 8390,
     8397, 8411, 8418, 8438, 8445, 8459, 8466, 8477, 8484, 8495,
     8502, 8513, 8520, 8531, 8538, 8549, 8556, 8567, 8574, 8585,
     8596, 8603, 8614, 8621, 8632, 8639,    0,    0,    0,    0,
     8646,    0,    0,    0,    0, 8653, 8660,    0,    0, 8667,
     8674, 8681,    0,    0,    0, 1160,    0,    0, 1161,    0,
     1343, 1405, 3660, 1422, 1449, 1463, 1319, 1318, 1479, 1498,
     1511, 1519, 1530, 1557, 1305, 1274, 1575, 1580,  576,  579,
      595, 1604, 1627,  611,  643,  659,  691,  707,  739,  752,
      755,  771,  918, 1255, 1629, 1185,  931, 1659, 1671, 1683,

     1822, 1847, 1854, 1865, 5632, 2204, 2220, 2236, 2252, 2262,
     1223, 2284, 2291, 2331, 2371, 2374, 2409, 2450, 2482, 2621,
     2625, 2638, 2664, 1220, 2693, 2694, 2722, 3015, 2731, 2757,
     2752, 2772, 2786,  932, 2802, 8688, 8695, 8702, 8709, 8716,
     8723, 8730, 8737, 8744, 8751, 8758, 8765, 8772, 8779, 8786,
     8793, 8800, 8807, 8814, 8821, 8828, 8835, 8842, 8849, 8856,
     8863, 8870, 8877, 8884, 8891, 8898, 8905, 8912, 8919, 8926,
     8933, 8940, 8947, 8954, 8961, 8968, 8975, 8982, 8989, 8996,
     9003, 9010, 9017, 9024, 9031, 9038, 9045, 9052, 9059, 9066,
     9073, 9080, 9087, 9094, 9101, 9108, 9115, 9122, 9133, 2837,

     2833, 1217, 1249, 2984, 3022, 3016, 3063, 5631, 3089, 3110,
     3113, 3174, 3178, 3202, 3625, 3208, 3302, 3321,  963, 3304,
     3312, 1008, 1053, 1167, 1230, 1280, 3336, 1281, 1296, 3516,
     3524, 3550, 3555, 3592, 3633, 3651, 3646, 3665, 3655, 3658,
     3664, 3750, 3751, 3765, 3751, 3815, 3805, 3847, 3842, 1204,
     3879, 3863, 1191, 3882, 3890, 1432, 1435, 3898, 3885, 3943,
     1467, 3951, 3966, 1172, 3968, 3982, 4014, 4000, 4033, 9144,
     1159, 4034, 1499, 1317, 1531, 1329, 4028, 1156, 4123, 4111,
     4116, 4167, 4202, 4216, 4205, 4223, 4215, 4298, 4694, 4310,
     5385, 4653, 4653, 4835, 1124, 1106, 4700, 1563, 1330, 1595,

     4704, 4712, 1627, 1103, 1659, 1087, 4706, 4769, 4759, 4791,
     4793, 4823, 4824, 1691, 4941, 1848, 1851, 4935, 4939, 4981,
     4991, 4985, 4983, 5076, 5061, 5060, 1883, 2232, 2235, 2248,
     5087, 5111, 5112, 2267, 2299, 5104, 5153, 5156, 5193, 5181,
     5195, 5229, 1067, 9151, 9162, 5679, 5213, 2315, 2331, 5246,
     5243, 5239, 5298, 5297, 5315, 5330, 1055, 2347, 5322, 2418,
     5341, 5357, 5383, 5385, 5370, 5417, 5446, 5463, 5478, 2482,
     2399, 5489, 5566, 5671, 2485, 2435, 2517, 2436, 5514, 5528,
     2549, 2440, 5554, 2581, 2443, 5563, 5611, 5626, 5646, 5650,
     5653, 5682, 5686, 2613, 2642, 5673, 2645, 2658, 2677, 2709,

     5690, 5688, 5685, 5703, 5690, 5734, 5735, 9147, 5742, 2725,
     2757, 2773, 5743, 1049, 5791, 2789, 5791, 5791, 5826, 5864,
     1042, 6513, 5867, 5909, 5883, 5901, 1022, 9143, 6098, 6093,
     6111, 6103, 9146, 6107, 9155, 2805, 2837, 6191, 2853, 2868,
     2874, 6185, 9193, 6190, 6447, 1004, 6455, 6455, 6501, 2904,
     6519, 9165, 6535, 6541, 6527, 6558, 6574, 6577, 3045, 2905,
     2917, 3094, 3126, 2918, 6590, 2949, 6568, 6615, 6618, 6625,
     6622, 6623, 6644, 6668, 2962, 6684, 2994, 3041, 6681,  997,
     6706, 6692, 6696,  977, 6721, 6720, 6740, 6780, 3187, 3044,
     6782, 6783, 3190, 6800, 6792, 6799,  959, 6818, 6831, 9169,

     6839, 6868, 9170, 6965, 6955, 6972, 3222, 3253, 3254, 3360,
     6969,  952, 6983, 6988, 3556, 4311, 4314, 4346, 6973, 7005,
     7035, 3062,  932, 3107, 4378, 4410, 4442, 4474, 7036, 4506,
     4538, 3290, 7023, 7032, 7064, 7075, 7081, 7074,  914, 7090,
     7107, 7136, 7175, 7180, 7187, 7201, 7212, 7211, 3302, 4570,
     3303, 4602, 3373, 7193, 7202,  907,  877, 7304, 4634, 4686,
     5023, 5078, 7311, 5402, 7298, 7326, 7318, 7321, 7322, 7343,
     7360, 7364,  869, 3392, 7369, 7365, 5450, 3412, 7407, 7427,
     7426, 7700, 7415, 9228, 7420, 7440, 7467, 9195, 5482, 7505,
     7504, 7502, 5514, 5546, 9238, 9241, 3424, 9245, 3425, 9249,

     3469, 9250, 3514, 7536, 7523, 7524, 9253, 9258, 3553, 9268,
     3604, 9271, 3636, 9275, 3637, 7525, 9276, 9279, 7552, 9280,
     3641, 9283, 3646, 9286, 3699, 9298, 3734, 7576, 9301, 3735,
     3789, 7571, 7587, 7589, 7602, 7620, 9304, 7620, 7627, 7638,
     7661, 7687, 7686, 7699, 7710, 7736, 7737, 3790, 3833, 9305,
     7757, 7773, 7775, 7784, 9308, 3878, 9309, 3879, 9313, 3967,
     9316, 3968, 7806, 9326, 4013, 7793, 7804, 7817, 7817, 9302,
     7859, 7879, 7883, 7883, 7907, 7896, 4014, 7899, 7928, 7920,
     7943, 7972, 8032, 9333, 9334, 4058, 8019, 8036, 8055, 8046,
     8047, 8045, 9337, 4095, 8069, 8086, 8090, 9338, 4105, 9341,

     4148, 9344, 4149, 4193, 4194, 4250, 4263, 8092, 8278, 8285,
     9356, 4699, 4788, 4789, 4834, 4924, 9359, 9362, 4925, 9363,
     4969, 8278, 4970, 5026, 5091, 5180, 8313, 5181, 8310,  855,
      852, 8312, 8308, 9366, 5226, 8305, 8372, 8396, 8386,  839,
     8405, 8404,  836,  823, 8409, 9165, 9367, 5227, 9371, 9217,
     9218,  820, 5271, 5315, 5316, 5361, 9259, 5362, 9302, 9312,
      807, 9337, 9334, 9346, 9354, 9351, 9363, 9364, 9357, 9369,
      804,  791, 9353, 9371, 9370, 9373, 9394, 5415, 5463, 9357,
     9370, 9380, 9378, 9379, 9380, 5561, 9386, 9385, 9388, 5990,
     6008, 6026, 9373, 9374, 9384, 6214, 9422, 6261, 6279, 6297,

     9405, 9401, 9400, 9411, 9407, 9419, 9410, 6315, 9425, 9412,
     9420, 9408, 9416, 9429, 9420, 9420, 9421, 9485, 9441, 6333,
     9486, 6369, 9428, 9429, 9437, 9493, 9449, 9496, 9482, 9448,
     9504, 9511, 9472, 9461, 9516, 9475, 9486,  788, 9486, 9486,
     9482, 9505, 9506, 9499, 6387, 9505, 9510, 9494, 9504, 9502,
     9539, 9515, 9510, 9523, 9520, 9512, 9518, 6405, 9531, 9535,
     9559, 9529, 9526, 9567, 9534, 9530, 9541, 9556, 9578, 9558,
     9548, 9551, 9549, 9549, 9555, 9556, 9559, 9561, 9600, 6467,
     9576, 6468, 9562, 9566, 9586, 9604, 6537, 9583, 9626, 6560,
     9590, 9594, 9588, 9630, 9633, 6612, 9638, 6899, 9591, 9609,

     9641, 6955, 9608, 9651, 9608, 9623, 9621, 9625, 9629, 9631,
     9626, 9626, 9631, 9643, 9640, 9630, 9640, 9669, 6988, 9653,
     9638, 9679, 9644, 9658, 9697, 9653,  775, 9707, 7011, 9648,
     9654, 9712, 7063, 9715, 9716, 9719, 9720, 9724, 7154, 9682,
     9694, 9708, 9702, 9712, 9703, 9718, 9707, 9720, 7211, 9741,
     9721, 9723, 9710, 7329, 9706, 7352,  772, 9718, 9713, 9728,
     9752, 7404, 7495, 7538, 9719, 9734, 7561, 9739, 9769, 7613,
     9733, 9735, 9727, 9751,  759, 9781, 9761, 9761, 9787, 9755,
     9762, 9757, 9770, 7705, 9760, 9773, 9799, 7998, 9770, 9781,
     9804, 8055, 9765, 9775, 8078, 9780, 9793, 8125, 9825, 8130,

     9777, 9829, 8172, 9832, 8190, 9836, 8208, 8311, 9780, 9793,
      726, 9825, 9824, 9820,  681, 9823,  662, 9851, 8415, 9815,
     9819, 9820, 9856, 9821, 9830, 9835, 9842, 8436, 9828, 9835,
     9864, 8483, 9832, 9847, 9835, 9852, 9858, 9879, 8501, 9855,
     9845, 9892, 8519, 9905, 9854, 9857, 9883, 9875, 9892, 8537,
     9913, 9916, 8555, 9931, 9876, 9894, 9896, 8591, 9892, 8602,
     8620, 8638, 9891,  646, 9893, 9888, 9889,  633, 9905,  630,
     9906, 9150, 9954, 9955, 9919, 9959, 9200, 9900, 9927, 9910,
     9924, 9965,  614, 9976, 9221, 9939, 9932, 9947, 9943, 9980,
     9983, 9987, 9457, 9991, 9954, 9995, 9998,10002,10006,  598,

     9967, 9971, 9981,10011,10015,10018,10019,10005,10024,10028,
    10029,10036,10011, 9999,10005,10010,10008,10007,10009,10016,
    10017,10013,10013,10016,10017,10056,10055,10079,10059,10027,
    10064,10033,  585,10043,10038,10083,10084,10055,10089,10068,
    10075,10073,10061,10098,10102,10103,10106,10107,10110,10111,
    10124,10128,10129,10132,10133,10096,10139,10140,  582,10143,
    10147,10101,10129,10151,10152,10157,10158,10161,10140,10168,
    10169,10140,  566,10133,10146,10142,10143,10138,10151,10140,
    10153,10186,10187,10195,10170,10174,10162,10169,10196,10165,
    10212,10172,  550,10169,10213,10216,10223,10224,10230,10231,

    10235,10236,10239,10240,10243,10247,10248,10251,10222,10209,
    10230,10260,10261,10240,10267,10266,10271,10274,10238,10258,
    10243,10259,  503,  500,10246,10261,10249,10266,10294,10289,
    10295,10275,10269,10269,10270,10315,10302,10292,10296,10285,
    10321,10333,10334,10337,10338,10343,10344,10348,10354,10296,
    10320,10334,10321,10321,10362,10363,10325,10342,10331,10352,
    10349,10350,10350,10343,10353,10354,10355,10356,10378,10390,
    10384,10346,10391,10357,10356,10411,  487,10391,10381,10389,
    10417,10418,10421,10422,10394,10389,10427,10411,10430,10435,
    10403,10405,10402,10439,10410,10420,10430,10411,10458,10415,

    10463,10416,10467,10427,10468,10481,10485,10447,10439,10453,
    10467,10459,10489,10493,10456,10458,10460,10504,10500,10507,
    10511,10515,10519,10528,10482,10490,10488,10532,10537,10541,
    10505,10502,10513,10544,10545,10549,10552,10553,10556,10515,
    10562,10567,10571,10536,10529,10545,10558,10555,10577,10580,
    10584,10590,10564,10566,10593,10599,10605,10608,10612,  484,
    10567,  471,10617,10618,10621,10573,10573,10580,10627,10628,
    10631,10635,10636,10639,10640,10643,10615,10625,10630,10612,
    10614,10651,10655,10662,10659,10663,10666,10631,10637,10669,
    10638,10638,10641,10681,  468,  455,10659,10685,10688,10689,

    10692,10648,10671,  452,10670,10668,10697,10702,10707,10686,
    10711,10672,10714,10676,10683,10685,10684,10720,10688,10700,
    10701,10697,10704,10696,10733,10737,10715,10742,10748,10719,
    10707,10717,10759,10718,10715,10742,10733,10746,10735,10770,
    10745,10771,10752,10755,10756,10782,10785,10797,10801,10806,
      439,10760,10752,10763,10767,10774,10778,10819,10823,10827,
    10830,10831,10834,10835,10838,10801,10848,10852,10804,10805,
    10824,10828,10855,10858,10859,10863,10876,10880,10883,10884,
    10887,10888,10891,10892,10895,10902,10858,10861,10906,10912,
    10913,10917,10920,10921,10925,10930,10934,10938,10939,10942,

    10943,10946,10947,10950,10951,10955,10959,10964,10965,10968,
    10969,10972,10973,10976,11298,10987,10992,10997,11002,11007,
    11012,11017,11022,11027,11032,11037,11042,11047,11052,11057,
    11062,11067,11072,11077,11082,11087,11092,11097,11102,11107,
    11112,11117,11122,11127,11132,11137,11142,11147,11152,11157,
    11162,11167,11172,11177,11182,11187,11192,11194,11196,11198,
    11200,11202,11204,11206,11208,  477,11210,11212,11214,11216,
    11218,11220,11222,  464,11224,  461,  448,  445,  432,  429,
      416,  413,  400,  397,  384,  381,  368,  365,  352,  349,
      336,  333,11226,11228,11230,11232,11237,11242,11244,11246,

    11248,11250,11252,11254,11256,11258,  320,11260,11262,11264,
    11266,11268,11270,11272,  317,11274,  301,  274,  257,  242,
      223,  210,  207,  191,  178,  175,  159,  143,  130,  127,
      111,   98,    0,11276,11278,11280,11282,11287,11292
    } ;

static yyconst flex_int16_t yy_def[2440] =
    {   0,
     2316, 2315, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2317, 2317, 2318, 2318, 2319, 2319,
     2320, 2320, 2321, 2321, 2322, 2322, 2323, 2323, 2324, 2324,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2325, 2325,
     2326, 2326, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,

     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2327, 2327, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2328, 2328, 2329, 2329, 2330, 2330,
     2331, 2331, 2332, 2332, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2333, 2333,

     2334, 2334, 2316, 2316, 2335, 2335, 2336, 2336, 2316, 2316,
     2337, 2337, 2338, 2338, 2339, 2339, 2340, 2340, 2341, 2341,
     2342, 2342, 2343, 2343, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316,
     2344, 2344, 2345, 2345, 2346, 2346, 2347, 2347, 2316, 2316,
     2348, 2348, 2349, 2349, 2350, 2350, 2351, 2351, 2316, 2316,
     2316, 2316, 2352, 2352, 2353, 2353, 2316, 2316, 2316, 2316,
     2316, 2316, 2354, 2354, 2355, 2355, 2356, 2356, 2357, 2357,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2358, 2359, 2360,
     2361, 2362, 2363, 2364, 2365, 2315, 2315, 2315, 2315, 2366,
     2367, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2368, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2369, 2370, 2371, 2372, 2373,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2374,
     2375, 2315, 2315, 2376, 2377, 2315, 2378, 2379, 2380, 2381,
     2382, 2383, 2384, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2385, 2386,
     2387, 2388, 2315, 2389, 2390, 2391, 2392, 2315, 2315, 2393,
     2394, 2315, 2315, 2315, 2395, 2396, 2397, 2397, 2397, 2397,
     2398, 2398, 2398, 2398, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2399, 2400, 2401, 2402, 2403,
     2404, 2405, 2406, 2315, 2315, 2315, 2315, 2407, 2408, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2409, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2410, 2411, 2412, 2413, 2414, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2415, 2416, 2315, 2315, 2417,

     2418, 2315, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2426, 2427, 2428, 2429,
     2315, 2430, 2431, 2432, 2433, 2315, 2315, 2434, 2435, 2315,
     2315, 2315, 2436, 2437, 2438, 2438, 2438, 2439, 2439, 2439,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315,    0, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315
    } ;

static yyconst flex_int16_t yy_nxt[11371] =
    {   0,
     2315,  293,  294,  293,  845,  295,  292,  293,  294,  293,
      292,  296,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  297,  298,  299,  300,  301,  302,
      303,  304,  305,  292,  306,  307,  308,  309,  310,  311,
      312,  313,  314,  315,  292,  292,  316,  292,  292,  292,
      292,  292,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  292,  306,  307,  308,  309,  310,  311,  312,  313,
      314,  315,  292,  292,  316,  292,  292,  292,  293,  294,
      293,  545,  295,  545,  600,  546,  600,  317,  317,  317,
      317,  317,  317,  317,  293,  294,  293,  565,  296,  565,

      601,  550,  844,  317,  317,  317,  317,  317,  317,  317,
      293,  294,  293,  567,  295,  843,  879,  555,  879,  318,
      318,  318,  318,  318,  318,  318,  293,  294,  293,  550,
      296,  842,  880,  556,  840,  318,  318,  318,  318,  318,
      318,  318,  293,  294,  293,  555,  295,  839,  881,  562,
      881,  319,  319,  319,  319,  319,  319,  319,  293,  294,
      293,  556,  296,  838,  884,  563,  884,  319,  319,  319,
      319,  319,  319,  319,  293,  294,  293,  562,  295,  837,
      885,  564,  809,  320,  320,  320,  320,  320,  320,  320,
      293,  294,  293,  563,  296,  808,  886,  586,  886,  320,

      320,  320,  320,  320,  320,  320,  293,  294,  293,  564,
      295,  807,  887,  589,  806,  321,  321,  321,  321,  321,
      321,  321,  293,  294,  293,  586,  296,  805,  888,  602,
      888,  321,  321,  321,  321,  321,  321,  321,  293,  294,
      293,  589,  295,  890,  889,  890,  804,  322,  322,  322,
      322,  322,  322,  322,  293,  294,  293,  602,  296,  891,
      892,  803,  892,  322,  322,  322,  322,  322,  322,  322,
      293,  294,  293,  856,  295,  856,  893,  857,  801,  323,
      323,  323,  323,  323,  323,  323,  293,  294,  293,  545,
      296,  859,  600,  860,  600,  323,  323,  323,  323,  323,

      323,  323,  293,  294,  293,  800,  295,  324,  601,  324,
      325,  326,  326,  326,  326,  326,  326,  326,  293,  294,
      293,  796,  296,  324,  678,  324,  325,  326,  326,  326,
      326,  326,  326,  326,  293,  294,  293,  845,  295,  327,
      844,  327,  328,  329,  329,  329,  329,  329,  329,  329,
      293,  294,  293,  843,  296,  327,  842,  327,  328,  329,
      329,  329,  329,  329,  329,  329,  293,  294,  293,  840,
      295,  330,  839,  330,  331,  332,  332,  332,  332,  332,
      332,  332,  293,  294,  293,  838,  296,  330,  837,  330,
      331,  332,  332,  332,  332,  332,  332,  332,  293,  294,

      293,  809,  295,  333,  808,  333,  334,  335,  335,  335,
      335,  335,  335,  335,  293,  294,  293,  807,  296,  333,
      806,  333,  334,  335,  335,  335,  335,  335,  335,  335,
      293,  294,  293,  805,  295,  336,  804,  336,  337,  338,
      338,  338,  338,  338,  338,  338,  293,  294,  293,  803,
      296,  336,  801,  336,  337,  338,  338,  338,  338,  338,
      338,  338,  293,  294,  293,  800,  295,  339,  796,  339,
      340,  341,  341,  341,  341,  341,  341,  341,  293,  294,
      293,  678,  296,  339, 2266,  339,  340,  341,  341,  341,
      341,  341,  341,  341,  293,  294,  293, 2221,  295,  342,

     2216,  342,  343,  344,  344,  344,  344,  344,  344,  344,
      293,  294,  293, 2215,  296,  342, 2193,  342,  343,  344,
      344,  344,  344,  344,  344,  344,  293,  294,  293, 2191,
      295,  345, 2109,  345,  346,  347,  347,  347,  347,  347,
      347,  347,  293,  294,  293, 2064,  296,  345, 2063,  345,
      346,  347,  347,  347,  347,  347,  347,  347,  293,  294,
      293,  545,  295,  545,  934,  546,  934,  348,  348,  348,
      348,  348,  348,  348,  293,  294,  293,  879,  296,  879,
     1019,  861, 1019,  348,  348,  348,  348,  348,  348,  348,
      293,  294,  293,  880,  295, 2039,  881,  863,  881,  349,

      349,  349,  349,  349,  349,  349,  293,  294,  293,  861,
      296, 2020,  884,  864,  884,  349,  349,  349,  349,  349,
      349,  349,  293,  294,  293,  863,  295, 2009,  885,  865,
     1986,  350,  350,  350,  350,  350,  350,  350,  293,  294,
      293,  864,  296, 1956, 1022,  866, 1022,  350,  350,  350,
      350,  350,  350,  350,  293,  294,  293,  865,  295, 1938,
      886,  867,  886,  351,  351,  351,  351,  351,  351,  351,
      293,  294,  293,  866,  296, 1924,  887,  868, 1922,  351,
      351,  351,  351,  351,  351,  351,  293,  294,  293,  867,
      295, 1918, 1023,  869, 1023,  352,  352,  352,  352,  352,

      352,  352,  293,  294,  293,  868,  296, 1871,  888,  870,
      888,  352,  352,  352,  352,  352,  352,  352,  293,  294,
      293,  869,  295,  353,  889,  353, 1869,  354,  354,  354,
      354,  354,  354,  354,  293,  294,  293,  870,  296,  353,
     1024,  353, 1024,  354,  354,  354,  354,  354,  354,  354,
      293,  294,  293,  890,  295,  890, 1025,  871, 1025,  355,
      355,  355,  355,  355,  355,  355,  293,  294,  293,  891,
      296, 1865,  892,  872,  892,  355,  355,  355,  355,  355,
      355,  355,  293,  294,  293,  871,  295,  356,  893,  356,
      357,  358,  358,  358,  358,  358,  358,  358,  293,  294,

      293,  872,  296,  356, 1837,  356,  357,  358,  358,  358,
      358,  358,  358,  358,  293,  294,  293, 1824,  295,  359,
     1794,  359,  360,  361,  361,  361,  361,  361,  361,  361,
      293,  294,  293, 1705,  296,  359, 1640,  359,  360,  361,
      361,  361,  361,  361,  361,  361,  293,  294,  293, 1639,
      295,  362, 1629,  362,  363,  364,  364,  364,  364,  364,
      364,  364,  293,  294,  293, 1625,  296,  362, 1617,  362,
      363,  364,  364,  364,  364,  364,  364,  364,  293,  294,
      293, 1616,  295,  365, 1613,  365,  366,  367,  367,  367,
      367,  367,  367,  367,  293,  294,  293, 1605,  296,  365,

     1604,  365,  366,  367,  367,  367,  367,  367,  367,  367,
      292,  293,  294,  293, 1474,  295,  292,  292,  292, 1026,
      874, 1026, 1453,  292,  293,  294,  293,  292,  296,  292,
      292,  292, 1029,  934, 1029,  934,  292,  293,  294,  293,
      292,  295,  292,  292,  292,  538,  294,  538,  874,  539,
      560,  875, 1452,  292,  292,  292,  293,  294,  293, 1438,
      296,  292,  292,  292, 1019,  561, 1019,  292,  292,  293,
      294,  293,  292,  295,  292,  292,  292, 1419,  560,  875,
      292,  292,  293,  294,  293,  292,  296,  292,  292,  292,
      538,  294,  538,  561,  540,  876,  877, 1405,  292,  292,

      292,  293,  294,  293, 1382,  295,  292,  292,  292, 1022,
      878, 1022,  292,  292,  293,  294,  293,  292,  296,  292,
      292,  292, 1369,  876,  877,  292,  292,  293,  294,  293,
      292,  295,  292,  292,  292,  293,  294,  542,  878,  543,
      882,  883, 1365,  292,  292,  292,  293,  294,  293, 1336,
      296,  292,  292,  292, 1023,  894, 1023,  292,  292,  293,
      294,  293,  292,  295,  292,  292,  292, 1306,  882,  883,
      292,  292,  293,  294,  293,  292,  296,  292,  292,  292,
      293,  294,  542,  894,  544,  895,  901, 1298,  292,  292,
      292,  293,  294,  293, 1292,  295,  292,  292,  292,  902,

     1235,  903,  292,  292,  293,  294,  293,  292,  296,  292,
      292,  292, 1224,  895,  901,  292,  292,  293,  294,  293,
      292,  295,  292,  292,  292,  910,  911,  902,  587,  903,
      915,  916, 1186,  292,  292,  292,  293,  294,  293,  547,
      296,  292,  292,  292,  557,  588,  548,  292, 1183,  549,
      558, 1174,  292,  910,  911,  559,  587,  904,  915,  916,
      292,  856,  545,  856,  859,  857,  860,  547, 1024, 1173,
     1024,  917,  557,  588,  548,  918,  905,  549,  558,  292,
      293,  294,  293,  559,  295,  904,  896,  924,  896,  376,
      376,  376,  376,  376,  376,  376,  293,  294,  293,  917,

      296, 1151,  897,  918, 1146,  376,  376,  376,  376,  376,
      376,  376,  293,  294,  293,  924,  295, 1138, 1073,  925,
     1073,  377,  377,  377,  377,  377,  377,  377,  293,  294,
      293, 1025,  296, 1025, 1074,  926, 1124,  377,  377,  377,
      377,  377,  377,  377,  293,  294,  293,  925,  295, 1120,
     1075,  929, 1075,  378,  378,  378,  378,  378,  378,  378,
      293,  294,  293,  926,  296, 1058, 1076,  930, 1045,  378,
      378,  378,  378,  378,  378,  378,  293,  294,  293,  929,
      295, 1026, 1098, 1026, 1098,  379,  379,  379,  379,  379,
      379,  379,  293,  294,  293,  930,  296, 1029, 1099, 1029,

     1027,  379,  379,  379,  379,  379,  379,  379,  292,  293,
      294,  293,  292,  295,  292,  292,  292,  292, 1148, 1016,
     1148,  292,  293,  294,  293,  292,  295,  292,  292,  292,
     1149, 1176, 1149, 1176,  292,  293,  294,  293,  292,  296,
      292,  292,  292,  603,  603,  603,  603,  603,  603,  603,
     1015,  292,  292,  292,  293,  294,  293,  292,  296,  292,
      292,  292,  292, 1008, 1007,  292,  933,  935, 1000,  873,
      292,  604,  604,  604,  604,  604,  604,  604,  292,  605,
      605,  605,  605,  605,  605,  605,  606,  606,  606,  606,
      606,  606,  606,  862,  933,  935, 1000,  292,  293,  294,

      293, 2315,  295,  382, 2315,  382,  383,  384,  384,  384,
      384,  384,  384,  384,  293,  294,  293, 2315,  296,  382,
     2315,  382,  383,  384,  384,  384,  384,  384,  384,  384,
      293,  294,  293, 1127,  295, 1127, 1129, 1001, 1129,  385,
      385,  385,  385,  385,  385,  385,  293,  294,  293, 1128,
      296, 2315, 1130, 1004, 2315,  385,  385,  385,  385,  385,
      385,  385,  293,  294,  293, 1001,  295, 2315, 1134, 1005,
     1134,  386,  386,  386,  386,  386,  386,  386,  293,  294,
      293, 1004,  296, 2315, 1135, 1006, 2315,  386,  386,  386,
      386,  386,  386,  386,  293,  294,  293, 1005,  295, 2315,

     1073, 1009, 1073,  387,  387,  387,  387,  387,  387,  387,
      293,  294,  293, 1006,  296, 2315, 1074, 1010, 2315,  387,
      387,  387,  387,  387,  387,  387,  293,  294,  293, 1009,
      295, 2315, 1075, 1011, 1075,  388,  388,  388,  388,  388,
      388,  388,  293,  294,  293, 1010,  296, 2315, 1076, 1012,
     2315,  388,  388,  388,  388,  388,  388,  388,  293,  294,
      293, 1011,  295, 2315, 1098, 1013, 1098,  389,  389,  389,
      389,  389,  389,  389,  293,  294,  293, 1012,  296, 2315,
     1099, 1014, 2315,  389,  389,  389,  389,  389,  389,  389,
      293,  294,  293, 1013,  295, 2315, 1177, 1017, 1177,  390,

      390,  390,  390,  390,  390,  390,  293,  294,  293, 1014,
      296, 2315, 1178, 1018, 2315,  390,  390,  390,  390,  390,
      390,  390,  293,  294,  293, 1017,  295, 2315, 1181, 1020,
     1181,  391,  391,  391,  391,  391,  391,  391,  293,  294,
      293, 1018,  296, 2315, 1182, 1021, 2315,  391,  391,  391,
      391,  391,  391,  391,  293,  294,  293, 1020,  295, 2315,
     1184, 1028, 1184,  392,  392,  392,  392,  392,  392,  392,
      293,  294,  293, 1021,  296, 2315, 1185, 1030, 2315,  392,
      392,  392,  392,  392,  392,  392,  293,  294,  293, 1028,
      295, 2315, 1194, 1031, 1194,  393,  393,  393,  393,  393,

      393,  393,  293,  294,  293, 1030,  296, 2315, 1195, 1032,
     2315,  393,  393,  393,  393,  393,  393,  393,  293,  294,
      293, 1031,  295,  394, 2315,  394,  395,  396,  396,  396,
      396,  396,  396,  396,  293,  294,  293, 1032,  296,  394,
     2315,  394,  395,  396,  396,  396,  396,  396,  396,  396,
      293,  294,  293, 2315,  295,  397, 2315,  397,  398,  399,
      399,  399,  399,  399,  399,  399,  293,  294,  293, 2315,
      296,  397, 2315,  397,  398,  399,  399,  399,  399,  399,
      399,  399,  293,  294,  293, 2315,  295,  400, 2315,  400,
      401,  402,  402,  402,  402,  402,  402,  402,  293,  294,

      293, 2315,  296,  400, 2315,  400,  401,  402,  402,  402,
      402,  402,  402,  402,  293,  294,  293, 2315,  295,  403,
     2315,  403,  404,  405,  405,  405,  405,  405,  405,  405,
      293,  294,  293, 2315,  296,  403, 2315,  403,  404,  405,
      405,  405,  405,  405,  405,  405,  293,  294,  293, 1197,
      295, 1197, 1199, 1033, 1199,  406,  406,  406,  406,  406,
      406,  406,  293,  294,  293, 1198,  296, 2315, 1200, 1034,
     2315,  406,  406,  406,  406,  406,  406,  406,  293,  294,
      293, 1033,  295, 2315, 1127, 1035, 1127,  407,  407,  407,
      407,  407,  407,  407,  293,  294,  293, 1034,  296, 2315,

     1128, 1036, 2315,  407,  407,  407,  407,  407,  407,  407,
      293,  294,  293, 1035,  295,  408, 2315,  408,  409,  410,
      410,  410,  410,  410,  410,  410,  293,  294,  293, 1036,
      296,  408, 2315,  408,  409,  410,  410,  410,  410,  410,
      410,  410,  293,  294,  293, 2315,  295,  411, 2315,  411,
      412,  413,  413,  413,  413,  413,  413,  413,  293,  294,
      293, 2315,  296,  411, 2315,  411,  412,  413,  413,  413,
      413,  413,  413,  413,  293,  294,  293, 2315,  295,  414,
     2315,  414,  415,  416,  416,  416,  416,  416,  416,  416,
      293,  294,  293, 2315,  296,  414, 2315,  414,  415,  416,

      416,  416,  416,  416,  416,  416,  293,  294,  293, 2315,
      295,  417, 2315,  417,  418,  419,  419,  419,  419,  419,
      419,  419,  293,  294,  293, 2315,  296,  417, 2315,  417,
      418,  419,  419,  419,  419,  419,  419,  419,  293,  294,
      293, 2315,  295,  420, 2315,  420,  421,  422,  422,  422,
      422,  422,  422,  422,  293,  294,  293, 2315,  296,  420,
     2315,  420,  421,  422,  422,  422,  422,  422,  422,  422,
      293,  294,  293, 2315,  295,  423, 2315,  423,  424,  425,
      425,  425,  425,  425,  425,  425,  293,  294,  293, 2315,
      296,  423, 2315,  423,  424,  425,  425,  425,  425,  425,

      425,  425,  293,  294,  293, 2315,  295,  426, 2315,  426,
      427,  428,  428,  428,  428,  428,  428,  428,  293,  294,
      293, 2315,  296,  426, 2315,  426,  427,  428,  428,  428,
      428,  428,  428,  428,  293,  294,  293, 2315,  295,  429,
     2315,  429,  430,  431,  431,  431,  431,  431,  431,  431,
      293,  294,  293, 2315,  296,  429, 2315,  429,  430,  431,
      431,  431,  431,  431,  431,  431,  293,  294,  293, 2315,
      295,  432, 2315,  432,  433,  434,  434,  434,  434,  434,
      434,  434,  293,  294,  293, 2315,  296,  432, 2315,  432,
      433,  434,  434,  434,  434,  434,  434,  434,  293,  294,

      293, 2315,  295,  435, 2315,  435,  436,  437,  437,  437,
      437,  437,  437,  437,  293,  294,  293, 2315,  296,  435,
     2315,  435,  436,  437,  437,  437,  437,  437,  437,  437,
      293,  294,  293, 1211,  295, 1211, 1129, 1040, 1129,  438,
      438,  438,  438,  438,  438,  438,  293,  294,  293, 1212,
      296, 1212, 1130, 1041, 2315,  438,  438,  438,  438,  438,
      438,  438,  293,  294,  293, 1040,  295, 2315, 1134, 1042,
     1134,  439,  439,  439,  439,  439,  439,  439,  293,  294,
      293, 1041,  296, 2315, 1135, 1043, 2315,  439,  439,  439,
      439,  439,  439,  439,  293,  294,  293, 1042,  295, 2315,

     1216, 1044, 1216,  440,  440,  440,  440,  440,  440,  440,
      293,  294,  293, 1043,  296, 2315, 1148, 1046, 1148,  440,
      440,  440,  440,  440,  440,  440,  293,  294,  293, 1044,
      295, 2315, 1149, 1047, 1149,  441,  441,  441,  441,  441,
      441,  441,  293,  294,  293, 1046,  296, 2315, 1236, 1048,
     1236,  441,  441,  441,  441,  441,  441,  441,  293,  294,
      293, 1047,  295,  442, 1237,  442,  443,  444,  444,  444,
      444,  444,  444,  444,  293,  294,  293, 1048,  296,  442,
     2315,  442,  443,  444,  444,  444,  444,  444,  444,  444,
      292,  293,  294,  293, 1049,  295,  292,  292,  292, 1050,

     1250, 2315, 1250,  292,  293,  294,  293,  292,  296,  292,
      292,  292,  607,  607,  607,  607,  607,  607,  607, 1239,
      292, 1239, 1049,  292,  293,  294,  293, 1050,  295,  292,
      292,  292, 2315, 2315,  292, 1240, 1176, 1261, 1176, 1261,
      292, 1264, 1051, 1264, 1266, 2315, 1266,  292,  293,  294,
      293, 2315,  295,  446, 2315,  446,  447,  448,  448,  448,
      448,  448,  448,  448,  293,  294,  293,  292,  296,  446,
     1051,  446,  447,  448,  448,  448,  448,  448,  448,  448,
      293,  294,  293, 1170,  295, 1170, 1259, 1052, 1259,  449,
      449,  449,  449,  449,  449,  449,  293,  294,  293, 1171,

      296, 2315, 1260, 1053, 2315,  449,  449,  449,  449,  449,
      449,  449,  293,  294,  293, 1052,  295,  450, 1177,  450,
     1177,  451,  451,  451,  451,  451,  451,  451,  293,  294,
      293, 1053,  296,  450, 1178,  450, 2315,  451,  451,  451,
      451,  451,  451,  451,  293,  294,  293, 2315,  295,  452,
     1181,  452, 1181,  453,  453,  453,  453,  453,  453,  453,
      293,  294,  293, 2315,  296,  452, 1182,  452, 2315,  453,
      453,  453,  453,  453,  453,  453,  293,  294,  293, 2315,
      295,  454, 1184,  454, 1184,  455,  455,  455,  455,  455,
      455,  455,  293,  294,  293, 2315,  296,  454, 1185,  454,

     2315,  455,  455,  455,  455,  455,  455,  455,  293,  294,
      293, 2315,  295,  456, 1194,  456, 1194,  457,  457,  457,
      457,  457,  457,  457,  293,  294,  293, 2315,  296,  456,
     1195,  456, 2315,  457,  457,  457,  457,  457,  457,  457,
      293,  294,  293, 1275,  295, 1275, 1197, 1054, 1197,  458,
      458,  458,  458,  458,  458,  458,  293,  294,  293, 1277,
      296, 1277, 1198, 1055, 2315,  458,  458,  458,  458,  458,
      458,  458,  293,  294,  293, 1054,  295, 2315, 1199, 1056,
     1199,  459,  459,  459,  459,  459,  459,  459,  293,  294,
      293, 1055,  296, 2315, 1200, 1057, 2315,  459,  459,  459,

      459,  459,  459,  459,  293,  294,  293, 1056,  295, 2315,
     1278, 1059, 1278,  460,  460,  460,  460,  460,  460,  460,
      293,  294,  293, 1057,  296, 2315, 1289, 1060, 1289,  460,
      460,  460,  460,  460,  460,  460,  293,  294,  293, 1059,
      295, 2315, 1290, 1061, 2315,  461,  461,  461,  461,  461,
      461,  461,  293,  294,  293, 1060,  296, 2315, 1211, 1064,
     1211,  461,  461,  461,  461,  461,  461,  461,  293,  294,
      293, 1061,  295, 2315, 1212, 1065, 1212,  462,  462,  462,
      462,  462,  462,  462,  293,  294,  293, 1064,  296, 2315,
     1216, 1066, 1216,  462,  462,  462,  462,  462,  462,  462,

      293,  294,  293, 1065,  295, 2315, 1236, 1067, 1236,  463,
      463,  463,  463,  463,  463,  463,  293,  294,  293, 1066,
      296, 2315, 1237, 1068, 2315,  463,  463,  463,  463,  463,
      463,  463,  293,  294,  293, 1067,  295, 2315, 1322, 1069,
     1322,  464,  464,  464,  464,  464,  464,  464,  293,  294,
      293, 1068,  296, 2315, 1239, 1071, 1239,  464,  464,  464,
      464,  464,  464,  464,  293,  294,  293, 1069,  295, 1324,
     1240, 1324, 1072,  465,  465,  465,  465,  465,  465,  465,
      293,  294,  293, 1071,  296, 1325, 1326, 1327, 1328,  465,
      465,  465,  465,  465,  465,  465,  292,  293,  294,  293,

     1072,  296,  292,  292,  292, 1250, 1349, 1250, 1349,  292,
      293,  294,  293,  292,  295,  292,  292,  292, 1261, 1264,
     1261, 1264,  292,  293,  294,  293,  292,  296,  292,  292,
      292,  608,  608,  608,  608,  608,  608,  608, 2315,  292,
      292,  292,  293,  294,  293, 2315,  295,  292,  292,  292,
     1266, 2315, 1266,  292,  292,  293,  294,  293,  292,  296,
      292,  292,  292, 1275, 2315, 1275,  292,  292,  293,  294,
      293,  292,  295,  292,  292,  292,  609,  609,  609,  609,
      609,  609,  609, 2315,  292,  292,  292,  293,  294,  293,
     2315,  296,  292,  292,  292, 1277, 2315, 1277,  292,  292,

      293,  294,  293,  292,  295,  292,  292,  292, 1077, 2315,
     2315,  292,  292,  293,  294,  293,  292,  296,  292,  292,
      292,  610,  611,  611,  611,  611,  611,  611,  611,  292,
      292, 2315,  292,  293,  294,  293, 1077,  295,  292,  292,
      292, 2315, 1278,  292, 1278, 1374, 1259, 1374, 1259,  292,
     1078, 1079,  927, 1062, 2315, 2315,  292,  293,  294,  293,
     1063,  295, 1260, 1322,  928, 1322,  471,  471,  471,  471,
      471,  471,  471,  293,  294,  293,  292,  296, 1078, 1079,
      927, 1062,  471,  471,  471,  471,  471,  471,  471,  293,
      294,  293,  928,  295, 2315, 1350, 1080, 1350,  472,  472,

      472,  472,  472,  472,  472,  293,  294,  293, 1324,  296,
     1324, 1351, 1084, 2315,  472,  472,  472,  472,  472,  472,
      472,  293,  294,  293, 1080,  295, 2315, 1352, 1085, 1352,
      473,  473,  473,  473,  473,  473,  473,  293,  294,  293,
     1084,  296, 2315, 1353, 1086, 2315,  473,  473,  473,  473,
      473,  473,  473,  293,  294,  293, 1085,  295,  474, 2315,
      474,  475,  476,  476,  476,  476,  476,  476,  476,  293,
      294,  293, 1086,  296,  474, 2315,  474,  475,  476,  476,
      476,  476,  476,  476,  476,  293,  294,  293, 1289,  295,
     1289, 1377, 1087, 1377,  477,  477,  477,  477,  477,  477,

      477,  293,  294,  293, 1290,  296, 2315, 1378, 1088, 2315,
      477,  477,  477,  477,  477,  477,  477,  293,  294,  293,
     1087,  295, 2315, 1396, 1089, 1396,  478,  478,  478,  478,
      478,  478,  478,  293,  294,  293, 1088,  296, 2315, 1397,
     1092, 2315,  478,  478,  478,  478,  478,  478,  478,  293,
      294,  293, 1089,  295, 1398, 1400, 1398, 1400,  479,  479,
      479,  479,  479,  479,  479,  293,  294,  293, 1092,  296,
     1399, 1401, 2315, 2315,  479,  479,  479,  479,  479,  479,
      479,  292,  293,  294,  293,  292,  295,  292,  292,  292,
      292, 1431, 2315, 1431,  292,  293,  294,  293,  292,  296,

      292,  292,  292, 1349, 1448, 1349, 1448,  292,  293,  294,
      293,  292,  295,  292,  292,  292,  610,  611,  611,  611,
      611,  611,  611,  611,  292,  292,  292,  293,  294,  293,
      292,  296,  292,  292,  292,  292, 2315, 1093,  292, 1094,
     1095, 1096, 2315,  292,  642,  642,  642,  642,  642,  642,
      642,  292,  612,  612,  612,  612,  612,  612,  612, 2315,
     2315, 1402, 1097, 1402,  613, 1093, 2315, 1094, 1095, 1096,
      292,  293,  294,  293, 1449,  295, 1449, 1403,  482, 2315,
      483,  483,  483,  483,  483,  483,  483,  293,  294,  293,
     1097,  296,  613, 1374,  482, 1374,  483,  483,  483,  483,

      483,  483,  483,  292,  293,  294,  293,  292,  295,  292,
      292,  292,  292, 1477, 2315, 1477,  292,  293,  294,  293,
      292,  296,  292,  292,  292, 1504, 1505, 1504, 1505,  292,
      293,  294,  293,  292,  295,  292,  292,  292,  614,  615,
      615,  615,  615,  615,  615,  615,  292,  292,  292,  293,
      294,  293,  292,  296,  292,  292,  292,  292, 2315, 2315,
      292,  292,  293,  294,  293,  292,  296,  292,  292,  292,
     1506, 2315, 1506,  292,  292,  293,  294,  293,  292,  295,
      292,  292,  292,  614,  615,  615,  615,  615,  615,  615,
      615,  292,  292,  292,  293,  294,  293,  292,  295,  292,

      292,  292,  292, 2315, 2315,  292,  292,  293,  294,  293,
      292,  296,  292,  292,  292, 1507, 2315, 1507,  292,  292,
      293,  294,  293,  292,  295,  292,  292,  292,  618,  619,
      619,  619,  619,  619,  619,  619,  292,  292,  292,  293,
      294,  293,  292,  296,  292,  292,  292,  292, 2315,  931,
      292, 1100,  590, 1101, 1513,  292, 1513, 1408,  932, 1408,
      591,  592,  593,  292,  616,  616,  616,  616,  616,  616,
      616, 2315, 2315, 1409, 1102, 2315,  617,  931, 1103, 1100,
      590, 1101,  292,  293,  294,  293,  932,  295,  591,  592,
      593, 2315,  486,  486,  486,  486,  486,  486,  486,  293,

      294,  293, 1102,  296,  617, 1514, 1103, 1514,  486,  486,
      486,  486,  486,  486,  486,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292, 2315, 2315, 1104,  292,  293,
      294,  293,  292,  296,  292,  292,  292, 1515, 1516, 1515,
     1516, 2315, 1523,  551, 1523,  292, 1090, 1524,  906, 1524,
      552,  553,  907,  908,  909, 1104,  554, 1105, 1091,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      573,  551,  292, 1106, 1090,  574,  906,  292,  552,  553,
      907,  908,  909, 2315,  554, 1105, 1091, 1107,  922, 1002,
      575, 1108, 1109, 1110, 2315,  576,  923, 1003,  577, 1111,

     1525, 1106, 1525, 2315,  292,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292, 1107,  922, 1002,  575, 1108,
     1109, 1110,  292,  576,  923, 1003,  577, 1111,  620,  620,
      620,  620,  620,  620,  620, 1526, 1528, 1526, 1528, 2315,
      621,  618,  619,  619,  619,  619,  619,  619,  619,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      643,  643,  643,  643,  643,  643,  643,  292,  621,  622,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,
      624,  624,  624,  624, 2315, 1112, 1113, 1114, 1115,  625,
     1431, 1448, 1431, 1448,  292,  292,  293,  294,  293,  292,

      295,  292,  292,  292,  292,  644,  644,  644,  644,  644,
      644,  644,  292, 1112, 1113, 1114, 1115,  625,  622,  623,
      623,  623,  623,  623,  623,  623,  626,  627,  627,  627,
      627,  627,  627,  627, 1449, 2315, 1449, 1116, 1117,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      645,  645,  645,  645,  645,  645,  645,  292,  628,  628,
      628,  628,  628,  628,  628, 1116, 1117, 1118, 1119, 2315,
      629,  626,  627,  627,  627,  627,  627,  627,  627, 1553,
     1554, 1553, 1554, 2315,  292,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292, 1118, 1119, 1121,  629, 1123,

     1125, 2315,  292,  630,  631,  631,  631,  631,  631,  631,
      631,  632,  632,  632,  632,  632,  632,  632, 2315, 2315,
     1126, 1131, 1132,  633, 1122, 1121, 2315, 1123, 1125,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      646,  646,  646,  646,  646,  646,  646,  292, 1126, 1131,
     1132,  633,  630,  631,  631,  631,  631,  631,  631,  631,
      634,  635,  635,  635,  635,  635,  635,  635, 1555, 1556,
     1555, 1556, 1133, 1136,  292,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292,  647,  647,  647,  647,  647,
      647,  647,  292,  636,  636,  636,  636,  636,  636,  636,

     1133, 1136, 1137, 1139, 1140,  637,  634,  635,  635,  635,
      635,  635,  635,  635, 1558, 1477, 1558, 1477, 2315,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
     1137, 1139, 1140,  637, 1141, 1142, 2315,  292,  638,  639,
      639,  639,  639,  639,  639,  639,  640,  640,  640,  640,
      640,  640,  640, 2315, 2315, 1143, 1147, 1150,  641, 1579,
     2315, 1579, 1141, 1142,  292,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292,  649,  649,  649,  649,  649,
      649,  649,  292, 1143, 1147, 1150,  641,  638,  639,  639,
      639,  639,  639,  639,  639,  648, 1586,  648, 1586,  647,

      647,  647,  647,  647,  647,  647, 1590, 2315, 1590,  292,
      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      674,  674,  674,  674,  674,  674,  674,  292,  650,  651,
      651,  651,  651,  651,  651,  651,  652,  652,  652,  652,
      652,  652,  652, 2315, 2315, 1152, 1153, 1154,  653, 1591,
     1592, 1591, 1592, 2315,  292,  292,  293,  294,  293,  292,
      295,  292,  292,  292,  292,  675,  675,  675,  675,  675,
      675,  675,  292, 1152, 1153, 1154,  653,  650,  651,  651,
      651,  651,  651,  651,  651,  654,  655,  655,  655,  655,
      655,  655,  655, 1155, 1504, 1505, 1504, 1505, 2315,  292,

      292,  293,  294,  293,  292,  296,  292,  292,  292,  292,
      656,  656,  656,  656,  656,  656,  656,  292, 2315, 2315,
     1156, 1155,  657,  654,  655,  655,  655,  655,  655,  655,
      655,  658,  659,  659,  659,  659,  659,  659,  659, 1157,
     1158, 1159, 2315, 2315,  292,  293,  294,  293, 1156,  295,
      657, 1506, 1160, 1506,  494,  494,  494,  494,  494,  494,
      494,  293,  294,  293, 1507,  296, 1507, 1157, 1158, 1159,
      494,  494,  494,  494,  494,  494,  494,  293,  294,  293,
     1160,  295,  495, 2315,  495,  496,  497,  497,  497,  497,
      497,  497,  497,  293,  294,  293, 2315,  296,  495, 2315,

      495,  496,  497,  497,  497,  497,  497,  497,  497,  293,
      294,  293, 1410,  295, 1410, 1412, 1161, 1412,  498,  498,
      498,  498,  498,  498,  498,  293,  294,  293, 1411,  296,
     2315, 1413, 1165, 2315,  498,  498,  498,  498,  498,  498,
      498,  293,  294,  293, 1161,  295,  499, 1414,  499, 1414,
      500,  500,  500,  500,  500,  500,  500,  293,  294,  293,
     1165,  296,  499, 1415,  499, 2315,  500,  500,  500,  500,
      500,  500,  500,  293,  294,  293, 2315,  295,  501, 1420,
      501, 1420,  502,  502,  502,  502,  502,  502,  502,  293,
      294,  293, 2315,  296,  501, 1421,  501, 2315,  502,  502,

      502,  502,  502,  502,  502,  293,  294,  293, 2315,  295,
      503, 1422,  503, 1422,  504,  504,  504,  504,  504,  504,
      504,  293,  294,  293, 2315,  296,  503, 1423,  503, 2315,
      504,  504,  504,  504,  504,  504,  504,  293,  294,  293,
     2315,  295,  505, 1424,  505, 1424,  506,  506,  506,  506,
      506,  506,  506,  293,  294,  293, 2315,  296,  505, 1425,
      505, 2315,  506,  506,  506,  506,  506,  506,  506,  293,
      294,  293, 2315,  295,  507, 1426,  507, 1426,  508,  508,
      508,  508,  508,  508,  508,  293,  294,  293, 2315,  296,
      507, 1427,  507, 2315,  508,  508,  508,  508,  508,  508,

      508,  293,  294,  293, 2315,  295,  509, 1330,  509, 1330,
      510,  510,  510,  510,  510,  510,  510,  293,  294,  293,
     2315,  296,  509, 1332,  509, 2315,  510,  510,  510,  510,
      510,  510,  510,  293,  294,  293, 2315,  295,  511, 1429,
      511, 1429,  512,  512,  512,  512,  512,  512,  512,  293,
      294,  293, 2315,  296,  511, 1430,  511, 2315,  512,  512,
      512,  512,  512,  512,  512,  293,  294,  293, 2315,  295,
      513, 1350,  513, 1350,  514,  514,  514,  514,  514,  514,
      514,  293,  294,  293, 2315,  296,  513, 1351,  513, 2315,
      514,  514,  514,  514,  514,  514,  514,  293,  294,  293,

     2315,  295,  515, 1352,  515, 1352,  516,  516,  516,  516,
      516,  516,  516,  293,  294,  293, 2315,  296,  515, 1353,
      515, 2315,  516,  516,  516,  516,  516,  516,  516,  293,
      294,  293, 2315,  295,  517, 1455,  517, 1455,  518,  518,
      518,  518,  518,  518,  518,  293,  294,  293, 2315,  296,
      517, 1456,  517, 2315,  518,  518,  518,  518,  518,  518,
      518,  292,  293,  294,  293,  292,  295,  292,  292,  292,
      292,  676,  676,  676,  676,  676,  676,  676,  292,  660,
      660,  660,  660,  660,  660,  660, 2315, 1457, 1168, 1457,
     1169,  661,  658,  659,  659,  659,  659,  659,  659,  659,

     1596, 2315, 1596, 1458, 2315,  292,  292,  293,  294,  293,
      292,  296,  292,  292,  292,  292, 1168, 1162, 1169,  661,
     1163, 1175, 2315,  292,  662,  663,  663,  663,  663,  663,
      663,  663,  664,  664,  664,  664,  664,  664,  664, 1164,
     2315, 1179, 1180, 1187,  665, 1162, 2315, 2315, 1163, 1175,
      292,  292,  293,  294,  293,  292,  295,  292,  292,  292,
      292,  677,  677,  677,  677,  677,  677,  677,  292, 1179,
     1180, 1187,  665,  662,  663,  663,  663,  663,  663,  663,
      663,  680,  681,  681,  681,  681,  681,  681,  681, 1513,
     1514, 1513, 1514, 1188, 1189,  292,  292,  293,  294,  293,

      292,  296,  292,  292,  292,  292,  684,  684,  684,  684,
      684,  684,  684,  292,  682,  682,  682,  682,  682,  682,
      682, 1188, 1189, 1190, 2315, 1191,  683,  680,  681,  681,
      681,  681,  681,  681,  681, 1515, 1170, 1515, 1170, 2315,
      292,  292,  293,  294,  293,  292,  295,  292,  292,  292,
      292, 1190, 1171, 1191,  683, 1192, 1193, 2315,  292,  685,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  686,  687,  687,  687,  687,  687,  687,  687,
     1172, 2315, 2315, 1192, 1193,  292,  292,  293,  294,  293,
      292,  296,  292,  292,  292,  292,  688,  688,  688,  688,

      688,  688,  688,  292,  689,  689,  689,  689,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  691,  691, 1516, 1599, 1516, 1599, 2315,
      292,  292,  293,  294,  293,  292,  295,  292,  292,  292,
      292,  692,  692,  692,  692,  692,  692,  692,  292,  693,
      694,  694,  694,  694,  694,  694,  694,  695,  695,  695,
      695,  695,  695,  695, 2315, 2315, 1196, 1201, 1202,  696,
     1600, 1523, 1600, 1523, 2315,  292,  292,  293,  294,  293,
      292,  296,  292,  292,  292,  292,  709,  709,  709,  709,
      709,  709,  709,  292, 1196, 1201, 1202,  696,  693,  694,

      694,  694,  694,  694,  694,  694,  697,  698,  698,  698,
      698,  698,  698,  698, 1203, 1204, 1205, 1206, 2315, 2315,
      292,  293,  294,  293, 1459,  295, 1459, 1524, 2315, 1524,
      523,  523,  523,  523,  523,  523,  523,  293,  294,  293,
     1460,  296, 1203, 1204, 1205, 1206,  523,  523,  523,  523,
      523,  523,  523,  292,  293,  294,  293,  292,  295,  292,
      292,  292,  292,  710,  710,  710,  710,  710,  710,  710,
      292,  699,  699,  699,  699,  699,  699,  699, 2315, 1461,
     1209, 1461, 1210,  700,  697,  698,  698,  698,  698,  698,
      698,  698, 1525, 2315, 1525, 1462, 2315,  292,  292,  293,

      294,  293,  292,  296,  292,  292,  292,  292, 1209, 1207,
     1210,  700, 1208, 1213, 2315,  292,  701,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      703, 2315, 2315, 1214, 1215, 1217,  704, 1207, 2315, 2315,
     1208, 1213,  292,  292,  293,  294,  293,  292,  295,  292,
      292,  292,  292,  751,  751,  751,  751,  751,  751,  751,
      292, 1214, 1215, 1217,  704,  701,  702,  702,  702,  702,
      702,  702,  702,  705,  706,  706,  706,  706,  706,  706,
      706, 1526, 1528, 1526, 1528, 1218, 1219,  292,  292,  293,
      294,  293,  292,  296,  292,  292,  292,  292,  752,  752,

      752,  752,  752,  752,  752,  292,  707,  707,  707,  707,
      707,  707,  707, 1218, 1219, 1220, 1221, 1222,  708,  705,
      706,  706,  706,  706,  706,  706,  706, 1608, 1620, 1608,
     1620, 2315,  292,  292,  293,  294,  293,  292,  295,  292,
      292,  292,  292, 1220, 1221, 1222,  708, 1223, 1227, 2315,
      292,  711,  712,  712,  712,  712,  712,  712,  712,  713,
      713,  713,  713,  713,  713,  713, 2315, 2315, 1228, 1229,
     1230,  714, 1553, 2315, 1553, 1223, 1227,  292,  292,  293,
      294,  293,  292,  296,  292,  292,  292,  292,  753,  753,
      753,  753,  753,  753,  753,  292, 1228, 1229, 1230,  714,

      711,  712,  712,  712,  712,  712,  712,  712,  715,  716,
      716,  716,  716,  716,  716,  716, 1554, 1555, 1554, 1555,
     1231, 1232,  292,  292,  293,  294,  293,  292,  295,  292,
      292,  292,  292,  754,  754,  754,  754,  754,  754,  754,
      292,  717,  717,  717,  717,  717,  717,  717, 1231, 1232,
     1233, 1234, 1238,  718,  715,  716,  716,  716,  716,  716,
      716,  716, 1556, 1558, 1556, 1558, 2315,  292,  292,  293,
      294,  293,  292,  296,  292,  292,  292,  292, 1233, 1234,
     1238,  718, 1241, 1242, 2315,  292,  719,  720,  720,  720,
      720,  720,  720,  720,  721,  721,  721,  721,  721,  721,

      721, 2315, 2315, 1464, 1243, 1464,  722, 1166, 1244, 1245,
     1241, 1242,  292,  293,  294,  293, 1645,  295, 1645, 1465,
     1167, 2315,  528,  528,  528,  528,  528,  528,  528,  293,
      294,  293, 1243,  296,  722, 1166, 1244, 1245,  528,  528,
      528,  528,  528,  528,  528,  293,  294,  293, 1167,  295,
     2315, 1377, 1246, 1377,  529,  529,  529,  529,  529,  529,
      529,  293,  294,  293, 1579,  296, 1579, 1378, 1247, 2315,
      529,  529,  529,  529,  529,  529,  529,  293,  294,  293,
     1246,  295, 2315, 1493, 1248, 1493,  532,  532,  532,  532,
      532,  532,  532,  293,  294,  293, 1247,  296, 2315, 1494,

     1249, 2315,  532,  532,  532,  532,  532,  532,  532,  293,
      294,  293, 1248,  295, 2315, 1498, 1251, 1498,  533,  533,
      533,  533,  533,  533,  533,  293,  294,  293, 1249,  296,
     2315, 1499, 1262, 2315,  533,  533,  533,  533,  533,  533,
      533,  293,  294,  293, 1251,  295, 1263, 1500, 2315, 1500,
      534,  534,  534,  534,  534,  534,  534,  293,  294,  293,
     1262,  296, 1586, 1501, 1586, 2315,  534,  534,  534,  534,
      534,  534,  534,  565, 1263,  565,  719,  720,  720,  720,
      720,  720,  720,  720, 1265, 2315, 2315,  566, 1252,  567,
      568,  723,  724,  724,  724,  724,  724,  724,  724, 1253,

     1267, 1254, 1255, 1256,  569,  725,  725,  725,  725,  725,
      725,  725, 1265,  570,  571,  572, 1252,  726,  568,  723,
      724,  724,  724,  724,  724,  724,  724, 1253, 1267, 1254,
     1255, 1256,  569,  727,  728,  728,  728,  728,  728,  728,
      728,  570,  571,  572,  578,  726, 1268,  919,  912, 1081,
      579, 1269, 1082,  580, 1037,  913,  581,  914,  920,  582,
      583, 1038,  584, 2315, 1270,  921, 1083, 2315, 1039,  585,
     1271, 2315,  578, 1272, 1268,  919,  912, 1081,  579, 1269,
     1082,  580, 1037,  913,  581,  914,  920,  582,  583, 1038,
      584,  594, 1270,  921, 1083,  595, 1039, 1225, 1271,  596,

     1257, 1272, 1273,  597, 1226,  598, 1274, 1258, 1276, 1279,
     1280,  599,  729,  729,  729,  729,  729,  729,  729,  594,
     1281, 1282, 1283,  595,  730, 1225, 2315,  596, 1257, 2315,
     1273,  597, 1226,  598, 1274, 1258, 1276, 1279, 1280,  599,
      727,  728,  728,  728,  728,  728,  728,  728, 1281, 1282,
     1283, 2315,  730,  731,  732,  732,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  733,  733, 2315, 1284,
     1285, 1288, 1291,  734,  731,  732,  732,  732,  732,  732,
      732,  732,  735,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  737, 1284, 1285, 1288,

     1291,  734,  738,  735,  736,  736,  736,  736,  736,  736,
      736,  739,  740,  740,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  741,  741, 2315, 1293, 1294, 1295,
      738,  742,  739,  740,  740,  740,  740,  740,  740,  740,
      743,  744,  744,  744,  744,  744,  744,  744,  745,  745,
      745,  745,  745,  745,  745, 1293, 1294, 1295, 1296,  742,
      746,  743,  744,  744,  744,  744,  744,  744,  744,  747,
      748,  748,  748,  748,  748,  748,  748,  749,  749,  749,
      749,  749,  749,  749, 2315, 1297, 1296, 1301,  746,  750,
      747,  748,  748,  748,  748,  748,  748,  748,  755,  756,

      756,  756,  756,  756,  756,  756,  757,  757,  757,  757,
      757,  757,  757, 1297, 2315, 1301, 1304,  750,  758,  755,
      756,  756,  756,  756,  756,  756,  756,  760,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762, 1302, 1305, 1304, 1303,  758,  763,  760,  761,
      761,  761,  761,  761,  761,  761,  764,  764,  764,  764,
      764,  764,  764,  765,  765,  765,  765,  765,  765,  765,
     1302, 1305,  766, 1303,  766,  763,  765,  765,  765,  765,
      765,  765,  765,  767,  767,  767,  767,  767,  767,  767,
      768, 1590,  768, 1590,  767,  767,  767,  767,  767,  767,

      767,  769,  769,  769,  769,  769,  769,  769,  770, 1591,
      770, 1591,  769,  769,  769,  769,  769,  769,  769,  771,
      771,  771,  771,  771,  771,  771,  772, 1592,  772, 1592,
      771,  771,  771,  771,  771,  771,  771,  773,  773,  773,
      773,  773,  773,  773,  774,  774,  774,  774,  774,  774,
      774,  775,  775,  775,  775,  775,  775,  775,  776,  776,
      776,  776,  776,  776,  776,  777,  777,  777,  777,  777,
      777,  777,  778,  778,  778,  778,  778,  778,  778,  779,
      779,  779,  779,  779,  779,  779,  780,  780,  780,  780,
      780,  780,  780,  786,  786,  786,  786,  786,  786,  786,

      787,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  789,  790,  790,  790,  790,  790,
      790,  790,  791,  791,  791,  791,  791,  791,  791, 1311,
     1312, 1313, 1314, 1319,  792,  789,  790,  790,  790,  790,
      790,  790,  790,  793,  793,  793,  793,  793,  793,  793,
      794,  794,  794,  794,  794,  794,  794, 1311, 1312, 1313,
     1314, 1319,  792,  795,  795,  795,  795,  795,  795,  795,
      798,  798,  798,  798,  798,  798,  798,  799,  799,  799,
      799,  799,  799,  799,  802,  802,  802,  802,  802,  802,
      802,  810,  810,  810,  810,  810,  810,  810,  811,  812,

      812,  812,  812,  812,  812,  812,  813,  813,  813,  813,
      813,  813,  813, 1323, 1329, 1596, 1334, 1596,  814,  811,
      812,  812,  812,  812,  812,  812,  812,  815,  815,  815,
      815,  815,  815,  815,  816,  816,  816,  816,  816,  816,
      816, 1323, 1329,  817, 1334,  817,  814,  816,  816,  816,
      816,  816,  816,  816,  818,  818,  818,  818,  818,  818,
      818,  819, 1658,  819, 1658,  818,  818,  818,  818,  818,
      818,  818,  820,  820,  820,  820,  820,  820,  820,  821,
     1599,  821, 1599,  820,  820,  820,  820,  820,  820,  820,
      822,  822,  822,  822,  822,  822,  822,  823, 1600,  823,

     1600,  822,  822,  822,  822,  822,  822,  822,  824,  824,
      824,  824,  824,  824,  824,  825, 1608,  825, 1608,  824,
      824,  824,  824,  824,  824,  824,  826,  826,  826,  826,
      826,  826,  826,  827, 1620,  827, 1620,  826,  826,  826,
      826,  826,  826,  826,  828,  828,  828,  828,  828,  828,
      828,  829,  830,  829, 2315,  828,  828,  828,  828,  828,
      828,  828,  831,  831,  831,  831,  831,  831,  831,  832,
     1682,  832, 1682,  831,  831,  831,  831,  831,  831,  831,
      833,  833,  833,  833,  833,  833,  833,  834, 1645,  834,
     1645,  833,  833,  833,  833,  833,  833,  833,  835,  835,

      835,  835,  835,  835,  835,  836, 1658,  836, 1658,  835,
      835,  835,  835,  835,  835,  835,  841,  841,  841,  841,
      841,  841,  841,  846,  846,  846,  846,  846,  846,  846,
      847,  847,  847,  847,  847,  847,  847,  850,  850,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  852,  852,  896, 2315,
      896,  603,  603,  603,  603,  603,  603,  603, 1749, 1682,
     1749, 1682, 2315, 1335,  897, 1337,  898, 1338,  899,  604,
      604,  604,  604,  604,  604,  604,  605,  605,  605,  605,
      605,  605,  605,  900,  606,  606,  606,  606,  606,  606,

      606, 1335, 2315, 1337,  898, 1338,  899,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      608,  900,  609,  609,  609,  609,  609,  609,  609,  612,
      612,  612,  612,  612,  612,  612, 1339, 1340, 1754, 1299,
     1754,  613,  610,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  612,  612,  612,  612,  612, 1343, 1300, 1344,
     1345, 1756,  613, 1756, 1339, 1340,  936, 1299,  936,  613,
      937,  937,  937,  937,  937,  937,  937,  616,  616,  616,
      616,  616,  616,  616, 1346, 1343, 2315, 1344, 1345,  617,
      613,  614,  615,  615,  615,  615,  615,  615,  615,  616,

      616,  616,  616,  616,  616,  616, 1347, 1348, 1354, 2315,
     1355,  617, 1346, 1763,  938, 1763,  938,  617,  939,  939,
      939,  939,  939,  939,  939,  620,  620,  620,  620,  620,
      620,  620, 2315, 1356, 1347, 1348, 1354,  621, 1355,  617,
      618,  619,  619,  619,  619,  619,  619,  619,  620,  620,
      620,  620,  620,  620,  620, 1357, 1358, 2315, 1359, 1360,
      621, 1356,  940, 2315,  940,  621,  941,  941,  941,  941,
      941,  941,  941,  624,  624,  624,  624,  624,  624,  624,
     1361, 2315, 2315, 1357, 1358,  625, 1359, 1360,  621,  622,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,

      624,  624,  624,  624, 1362, 2315, 1363, 1364, 1361,  625,
      942, 2315,  942,  625,  943,  943,  943,  943,  943,  943,
      943,  628,  628,  628,  628,  628,  628,  628, 1366, 1367,
     2315, 1368, 1362,  629, 1363, 1364, 2315,  625,  626,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628, 1370, 1371, 2315, 1366, 1367,  629, 1368,
      944,  629,  944, 2315,  945,  945,  945,  945,  945,  945,
      945,  632,  632,  632,  632,  632,  632,  632, 1372, 2315,
     2315, 1370, 1371,  633, 2315, 2315,  629,  630,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,

      632,  632, 1373, 2315, 1375, 1376, 1372,  633,  946, 2315,
      946,  633,  947,  947,  947,  947,  947,  947,  947,  636,
      636,  636,  636,  636,  636,  636, 1379, 1380, 2315, 1381,
     1373,  637, 1375, 1376, 2315,  633,  634,  635,  635,  635,
      635,  635,  635,  635,  636,  636,  636,  636,  636,  636,
      636, 1383, 1384, 2315, 1379, 1380,  637, 1381,  948,  637,
      948, 2315,  949,  949,  949,  949,  949,  949,  949,  640,
      640,  640,  640,  640,  640,  640, 1389, 2315, 2315, 1383,
     1384,  641, 2315, 2315,  637,  638,  639,  639,  639,  639,
      639,  639,  639,  640,  640,  640,  640,  640,  640,  640,

     1764, 2315, 1764, 1390, 1389,  641,  950, 2315,  950,  641,
      951,  951,  951,  951,  951,  951,  951,  642,  642,  642,
      642,  642,  642,  642,  643,  643,  643,  643,  643,  643,
      643, 1390, 2315,  641,  644,  644,  644,  644,  644,  644,
      644,  645,  645,  645,  645,  645,  645,  645,  646,  646,
      646,  646,  646,  646,  646,  648, 1767,  648, 1767,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  649,  649,  649,  649,  649,  649,  649,
      652,  652,  652,  652,  652,  652,  652, 1393, 1394, 1784,
     1395, 1784,  653,  650,  651,  651,  651,  651,  651,  651,

      651,  652,  652,  652,  652,  652,  652,  652, 1404, 1406,
     1407, 1416, 1795,  653, 1795, 1393, 1394,  952, 1395,  952,
      653,  953,  953,  953,  953,  953,  953,  953,  656,  656,
      656,  656,  656,  656,  656, 1417, 1404, 1406, 1407, 1416,
      657,  653,  654,  655,  655,  655,  655,  655,  655,  655,
      656,  656,  656,  656,  656,  656,  656, 1418, 1428, 1432,
     2315, 1433,  657, 1417, 1798,  954, 1798,  954,  657,  955,
      955,  955,  955,  955,  955,  955,  660,  660,  660,  660,
      660,  660,  660, 2315, 1434, 1418, 1428, 1432,  661, 1433,
      657,  658,  659,  659,  659,  659,  659,  659,  659,  660,

      660,  660,  660,  660,  660,  660, 1435, 1436, 2315, 1437,
     1439,  661, 1434,  956, 2315,  956,  661,  957,  957,  957,
      957,  957,  957,  957,  664,  664,  664,  664,  664,  664,
      664, 1440, 2315, 2315, 1435, 1436,  665, 1437, 1439,  661,
      662,  663,  663,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  664,  664, 1808, 2315, 1808, 1441, 1440,
      665,  958, 2315,  958,  665,  959,  959,  959,  959,  959,
      959,  959,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  675,  675, 1441, 2315,  665,  676,
      676,  676,  676,  676,  676,  676,  677,  677,  677,  677,

      677,  677,  677,  682,  682,  682,  682,  682,  682,  682,
     1442, 1443, 1749, 1444, 1749,  683,  680,  681,  681,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  682,
      682, 1445, 1446, 1447, 1450, 1451,  683, 2315, 1442, 1443,
      960, 1444,  960,  683,  961,  961,  961,  961,  961,  961,
      961,  684,  684,  684,  684,  684,  684,  684, 2315, 1445,
     1446, 1447, 1450, 1451,  683,  685,  685,  685,  685,  685,
      685,  685,  686,  686,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,

      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  695,  695,  695,  695,  695,  695,  695, 1454, 1463,
     1754, 1466, 1754,  696,  693,  694,  694,  694,  694,  694,
      694,  694,  695,  695,  695,  695,  695,  695,  695, 1467,
     1468, 1469, 1470, 1756,  696, 1756, 1454, 1463,  962, 1466,
      962,  696,  963,  963,  963,  963,  963,  963,  963,  699,
      699,  699,  699,  699,  699,  699, 1471, 1467, 1468, 1469,
     1470,  700,  696,  697,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  699,  699, 1472, 1473,

     1475, 2315, 1476,  700, 1471, 1828,  964, 1828,  964,  700,
      965,  965,  965,  965,  965,  965,  965,  703,  703,  703,
      703,  703,  703,  703, 2315, 1478, 1472, 1473, 1475,  704,
     1476,  700,  701,  702,  702,  702,  702,  702,  702,  702,
      703,  703,  703,  703,  703,  703,  703, 1479, 1480, 2315,
     1483, 1488,  704, 1478,  966, 2315,  966,  704,  967,  967,
      967,  967,  967,  967,  967,  707,  707,  707,  707,  707,
      707,  707, 1489, 2315, 2315, 1479, 1480,  708, 1483, 1488,
      704,  705,  706,  706,  706,  706,  706,  706,  706,  707,
      707,  707,  707,  707,  707,  707, 1763, 2315, 1763, 1490,

     1489,  708,  968, 2315,  968,  708,  969,  969,  969,  969,
      969,  969,  969,  709,  709,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  710,  710, 1490, 2315,  708,
      713,  713,  713,  713,  713,  713,  713, 1495, 1496, 1764,
     1497, 1764,  714,  711,  712,  712,  712,  712,  712,  712,
      712,  713,  713,  713,  713,  713,  713,  713, 1508, 1509,
     1510, 1517, 1767,  714, 1767, 1495, 1496,  970, 1497,  970,
      714,  971,  971,  971,  971,  971,  971,  971,  717,  717,
      717,  717,  717,  717,  717, 1522, 1508, 1509, 1510, 1517,
      718,  714,  715,  716,  716,  716,  716,  716,  716,  716,

      717,  717,  717,  717,  717,  717,  717, 1527, 1529, 1530,
     2315, 1531,  718, 1522, 1832,  972, 1832,  972,  718,  973,
      973,  973,  973,  973,  973,  973,  721,  721,  721,  721,
      721,  721,  721, 2315, 1532, 1527, 1529, 1530,  722, 1531,
      718,  719,  720,  720,  720,  720,  720,  720,  720,  721,
      721,  721,  721,  721,  721,  721, 1533, 1537, 2315, 1538,
     1539,  722, 1532,  974, 2315,  974,  722,  975,  975,  975,
      975,  975,  975,  975,  725,  725,  725,  725,  725,  725,
      725, 1540, 2315, 2315, 1533, 1537,  726, 1538, 1539,  722,
      723,  724,  724,  724,  724,  724,  724,  724,  725,  725,

      725,  725,  725,  725,  725, 1541, 1784, 1542, 1784, 1540,
      726,  976, 2315,  976,  726,  977,  977,  977,  977,  977,
      977,  977,  729,  729,  729,  729,  729,  729,  729, 1481,
     1543, 2315, 1544, 1541,  730, 1542, 1482, 2315,  726,  727,
      728,  728,  728,  728,  728,  728,  728,  729,  729,  729,
      729,  729,  729,  729, 1545, 1546, 2315, 1481, 1543,  730,
     1544,  978,  730,  978, 1482,  979,  979,  979,  979,  979,
      979,  979,  733,  733,  733,  733,  733,  733,  733, 1549,
     2315, 2315, 1545, 1546,  734, 2315, 2315,  730,  731,  732,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,

      733,  733,  733, 1550, 2315, 1551, 1552, 1549,  734,  980,
     2315,  980,  734,  981,  981,  981,  981,  981,  981,  981,
      737,  737,  737,  737,  737,  737,  737, 1557, 1559, 2315,
     1560, 1550,  738, 1551, 1552, 2315,  734,  735,  736,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,
      737,  737, 1561, 1562, 2315, 1557, 1559,  738, 1560,  982,
      738,  982, 2315,  983,  983,  983,  983,  983,  983,  983,
      741,  741,  741,  741,  741,  741,  741, 1565, 2315, 2315,
     1561, 1562,  742, 2315, 2315,  738,  739,  740,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  741,  741,  741,

      741, 1566, 2315, 1567, 1568, 1565,  742,  984, 2315,  984,
      742,  985,  985,  985,  985,  985,  985,  985,  745,  745,
      745,  745,  745,  745,  745, 1569, 1570, 2315, 1571, 1566,
      746, 1567, 1568, 2315,  742,  743,  744,  744,  744,  744,
      744,  744,  744,  745,  745,  745,  745,  745,  745,  745,
     1572, 1573, 2315, 1569, 1570,  746, 1571,  986,  746,  986,
     2315,  987,  987,  987,  987,  987,  987,  987,  749,  749,
      749,  749,  749,  749,  749, 1574, 2315, 2315, 1572, 1573,
      750, 2315, 2315,  746,  747,  748,  748,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  749, 1850,

     2315, 1850, 1575, 1574,  750,  988, 2315,  988,  750,  989,
      989,  989,  989,  989,  989,  989,  751,  751,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  752,  752,
     1575, 2315,  750,  753,  753,  753,  753,  753,  753,  753,
      754,  754,  754,  754,  754,  754,  754,  757,  757,  757,
      757,  757,  757,  757, 1576, 1580, 1853, 1581, 1853,  758,
      755,  756,  756,  756,  756,  756,  756,  756,  757,  757,
      757,  757,  757,  757,  757, 1582, 1583, 1584, 1585, 1795,
      758, 1795, 1576, 1580,  990, 1581,  990,  758,  991,  991,
      991,  991,  991,  991,  991,  762,  762,  762,  762,  762,

      762,  762, 1587, 1582, 1583, 1584, 1585,  763,  758,  760,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762, 1588, 1589, 1798, 1593, 1798,  763,
     1587, 1858,  992, 1858,  992,  763,  993,  993,  993,  993,
      993,  993,  993,  764,  764,  764,  764,  764,  764,  764,
     2315, 2315, 1588, 1589,  766, 1593,  766,  763,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  768, 1860,  768, 1860,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      770, 1861,  770, 1861,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769,  769,  769,  772, 1862,
      772, 1862,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  774,  774,  774,  774,  774,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  777,  777,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  786,  786,  786,  786,  786,  786,  786,  787,
      787,  787,  787,  787,  787,  787,  788,  788,  788,  788,

      788,  788,  788,  791,  791,  791,  791,  791,  791,  791,
     1594, 1595, 1808, 1601, 1808,  792,  789,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791, 1602, 1603, 1606, 1607, 1609,  792, 2315, 1594, 1595,
      994, 1601,  994,  792,  995,  995,  995,  995,  995,  995,
      995,  793,  793,  793,  793,  793,  793,  793, 2315, 1602,
     1603, 1606, 1607, 1609,  792,  794,  794,  794,  794,  794,
      794,  794,  795,  795,  795,  795,  795,  795,  795,  798,
      798,  798,  798,  798,  798,  798,  799,  799,  799,  799,
      799,  799,  799,  802,  802,  802,  802,  802,  802,  802,

      810,  810,  810,  810,  810,  810,  810,  813,  813,  813,
      813,  813,  813,  813, 1610, 1611, 1872, 1612, 1872,  814,
      811,  812,  812,  812,  812,  812,  812,  812,  813,  813,
      813,  813,  813,  813,  813, 1614, 1615, 1828, 1618, 1828,
      814, 2315, 1610, 1611,  996, 1612,  996,  814,  997,  997,
      997,  997,  997,  997,  997,  815,  815,  815,  815,  815,
      815,  815, 2315, 1614, 1615,  817, 1618,  817,  814,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  819, 1832,  819, 1832,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  821, 1893,  821, 1893,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  823,
     1896,  823, 1896,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  825, 1850,  825,
     1850,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  827, 1853,  827, 1853,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  829,  830,  829, 2315,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  998, 1858,  998, 1858,  999,  999,  999,  999,  999,

      999,  999,  832, 1860,  832, 1860,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      834, 1861,  834, 1861,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  836, 1862,
      836, 1862,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  841,  841,  841,  841,
      841,  841,  841,  846,  846,  846,  846,  846,  846,  846,
      847,  847,  847,  847,  847,  847,  847,  850,  850,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  852,  852,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  965,  965,  965,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  999,  999,  999,  999,  999,  999,  999,  998,
     1070,  998, 2315,  999,  999,  999,  999,  999,  999,  999,
     1144, 1872, 1144, 1872, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1144, 1286,
     1144, 2315, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1287,
     1307, 1320, 2315, 1315, 1308, 1309, 1310, 1316, 1317, 1318,
     1321, 1341, 1391, 2315, 1330, 1385, 1330, 1286, 1386, 1387,

     1619, 1931, 1392, 1931, 1342, 1331, 1388, 1287, 1307, 1320,
     1332, 1315, 1308, 1309, 1310, 1316, 1317, 1318, 1321, 1341,
     1391, 1491, 1939, 1385, 1939, 2315, 1386, 1387, 1619, 1484,
     1392, 1484, 1342, 2315, 1388, 1623, 1624, 1492, 1333, 1502,
     1485, 1502, 1396, 2315, 1396, 1486, 1398, 2315, 1398, 1491,
     1400, 1402, 1400, 1402, 1511, 1503, 1511, 2315, 1397, 1408,
     2315, 1408, 1399, 1623, 1624, 1492, 1401, 1403, 2315, 1410,
     1512, 1410, 1412, 1487, 1412, 1409, 1414, 1518, 1414, 1518,
     1520, 1420, 1520, 1420, 1422, 1411, 1422, 1424, 1413, 1424,
     2315, 2315, 1415, 1519, 2315, 1626, 1521, 1421, 2315, 1426,

     1423, 1426, 1429, 1425, 1429, 1534, 1547, 1534, 1547, 1455,
     1457, 1455, 1457, 2315, 1459, 1427, 1459, 1461, 1430, 1461,
     1563, 1535, 1548, 1626, 1627, 1456, 1458, 1464, 1564, 1464,
     1460, 2315, 2315, 1462, 1484, 1577, 1484, 1577, 1493, 1498,
     1493, 1498, 1500, 1465, 1500, 1502, 2315, 1502, 1563, 1536,
     1486, 1578, 1627, 1628, 1494, 1499, 1564, 1511, 1501, 1511,
     1597, 1503, 1597, 1518, 1520, 1518, 1520, 1534, 1547, 1534,
     1547, 1630, 1621, 1512, 1621, 1631, 1598, 1632, 1633, 1519,
     1521, 1628, 1634, 1535, 1548, 1635, 1636, 1637, 1622, 1638,
     1641, 1642, 1643, 1644, 1646, 1577, 1647, 1577, 1648, 1630,

     1649, 1650, 1651, 1631, 1652, 1632, 1633, 1653, 1654, 1655,
     1634, 1578, 1656, 1635, 1636, 1637, 1657, 1638, 1641, 1642,
     1643, 1644, 1646, 1597, 1647, 1597, 1648, 1659, 1649, 1650,
     1651, 1660, 1652, 1661, 1662, 1653, 1654, 1655, 1663, 1598,
     1656, 1664, 1665, 1666, 1657, 1668, 1669, 1670, 1673, 1671,
     1674, 1667, 1672, 1675, 1677, 1659, 1676, 1678, 1893, 1660,
     1893, 1661, 1662, 1681, 1683, 1684, 1663, 1685, 2315, 1664,
     1665, 1666, 1688, 1668, 1669, 1670, 1673, 1671, 1674, 1667,
     1672, 1675, 1677, 1694, 1676, 1678, 1679, 1621, 1679, 1621,
     1699, 1681, 1683, 1684, 1686, 1685, 1686, 1689, 1700, 1689,

     1688, 1691, 1680, 1622, 1703, 1695, 1692, 1695, 1704, 1706,
     1687, 1694, 1697, 1690, 1697, 1693, 1708, 1701, 1699, 1701,
     1709, 1696, 1707, 1710, 1711, 1712, 1700, 1713, 1698, 1691,
     1714, 1715, 1703, 1702, 1692, 1716, 1704, 1706, 1717, 1720,
     1718, 1721, 1718, 1693, 1708, 1722, 1723, 1724, 1709, 1725,
     1707, 1710, 1711, 1712, 1726, 1713, 1719, 1727, 1714, 1715,
     1728, 1730, 1728, 1716, 1731, 1734, 1717, 1720, 1732, 1721,
     1732, 1735, 1736, 1722, 1723, 1724, 1729, 1725, 1737, 1738,
     1740, 1738, 1726, 1741, 1733, 1727, 1742, 1743, 1744, 1730,
     1745, 1746, 1731, 1734, 1747, 1739, 1748, 1750, 1751, 1735,

     1736, 1679, 1752, 1679, 1753, 1686, 1737, 1686, 1740, 1755,
     1757, 1741, 1758, 2315, 1742, 1743, 1744, 1680, 1745, 1746,
     1759, 1687, 1747, 1760, 1748, 1750, 1751, 1689, 1765, 1689,
     1752, 1761, 1753, 1761, 1695, 1766, 1695, 1755, 1757, 1697,
     1758, 1697, 1701, 1690, 1701, 1768, 1771, 1762, 1759, 1772,
     1696, 1760, 1769, 1773, 1769, 1698, 1765, 1774, 1702, 1775,
     1776, 1777, 1778, 1766, 1779, 1780, 1781, 1782, 1770, 1783,
     1718, 1785, 1718, 1768, 1771, 1786, 1789, 1772, 1790, 1793,
     1787, 1773, 1787, 1796, 1797, 1774, 1719, 1775, 1776, 1777,
     1778, 2315, 1779, 1780, 1781, 1782, 1788, 1783, 1791, 1785,

     1791, 2315, 1809, 1786, 1789, 2315, 1790, 1793, 1728, 2315,
     1728, 1796, 1797, 1732, 1792, 1732, 1799, 1802, 1799, 1802,
     1804, 1806, 1804, 1806, 1729, 1738, 1810, 1738, 1811, 1733,
     1809, 1812, 1800, 1803, 1813, 1814, 1805, 1807, 1815, 1816,
     1817, 1739, 1818, 1820, 1818, 1821, 1822, 1823, 1825, 1826,
     1827, 1829, 1830, 1761, 1810, 1761, 1811, 1831, 1819, 1812,
     1801, 1833, 1813, 1814, 1834, 1835, 1815, 1816, 1817, 1762,
     1769, 1820, 1769, 1821, 1822, 1823, 1825, 1826, 1827, 1829,
     1830, 1836, 1838, 1840, 1838, 1831, 1770, 1841, 1842, 1833,
     1842, 1844, 1834, 1835, 1845, 1846, 1847, 1848, 1839, 1849,

     1787, 1851, 1787, 1852, 1843, 1791, 1854, 1791, 1855, 1836,
     1856, 1840, 1857, 1859, 2315, 1841, 1788, 1863, 2315, 1844,
     1864, 1792, 1845, 1846, 1847, 1848, 1799, 1849, 1799, 1851,
     1802, 1852, 1802, 1804, 1854, 1804, 1855, 1806, 1856, 1806,
     1857, 1859, 1800, 1866, 1867, 1863, 1803, 1868, 1864, 1805,
     1870, 1873, 1818, 1807, 1818, 1874, 1875, 1876, 1878, 1876,
     1879, 1880, 1881, 1882, 1883, 1884, 1886, 1884, 1819, 1887,
     1888, 1866, 1867, 1877, 1889, 1868, 1894, 1895, 1870, 1873,
     1838, 1885, 1838, 1874, 1875, 1899, 1878, 1900, 1879, 1880,
     1881, 1882, 1883, 1842, 1886, 1842, 1839, 1887, 1888, 1890,

     1891, 1892, 1889, 1901, 1894, 1895, 1897, 1902, 1897, 1843,
     1903, 1913, 1914, 1899, 1904, 1900, 1904, 1906, 1915, 1906,
     2315, 1916, 1898, 1917, 1919, 1920, 1921, 1890, 1891, 1892,
     1905, 1901, 1909, 1907, 1909, 1902, 1923, 1925, 1903, 1913,
     1914, 1930, 1932, 1910, 1911, 1933, 1915, 1934, 1912, 1916,
     1935, 1917, 1919, 1920, 1921, 1926, 1928, 1926, 1928, 1940,
     1876, 1908, 1876, 1941, 1923, 1925, 1936, 1942, 1936, 1930,
     1932, 1927, 1929, 1933, 1943, 1934, 1877, 1884, 1935, 1884,
     2315, 1944, 1937, 1944, 1946, 1952, 1946, 1940, 1948, 1957,
     1948, 1941, 1950, 1885, 1950, 1942, 1896, 1945, 1896, 1897,

     1947, 1897, 1943, 1953, 1949, 1953, 1958, 1954, 1951, 1954,
     1959, 2315, 1904, 1952, 1904, 1898, 1960, 1957, 1960, 1906,
     1961, 1906, 1961, 1955, 1962, 1909, 1963, 1909, 1905, 1964,
     1966, 1964, 1966, 1969, 1958, 1907, 1970, 1968, 1959, 1968,
     1971, 1912, 1972, 1973, 1974, 1965, 1967, 1975, 1976, 1977,
     1978, 1979, 1962, 1980, 1963, 1981, 1982, 1926, 1982, 1926,
     1983, 1969, 1983, 1984, 1970, 1931, 1985, 1931, 1971, 1987,
     1972, 1973, 1974, 1927, 1988, 1975, 1976, 1977, 1978, 1979,
     1928, 1980, 1928, 1981, 1936, 1989, 1936, 1989, 1990, 1991,
     1939, 1984, 1939, 1992, 1985, 1993, 1929, 1987, 1994, 1944,

     1937, 1944, 1988, 1995, 1946, 1995, 1946, 1996, 1948, 1996,
     1948, 1997, 1950, 1997, 1950, 1945, 1990, 1991, 2315, 2010,
     1947, 1992, 2315, 1993, 1949, 1998, 1994, 1998, 1951, 1999,
     1953, 1999, 1953, 1954, 2001, 1954, 2001, 2002, 2003, 2004,
     2005, 2007, 2005, 2007, 1960, 2000, 1960, 2010, 1961, 1955,
     1961, 2011, 1964, 2012, 1964, 2012, 2006, 2008, 1966, 2013,
     1966, 2013, 1968, 2014, 1968, 2002, 2003, 2004, 1965, 2015,
     2017, 2015, 2017, 2019, 1967, 2021, 2022, 2023, 2024, 2011,
     2025, 2026, 2027, 2028, 2315, 2016, 2018, 1982, 1983, 1982,
     1983, 2014, 2031, 2032, 2033, 2034, 2029, 1989, 2029, 1989,

     2035, 2019, 2038, 2021, 2022, 2023, 2024, 2040, 2025, 2026,
     2027, 2028, 2030, 2036, 1995, 2036, 1995, 1996, 2315, 1996,
     2031, 2032, 2033, 2034, 1997, 1998, 1997, 1998, 2035, 2037,
     2038, 1999, 2041, 1999, 2041, 2040, 2001, 2042, 2001, 2042,
     2044, 2046, 2044, 2046, 2005, 2052, 2005, 2000, 2048, 2007,
     2048, 2007, 2049, 2043, 2049, 2050, 2045, 2047, 2051, 2053,
     2006, 2012, 2013, 2012, 2013, 2008, 2054, 2055, 2015, 2055,
     2015, 2057, 2017, 2052, 2017, 2056, 2061, 2056, 2062, 2065,
     2066, 2058, 2067, 2050, 2016, 2068, 2051, 2053, 2018, 2059,
     2069, 2060, 2069, 2072, 2054, 2029, 2070, 2029, 2070, 2057,

     2073, 2074, 2075, 2076, 2061, 2076, 2062, 2065, 2066, 2058,
     2067, 2030, 2071, 2068, 2077, 2081, 2036, 2059, 2036, 2060,
     2078, 2072, 2041, 2315, 2041, 2079, 2315, 2315, 2073, 2074,
     2075, 2085, 2037, 2080, 2042, 2082, 2042, 2082, 2044, 2083,
     2044, 2083, 2077, 2081, 2046, 2084, 2046, 2084, 2078, 2048,
     2043, 2048, 2086, 2079, 2045, 2049, 2087, 2049, 2088, 2085,
     2047, 2080, 2089, 2055, 2056, 2055, 2056, 2090, 2091, 2092,
     2093, 2094, 2095, 2096, 2098, 2099, 2100, 2101, 2102, 2069,
     2086, 2069, 2104, 2097, 2087, 2103, 2088, 2103, 2107, 2108,
     2089, 2070, 2105, 2070, 2105, 2090, 2091, 2092, 2093, 2094,

     2095, 2096, 2098, 2099, 2100, 2101, 2102, 2071, 2106, 2110,
     2104, 2097, 2076, 2111, 2076, 2112, 2107, 2108, 2113, 2082,
     2113, 2082, 2083, 2084, 2083, 2084, 2116, 2117, 2118, 2120,
     2118, 2121, 2125, 2121, 2114, 2126, 2123, 2110, 2123, 2127,
     2128, 2111, 2128, 2112, 2119, 2130, 2131, 2122, 2132, 2133,
     2136, 2139, 2124, 2140, 2116, 2117, 2129, 2120, 2315, 2134,
     2125, 2134, 2115, 2126, 2137, 2144, 2137, 2127, 2103, 2105,
     2103, 2105, 2145, 2130, 2131, 2135, 2132, 2133, 2136, 2139,
     2138, 2140, 2141, 2146, 2141, 2106, 2142, 2147, 2142, 2148,
     2113, 2153, 2113, 2144, 2149, 2154, 2149, 2150, 2151, 2152,

     2145, 2155, 2143, 2155, 2160, 2118, 2114, 2118, 2156, 2161,
     2156, 2146, 2121, 2162, 2121, 2147, 2158, 2148, 2158, 2153,
     2123, 2119, 2123, 2154, 2157, 2150, 2151, 2152, 2122, 2159,
     2315, 2159, 2160, 2128, 2166, 2128, 2124, 2161, 2163, 2167,
     2163, 2162, 2164, 2168, 2164, 2134, 2169, 2134, 2169, 2129,
     2170, 2175, 2170, 2137, 2172, 2137, 2172, 2173, 2165, 2173,
     2177, 2135, 2166, 2141, 2178, 2141, 2171, 2167, 2142, 2138,
     2142, 2168, 2176, 2174, 2176, 2179, 2180, 2181, 2149, 2175,
     2149, 2182, 2188, 2182, 2143, 2184, 2189, 2184, 2177, 2192,
     2315, 2186, 2178, 2186, 2155, 2195, 2155, 2183, 2196, 2197,

     2156, 2185, 2156, 2179, 2180, 2181, 2190, 2187, 2190, 2158,
     2188, 2158, 2315, 2159, 2189, 2159, 2157, 2192, 2163, 2164,
     2163, 2164, 2194, 2195, 2194, 2315, 2196, 2197, 2169, 2170,
     2169, 2170, 2198, 2202, 2198, 2165, 2172, 2173, 2172, 2173,
     2199, 2200, 2199, 2200, 2176, 2171, 2176, 2203, 2204, 2205,
     2206, 2315, 2182, 2174, 2182, 2210, 2207, 2201, 2207, 2211,
     2208, 2202, 2208, 2184, 2186, 2184, 2186, 2209, 2183, 2209,
     2190, 2212, 2190, 2213, 2214, 2203, 2204, 2205, 2206, 2185,
     2187, 2217, 2194, 2210, 2194, 2219, 2198, 2211, 2198, 2199,
     2200, 2199, 2200, 2218, 2220, 2218, 2222, 2223, 2207, 2212,

     2207, 2213, 2214, 2208, 2224, 2208, 2201, 2227, 2209, 2217,
     2209, 2230, 2225, 2219, 2225, 2228, 2231, 2228, 2232, 2233,
     2234, 2218, 2220, 2218, 2222, 2223, 2235, 2236, 2226, 2237,
     2238, 2229, 2224, 2239, 2225, 2227, 2225, 2241, 2240, 2230,
     2240, 2243, 2244, 2228, 2231, 2228, 2232, 2233, 2234, 2242,
     2226, 2242, 2245, 2248, 2235, 2236, 2249, 2237, 2238, 2229,
     2246, 2239, 2246, 2250, 2251, 2241, 2252, 2253, 2254, 2243,
     2244, 2240, 2242, 2240, 2242, 2255, 2247, 2256, 2257, 2315,
     2245, 2248, 2267, 2246, 2249, 2246, 2258, 2268, 2258, 2269,
     2315, 2250, 2251, 2270, 2252, 2253, 2254, 2271, 2259, 2247,

     2259, 2272, 2261, 2255, 2261, 2256, 2257, 2264, 2315, 2264,
     2267, 2315, 2315, 2262, 2260, 2268, 2315, 2269, 2263, 2315,
     2258, 2270, 2258, 2265, 2259, 2271, 2259, 2315, 2273, 2272,
     2273, 2261, 2274, 2261, 2274, 2276, 2264, 2276, 2264, 2277,
     2260, 2277, 2278, 2279, 2280, 2285, 2286, 2263, 2275, 2281,
     2287, 2281, 2265, 2283, 2288, 2283, 2273, 2315, 2273, 2274,
     2289, 2274, 2289, 2315, 2276, 2282, 2276, 2315, 2315, 2284,
     2278, 2279, 2280, 2285, 2286, 2275, 2315, 2277, 2287, 2277,
     2315, 2290, 2288, 2290, 2292, 2294, 2292, 2294, 2281, 2296,
     2281, 2296, 2283, 2297, 2283, 2297, 2298, 2291, 2298, 2302,

     2293, 2295, 2303, 2300, 2282, 2300, 2315, 2289, 2284, 2289,
     2315, 2315, 2299, 2290, 2304, 2290, 2304, 2315, 2292, 2301,
     2292, 2305, 2294, 2305, 2294, 2315, 2306, 2302, 2306, 2291,
     2303, 2296, 2315, 2296, 2293, 2297, 2315, 2297, 2295, 2298,
     2307, 2298, 2307, 2300, 2308, 2300, 2308, 2309, 2311, 2309,
     2311, 2304, 2305, 2304, 2305, 2299, 2306, 2315, 2306, 2301,
     2307, 2315, 2307, 2310, 2312, 2308, 2309, 2308, 2309, 2313,
     2311, 2313, 2311, 2314, 2313, 2314, 2313, 2314, 2315, 2314,
     2315, 2315, 2310, 2315, 2315, 2315, 2312,  292,  292,  292,
      292,  292,  368,  368,  368,  368,  368,  369,  369,  369,

      369,  369,  370,  370,  370,  370,  370,  371,  371,  371,
      371,  371,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  373,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  381,  445,  445,  445,  445,  445,  466,  466,  466,
      466,  466,  467,  467,  467,  467,  467,  468,  468,  468,
      468,  468,  469,  469,  469,  469,  469,  470,  470,  470,
      470,  470,  480,  480,  480,  480,  480,  481,  481,  481,
      481,  481,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  487,  487,  487,  487,  487,  488,  488,  488,

      488,  488,  489,  489,  489,  489,  489,  490,  490,  490,
      490,  490,  491,  491,  491,  491,  491,  492,  492,  492,
      492,  492,  493,  493,  493,  493,  493,  519,  519,  519,
      519,  519,  520,  520,  520,  520,  520,  521,  521,  521,
      521,  521,  522,  522,  522,  522,  522,  524,  524,  524,
      524,  524,  525,  525,  525,  525,  525,  526,  526,  526,
      526,  526,  527,  527,  527,  527,  527,  530,  530,  530,
      530,  530,  531,  531,  531,  531,  531,  535,  535,  535,
      535,  535,  536,  536,  536,  536,  536,  537,  537,  537,
      537,  537,  541,  541,  541,  541,  541,  666,  666,  667,

      667,  668,  668,  669,  669,  670,  670,  671,  671,  672,
      672,  673,  673,  679,  679,  759,  759,  781,  781,  782,
      782,  783,  783,  784,  784,  785,  785,  797,  797,  848,
      848,  849,  849,  853,  853,  854,  854,  855,  855, 2315,
      855,  855,  858, 2315, 2315,  858,  858,  666,  666,  667,
      667,  668,  668,  669,  669,  670,  670,  671,  671,  672,
      672,  673,  673,  679,  679,  759,  759,  781,  781,  782,
      782,  783,  783,  784,  784,  785,  785,  797,  797,  848,
      848,  849,  849,  853,  853,  854,  854,  855,  855, 2315,
      855,  855,  858, 2315, 2315,  858,  858,  291, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315
    } ;

static yyconst flex_int16_t yy_chk[11371] =
    {   0,
        0,    1,    1,    1, 2433,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        3,  293,    3,  293,  315,  293,  315,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,  565,    4,  565,

      315,  298, 2432,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,  565,    5, 2431,  566,  300,  566,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    6,  298,
        6, 2430,  566,  301, 2429,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7,  300,    7, 2428,  567,  304,
      567,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,  301,    8, 2427,  570,  305,  570,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,  304,    9, 2426,
      570,  306, 2425,    9,    9,    9,    9,    9,    9,    9,
       10,   10,   10,  305,   10, 2424,  571,  310,  571,   10,

       10,   10,   10,   10,   10,   10,   11,   11,   11,  306,
       11, 2423,  571,  312, 2422,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  310,   12, 2421,  572,  316,
      572,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,  312,   13,  573,  572,  573, 2420,   13,   13,   13,
       13,   13,   13,   13,   14,   14,   14,  316,   14,  573,
      574, 2419,  574,   14,   14,   14,   14,   14,   14,   14,
       15,   15,   15,  538,   15,  538,  574,  538, 2418,   15,
       15,   15,   15,   15,   15,   15,   16,   16,   16,  542,
       16,  542,  600,  542,  600,   16,   16,   16,   16,   16,

       16,   16,   17,   17,   17, 2417,   17,   17,  600,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   18,   18,
       18, 2415,   18,   18, 2407,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   19,   19, 2392,   19,   19,
     2391,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   20,   20, 2390,   20,   20, 2389,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   21,   21, 2388,
       21,   21, 2387,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22, 2386,   22,   22, 2385,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   23,

       23, 2384,   23,   23, 2383,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   24,   24,   24, 2382,   24,   24,
     2381,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,   25, 2380,   25,   25, 2379,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   26,   26,   26, 2378,
       26,   26, 2377,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27, 2376,   27,   27, 2374,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   28,   28,
       28, 2366,   28,   28, 2251,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   29,   29, 2204,   29,   29,

     2196,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   30,   30, 2195,   30,   30, 2162,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   31,   31,   31, 2160,
       31,   31, 2077,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   32,   32,   32, 2024,   32,   32, 2023,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   33,
       33,  545,   33,  545,  601,  545,  601,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34,  879,   34,  879,
      880,  547,  880,   34,   34,   34,   34,   34,   34,   34,
       35,   35,   35,  879,   35, 1993,  881,  549,  881,   35,

       35,   35,   35,   35,   35,   35,   36,   36,   36,  547,
       36, 1973,  884,  550,  884,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37,  549,   37, 1959,  884,  551,
     1933,   37,   37,   37,   37,   37,   37,   37,   38,   38,
       38,  550,   38, 1900,  885,  552,  885,   38,   38,   38,
       38,   38,   38,   38,   39,   39,   39,  551,   39, 1883,
      886,  553,  886,   39,   39,   39,   39,   39,   39,   39,
       40,   40,   40,  552,   40, 1870,  886,  554, 1868,   40,
       40,   40,   40,   40,   40,   40,   41,   41,   41,  553,
       41, 1864,  887,  555,  887,   41,   41,   41,   41,   41,

       41,   41,   42,   42,   42,  554,   42, 1817,  888,  556,
      888,   42,   42,   42,   42,   42,   42,   42,   43,   43,
       43,  555,   43,   43,  888,   43, 1815,   43,   43,   43,
       43,   43,   43,   43,   44,   44,   44,  556,   44,   44,
      889,   44,  889,   44,   44,   44,   44,   44,   44,   44,
       45,   45,   45,  890,   45,  890,  891,  557,  891,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,  890,
       46, 1811,  892,  558,  892,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47,  557,   47,   47,  892,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   48,   48,

       48,  558,   48,   48, 1775,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   49,   49,   49, 1757,   49,   49,
     1727,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       50,   50,   50, 1638,   50,   50, 1572,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   51,   51,   51, 1571,
       51,   51, 1561,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1552,   52,   52, 1544,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   53,   53,
       53, 1543,   53,   53, 1540,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   54,   54,   54, 1531,   54,   54,

     1530,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   55,   55,   55, 1373,   55,   55,   55,   55,  893,
      560,  893, 1357,   56,   56,   56,   56,   55,   56,   56,
       56,   56,  897,  934,  897,  934,   57,   57,   57,   57,
       56,   57,   57,   57,   57,  287,  287,  287,  560,  287,
      303,  561, 1356,   57,   55,   58,   58,   58,   58, 1339,
       58,   58,   58,   58, 1019,  303, 1019,   56,   59,   59,
       59,   59,   58,   59,   59,   59,   59, 1323,  303,  561,
       57,   60,   60,   60,   60,   59,   60,   60,   60,   60,
      288,  288,  288,  303,  288,  562,  563, 1312,   60,   58,

       61,   61,   61,   61, 1297,   61,   61,   61,   61, 1022,
      564, 1022,   59,   62,   62,   62,   62,   61,   62,   62,
       62,   62, 1284,  562,  563,   60,   63,   63,   63,   63,
       62,   63,   63,   63,   63,  289,  289,  289,  564,  289,
      568,  569, 1280,   63,   61,   64,   64,   64,   64, 1246,
       64,   64,   64,   64, 1023,  575, 1023,   62,   65,   65,
       65,   65,   64,   65,   65,   65,   65, 1227,  568,  569,
       63,   66,   66,   66,   66,   65,   66,   66,   66,   66,
      290,  290,  290,  575,  290,  576,  578, 1221,   66,   64,
       67,   67,   67,   67, 1214,   67,   67,   67,   67,  579,

     1157,  580,   65,   68,   68,   68,   68,   67,   68,   68,
       68,   68, 1143,  576,  578,   66,   69,   69,   69,   69,
       68,   69,   69,   69,   69,  583,  584,  579,  311,  580,
      586,  587, 1106,   69,   67,   70,   70,   70,   70,  297,
       70,   70,   70,   70,  302,  311,  297,   68, 1104,  297,
      302, 1096,   70,  583,  584,  302,  311,  581,  586,  587,
       69,  856,  859,  856,  859,  856,  859,  297, 1024, 1095,
     1024,  588,  302,  311,  297,  589,  581,  297,  302,   70,
       71,   71,   71,  302,   71,  581,  896,  592,  896,   71,
       71,   71,   71,   71,   71,   71,   72,   72,   72,  588,

       72, 1078,  896,  589, 1071,   72,   72,   72,   72,   72,
       72,   72,   73,   73,   73,  592,   73, 1064, 1002,  593,
     1002,   73,   73,   73,   73,   73,   73,   73,   74,   74,
       74, 1025,   74, 1025, 1002,  594, 1053,   74,   74,   74,
       74,   74,   74,   74,   75,   75,   75,  593,   75, 1050,
     1003,  596, 1003,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,  594,   76,  924, 1003,  597,  911,   76,
       76,   76,   76,   76,   76,   76,   77,   77,   77,  596,
       77, 1026, 1028, 1026, 1028,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,  597,   78, 1029, 1028, 1029,

      894,   78,   78,   78,   78,   78,   78,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 1074,  876,
     1074,   81,   81,   81,   81,   79,   81,   81,   81,   81,
     1076, 1099, 1076, 1099,   82,   82,   82,   82,   81,   82,
       82,   82,   82,  317,  317,  317,  317,  317,  317,  317,
      875,   82,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,  868,  867,   81,  599,  602,  861,  559,
       80,  318,  318,  318,  318,  318,  318,  318,   82,  319,
      319,  319,  319,  319,  319,  319,  320,  320,  320,  320,
      320,  320,  320,  548,  599,  602,  861,   80,   83,   83,

       83,  291,   83,   83,    0,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   84,   84,   84,    0,   84,   84,
        0,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85, 1056,   85, 1056, 1057,  862, 1057,   85,
       85,   85,   85,   85,   85,   85,   86,   86,   86, 1056,
       86,    0, 1057,  864,    0,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   87,  862,   87,    0, 1061,  865,
     1061,   87,   87,   87,   87,   87,   87,   87,   88,   88,
       88,  864,   88,    0, 1061,  866,    0,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,  865,   89,    0,

     1073,  869, 1073,   89,   89,   89,   89,   89,   89,   89,
       90,   90,   90,  866,   90,    0, 1073,  870,    0,   90,
       90,   90,   90,   90,   90,   90,   91,   91,   91,  869,
       91,    0, 1075,  871, 1075,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,  870,   92,    0, 1075,  872,
        0,   92,   92,   92,   92,   92,   92,   92,   93,   93,
       93,  871,   93,    0, 1098,  873, 1098,   93,   93,   93,
       93,   93,   93,   93,   94,   94,   94,  872,   94,    0,
     1098,  874,    0,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,  873,   95,    0, 1100,  877, 1100,   95,

       95,   95,   95,   95,   95,   95,   96,   96,   96,  874,
       96,    0, 1100,  878,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97,  877,   97,    0, 1103,  882,
     1103,   97,   97,   97,   97,   97,   97,   97,   98,   98,
       98,  878,   98,    0, 1103,  883,    0,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   99,  882,   99,    0,
     1105,  895, 1105,   99,   99,   99,   99,   99,   99,   99,
      100,  100,  100,  883,  100,    0, 1105,  898,    0,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  895,
      101,    0, 1114,  899, 1114,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102,  898,  102,    0, 1114,  900,
        0,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  899,  103,  103,    0,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  104,  104,  104,  900,  104,  104,
        0,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  106,    0,
      106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,

      108,    0,  108,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  109,  109,  109,    0,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,  110,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111, 1116,
      111, 1116, 1117,  901, 1117,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1116,  112,    0, 1117,  902,
        0,  112,  112,  112,  112,  112,  112,  112,  113,  113,
      113,  901,  113,    0, 1127,  903, 1127,  113,  113,  113,
      113,  113,  113,  113,  114,  114,  114,  902,  114,    0,

     1127,  904,    0,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  903,  115,  115,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  904,
      116,  116,    0,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117,    0,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  118,  118,
      118,    0,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,    0,  119,  119,
        0,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      120,  120,  120,    0,  120,  120,    0,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  121,  121,  121,    0,
      121,  121,    0,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,    0,  122,  122,    0,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  123,  123,
      123,    0,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  124,  124,  124,    0,  124,  124,
        0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,    0,
      126,  126,    0,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  127,  127,  127,    0,  127,  127,    0,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
      128,    0,  128,  128,    0,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  129,  129,  129,    0,  129,  129,
        0,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,    0,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,    0,
      131,  131,    0,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,    0,  132,  132,    0,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,

      133,    0,  133,  133,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,    0,  134,  134,
        0,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      135,  135,  135, 1128,  135, 1128, 1129,  906, 1129,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136, 1130,
      136, 1130, 1129,  907,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137,  906,  137,    0, 1134,  908,
     1134,  137,  137,  137,  137,  137,  137,  137,  138,  138,
      138,  907,  138,    0, 1134,  909,    0,  138,  138,  138,
      138,  138,  138,  138,  139,  139,  139,  908,  139,    0,

     1135,  910, 1135,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  909,  140,    0, 1148,  912, 1148,  140,
      140,  140,  140,  140,  140,  140,  141,  141,  141,  910,
      141,    0, 1149,  913, 1149,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142,  912,  142,    0, 1158,  914,
     1158,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  913,  143,  143, 1158,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  914,  144,  144,
        0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      145,  145,  145,  145,  915,  145,  145,  145,  145,  916,

     1171,    0, 1171,  146,  146,  146,  146,  145,  146,  146,
      146,  146,  321,  321,  321,  321,  321,  321,  321, 1160,
      146, 1160,  915,  175,  175,  175,  175,  916,  175,  175,
      175,  175,    0,    0,  145, 1160, 1176, 1178, 1176, 1178,
      175, 1182,  917, 1182, 1185,    0, 1185,  146,  147,  147,
      147,    0,  147,  147,    0,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  175,  148,  148,
      917,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      149,  149,  149, 1170,  149, 1170, 1175,  918, 1175,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1170,

      150,    0, 1175,  919,    0,  150,  150,  150,  150,  150,
      150,  150,  151,  151,  151,  918,  151,  151, 1177,  151,
     1177,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152,  919,  152,  152, 1177,  152,    0,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,    0,  153,  153,
     1181,  153, 1181,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,    0,  154,  154, 1181,  154,    0,  154,
      154,  154,  154,  154,  154,  154,  155,  155,  155,    0,
      155,  155, 1184,  155, 1184,  155,  155,  155,  155,  155,
      155,  155,  156,  156,  156,    0,  156,  156, 1184,  156,

        0,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,    0,  157,  157, 1194,  157, 1194,  157,  157,  157,
      157,  157,  157,  157,  158,  158,  158,    0,  158,  158,
     1194,  158,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159, 1195,  159, 1195, 1197,  920, 1197,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160, 1198,
      160, 1198, 1197,  921,    0,  160,  160,  160,  160,  160,
      160,  160,  161,  161,  161,  920,  161,    0, 1199,  922,
     1199,  161,  161,  161,  161,  161,  161,  161,  162,  162,
      162,  921,  162,    0, 1199,  923,    0,  162,  162,  162,

      162,  162,  162,  162,  163,  163,  163,  922,  163,    0,
     1200,  925, 1200,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  923,  164,    0, 1210,  926, 1210,  164,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  925,
      165,    0, 1210,  927,    0,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  926,  166,    0, 1211,  929,
     1211,  166,  166,  166,  166,  166,  166,  166,  167,  167,
      167,  927,  167,    0, 1212,  930, 1212,  167,  167,  167,
      167,  167,  167,  167,  168,  168,  168,  929,  168,    0,
     1216,  931, 1216,  168,  168,  168,  168,  168,  168,  168,

      169,  169,  169,  930,  169,    0, 1236,  932, 1236,  169,
      169,  169,  169,  169,  169,  169,  170,  170,  170,  931,
      170,    0, 1236,  933,    0,  170,  170,  170,  170,  170,
      170,  170,  171,  171,  171,  932,  171,    0, 1237,  935,
     1237,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      172,  933,  172,    0, 1239, 1000, 1239,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  935,  173, 1240,
     1239, 1240, 1001,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174, 1000,  174, 1241, 1241, 1241, 1241,  174,
      174,  174,  174,  174,  174,  174,  176,  176,  176,  176,

     1001,  176,  176,  176,  176, 1250, 1260, 1250, 1260,  177,
      177,  177,  177,  176,  177,  177,  177,  177, 1261, 1264,
     1261, 1264,  178,  178,  178,  178,  177,  178,  178,  178,
      178,  322,  322,  322,  322,  322,  322,  322,    0,  178,
      176,  179,  179,  179,  179,    0,  179,  179,  179,  179,
     1266,    0, 1266,  177,  180,  180,  180,  180,  179,  180,
      180,  180,  180, 1275,    0, 1275,  178,  181,  181,  181,
      181,  180,  181,  181,  181,  181,  323,  323,  323,  323,
      323,  323,  323,    0,  181,  179,  182,  182,  182,  182,
        0,  182,  182,  182,  182, 1277,    0, 1277,  180,  183,

      183,  183,  183,  182,  183,  183,  183,  183, 1004,    0,
        0,  181,  184,  184,  184,  184,  183,  184,  184,  184,
      184,  324,  324,  324,  324,  324,  324,  324,  324,  184,
      182,    0,  201,  201,  201,  201, 1004,  201,  201,  201,
      201,    0, 1278,  183, 1278, 1290, 1259, 1290, 1259,  201,
     1005, 1006,  595,  928,    0,    0,  184,  185,  185,  185,
      928,  185, 1259, 1322,  595, 1322,  185,  185,  185,  185,
      185,  185,  185,  186,  186,  186,  201,  186, 1005, 1006,
      595,  928,  186,  186,  186,  186,  186,  186,  186,  187,
      187,  187,  595,  187,    0, 1262, 1007, 1262,  187,  187,

      187,  187,  187,  187,  187,  188,  188,  188, 1324,  188,
     1324, 1262, 1009,    0,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189, 1007,  189,    0, 1263, 1010, 1263,
      189,  189,  189,  189,  189,  189,  189,  190,  190,  190,
     1009,  190,    0, 1263, 1011,    0,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191, 1010,  191,  191,    0,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192, 1011,  192,  192,    0,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193, 1289,  193,
     1289, 1293, 1012, 1293,  193,  193,  193,  193,  193,  193,

      193,  194,  194,  194, 1289,  194,    0, 1293, 1013,    0,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
     1012,  195,    0, 1307, 1014, 1307,  195,  195,  195,  195,
      195,  195,  195,  196,  196,  196, 1013,  196,    0, 1307,
     1016,    0,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197, 1014,  197, 1308, 1309, 1308, 1309,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198, 1016,  198,
     1308, 1309,    0,    0,  198,  198,  198,  198,  198,  198,
      198,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199, 1332,    0, 1332,  202,  202,  202,  202,  199,  202,

      202,  202,  202, 1349, 1351, 1349, 1351,  273,  273,  273,
      273,  202,  273,  273,  273,  273,  326,  326,  326,  326,
      326,  326,  326,  326,  273,  199,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,    0, 1017,  202, 1018,
     1020, 1021,    0,  200,  348,  348,  348,  348,  348,  348,
      348,  273,  325,  325,  325,  325,  325,  325,  325,    0,
        0, 1310, 1027, 1310,  325, 1017,    0, 1018, 1020, 1021,
      200,  203,  203,  203, 1353,  203, 1353, 1310,  203,    0,
      203,  203,  203,  203,  203,  203,  203,  204,  204,  204,
     1027,  204,  325, 1374,  204, 1374,  204,  204,  204,  204,

      204,  204,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205, 1378,    0, 1378,  274,  274,  274,  274,
      205,  274,  274,  274,  274, 1397, 1399, 1397, 1399,  275,
      275,  275,  275,  274,  275,  275,  275,  275,  327,  327,
      327,  327,  327,  327,  327,  327,  275,  205,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,    0,    0,
      274,  276,  276,  276,  276,  206,  276,  276,  276,  276,
     1401,    0, 1401,  275,  283,  283,  283,  283,  276,  283,
      283,  283,  283,  329,  329,  329,  329,  329,  329,  329,
      329,  283,  206,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,    0,    0,  276,  284,  284,  284,  284,
      207,  284,  284,  284,  284, 1403,    0, 1403,  283,  285,
      285,  285,  285,  284,  285,  285,  285,  285,  330,  330,
      330,  330,  330,  330,  330,  330,  285,  207,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,    0,  598,
      284, 1030,  313, 1031, 1409,  208, 1409, 1315,  598, 1315,
      313,  313,  313,  285,  328,  328,  328,  328,  328,  328,
      328,    0,    0, 1315, 1032,    0,  328,  598, 1033, 1030,
      313, 1031,  208,  209,  209,  209,  598,  209,  313,  313,
      313,    0,  209,  209,  209,  209,  209,  209,  209,  210,

      210,  210, 1032,  210,  328, 1411, 1033, 1411,  210,  210,
      210,  210,  210,  210,  210,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,    0,    0, 1034,  286,  286,
      286,  286,  211,  286,  286,  286,  286, 1413, 1415, 1413,
     1415,    0, 1421,  299, 1421,  286, 1015, 1423,  582, 1423,
      299,  299,  582,  582,  582, 1034,  299, 1035, 1015,  211,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      308,  299,  286, 1036, 1015,  308,  582,  212,  299,  299,
      582,  582,  582,    0,  299, 1035, 1015, 1037,  591,  863,
      308, 1038, 1039, 1040,    0,  308,  591,  863,  308, 1041,

     1425, 1036, 1425,    0,  212,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213, 1037,  591,  863,  308, 1038,
     1039, 1040,  213,  308,  591,  863,  308, 1041,  331,  331,
      331,  331,  331,  331,  331, 1427, 1430, 1427, 1430,    0,
      331,  332,  332,  332,  332,  332,  332,  332,  332,  213,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      349,  349,  349,  349,  349,  349,  349,  214,  331,  333,
      333,  333,  333,  333,  333,  333,  333,  334,  334,  334,
      334,  334,  334,  334,    0, 1042, 1043, 1044, 1045,  334,
     1431, 1448, 1431, 1448,  214,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  350,  350,  350,  350,  350,
      350,  350,  215, 1042, 1043, 1044, 1045,  334,  335,  335,
      335,  335,  335,  335,  335,  335,  336,  336,  336,  336,
      336,  336,  336,  336, 1449,    0, 1449, 1046, 1047,  215,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      351,  351,  351,  351,  351,  351,  351,  216,  337,  337,
      337,  337,  337,  337,  337, 1046, 1047, 1048, 1049,    0,
      337,  338,  338,  338,  338,  338,  338,  338,  338, 1456,
     1458, 1456, 1458,    0,  216,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217, 1048, 1049, 1051,  337, 1052,

     1054,    0,  217,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,    0,    0,
     1055, 1058, 1059,  340, 1051, 1051,    0, 1052, 1054,  217,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      352,  352,  352,  352,  352,  352,  352,  218, 1055, 1058,
     1059,  340,  341,  341,  341,  341,  341,  341,  341,  341,
      342,  342,  342,  342,  342,  342,  342,  342, 1460, 1462,
     1460, 1462, 1060, 1062,  218,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  353,  353,  353,  353,  353,
      353,  353,  219,  343,  343,  343,  343,  343,  343,  343,

     1060, 1062, 1063, 1065, 1066,  343,  344,  344,  344,  344,
      344,  344,  344,  344, 1465, 1477, 1465, 1477,    0,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
     1063, 1065, 1066,  343, 1067, 1068,    0,  220,  345,  345,
      345,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  346,  346,    0,    0, 1069, 1072, 1077,  346, 1486,
        0, 1486, 1067, 1068,  220,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  355,  355,  355,  355,  355,
      355,  355,  221, 1069, 1072, 1077,  346,  347,  347,  347,
      347,  347,  347,  347,  347,  354, 1494,  354, 1494,  354,

      354,  354,  354,  354,  354,  354, 1499,    0, 1499,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      376,  376,  376,  376,  376,  376,  376,  222,  356,  356,
      356,  356,  356,  356,  356,  356,  357,  357,  357,  357,
      357,  357,  357,    0,    0, 1079, 1080, 1081,  357, 1501,
     1503, 1501, 1503,    0,  222,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  377,  377,  377,  377,  377,
      377,  377,  223, 1079, 1080, 1081,  357,  358,  358,  358,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      359,  359,  359, 1082, 1504, 1505, 1504, 1505,    0,  223,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      360,  360,  360,  360,  360,  360,  360,  224,    0,    0,
     1083, 1082,  360,  361,  361,  361,  361,  361,  361,  361,
      361,  362,  362,  362,  362,  362,  362,  362,  362, 1084,
     1085, 1086,    0,    0,  224,  225,  225,  225, 1083,  225,
      360, 1506, 1087, 1506,  225,  225,  225,  225,  225,  225,
      225,  226,  226,  226, 1507,  226, 1507, 1084, 1085, 1086,
      226,  226,  226,  226,  226,  226,  226,  227,  227,  227,
     1087,  227,  227,    0,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,    0,  228,  228,    0,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  229,
      229,  229, 1316,  229, 1316, 1317, 1088, 1317,  229,  229,
      229,  229,  229,  229,  229,  230,  230,  230, 1316,  230,
        0, 1317, 1090,    0,  230,  230,  230,  230,  230,  230,
      230,  231,  231,  231, 1088,  231,  231, 1318,  231, 1318,
      231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
     1090,  232,  232, 1318,  232,    0,  232,  232,  232,  232,
      232,  232,  232,  233,  233,  233,    0,  233,  233, 1325,
      233, 1325,  233,  233,  233,  233,  233,  233,  233,  234,
      234,  234,    0,  234,  234, 1325,  234,    0,  234,  234,

      234,  234,  234,  234,  234,  235,  235,  235,    0,  235,
      235, 1326,  235, 1326,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236,    0,  236,  236, 1326,  236,    0,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
        0,  237,  237, 1327,  237, 1327,  237,  237,  237,  237,
      237,  237,  237,  238,  238,  238,    0,  238,  238, 1327,
      238,    0,  238,  238,  238,  238,  238,  238,  238,  239,
      239,  239,    0,  239,  239, 1328,  239, 1328,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,    0,  240,
      240, 1328,  240,    0,  240,  240,  240,  240,  240,  240,

      240,  241,  241,  241,    0,  241,  241, 1330,  241, 1330,
      241,  241,  241,  241,  241,  241,  241,  242,  242,  242,
        0,  242,  242, 1330,  242,    0,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,    0,  243,  243, 1331,
      243, 1331,  243,  243,  243,  243,  243,  243,  243,  244,
      244,  244,    0,  244,  244, 1331,  244,    0,  244,  244,
      244,  244,  244,  244,  244,  245,  245,  245,    0,  245,
      245, 1350,  245, 1350,  245,  245,  245,  245,  245,  245,
      245,  246,  246,  246,    0,  246,  246, 1350,  246,    0,
      246,  246,  246,  246,  246,  246,  246,  247,  247,  247,

        0,  247,  247, 1352,  247, 1352,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,    0,  248,  248, 1352,
      248,    0,  248,  248,  248,  248,  248,  248,  248,  249,
      249,  249,    0,  249,  249, 1359,  249, 1359,  249,  249,
      249,  249,  249,  249,  249,  250,  250,  250,    0,  250,
      250, 1359,  250,    0,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  378,  378,  378,  378,  378,  378,  378,  251,  363,
      363,  363,  363,  363,  363,  363,    0, 1360, 1092, 1360,
     1093,  363,  364,  364,  364,  364,  364,  364,  364,  364,

     1512,    0, 1512, 1360,    0,  251,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252, 1092, 1089, 1093,  363,
     1089, 1097,    0,  252,  365,  365,  365,  365,  365,  365,
      365,  365,  366,  366,  366,  366,  366,  366,  366, 1089,
        0, 1101, 1102, 1107,  366, 1089,    0,    0, 1089, 1097,
      252,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  379,  379,  379,  379,  379,  379,  379,  253, 1101,
     1102, 1107,  366,  367,  367,  367,  367,  367,  367,  367,
      367,  382,  382,  382,  382,  382,  382,  382,  382, 1513,
     1514, 1513, 1514, 1108, 1109,  253,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  385,  385,  385,  385,
      385,  385,  385,  254,  383,  383,  383,  383,  383,  383,
      383, 1108, 1109, 1110,    0, 1111,  383,  384,  384,  384,
      384,  384,  384,  384,  384, 1515, 1094, 1515, 1094,    0,
      254,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255, 1110, 1094, 1111,  383, 1112, 1113,    0,  255,  386,
      386,  386,  386,  386,  386,  386,  387,  387,  387,  387,
      387,  387,  387,  388,  388,  388,  388,  388,  388,  388,
     1094,    0,    0, 1112, 1113,  255,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  389,  389,  389,  389,

      389,  389,  389,  256,  390,  390,  390,  390,  390,  390,
      390,  391,  391,  391,  391,  391,  391,  391,  392,  392,
      392,  392,  392,  392,  392, 1516, 1519, 1516, 1519,    0,
      256,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  393,  393,  393,  393,  393,  393,  393,  257,  394,
      394,  394,  394,  394,  394,  394,  394,  395,  395,  395,
      395,  395,  395,  395,    0,    0, 1115, 1118, 1119,  395,
     1521, 1523, 1521, 1523,    0,  257,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  406,  406,  406,  406,
      406,  406,  406,  258, 1115, 1118, 1119,  395,  396,  396,

      396,  396,  396,  396,  396,  396,  397,  397,  397,  397,
      397,  397,  397,  397, 1120, 1121, 1122, 1123,    0,    0,
      258,  259,  259,  259, 1361,  259, 1361, 1524,    0, 1524,
      259,  259,  259,  259,  259,  259,  259,  260,  260,  260,
     1361,  260, 1120, 1121, 1122, 1123,  260,  260,  260,  260,
      260,  260,  260,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  407,  407,  407,  407,  407,  407,  407,
      261,  398,  398,  398,  398,  398,  398,  398,    0, 1362,
     1125, 1362, 1126,  398,  399,  399,  399,  399,  399,  399,
      399,  399, 1525,    0, 1525, 1362,    0,  261,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262, 1125, 1124,
     1126,  398, 1124, 1131,    0,  262,  400,  400,  400,  400,
      400,  400,  400,  400,  401,  401,  401,  401,  401,  401,
      401,    0,    0, 1132, 1133, 1136,  401, 1124,    0,    0,
     1124, 1131,  262,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  438,  438,  438,  438,  438,  438,  438,
      263, 1132, 1133, 1136,  401,  402,  402,  402,  402,  402,
      402,  402,  402,  403,  403,  403,  403,  403,  403,  403,
      403, 1526, 1528, 1526, 1528, 1137, 1138,  263,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  439,  439,

      439,  439,  439,  439,  439,  264,  404,  404,  404,  404,
      404,  404,  404, 1137, 1138, 1139, 1140, 1141,  404,  405,
      405,  405,  405,  405,  405,  405,  405, 1535, 1548, 1535,
     1548,    0,  264,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265, 1139, 1140, 1141,  404, 1142, 1147,    0,
      265,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,    0,    0, 1150, 1151,
     1152,  409, 1553,    0, 1553, 1142, 1147,  265,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  440,  440,
      440,  440,  440,  440,  440,  266, 1150, 1151, 1152,  409,

      410,  410,  410,  410,  410,  410,  410,  410,  411,  411,
      411,  411,  411,  411,  411,  411, 1554, 1555, 1554, 1555,
     1153, 1154,  266,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  441,  441,  441,  441,  441,  441,  441,
      267,  412,  412,  412,  412,  412,  412,  412, 1153, 1154,
     1155, 1156, 1159,  412,  413,  413,  413,  413,  413,  413,
      413,  413, 1556, 1558, 1556, 1558,    0,  267,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268, 1155, 1156,
     1159,  412, 1161, 1162,    0,  268,  414,  414,  414,  414,
      414,  414,  414,  414,  415,  415,  415,  415,  415,  415,

      415,    0,    0, 1364, 1163, 1364,  415, 1091, 1164, 1165,
     1161, 1162,  268,  269,  269,  269, 1578,  269, 1578, 1364,
     1091,    0,  269,  269,  269,  269,  269,  269,  269,  270,
      270,  270, 1163,  270,  415, 1091, 1164, 1165,  270,  270,
      270,  270,  270,  270,  270,  271,  271,  271, 1091,  271,
        0, 1377, 1166, 1377,  271,  271,  271,  271,  271,  271,
      271,  272,  272,  272, 1579,  272, 1579, 1377, 1167,    0,
      272,  272,  272,  272,  272,  272,  272,  277,  277,  277,
     1166,  277,    0, 1389, 1168, 1389,  277,  277,  277,  277,
      277,  277,  277,  278,  278,  278, 1167,  278,    0, 1389,

     1169,    0,  278,  278,  278,  278,  278,  278,  278,  279,
      279,  279, 1168,  279,    0, 1393, 1172, 1393,  279,  279,
      279,  279,  279,  279,  279,  280,  280,  280, 1169,  280,
        0, 1393, 1179,    0,  280,  280,  280,  280,  280,  280,
      280,  281,  281,  281, 1172,  281, 1180, 1394,    0, 1394,
      281,  281,  281,  281,  281,  281,  281,  282,  282,  282,
     1179,  282, 1586, 1394, 1586,    0,  282,  282,  282,  282,
      282,  282,  282,  307, 1180,  307,  416,  416,  416,  416,
      416,  416,  416,  416, 1183,    0,    0,  307, 1173,  307,
      307,  417,  417,  417,  417,  417,  417,  417,  417, 1173,

     1186, 1173, 1173, 1173,  307,  418,  418,  418,  418,  418,
      418,  418, 1183,  307,  307,  307, 1173,  418,  307,  419,
      419,  419,  419,  419,  419,  419,  419, 1173, 1186, 1173,
     1173, 1173,  307,  420,  420,  420,  420,  420,  420,  420,
      420,  307,  307,  307,  309,  418, 1187,  590,  585, 1008,
      309, 1188, 1008,  309,  905,  585,  309,  585,  590,  309,
      309,  905,  309,    0, 1189,  590, 1008,    0,  905,  309,
     1190,    0,  309, 1191, 1187,  590,  585, 1008,  309, 1188,
     1008,  309,  905,  585,  309,  585,  590,  309,  309,  905,
      309,  314, 1189,  590, 1008,  314,  905, 1146, 1190,  314,

     1174, 1191, 1192,  314, 1146,  314, 1193, 1174, 1196, 1201,
     1202,  314,  421,  421,  421,  421,  421,  421,  421,  314,
     1203, 1204, 1205,  314,  421, 1146,    0,  314, 1174,    0,
     1192,  314, 1146,  314, 1193, 1174, 1196, 1201, 1202,  314,
      422,  422,  422,  422,  422,  422,  422,  422, 1203, 1204,
     1205,    0,  421,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  424,  424,  424,    0, 1206,
     1207, 1209, 1213,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  427,  427,  427,  427,  427,  427, 1206, 1207, 1209,

     1213,  424,  427,  428,  428,  428,  428,  428,  428,  428,
      428,  429,  429,  429,  429,  429,  429,  429,  429,  430,
      430,  430,  430,  430,  430,  430,    0, 1215, 1217, 1218,
      427,  430,  431,  431,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,  432,  432,  433,  433,
      433,  433,  433,  433,  433, 1215, 1217, 1218, 1219,  430,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,
      436,  436,  436,  436,    0, 1220, 1219, 1223,  433,  436,
      437,  437,  437,  437,  437,  437,  437,  437,  442,  442,

      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,
      443,  443,  443, 1220,    0, 1223, 1225,  436,  443,  444,
      444,  444,  444,  444,  444,  444,  444,  446,  446,  446,
      446,  446,  446,  446,  446,  447,  447,  447,  447,  447,
      447,  447, 1224, 1226, 1225, 1224,  443,  447,  448,  448,
      448,  448,  448,  448,  448,  448,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,
     1224, 1226,  451, 1224,  451,  447,  451,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
      453, 1590,  453, 1590,  453,  453,  453,  453,  453,  453,

      453,  454,  454,  454,  454,  454,  454,  454,  455, 1591,
      455, 1591,  455,  455,  455,  455,  455,  455,  455,  456,
      456,  456,  456,  456,  456,  456,  457, 1592,  457, 1592,
      457,  457,  457,  457,  457,  457,  457,  458,  458,  458,
      458,  458,  458,  458,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  463,  463,  463,  463,  463,  463,  463,  464,
      464,  464,  464,  464,  464,  464,  465,  465,  465,  465,
      465,  465,  465,  471,  471,  471,  471,  471,  471,  471,

      472,  472,  472,  472,  472,  472,  472,  473,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475, 1229,
     1230, 1231, 1232, 1234,  475,  476,  476,  476,  476,  476,
      476,  476,  476,  477,  477,  477,  477,  477,  477,  477,
      478,  478,  478,  478,  478,  478,  478, 1229, 1230, 1231,
     1232, 1234,  475,  479,  479,  479,  479,  479,  479,  479,
      482,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  483,  483,  486,  486,  486,  486,  486,  486,
      486,  494,  494,  494,  494,  494,  494,  494,  495,  495,

      495,  495,  495,  495,  495,  495,  496,  496,  496,  496,
      496,  496,  496, 1238, 1242, 1596, 1244, 1596,  496,  497,
      497,  497,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  498,  498,  499,  499,  499,  499,  499,  499,
      499, 1238, 1242,  500, 1244,  500,  496,  500,  500,  500,
      500,  500,  500,  500,  501,  501,  501,  501,  501,  501,
      501,  502, 1598,  502, 1598,  502,  502,  502,  502,  502,
      502,  502,  503,  503,  503,  503,  503,  503,  503,  504,
     1599,  504, 1599,  504,  504,  504,  504,  504,  504,  504,
      505,  505,  505,  505,  505,  505,  505,  506, 1600,  506,

     1600,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507,  508, 1608,  508, 1608,  508,
      508,  508,  508,  508,  508,  508,  509,  509,  509,  509,
      509,  509,  509,  510, 1620,  510, 1620,  510,  510,  510,
      510,  510,  510,  510,  511,  511,  511,  511,  511,  511,
      511,  512,  512,  512,    0,  512,  512,  512,  512,  512,
      512,  512,  513,  513,  513,  513,  513,  513,  513,  514,
     1622,  514, 1622,  514,  514,  514,  514,  514,  514,  514,
      515,  515,  515,  515,  515,  515,  515,  516, 1645,  516,
     1645,  516,  516,  516,  516,  516,  516,  516,  517,  517,

      517,  517,  517,  517,  517,  518, 1658,  518, 1658,  518,
      518,  518,  518,  518,  518,  518,  523,  523,  523,  523,
      523,  523,  523,  528,  528,  528,  528,  528,  528,  528,
      529,  529,  529,  529,  529,  529,  529,  532,  532,  532,
      532,  532,  532,  532,  533,  533,  533,  533,  533,  533,
      533,  534,  534,  534,  534,  534,  534,  534,  577,    0,
      577,  603,  603,  603,  603,  603,  603,  603, 1680, 1682,
     1680, 1682,    0, 1245,  577, 1247,  577, 1248,  577,  604,
      604,  604,  604,  604,  604,  604,  605,  605,  605,  605,
      605,  605,  605,  577,  606,  606,  606,  606,  606,  606,

      606, 1245,    0, 1247,  577, 1248,  577,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      608,  577,  609,  609,  609,  609,  609,  609,  609,  610,
      610,  610,  610,  610,  610,  610, 1249, 1251, 1687, 1222,
     1687,  610,  611,  611,  611,  611,  611,  611,  611,  611,
      612,  612,  612,  612,  612,  612,  612, 1253, 1222, 1254,
     1255, 1690,  612, 1690, 1249, 1251,  613, 1222,  613,  610,
      613,  613,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  614,  614, 1256, 1253,    0, 1254, 1255,  614,
      612,  615,  615,  615,  615,  615,  615,  615,  615,  616,

      616,  616,  616,  616,  616,  616, 1257, 1258, 1265,    0,
     1267,  616, 1256, 1696,  617, 1696,  617,  614,  617,  617,
      617,  617,  617,  617,  617,  618,  618,  618,  618,  618,
      618,  618,    0, 1268, 1257, 1258, 1265,  618, 1267,  616,
      619,  619,  619,  619,  619,  619,  619,  619,  620,  620,
      620,  620,  620,  620,  620, 1269, 1270,    0, 1271, 1272,
      620, 1268,  621,    0,  621,  618,  621,  621,  621,  621,
      621,  621,  621,  622,  622,  622,  622,  622,  622,  622,
     1273,    0,    0, 1269, 1270,  622, 1271, 1272,  620,  623,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,

      624,  624,  624,  624, 1274,    0, 1276, 1279, 1273,  624,
      625,    0,  625,  622,  625,  625,  625,  625,  625,  625,
      625,  626,  626,  626,  626,  626,  626,  626, 1281, 1282,
        0, 1283, 1274,  626, 1276, 1279,    0,  624,  627,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628, 1285, 1286,    0, 1281, 1282,  628, 1283,
      629,  626,  629,    0,  629,  629,  629,  629,  629,  629,
      629,  630,  630,  630,  630,  630,  630,  630, 1287,    0,
        0, 1285, 1286,  630,    0,    0,  628,  631,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,

      632,  632, 1288,    0, 1291, 1292, 1287,  632,  633,    0,
      633,  630,  633,  633,  633,  633,  633,  633,  633,  634,
      634,  634,  634,  634,  634,  634, 1294, 1295,    0, 1296,
     1288,  634, 1291, 1292,    0,  632,  635,  635,  635,  635,
      635,  635,  635,  635,  636,  636,  636,  636,  636,  636,
      636, 1298, 1299,    0, 1294, 1295,  636, 1296,  637,  634,
      637,    0,  637,  637,  637,  637,  637,  637,  637,  638,
      638,  638,  638,  638,  638,  638, 1301,    0,    0, 1298,
     1299,  638,    0,    0,  636,  639,  639,  639,  639,  639,
      639,  639,  639,  640,  640,  640,  640,  640,  640,  640,

     1698,    0, 1698, 1302, 1301,  640,  641,    0,  641,  638,
      641,  641,  641,  641,  641,  641,  641,  642,  642,  642,
      642,  642,  642,  642,  643,  643,  643,  643,  643,  643,
      643, 1302,    0,  640,  644,  644,  644,  644,  644,  644,
      644,  645,  645,  645,  645,  645,  645,  645,  646,  646,
      646,  646,  646,  646,  646,  647, 1702,  647, 1702,  647,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  648,  649,  649,  649,  649,  649,  649,  649,
      650,  650,  650,  650,  650,  650,  650, 1304, 1305, 1719,
     1306, 1719,  650,  651,  651,  651,  651,  651,  651,  651,

      651,  652,  652,  652,  652,  652,  652,  652, 1311, 1313,
     1314, 1319, 1729,  652, 1729, 1304, 1305,  653, 1306,  653,
      650,  653,  653,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  654,  654, 1320, 1311, 1313, 1314, 1319,
      654,  652,  655,  655,  655,  655,  655,  655,  655,  655,
      656,  656,  656,  656,  656,  656,  656, 1321, 1329, 1333,
        0, 1334,  656, 1320, 1733,  657, 1733,  657,  654,  657,
      657,  657,  657,  657,  657,  657,  658,  658,  658,  658,
      658,  658,  658,    0, 1335, 1321, 1329, 1333,  658, 1334,
      656,  659,  659,  659,  659,  659,  659,  659,  659,  660,

      660,  660,  660,  660,  660,  660, 1336, 1337,    0, 1338,
     1340,  660, 1335,  661,    0,  661,  658,  661,  661,  661,
      661,  661,  661,  661,  662,  662,  662,  662,  662,  662,
      662, 1341,    0,    0, 1336, 1337,  662, 1338, 1340,  660,
      663,  663,  663,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  664,  664, 1739,    0, 1739, 1342, 1341,
      664,  665,    0,  665,  662,  665,  665,  665,  665,  665,
      665,  665,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  675,  675, 1342,    0,  664,  676,
      676,  676,  676,  676,  676,  676,  677,  677,  677,  677,

      677,  677,  677,  680,  680,  680,  680,  680,  680,  680,
     1343, 1344, 1749, 1345, 1749,  680,  681,  681,  681,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  682,
      682, 1346, 1347, 1348, 1354, 1355,  682,    0, 1343, 1344,
      683, 1345,  683,  680,  683,  683,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  684,  684,    0, 1346,
     1347, 1348, 1354, 1355,  682,  685,  685,  685,  685,  685,
      685,  685,  686,  686,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,

      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  693,  693, 1358, 1363,
     1754, 1365, 1754,  693,  694,  694,  694,  694,  694,  694,
      694,  694,  695,  695,  695,  695,  695,  695,  695, 1366,
     1367, 1368, 1369, 1756,  695, 1756, 1358, 1363,  696, 1365,
      696,  693,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697, 1370, 1366, 1367, 1368,
     1369,  697,  695,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  699,  699, 1371, 1372,

     1375,    0, 1376,  699, 1370, 1762,  700, 1762,  700,  697,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,    0, 1379, 1371, 1372, 1375,  701,
     1376,  699,  702,  702,  702,  702,  702,  702,  702,  702,
      703,  703,  703,  703,  703,  703,  703, 1380, 1381,    0,
     1383, 1385,  703, 1379,  704,    0,  704,  701,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705, 1386,    0,    0, 1380, 1381,  705, 1383, 1385,
      703,  706,  706,  706,  706,  706,  706,  706,  706,  707,
      707,  707,  707,  707,  707,  707, 1763,    0, 1763, 1387,

     1386,  707,  708,    0,  708,  705,  708,  708,  708,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  710,  710, 1387,    0,  707,
      711,  711,  711,  711,  711,  711,  711, 1390, 1391, 1764,
     1392, 1764,  711,  712,  712,  712,  712,  712,  712,  712,
      712,  713,  713,  713,  713,  713,  713,  713, 1404, 1405,
     1406, 1416, 1767,  713, 1767, 1390, 1391,  714, 1392,  714,
      711,  714,  714,  714,  714,  714,  714,  714,  715,  715,
      715,  715,  715,  715,  715, 1419, 1404, 1405, 1406, 1416,
      715,  713,  716,  716,  716,  716,  716,  716,  716,  716,

      717,  717,  717,  717,  717,  717,  717, 1428, 1432, 1433,
        0, 1434,  717, 1419, 1770,  718, 1770,  718,  715,  718,
      718,  718,  718,  718,  718,  718,  719,  719,  719,  719,
      719,  719,  719,    0, 1435, 1428, 1432, 1433,  719, 1434,
      717,  720,  720,  720,  720,  720,  720,  720,  720,  721,
      721,  721,  721,  721,  721,  721, 1436, 1438,    0, 1439,
     1440,  721, 1435,  722,    0,  722,  719,  722,  722,  722,
      722,  722,  722,  722,  723,  723,  723,  723,  723,  723,
      723, 1441,    0,    0, 1436, 1438,  723, 1439, 1440,  721,
      724,  724,  724,  724,  724,  724,  724,  724,  725,  725,

      725,  725,  725,  725,  725, 1442, 1784, 1443, 1784, 1441,
      725,  726,    0,  726,  723,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  727, 1382,
     1444,    0, 1445, 1442,  727, 1443, 1382,    0,  725,  728,
      728,  728,  728,  728,  728,  728,  728,  729,  729,  729,
      729,  729,  729,  729, 1446, 1447,    0, 1382, 1444,  729,
     1445,  730,  727,  730, 1382,  730,  730,  730,  730,  730,
      730,  730,  731,  731,  731,  731,  731,  731,  731, 1451,
        0,    0, 1446, 1447,  731,    0,    0,  729,  732,  732,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,

      733,  733,  733, 1452,    0, 1453, 1454, 1451,  733,  734,
        0,  734,  731,  734,  734,  734,  734,  734,  734,  734,
      735,  735,  735,  735,  735,  735,  735, 1463, 1466,    0,
     1467, 1452,  735, 1453, 1454,    0,  733,  736,  736,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,
      737,  737, 1468, 1469,    0, 1463, 1466,  737, 1467,  738,
      735,  738,    0,  738,  738,  738,  738,  738,  738,  738,
      739,  739,  739,  739,  739,  739,  739, 1471,    0,    0,
     1468, 1469,  739,    0,    0,  737,  740,  740,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  741,  741,  741,

      741, 1472,    0, 1473, 1474, 1471,  741,  742,    0,  742,
      739,  742,  742,  742,  742,  742,  742,  742,  743,  743,
      743,  743,  743,  743,  743, 1475, 1476,    0, 1478, 1472,
      743, 1473, 1474,    0,  741,  744,  744,  744,  744,  744,
      744,  744,  744,  745,  745,  745,  745,  745,  745,  745,
     1479, 1480,    0, 1475, 1476,  745, 1478,  746,  743,  746,
        0,  746,  746,  746,  746,  746,  746,  746,  747,  747,
      747,  747,  747,  747,  747, 1481,    0,    0, 1479, 1480,
      747,    0,    0,  745,  748,  748,  748,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  749, 1788,

        0, 1788, 1482, 1481,  749,  750,    0,  750,  747,  750,
      750,  750,  750,  750,  750,  750,  751,  751,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  752,  752,
     1482,    0,  749,  753,  753,  753,  753,  753,  753,  753,
      754,  754,  754,  754,  754,  754,  754,  755,  755,  755,
      755,  755,  755,  755, 1483, 1487, 1792, 1488, 1792,  755,
      756,  756,  756,  756,  756,  756,  756,  756,  757,  757,
      757,  757,  757,  757,  757, 1489, 1490, 1491, 1492, 1795,
      757, 1795, 1483, 1487,  758, 1488,  758,  755,  758,  758,
      758,  758,  758,  758,  758,  760,  760,  760,  760,  760,

      760,  760, 1495, 1489, 1490, 1491, 1492,  760,  757,  761,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762, 1496, 1497, 1798, 1508, 1798,  762,
     1495, 1800,  763, 1800,  763,  760,  763,  763,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  764,  764,
        0,    0, 1496, 1497,  765, 1508,  765,  762,  765,  765,
      765,  765,  765,  765,  765,  766,  766,  766,  766,  766,
      766,  766,  767, 1803,  767, 1803,  767,  767,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
      769, 1805,  769, 1805,  769,  769,  769,  769,  769,  769,

      769,  770,  770,  770,  770,  770,  770,  770,  771, 1807,
      771, 1807,  771,  771,  771,  771,  771,  771,  771,  772,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  774,  774,  774,  774,  774,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  777,  777,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  786,  786,  786,  786,  786,  786,  786,  787,
      787,  787,  787,  787,  787,  787,  788,  788,  788,  788,

      788,  788,  788,  789,  789,  789,  789,  789,  789,  789,
     1509, 1510, 1808, 1522, 1808,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791, 1527, 1529, 1532, 1533, 1536,  791,    0, 1509, 1510,
      792, 1522,  792,  789,  792,  792,  792,  792,  792,  792,
      792,  793,  793,  793,  793,  793,  793,  793,    0, 1527,
     1529, 1532, 1533, 1536,  791,  794,  794,  794,  794,  794,
      794,  794,  795,  795,  795,  795,  795,  795,  795,  798,
      798,  798,  798,  798,  798,  798,  799,  799,  799,  799,
      799,  799,  799,  802,  802,  802,  802,  802,  802,  802,

      810,  810,  810,  810,  810,  810,  810,  811,  811,  811,
      811,  811,  811,  811, 1537, 1538, 1819, 1539, 1819,  811,
      812,  812,  812,  812,  812,  812,  812,  812,  813,  813,
      813,  813,  813,  813,  813, 1541, 1542, 1828, 1545, 1828,
      813,    0, 1537, 1538,  814, 1539,  814,  811,  814,  814,
      814,  814,  814,  814,  814,  815,  815,  815,  815,  815,
      815,  815,    0, 1541, 1542,  816, 1545,  816,  813,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  818, 1832,  818, 1832,  818,  818,  818,
      818,  818,  818,  818,  819,  819,  819,  819,  819,  819,

      819,  820, 1839,  820, 1839,  820,  820,  820,  820,  820,
      820,  820,  821,  821,  821,  821,  821,  821,  821,  822,
     1843,  822, 1843,  822,  822,  822,  822,  822,  822,  822,
      823,  823,  823,  823,  823,  823,  823,  824, 1850,  824,
     1850,  824,  824,  824,  824,  824,  824,  824,  825,  825,
      825,  825,  825,  825,  825,  826, 1853,  826, 1853,  826,
      826,  826,  826,  826,  826,  826,  827,  827,  827,  827,
      827,  827,  827,  828,  828,  828,    0,  828,  828,  828,
      828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
      829,  830, 1858,  830, 1858,  830,  830,  830,  830,  830,

      830,  830,  831, 1860,  831, 1860,  831,  831,  831,  831,
      831,  831,  831,  832,  832,  832,  832,  832,  832,  832,
      833, 1861,  833, 1861,  833,  833,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  834,  834,  835, 1862,
      835, 1862,  835,  835,  835,  835,  835,  835,  835,  836,
      836,  836,  836,  836,  836,  836,  841,  841,  841,  841,
      841,  841,  841,  846,  846,  846,  846,  846,  846,  846,
      847,  847,  847,  847,  847,  847,  847,  850,  850,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  852,  852,  936,  936,

      936,  936,  936,  936,  936,  937,  937,  937,  937,  937,
      937,  937,  938,  938,  938,  938,  938,  938,  938,  939,
      939,  939,  939,  939,  939,  939,  940,  940,  940,  940,
      940,  940,  940,  941,  941,  941,  941,  941,  941,  941,
      942,  942,  942,  942,  942,  942,  942,  943,  943,  943,
      943,  943,  943,  943,  944,  944,  944,  944,  944,  944,
      944,  945,  945,  945,  945,  945,  945,  945,  946,  946,
      946,  946,  946,  946,  946,  947,  947,  947,  947,  947,
      947,  947,  948,  948,  948,  948,  948,  948,  948,  949,
      949,  949,  949,  949,  949,  949,  950,  950,  950,  950,

      950,  950,  950,  951,  951,  951,  951,  951,  951,  951,
      952,  952,  952,  952,  952,  952,  952,  953,  953,  953,
      953,  953,  953,  953,  954,  954,  954,  954,  954,  954,
      954,  955,  955,  955,  955,  955,  955,  955,  956,  956,
      956,  956,  956,  956,  956,  957,  957,  957,  957,  957,
      957,  957,  958,  958,  958,  958,  958,  958,  958,  959,
      959,  959,  959,  959,  959,  959,  960,  960,  960,  960,
      960,  960,  960,  961,  961,  961,  961,  961,  961,  961,
      962,  962,  962,  962,  962,  962,  962,  963,  963,  963,
      963,  963,  963,  963,  964,  964,  964,  964,  964,  964,

      964,  965,  965,  965,  965,  965,  965,  965,  966,  966,
      966,  966,  966,  966,  966,  967,  967,  967,  967,  967,
      967,  967,  968,  968,  968,  968,  968,  968,  968,  969,
      969,  969,  969,  969,  969,  969,  970,  970,  970,  970,
      970,  970,  970,  971,  971,  971,  971,  971,  971,  971,
      972,  972,  972,  972,  972,  972,  972,  973,  973,  973,
      973,  973,  973,  973,  974,  974,  974,  974,  974,  974,
      974,  975,  975,  975,  975,  975,  975,  975,  976,  976,
      976,  976,  976,  976,  976,  977,  977,  977,  977,  977,
      977,  977,  978,  978,  978,  978,  978,  978,  978,  979,

      979,  979,  979,  979,  979,  979,  980,  980,  980,  980,
      980,  980,  980,  981,  981,  981,  981,  981,  981,  981,
      982,  982,  982,  982,  982,  982,  982,  983,  983,  983,
      983,  983,  983,  983,  984,  984,  984,  984,  984,  984,
      984,  985,  985,  985,  985,  985,  985,  985,  986,  986,
      986,  986,  986,  986,  986,  987,  987,  987,  987,  987,
      987,  987,  988,  988,  988,  988,  988,  988,  988,  989,
      989,  989,  989,  989,  989,  989,  990,  990,  990,  990,
      990,  990,  990,  991,  991,  991,  991,  991,  991,  991,
      992,  992,  992,  992,  992,  992,  992,  993,  993,  993,

      993,  993,  993,  993,  994,  994,  994,  994,  994,  994,
      994,  995,  995,  995,  995,  995,  995,  995,  996,  996,
      996,  996,  996,  996,  996,  997,  997,  997,  997,  997,
      997,  997,  998,  998,  998,  998,  998,  998,  998,  999,
      999,  999,    0,  999,  999,  999,  999,  999,  999,  999,
     1070, 1872, 1070, 1872, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1208,
     1145,    0, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1208,
     1228, 1235,    0, 1233, 1228, 1228, 1228, 1233, 1233, 1233,
     1235, 1252, 1303,    0, 1243, 1300, 1243, 1208, 1300, 1300,

     1546, 1877, 1303, 1877, 1252, 1243, 1300, 1208, 1228, 1235,
     1243, 1233, 1228, 1228, 1228, 1233, 1233, 1233, 1235, 1252,
     1303, 1388, 1885, 1300, 1885,    0, 1300, 1300, 1546, 1384,
     1303, 1384, 1252,    0, 1300, 1550, 1551, 1388, 1243, 1395,
     1384, 1395, 1396,    0, 1396, 1384, 1398,    0, 1398, 1388,
     1400, 1402, 1400, 1402, 1407, 1395, 1407,    0, 1396, 1408,
        0, 1408, 1398, 1550, 1551, 1388, 1400, 1402,    0, 1410,
     1407, 1410, 1412, 1384, 1412, 1408, 1414, 1417, 1414, 1417,
     1418, 1420, 1418, 1420, 1422, 1410, 1422, 1424, 1412, 1424,
        0,    0, 1414, 1417,    0, 1557, 1418, 1420,    0, 1426,

     1422, 1426, 1429, 1424, 1429, 1437, 1450, 1437, 1450, 1455,
     1457, 1455, 1457,    0, 1459, 1426, 1459, 1461, 1429, 1461,
     1470, 1437, 1450, 1557, 1559, 1455, 1457, 1464, 1470, 1464,
     1459,    0,    0, 1461, 1484, 1485, 1484, 1485, 1493, 1498,
     1493, 1498, 1500, 1464, 1500, 1502,    0, 1502, 1470, 1437,
     1484, 1485, 1559, 1560, 1493, 1498, 1470, 1511, 1500, 1511,
     1517, 1502, 1517, 1518, 1520, 1518, 1520, 1534, 1547, 1534,
     1547, 1562, 1549, 1511, 1549, 1563, 1517, 1564, 1565, 1518,
     1520, 1560, 1566, 1534, 1547, 1567, 1568, 1569, 1549, 1570,
     1573, 1574, 1575, 1576, 1580, 1577, 1581, 1577, 1582, 1562,

     1583, 1584, 1585, 1563, 1587, 1564, 1565, 1588, 1589, 1593,
     1566, 1577, 1594, 1567, 1568, 1569, 1595, 1570, 1573, 1574,
     1575, 1576, 1580, 1597, 1581, 1597, 1582, 1601, 1583, 1584,
     1585, 1602, 1587, 1603, 1604, 1588, 1589, 1593, 1605, 1597,
     1594, 1606, 1607, 1609, 1595, 1610, 1611, 1612, 1614, 1613,
     1615, 1609, 1613, 1616, 1617, 1601, 1616, 1617, 1893, 1602,
     1893, 1603, 1604, 1619, 1623, 1624, 1605, 1625,    0, 1606,
     1607, 1609, 1627, 1610, 1611, 1612, 1614, 1613, 1615, 1609,
     1613, 1616, 1617, 1630, 1616, 1617, 1618, 1621, 1618, 1621,
     1633, 1619, 1623, 1624, 1626, 1625, 1626, 1628, 1634, 1628,

     1627, 1629, 1618, 1621, 1636, 1631, 1629, 1631, 1637, 1639,
     1626, 1630, 1632, 1628, 1632, 1629, 1640, 1635, 1633, 1635,
     1641, 1631, 1639, 1642, 1643, 1644, 1634, 1646, 1632, 1629,
     1647, 1648, 1636, 1635, 1629, 1649, 1637, 1639, 1650, 1652,
     1651, 1653, 1651, 1629, 1640, 1654, 1655, 1656, 1641, 1657,
     1639, 1642, 1643, 1644, 1659, 1646, 1651, 1660, 1647, 1648,
     1661, 1662, 1661, 1649, 1663, 1665, 1650, 1652, 1664, 1653,
     1664, 1666, 1667, 1654, 1655, 1656, 1661, 1657, 1668, 1669,
     1670, 1669, 1659, 1671, 1664, 1660, 1672, 1673, 1674, 1662,
     1675, 1676, 1663, 1665, 1677, 1669, 1678, 1681, 1683, 1666,

     1667, 1679, 1684, 1679, 1685, 1686, 1668, 1686, 1670, 1688,
     1691, 1671, 1692,    0, 1672, 1673, 1674, 1679, 1675, 1676,
     1693, 1686, 1677, 1693, 1678, 1681, 1683, 1689, 1699, 1689,
     1684, 1694, 1685, 1694, 1695, 1700, 1695, 1688, 1691, 1697,
     1692, 1697, 1701, 1689, 1701, 1703, 1705, 1694, 1693, 1706,
     1695, 1693, 1704, 1707, 1704, 1697, 1699, 1708, 1701, 1709,
     1710, 1711, 1712, 1700, 1713, 1714, 1715, 1716, 1704, 1717,
     1718, 1720, 1718, 1703, 1705, 1721, 1723, 1706, 1724, 1726,
     1722, 1707, 1722, 1730, 1731, 1708, 1718, 1709, 1710, 1711,
     1712,    0, 1713, 1714, 1715, 1716, 1722, 1717, 1725, 1720,

     1725,    0, 1740, 1721, 1723,    0, 1724, 1726, 1728,    0,
     1728, 1730, 1731, 1732, 1725, 1732, 1734, 1735, 1734, 1735,
     1736, 1737, 1736, 1737, 1728, 1738, 1741, 1738, 1742, 1732,
     1740, 1743, 1734, 1735, 1744, 1745, 1736, 1737, 1746, 1747,
     1748, 1738, 1750, 1751, 1750, 1752, 1753, 1755, 1758, 1759,
     1760, 1765, 1766, 1761, 1741, 1761, 1742, 1768, 1750, 1743,
     1734, 1771, 1744, 1745, 1772, 1773, 1746, 1747, 1748, 1761,
     1769, 1751, 1769, 1752, 1753, 1755, 1758, 1759, 1760, 1765,
     1766, 1774, 1776, 1777, 1776, 1768, 1769, 1778, 1779, 1771,
     1779, 1780, 1772, 1773, 1781, 1782, 1783, 1785, 1776, 1786,

     1787, 1789, 1787, 1790, 1779, 1791, 1793, 1791, 1794, 1774,
     1796, 1777, 1797, 1801,    0, 1778, 1787, 1809,    0, 1780,
     1810, 1791, 1781, 1782, 1783, 1785, 1799, 1786, 1799, 1789,
     1802, 1790, 1802, 1804, 1793, 1804, 1794, 1806, 1796, 1806,
     1797, 1801, 1799, 1812, 1813, 1809, 1802, 1814, 1810, 1804,
     1816, 1820, 1818, 1806, 1818, 1821, 1822, 1823, 1824, 1823,
     1825, 1826, 1827, 1829, 1830, 1831, 1833, 1831, 1818, 1834,
     1835, 1812, 1813, 1823, 1836, 1814, 1840, 1841, 1816, 1820,
     1838, 1831, 1838, 1821, 1822, 1845, 1824, 1846, 1825, 1826,
     1827, 1829, 1830, 1842, 1833, 1842, 1838, 1834, 1835, 1837,

     1837, 1837, 1836, 1847, 1840, 1841, 1844, 1848, 1844, 1842,
     1849, 1855, 1856, 1845, 1851, 1846, 1851, 1852, 1857, 1852,
        0, 1859, 1844, 1863, 1865, 1866, 1867, 1837, 1837, 1837,
     1851, 1847, 1854, 1852, 1854, 1848, 1869, 1871, 1849, 1855,
     1856, 1875, 1878, 1854, 1854, 1879, 1857, 1880, 1854, 1859,
     1881, 1863, 1865, 1866, 1867, 1873, 1874, 1873, 1874, 1886,
     1876, 1852, 1876, 1887, 1869, 1871, 1882, 1888, 1882, 1875,
     1878, 1873, 1874, 1879, 1889, 1880, 1876, 1884, 1881, 1884,
        0, 1890, 1882, 1890, 1891, 1895, 1891, 1886, 1892, 1901,
     1892, 1887, 1894, 1884, 1894, 1888, 1896, 1890, 1896, 1897,

     1891, 1897, 1889, 1898, 1892, 1898, 1902, 1899, 1894, 1899,
     1903,    0, 1904, 1895, 1904, 1897, 1905, 1901, 1905, 1906,
     1907, 1906, 1907, 1899, 1908, 1909, 1908, 1909, 1904, 1910,
     1911, 1910, 1911, 1913, 1902, 1906, 1914, 1912, 1903, 1912,
     1915, 1909, 1916, 1917, 1918, 1910, 1911, 1919, 1920, 1921,
     1922, 1923, 1908, 1924, 1908, 1925, 1927, 1926, 1927, 1926,
     1929, 1913, 1929, 1930, 1914, 1931, 1932, 1931, 1915, 1934,
     1916, 1917, 1918, 1926, 1935, 1919, 1920, 1921, 1922, 1923,
     1928, 1924, 1928, 1925, 1936, 1937, 1936, 1937, 1938, 1940,
     1939, 1930, 1939, 1941, 1932, 1942, 1928, 1934, 1943, 1944,

     1936, 1944, 1935, 1945, 1946, 1945, 1946, 1947, 1948, 1947,
     1948, 1949, 1950, 1949, 1950, 1944, 1938, 1940,    0, 1962,
     1946, 1941,    0, 1942, 1948, 1951, 1943, 1951, 1950, 1952,
     1953, 1952, 1953, 1954, 1955, 1954, 1955, 1956, 1956, 1956,
     1957, 1958, 1957, 1958, 1960, 1952, 1960, 1962, 1961, 1954,
     1961, 1963, 1964, 1965, 1964, 1965, 1957, 1958, 1966, 1967,
     1966, 1967, 1968, 1969, 1968, 1956, 1956, 1956, 1964, 1970,
     1971, 1970, 1971, 1972, 1966, 1974, 1975, 1976, 1977, 1963,
     1978, 1979, 1980, 1981,    0, 1970, 1971, 1982, 1983, 1982,
     1983, 1969, 1985, 1986, 1987, 1988, 1984, 1989, 1984, 1989,

     1990, 1972, 1992, 1974, 1975, 1976, 1977, 1994, 1978, 1979,
     1980, 1981, 1984, 1991, 1995, 1991, 1995, 1996,    0, 1996,
     1985, 1986, 1987, 1988, 1997, 1998, 1997, 1998, 1990, 1991,
     1992, 1999, 2000, 1999, 2000, 1994, 2001, 2002, 2001, 2002,
     2003, 2004, 2003, 2004, 2005, 2010, 2005, 1999, 2006, 2007,
     2006, 2007, 2008, 2002, 2008, 2009, 2003, 2004, 2009, 2011,
     2005, 2012, 2013, 2012, 2013, 2007, 2014, 2016, 2015, 2016,
     2015, 2019, 2017, 2010, 2017, 2018, 2021, 2018, 2022, 2025,
     2026, 2020, 2027, 2009, 2015, 2028, 2009, 2011, 2017, 2020,
     2030, 2020, 2030, 2032, 2014, 2029, 2031, 2029, 2031, 2019,

     2033, 2034, 2035, 2037, 2021, 2037, 2022, 2025, 2026, 2020,
     2027, 2029, 2031, 2028, 2038, 2040, 2036, 2020, 2036, 2020,
     2039, 2032, 2041,    0, 2041, 2039,    0,    0, 2033, 2034,
     2035, 2050, 2036, 2039, 2042, 2043, 2042, 2043, 2044, 2045,
     2044, 2045, 2038, 2040, 2046, 2047, 2046, 2047, 2039, 2048,
     2042, 2048, 2051, 2039, 2044, 2049, 2052, 2049, 2053, 2050,
     2046, 2039, 2054, 2055, 2056, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
     2051, 2069, 2072, 2063, 2052, 2071, 2053, 2071, 2074, 2075,
     2054, 2070, 2073, 2070, 2073, 2057, 2058, 2059, 2060, 2061,

     2062, 2063, 2064, 2065, 2066, 2067, 2068, 2070, 2073, 2078,
     2072, 2063, 2076, 2079, 2076, 2080, 2074, 2075, 2081, 2082,
     2081, 2082, 2083, 2084, 2083, 2084, 2085, 2086, 2087, 2088,
     2087, 2089, 2091, 2089, 2081, 2092, 2090, 2078, 2090, 2093,
     2094, 2079, 2094, 2080, 2087, 2095, 2096, 2089, 2097, 2098,
     2100, 2102, 2090, 2104, 2085, 2086, 2094, 2088,    0, 2099,
     2091, 2099, 2081, 2092, 2101, 2108, 2101, 2093, 2103, 2105,
     2103, 2105, 2109, 2095, 2096, 2099, 2097, 2098, 2100, 2102,
     2101, 2104, 2106, 2110, 2106, 2105, 2107, 2111, 2107, 2112,
     2113, 2116, 2113, 2108, 2114, 2117, 2114, 2115, 2115, 2115,

     2109, 2119, 2107, 2119, 2125, 2118, 2113, 2118, 2120, 2126,
     2120, 2110, 2121, 2127, 2121, 2111, 2122, 2112, 2122, 2116,
     2123, 2118, 2123, 2117, 2120, 2115, 2115, 2115, 2121, 2124,
        0, 2124, 2125, 2128, 2131, 2128, 2123, 2126, 2129, 2132,
     2129, 2127, 2130, 2133, 2130, 2134, 2135, 2134, 2135, 2128,
     2136, 2140, 2136, 2137, 2138, 2137, 2138, 2139, 2130, 2139,
     2144, 2134, 2131, 2141, 2145, 2141, 2136, 2132, 2142, 2137,
     2142, 2133, 2143, 2139, 2143, 2146, 2147, 2148, 2149, 2140,
     2149, 2150, 2153, 2150, 2142, 2151, 2154, 2151, 2144, 2161,
        0, 2152, 2145, 2152, 2155, 2166, 2155, 2150, 2167, 2168,

     2156, 2151, 2156, 2146, 2147, 2148, 2157, 2152, 2157, 2158,
     2153, 2158,    0, 2159, 2154, 2159, 2156, 2161, 2163, 2164,
     2163, 2164, 2165, 2166, 2165,    0, 2167, 2168, 2169, 2170,
     2169, 2170, 2171, 2177, 2171, 2164, 2172, 2173, 2172, 2173,
     2174, 2175, 2174, 2175, 2176, 2170, 2176, 2178, 2179, 2180,
     2181,    0, 2182, 2173, 2182, 2188, 2183, 2175, 2183, 2189,
     2185, 2177, 2185, 2184, 2186, 2184, 2186, 2187, 2182, 2187,
     2190, 2191, 2190, 2192, 2193, 2178, 2179, 2180, 2181, 2184,
     2186, 2197, 2194, 2188, 2194, 2202, 2198, 2189, 2198, 2199,
     2200, 2199, 2200, 2201, 2203, 2201, 2205, 2206, 2207, 2191,

     2207, 2192, 2193, 2208, 2210, 2208, 2200, 2212, 2209, 2197,
     2209, 2214, 2211, 2202, 2211, 2213, 2215, 2213, 2216, 2217,
     2219, 2218, 2203, 2218, 2205, 2206, 2220, 2221, 2211, 2222,
     2223, 2213, 2210, 2224, 2225, 2212, 2225, 2227, 2226, 2214,
     2226, 2230, 2231, 2228, 2215, 2228, 2216, 2217, 2219, 2229,
     2225, 2229, 2232, 2234, 2220, 2221, 2235, 2222, 2223, 2228,
     2233, 2224, 2233, 2236, 2237, 2227, 2238, 2239, 2241, 2230,
     2231, 2240, 2242, 2240, 2242, 2243, 2233, 2244, 2245,    0,
     2232, 2234, 2252, 2246, 2235, 2246, 2247, 2253, 2247, 2254,
        0, 2236, 2237, 2255, 2238, 2239, 2241, 2256, 2248, 2246,

     2248, 2257, 2249, 2243, 2249, 2244, 2245, 2250,    0, 2250,
     2252,    0,    0, 2249, 2248, 2253,    0, 2254, 2249,    0,
     2258, 2255, 2258, 2250, 2259, 2256, 2259,    0, 2260, 2257,
     2260, 2261, 2262, 2261, 2262, 2263, 2264, 2263, 2264, 2265,
     2259, 2265, 2266, 2266, 2266, 2269, 2270, 2261, 2262, 2267,
     2271, 2267, 2264, 2268, 2272, 2268, 2273,    0, 2273, 2274,
     2275, 2274, 2275,    0, 2276, 2267, 2276,    0,    0, 2268,
     2266, 2266, 2266, 2269, 2270, 2274,    0, 2277, 2271, 2277,
        0, 2278, 2272, 2278, 2279, 2280, 2279, 2280, 2281, 2282,
     2281, 2282, 2283, 2284, 2283, 2284, 2285, 2278, 2285, 2287,

     2279, 2280, 2288, 2286, 2281, 2286,    0, 2289, 2283, 2289,
        0,    0, 2285, 2290, 2291, 2290, 2291,    0, 2292, 2286,
     2292, 2293, 2294, 2293, 2294,    0, 2295, 2287, 2295, 2290,
     2288, 2296,    0, 2296, 2292, 2297,    0, 2297, 2294, 2298,
     2299, 2298, 2299, 2300, 2301, 2300, 2301, 2302, 2303, 2302,
     2303, 2304, 2305, 2304, 2305, 2298, 2306,    0, 2306, 2300,
     2307,    0, 2307, 2302, 2303, 2308, 2309, 2308, 2309, 2310,
     2311, 2310, 2311, 2312, 2313, 2312, 2313, 2314,    0, 2314,
        0,    0, 2309,    0,    0,    0, 2311, 2316, 2316, 2316,
     2316, 2316, 2317, 2317, 2317, 2317, 2317, 2318, 2318, 2318,

     2318, 2318, 2319, 2319, 2319, 2319, 2319, 2320, 2320, 2320,
     2320, 2320, 2321, 2321, 2321, 2321, 2321, 2322, 2322, 2322,
     2322, 2322, 2323, 2323, 2323, 2323, 2323, 2324, 2324, 2324,
     2324, 2324, 2325, 2325, 2325, 2325, 2325, 2326, 2326, 2326,
     2326, 2326, 2327, 2327, 2327, 2327, 2327, 2328, 2328, 2328,
     2328, 2328, 2329, 2329, 2329, 2329, 2329, 2330, 2330, 2330,
     2330, 2330, 2331, 2331, 2331, 2331, 2331, 2332, 2332, 2332,
     2332, 2332, 2333, 2333, 2333, 2333, 2333, 2334, 2334, 2334,
     2334, 2334, 2335, 2335, 2335, 2335, 2335, 2336, 2336, 2336,
     2336, 2336, 2337, 2337, 2337, 2337, 2337, 2338, 2338, 2338,

     2338, 2338, 2339, 2339, 2339, 2339, 2339, 2340, 2340, 2340,
     2340, 2340, 2341, 2341, 2341, 2341, 2341, 2342, 2342, 2342,
     2342, 2342, 2343, 2343, 2343, 2343, 2343, 2344, 2344, 2344,
     2344, 2344, 2345, 2345, 2345, 2345, 2345, 2346, 2346, 2346,
     2346, 2346, 2347, 2347, 2347, 2347, 2347, 2348, 2348, 2348,
     2348, 2348, 2349, 2349, 2349, 2349, 2349, 2350, 2350, 2350,
     2350, 2350, 2351, 2351, 2351, 2351, 2351, 2352, 2352, 2352,
     2352, 2352, 2353, 2353, 2353, 2353, 2353, 2354, 2354, 2354,
     2354, 2354, 2355, 2355, 2355, 2355, 2355, 2356, 2356, 2356,
     2356, 2356, 2357, 2357, 2357, 2357, 2357, 2358, 2358, 2359,

     2359, 2360, 2360, 2361, 2361, 2362, 2362, 2363, 2363, 2364,
     2364, 2365, 2365, 2367, 2367, 2368, 2368, 2369, 2369, 2370,
     2370, 2371, 2371, 2372, 2372, 2373, 2373, 2375, 2375, 2393,
     2393, 2394, 2394, 2395, 2395, 2396, 2396, 2397, 2397,    0,
     2397, 2397, 2398,    0,    0, 2398, 2398, 2399, 2399, 2400,
     2400, 2401, 2401, 2402, 2402, 2403, 2403, 2404, 2404, 2405,
     2405, 2406, 2406, 2408, 2408, 2409, 2409, 2410, 2410, 2411,
     2411, 2412, 2412, 2413, 2413, 2414, 2414, 2416, 2416, 2434,
     2434, 2435, 2435, 2436, 2436, 2437, 2437, 2438, 2438,    0,
     2438, 2438, 2439,    0,    0, 2439, 2439, 2315, 2315, 2315,

     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 22 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}
















































































































































#line 3951 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define SOURCEID 16
#define SOURCEID2 17
#define GAUGEID 18
#define GAUGEID2 19
#define GAUGESTEP 20
#define NNSAVE 21
#define FFORMAT 22
#define BCT 23
#define BCX 24
#define BCY 25
#define BCZ 26
#define PREFIX 27
#define PREFIX2 28
#define PREFIX3 29
#define SEQPREFIX 30
#define SEQPREFIX2 31
#define GAUGEPREFIX 32
#define OUTPREFIX 33
#define PATHPREFIX 34
#define RESUME 35
#define SUBTRACT 36
#define SOURCELOC 37
#define SSEED 38
#define NOISETYPE 39
#define SRCTYPE 40
#define SPREC 41
#define MAXITER 42
#define SOURCEIDSTEP 43
#define HPEMIN 44
#define HPEMAX 45
#define HPEORD 46
#define CUTDIRT 47
#define CUTDIRX 48
#define CUTDIRY 49
#define CUTDIRZ 50
#define CUTANG 51
#define CUTRAD 52
#define RMIN 53
#define RMAX 54
#define AVGTT 55
#define AVGLL 56
#define MODEL_DCOEFFRE 57
#define MODEL_DCOEFFIM 58
#define MODEL_MRHO 59
#define FTRMAX1 60
#define FTRMAX2 61
#define FTRMAX3 62
#define FTRMAX4 63
#define PROPNORMSQR 64
#define QHATSQRMIN 65
#define QHATSQRMAX 66
#define NLONG 67
#define NAPE 68
#define NJACOBI 69
#define NHYP 70
#define ALPHAAPE 71
#define ALPHAHYP 72
#define KAPPAJACOBI 73
#define SRCTIMESLICE 74
#define SEQSRCTIMESLICE 75
#define SEQSRCLOCATIONX 76
#define SEQSRCLOCATIONY 77
#define SEQSRCLOCATIONZ 78
#define SEQSRCGAMMAID 79
#define MMSNOMASSES 80
#define NOLIGHTMASSES 81
#define NOSTRANGEMASSES 82
#define NOTPROCS 83
#define NOXPROCS 84
#define NOYPROCS 85
#define NOZPROCS 86
#define LOCLOC 87
#define LOCSME 88
#define SMELOC 89
#define SMESME 90
#define ROTATE 91
#define PROPPOS 92
#define GPUDEVICENUMBER 93
#define GPUPERNODE 94
#define RELDELTA 95
#define COHSRC 96
#define COHSRCBASE 97
#define COHSRCDELTA 98
#define GAUGEFILEFORMAT 99
#define RNGFILE 100
#define SRCINDEX 101
#define PROPBCTYPE 102
#define PROPGAMMA 103
#define PROPPREC 104
#define WRITESRC 105
#define READSRC 106
#define WRITEPROP 107
#define READPROP 108
#define READSEQPROP 109
#define WRITESEQSRC 110
#define WRITESEQPROP 111
#define NSAMPLE 112
#define ASOVERA 113
#define NUMTHREADS 114
#define SRCMOMX 115
#define SRCMOMY 116
#define SRCMOMZ 117
#define SNKMOMX 118
#define SNKMOMY 119
#define SNKMOMZ 120
#define SEQSRCMOM 121
#define SEQSRCMOMX 122
#define SEQSRCMOMY 123
#define SEQSRCMOMZ 124
#define CPUPREC 125
#define GPUPREC 126
#define GPUPRECSLOPPY 127
#define INVERTERTYPE 128
#define MMSID 129
#define CHKINVERSION 130
#define LAPHSTIMEPROJTYPE 131
#define LAPHSSPINPROJTYPE 132
#define LAPHSEVECPROJTYPE 133
#define LAPHSEVECNUMBER 134
#define LAPHSRNDVECNUMBER 135
#define LAPHSEVECPATHPRFX 136
#define LAPHSEVECFILEPRFX 137
#define LAPHS_TIME_SRC_NUMBER 138
#define LAPHS_SPIN_SRC_NUMBER 139
#define LAPHS_EVEC_SRC_NUMBER 140
#define LAPHS_PERAMBULATOR_PATH_PREFIX 141
#define LAPHS_PERAMBULATOR_FILE_PREFIX 142
#define COMMENT 143
#define ERROR 144

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 201 "/opt/cvc_libwrapper/read_input_parser_cvc.l"

#line 4314 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2316 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2315 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 202 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 203 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 204 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 205 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 206 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 207 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 208 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 209 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 210 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 211 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 212 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 213 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 214 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 215 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 216 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 217 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 218 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 219 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 220 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 221 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 222 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 223 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 224 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 225 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 226 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 227 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 228 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 229 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 230 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 231 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 232 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 233 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 234 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 235 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 236 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 237 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 244 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 245 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 246 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 247 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 248 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 249 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 250 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 251 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 252 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 253 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 254 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 255 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 256 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 257 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 258 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 259 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 260 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 261 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 262 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 263 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 264 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 265 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 266 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 267 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 268 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 269 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 270 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 271 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 272 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 273 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 274 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 275 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 276 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 278 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 279 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 280 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 281 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 283 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 284 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 285 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 286 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 287 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 288 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 289 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 290 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 291 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 292 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 293 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 294 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 295 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 296 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 297 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 298 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 299 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 300 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 301 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 302 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 303 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 304 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 305 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 306 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 307 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 308 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 309 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 311 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 312 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 314 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 315 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 316 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 318 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 319 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 320 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 321 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 322 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 323 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 325 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 326 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 327 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 328 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 329 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 330 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 331 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 332 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 333 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 334 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 335 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 336 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 338 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 339 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 340 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 341 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 342 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 343 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 344 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 345 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 346 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 347 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 349 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 350 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
/* start namespace inclusion here */
case 143:
YY_RULE_SETUP
#line 355 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 359 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 363 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 367 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 371 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 375 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 379 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 383 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 387 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 391 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 395 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 399 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 403 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 407 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 411 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 415 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 419 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 423 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 427 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 431 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 435 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 439 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 443 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 447 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 451 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 455 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 459 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 463 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 467 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 472 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 477 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 482 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 486 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 490 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 494 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 498 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 502 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 506 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 510 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 514 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 522 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 540 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 544 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 548 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 552 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 556 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 560 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 564 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 568 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 572 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 576 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 580 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 584 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 588 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 592 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 596 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 600 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 604 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 608 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 612 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 616 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 620 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 624 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 628 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 632 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 636 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 640 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 644 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 648 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 652 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 656 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 660 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 664 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 669 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 673 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 677 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 686 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 690 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 694 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 699 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 708 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 712 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 716 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 720 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 724 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 728 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 732 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 737 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 743 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 749 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 755 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 761 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 767 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 772 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 776 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 781 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 786 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 791 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 795 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 803 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 808 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 813 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 817 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 827 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 835 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 843 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 851 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 859 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 868 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 877 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 886 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 894 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 898 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 902 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 906 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 910 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 915 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 920 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 925 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 930 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 935 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 940 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 945 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 950 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 956 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 963 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 973 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 983 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 993 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 997 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1001 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1010 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1015 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1020 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1026 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1031 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1036 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1041 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1046 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1051 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1056 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1062 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1067 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1075 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1079 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1083 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1087 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1092 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1095 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 292:
YY_RULE_SETUP
#line 1102 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 6390 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2316 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2316 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2315);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1101 "/opt/cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

