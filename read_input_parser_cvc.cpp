
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,int len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 298
#define YY_END_OF_BUFFER 299
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2362] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  294,  294,  297,  297,  299,  296,  296,  295,

      293,  292,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  146,  149,  150,  151,  147,  148,  162,  296,
      152,  296,  296,  153,  296,  296,  155,  296,  296,  156,
      296,  296,  157,  296,  296,  154,  296,  296,  158,  296,
      296,  159,  296,  296,  160,  296,  167,  168,  170,  171,
      172,  296,  161,  184,  296,  163,  296,  296,  164,  296,
      296,  165,  296,  296,  166,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  181,  182,  183,  185,  186,  296,
      296,  188,  296,  190,  169,  191,  192,  193,  196,  197,

      198,  199,  296,  194,  296,  296,  195,  296,  296,  200,
      296,  296,  201,  296,  202,  203,  296,  204,  296,  296,
      205,  296,  296,  206,  296,  296,  207,  296,  296,  208,
      296,  296,  209,  296,  296,  210,  296,  296,  211,  296,
      296,  212,  296,  296,  213,  296,  214,  215,  217,  216,
      296,  218,  296,  296,  296,  220,  296,  221,  296,  222,
      296,  223,  296,  224,  296,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  296,  296,  296,  296,  296,
      240,  241,  242,  296,  189,  296,  243,  244,  245,  246,
      296,  296,  248,  250,  258,  259,  251,  252,  253,  254,

      255,  256,  257,  260,  296,  261,  296,  262,  296,  296,
      296,  263,  296,  264,  296,  265,  296,  267,  296,  268,
      296,  269,  296,  296,  296,  270,  296,  271,  296,  272,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  296,  296,  287,  288,  289,  296,  296,  294,  294,
      293,  292,  296,  296,  293,  292,    0,  293,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,  146,  149,  150,  151,  147,
      148,  162,  152,    0,  152,    0,  153,    0,  153,    0,
      155,    0,  155,    0,  156,    0,  156,    0,  157,    0,
      157,    0,  154,    0,  154,    0,  158,    0,  158,    0,
      159,    0,  159,    0,  160,    0,  160,    0,  167,  168,
      170,  171,  172,  161,    0,  184,  163,    0,  163,    0,
      164,    0,  164,    0,  165,    0,  165,    0,  166,    0,
      166,    0,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  183,  185,  186,  187,  188,    0,  188,    0,

      190,  169,  191,  192,  193,  196,  197,  198,  199,  194,
        0,  194,    0,  195,    0,  195,    0,  200,    0,  200,
        0,  201,    0,  201,    0,  202,  203,  204,    0,  204,
        0,  205,    0,  205,    0,  206,    0,  206,    0,  207,
        0,  207,    0,  208,    0,  208,    0,  209,    0,  209,
        0,  210,    0,  210,    0,  211,    0,  211,    0,  212,
        0,  212,    0,  213,    0,  213,    0,  214,  215,  217,
      216,  218,    0,  218,    0,  219,  220,    0,  220,    0,
      221,  222,    0,  223,    0,  224,    0,  225,    0,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,

      237,  238,  239,  240,  241,  242,  189,    0,  189,    0,
      243,  244,  245,  246,  247,  249,  248,  250,  258,  259,
      251,  252,  253,  254,  255,  256,  257,  260,  261,    0,
      261,    0,  262,    0,    0,    0,  263,    0,  264,    0,
      265,    0,  267,    0,  268,    0,  269,    0,    0,    0,
        0,  270,    0,  271,    0,  272,    0,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  294,  294,  293,  297,  297,
      293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    3,    2,    0,    0,    0,    4,    0,    5,    0,
        6,    0,   12,    0,   11,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,    0,    0,  152,    0,
      153,    0,  155,    0,  156,    0,  157,    0,  154,    0,
      158,    0,  159,    0,  160,    0,  163,    0,  164,    0,
      165,    0,  166,    0,  188,    0,  194,    0,  195,    0,
      200,    0,  201,    0,  204,    0,  205,    0,  206,    0,

      207,    0,  208,    0,  209,    0,  210,    0,  211,    0,
      212,    0,  213,    0,  218,    0,  220,    0,  189,    0,
      261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    3,    0,    0,    4,
        5,    6,   12,   11,    0,    0,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   58,    0,   57,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,   55,
        0,    0,    0,    0,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  266,    0,  273,    0,    0,   58,
       57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   16,    0,    0,    0,    0,   61,    0,   10,
        0,    0,    0,   15,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,    0,   70,
        0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   56,   55,    0,    0,    0,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  132,   10,    0,    0,   15,    0,   69,    0,    0,

        0,    0,    0,    0,    0,    0,   22,    0,   70,   73,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,   23,    0,    0,    0,    0,
        0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      132,    0,    9,    0,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   36,    0,    0,    0,  114,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,   25,    0,   26,    0,   27,    0,    0,    0,    0,
        0,   51,    0,   52,    0,   53,    0,   54,    0,    0,
        0,    0,    0,   62,    0,   63,    0,   64,    0,   65,
        0,    0,   20,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,    8,    0,    0,    0,    0,    0,    0,   86,    0,
       87,    0,   88,    0,   89,    0,    0,   71,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  114,
        0,    0,    0,    0,    0,    0,    0,    0,   17,    0,
        0,    0,    0,    0,    0,    0,    0,   37,    0,    0,
        0,    0,   72,    0,   74,    0,  115,   24,   25,   26,
       27,    0,    0,    0,    0,   49,   51,   52,   53,   54,
        0,    0,   60,    0,   59,    0,   62,   63,   64,   65,
        0,   20,    0,    0,    0,    0,    0,    0,   48,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,   86,   87,   88,   89,
        0,   71,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,   17,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,   72,   74,  115,    0,    0,    0,
       49,    0,   50,   60,   59,    0,    0,    0,    0,    0,
        0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   44,    0,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   50,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   90,    0,   40,    0,    0,
        0,    0,  116,    0,    0,   35,    0,    0,    0,    0,
        0,   68,    0,   67,    0,    0,    0,  108,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,   97,
        0,    0,    0,    0,    0,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   90,    0,    0,    0,    0,
      116,    0,   35,    0,    0,    0,    0,    0,   66,   68,

       67,    0,    0,  108,    0,    0,  102,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,  107,    0,    0,    0,  128,
        0,    0,   21,    0,    0,   97,    0,  129,    0,    0,
       47,    0,   46,    0,  131,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    0,    0,  102,
        0,    0,    0,    0,    0,    0,   92,    0,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,  107,    0,
        0,  128,    0,    0,    0,    0,  129,    0,   47,   46,

      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       91,    0,    0,    0,    0,   34,    0,    0,    0,    0,
        0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
        0,   92,    0,    0,   45,    0,    0,  103,    0,    0,
        0,    0,    0,    0,  133,    0,   98,    0,    0,    0,
        0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,    0,   84,    0,
       34,    0,    0,    0,    0,    0,  110,    0,   43,    0,
        0,    0,    0,    0,  121,    0,  122,    0,  123,    0,
       93,    0,    0,   82,  103,    0,   38,    0,  117,    0,

        0,    0,    0,  133,   98,    0,    0,    0,   29,    0,
       30,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   84,    0,    0,    0,
        0,    0,  110,    0,    0,    0,    0,    0,  121,  122,
      123,   93,    0,   42,   82,   38,  117,    0,    0,    0,
        0,   76,    0,  109,    0,    0,    0,   29,   30,    0,
        0,  101,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,    0,    0,    0,
        0,    0,   94,    0,    0,    0,   42,    0,  118,    0,
      119,    0,  120,   76,  109,    0,    0,    0,    0,    0,

      101,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,  104,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,  118,  119,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,  127,
        0,    0,    0,    0,   99,    0,    0,   33,    0,  130,
        0,    0,    0,    0,  136,    0,    0,    0,    0,    0,
      135,    0,    0,  134,    0,    0,   95,    0,  106,    0,
        0,    0,    0,    0,  127,    0,    0,    0,    0,    0,

       99,    0,  100,   33,  130,    0,    0,    0,  136,    0,
      143,    0,    0,    0,  135,    0,  142,  134,    0,  141,
        0,  106,    0,    0,    0,    0,    0,    0,  124,    0,
      125,    0,  126,    0,    0,  100,    0,    0,    0,  143,
        0,    0,    0,  142,  141,    0,  105,    0,    0,    0,
        0,    0,  124,  125,  126,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
        0,  112,    0,    0,  137,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,  137,    0,    0,
        0,    0,  138,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  138,    0,  111,    0,    0,   31,    0,
       81,    0,    0,    0,    0,    0,    0,    0,  111,    0,
       32,   31,   81,    0,    0,    0,    0,   77,    0,  113,
        0,    0,    0,    0,   32,    0,   78,    0,   79,    0,
       80,   77,  113,    0,  140,    0,  139,    0,    0,   78,
       79,   80,  140,  139,    0,  145,    0,  144,  145,  144,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    9,   10,    5,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,    1,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   45,   45,   45,   46,   45,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[2486] =
    {   0,
        0,    6,   77,   93,  109,  125,  141,  157,  173,  189,
      205,  221,  237,  253,  269,  285,  301,  317,  333,  349,
      365,  381,  397,  413,  429,  445,  461,  477,  493,  509,
      525,  541,  557,  573,  589,  605,  621,  637,  653,  669,
      685,  701,  717,  733,  749,  765,  781,  797,  813,  829,
      845,  861,  877,  893,  909,  925,  942,  955,  968,  987,
     1000, 1013, 1032, 1045, 1058, 1077, 1090, 1103, 1122, 1135,
     1148, 1167, 1211, 1227, 1243, 1259, 1275, 1291, 1307, 1323,
     1340, 1385, 1353, 1366, 1429, 1445, 1461, 1477, 1493, 1509,
     1525, 1541, 1557, 1573, 1589, 1605, 1621, 1637, 1653, 1669,

     1685, 1701, 1717, 1733, 1749, 1765, 1781, 1797, 1813, 1829,
     1845, 1861, 1877, 1893, 1909, 1925, 1941, 1957, 1973, 1989,
     2005, 2021, 2037, 2053, 2069, 2085, 2101, 2117, 2133, 2149,
     2165, 2181, 2197, 2213, 2229, 2245, 2261, 2277, 2293, 2309,
     2325, 2341, 2357, 2373, 2389, 2405, 2422, 2435, 2479, 2495,
     2511, 2527, 2543, 2559, 2575, 2591, 2607, 2623, 2639, 2655,
     2671, 2687, 2703, 2719, 2735, 2751, 2767, 2783, 2799, 2815,
     2831, 2847, 2863, 2879, 2895, 2911, 2927, 2943, 2455, 2960,
     2973, 2986, 3005, 3018, 3031, 3050, 3063, 3076, 3120, 3136,
     3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264, 3280, 3296,

     3312, 3328, 3345, 3390, 3096, 3358, 3434, 3450, 3467, 3512,
     3557, 3602, 3646, 3662, 3679, 3724, 3769, 3814, 3859, 3904,
     3949, 3994, 4039, 4084, 4129, 4174, 4219, 4264, 4308, 4324,
     4340, 4356, 4372, 4388, 4404, 4420, 4436, 4452, 4468, 4484,
     4500, 4516, 4532, 4548, 4564, 4580, 4596, 4612, 4628, 4644,
     4660, 4676, 4692, 4708, 4724, 4740, 4757, 4802, 4847, 4892,
     4937, 4982, 5027, 5072, 5116, 5132, 5149, 5194, 5239, 5284,
     5329, 5374, 5419, 5464, 5508, 5524, 5540, 5556, 3371, 3480,
     3493, 3525, 5572, 5588, 5604, 5620, 5636, 5652, 3538, 3570,
     3583, 3692,  976, 1021, 1066, 1111, 1383,11588,   80,11588,

    11588,11588, 1142,   81, 3682,   97,  100, 1150,  964,  116,
      134,  163, 5668, 3724, 5720,  159, 1142,  188, 3594, 5769,
       83,  194, 1365, 1393, 1401, 1408, 2434, 2985, 3030, 3076,
     3406, 3371, 3493, 3618, 3538, 3583, 3782, 3796, 3824, 3831,
     3873, 3881, 3912, 3926, 3958, 3965, 4007, 4015, 4047, 4061,
     4093, 4100, 4142, 4150, 4182, 4196, 3398, 3814, 3859, 3904,
     3994, 4039, 4227, 4129, 4235, 4264, 4243, 4278, 4765, 4286,
     4779, 4810, 4824, 4856, 4863, 4905,    0,    0,    0,    0,
        0,    0,    0,    0, 4174, 4757, 4892, 4912,    0,    0,
     4946, 4953, 4995, 4919, 4937, 4982, 5002, 5009, 5027, 5035,

     5042, 5049, 5081, 5088, 5158, 5166, 5202, 5174, 5216, 5247,
     5261, 5293, 5300, 5342, 5072, 5149, 5350, 5382, 5396, 5428,
     5435, 5477, 5485, 5662, 5678, 5692, 5707, 5827, 5835, 5720,
     5843, 5851, 5858, 5872, 5880, 5887, 5901, 5909, 5916, 5930,
     5938, 5945, 5959, 5967, 5974, 5988, 5194, 5329, 5374, 5464,
     5996, 6003, 6017,    0, 6025, 6032, 6046, 5798, 6053, 6064,
     6073, 6084, 6091, 6102, 6109, 6120, 6127, 6134, 6141, 6148,
     6155, 6162, 6169, 6176, 6183,    0,    0,    0,    0,    0,
     6190, 6197, 6204, 6212, 6219, 6233, 6240, 6247, 6260,    0,
        0, 6267, 6274,    0,    0, 6281,    0,    0,    0,    0,

        0,    0,    0, 6288, 6296, 6303, 6317, 6324, 6331, 6344,
     6351, 6362, 6369, 6380, 6387, 6398, 6405, 6416, 6423, 6434,
     6441, 6452, 6459, 6470, 6477, 6488, 6495, 6506, 6513, 6524,
        0,    0,    0,    0, 6531,    0,    0,    0,    0, 6538,
     6545,    0,    0, 6552, 6559, 6566,    0,    0,    0,  272,
        0,    0,    0,  288,    0,    0,  592,11588,  580, 1306,
      605,  627,  639,  652,  655,  669,  688,  709,  753,  776,
      917, 1286,  945,  989, 1006, 1003, 1039,   96,  115,  147,
     1040, 1067,  163,  195,  227,  242,  259, 1081, 1093, 4795,
     1099, 1096, 1125, 1163, 3714, 1140, 1132, 3692, 1126, 1166,

     1175, 1201, 5725, 3734, 1227, 1230, 1253, 3094, 1268, 1376,
     3584, 1380,  291,  595, 1374, 6573, 6580, 6587, 6594, 6601,
     6608, 6615, 6622, 6636, 6643, 6663, 6670, 6685, 6692, 6711,
     6718, 6734, 6741, 6759, 6766, 6783, 6790, 6807, 6814, 6832,
     6839, 6857, 6864, 6881, 6888, 6905, 6912, 6930, 6937, 6955,
     6962, 6979, 6986, 7003, 7010, 7028, 7035, 7053, 7060, 7067,
     7076, 7083, 7090, 7101, 7108, 7115, 7122, 7136, 7143, 7163,
     7170, 7185, 7192, 7211, 7218, 7234, 7241, 7259, 7266, 7283,
     7290, 7307,    0,    0,    0,    0,    0,    0,    0,    0,
     7314, 7321, 7331, 7338,    0,    0, 7345, 7359, 7366, 7386,

     7393, 7407, 7414, 7421, 7428, 7435, 7442, 7449, 7456, 7463,
     7477, 7484, 7504, 7511, 7526, 7533, 7552, 7559, 7575, 7582,
     7600, 7607, 7624, 7631, 7648, 7655, 7662, 7672, 7686, 7693,
     7713, 7720, 7735, 7742, 7761, 7768, 7784, 7791, 7809, 7816,
     7833, 7840, 7857, 7864, 7882, 7889, 7907, 7914, 7931, 7938,
     7955, 7962, 7980, 7987, 8005, 8012, 8029, 8036, 8053, 8060,
     8078, 8085, 8103, 8110, 8127, 8134, 8151, 8158, 8165, 8175,
     8182, 8189, 8203, 8210, 8230,    0, 8237, 8252, 8259, 8278,
     8285, 8300, 8307, 8318, 8325, 8336, 8343, 8354, 8361, 8368,
     8375, 8382, 8389, 8396, 8403, 8410, 8417, 8424,    0,    0,

        0,    0,    0, 8431, 8438, 8445, 8452, 8466, 8473, 8493,
     8500, 8514, 8521,    0,    0, 8528, 8535,    0,    0, 8542,
        0,    0,    0,    0,    0,    0,    0, 8549, 8556, 8570,
     8577, 8597, 8604, 8618, 8625, 8636, 8647, 8654, 8665, 8672,
     8683, 8690, 8701, 8708, 8719, 8726, 8737, 8744, 8755, 8762,
     8773, 8784, 8791, 8802, 8809, 8820, 8827,    0,    0,    0,
        0, 8834,    0,    0,    0,    0, 8841, 8848,    0,    0,
     8855, 8862, 8869,    0,    0,    0, 1192,    0,    0, 1193,
        0, 1444, 1453, 3724, 1470, 1497, 1511, 1255,  608, 1252,
     1527, 1546, 1559, 1567, 1578, 1605, 1236, 1223, 1623, 1628,

      611,  643,  659, 1652, 1675,  675,  707,  723,  755,  771,
      784,  803,  800,  950,  963, 1204, 1677, 1217,  995, 1707,
     1719, 1859, 1870, 1895, 1902, 2233, 5740, 2252, 2268, 2284,
     2300, 2310, 1191, 2332, 2339, 2408, 2408, 2449, 2486, 2498,
     2658, 2669, 2673, 2686, 2712, 1188, 2741, 2742, 2770, 3079,
     2779, 2805, 2800, 2820, 2834, 1040, 2850, 8876, 8883, 8890,
     8897, 8904, 8911, 8918, 8925, 8932, 8939, 8946, 8953, 8960,
     8967, 8974, 8981, 8988, 8995, 9002, 9009, 9016, 9023, 9030,
     9037, 9044, 9051, 9058, 9065, 9072, 9079, 9086, 9093, 9100,
     9107, 9114, 9121, 9128, 9135, 9142, 9149, 9156, 9163, 9170,

     9177, 9184, 9191, 9198, 9205, 9212, 9219, 9226, 9233, 9240,
     9247, 9254, 9261, 9268, 9275, 9282, 9289, 9296, 9303, 9310,
     9317, 9324, 9335, 9342, 9353, 2885, 2880, 1249, 1281, 2912,
     3044, 3079, 3082, 1312, 1085, 5232, 3137, 3158, 3161, 3190,
     3226, 3250, 4283, 3256, 3269, 3383, 1199, 3367, 3375, 1262,
     1313, 1329, 1349, 1361, 3379, 1464, 1362, 3391, 3586, 3593,
     3615, 3607, 3688, 3694, 3680, 3696, 3700, 3728, 3814, 3815,
     3816, 3830, 3864, 3880, 3898, 3912, 3907, 1156, 3945, 3928,
     1138, 3966, 3955, 1467, 1499, 3963, 3999, 4008, 1531, 4044,
     4031, 1135, 4033, 4076, 4079, 4084, 4098, 9364, 9375, 1119,

     4099, 1563, 1595, 1611, 1643, 4142, 1099, 4150, 4166, 1659,
     4171, 4177, 4216, 4261, 4268, 4287, 4343, 4378, 4835, 4763,
     5201, 4764, 4763, 5279, 1087, 1081, 4796, 1675, 1707, 1723,
     4792, 4832, 1880, 1074, 1883, 1054, 4845, 4859, 4849, 4940,
     4941, 4942, 5076, 1915, 5086, 2264, 2267, 5080, 5084, 5158,
     5168, 5190, 5203, 5397, 5247, 5276, 2299, 2331, 2347, 2379,
     5273, 5297, 5298, 2450, 2431, 5290, 5339, 5342, 5379, 5368,
     5412, 5436, 1036, 9382, 9393, 9400, 9411, 5726, 5420, 2467,
     2468, 5434, 5476, 5472, 5482, 5481, 5481, 5527, 1029, 2514,
     5534, 2517, 5539, 5570, 5591, 5605, 5603, 5661, 5675, 5677,

     5677, 2549, 2472, 5686, 9396, 5724, 2581, 2475, 2613, 2645,
     5727, 5729, 2661, 2674, 5720, 2693, 2690, 5727, 5731, 5768,
     5778, 5778, 5780, 5782, 5783, 2725, 2757, 5770, 2773, 2805,
     2821, 2853, 5787, 5854, 5842, 5860, 5847, 5899, 5900, 9398,
     5907, 2869, 2901, 2917, 5936, 1009, 5956, 2932, 5957, 5983,
     5991, 6060,  991, 6616, 6216, 6204, 6205, 6197,  984, 9397,
     6289, 6284, 6619, 6611, 9400, 6634, 9409, 2968, 2948, 6640,
     3109, 2949, 3307, 6634, 9472, 6661, 6683,  964, 6690, 6689,
     6678, 2969, 6718, 9410, 6736, 6741, 6728, 6736, 6751, 6777,
     3158, 2981, 3013, 3190, 3251, 3026, 6791, 3058, 6768, 6813,

     6795, 6803, 6820, 6821, 6845, 6869, 3105, 6885, 3108, 3126,
     6882,  946, 6907, 6893, 6897,  939, 6922, 6921, 6941, 6981,
     3254, 3171, 6983, 6984, 3286, 7001, 6993, 7000,  920, 7106,
     7119, 9450, 7105, 7125, 9456, 7139, 7129, 7145, 3424, 3620,
     3688, 4375, 7148,  909, 7183, 7188, 4378, 4410, 4442, 4474,
     7173, 7183, 7214, 3333,  901, 3334, 4506, 4538, 4570, 4602,
     7236, 4634, 4666, 3354, 7223, 7232, 7242, 7252, 7284, 7327,
      887, 7343, 7341, 7361, 7349, 7354, 7360, 7357, 7460, 7459,
     3366, 4698, 3367, 4730, 3437, 7442, 7468,  884,  871, 7478,
     5106, 5511, 5546, 5578, 7485, 5610, 7471, 7505, 7518, 7521,

     7522, 7521, 7539, 7564,  868, 3456, 7569, 7565, 5642, 3476,
     7585, 7604, 7629, 7852, 7654, 9480, 7672, 7661, 7678, 7679,
     9456, 5678, 7680, 7679, 7699, 5815, 9492, 9502, 9510, 3488,
     9511, 3489, 9517, 3533, 9520, 3578, 7737, 7724, 7725, 9521,
     9528, 3617, 9529, 3668, 9532, 3700, 9538, 3701, 7727, 9539,
     9547, 7753, 9550, 3705, 9551, 3710, 9556, 3763, 9557, 3798,
     7777, 9560, 3799, 3853, 7772, 7789, 7790, 7801, 7821, 9568,
     7822, 7850, 7862, 7886, 7889, 7910, 7924, 7935, 7940, 7961,
     3854, 3897, 9569, 7958, 7952, 7974, 7983, 9575, 3942, 9578,
     3943, 9579, 4031, 9586, 4032, 8008, 9587, 4077, 8018, 8029,

     8021, 8041, 9565, 8060, 8058, 8082, 8082, 8109, 8124, 4078,
     8177, 8185, 8178, 8195, 8198, 8207, 9597, 9598, 4122, 8194,
     8224, 8255, 8257, 8249, 8439, 8437, 9604, 4166, 8439, 8452,
     8456, 9605, 4167, 9609, 4212, 9615, 4213, 4282, 4314, 4327,
     4781, 8457, 8461, 8468, 9622, 4840, 4975, 4976, 5065, 5066,
     9626, 9627, 5119, 9630, 5232, 8538, 5322, 5366, 5367, 5412,
     8556, 5413, 8554,  855,  852, 8573, 8569, 9633, 5514, 9370,
     9505, 9546, 9535,  839, 9579, 9585,  836,  823, 9591, 9589,
     9637, 5559, 9648, 9617, 9623,  820, 5657, 5679, 5819, 6049,
     9606, 6070, 9624, 9612,  807, 9621, 9615, 9626, 9634, 9628,

     9638, 9639, 9632, 9644,  804,  791, 9629, 9647, 9646, 9651,
     9674, 6090, 6126, 9635, 9643, 9650, 9660, 9657, 9658, 9660,
     6321, 9675, 9675, 9678, 6368, 6386, 6404, 9666, 9665, 9673,
     6422, 9710, 6440, 6458, 6494, 9687, 9682, 9681, 9692, 9685,
     9695, 9686, 6512, 9702, 9686, 9696, 9684, 9696, 9705, 9704,
     9702, 9703, 9752, 9727, 6530, 9758, 6640, 9718, 9722, 9735,
     9767, 9748, 9771, 9754, 9741, 9778, 9788, 9762, 9746, 9793,
     9756, 9768,  745, 9780, 9762, 9759, 9780, 9782, 9776, 6663,
     9785, 9791, 9792, 9777, 9786, 9783, 9821, 9797, 9792, 9805,
     9803, 9797, 9802, 6715, 9811, 9814, 9849, 9807, 9803, 9853,

     9812, 9805, 9817, 9831, 9862, 9836, 9824, 9833, 9834, 9834,
     9840, 9842, 9843, 9845, 9881, 7051, 9862, 7107, 9849, 9852,
     9871, 9890, 7140, 9864, 9909, 7163, 9872, 9876, 9867, 9918,
     9922, 7215, 9928, 7306, 9867, 9883, 9933, 7363, 9877, 9937,
     9877, 9898, 9896, 9901, 9911, 9915, 9911, 9911, 9915,  697,
     9927, 9925, 9916, 9926, 9956, 7481, 9940, 9923, 9961, 9931,
     9945, 9965, 9941,  694, 9984, 7504, 9935, 9941, 9989, 7556,
     9993, 9999,10002,10006,10010, 7647, 9960, 9952, 9969, 9968,
     9982, 9982, 9995, 9986,10000, 7690,10023, 9999,10000, 9992,
     7713, 9988, 7765,  678,10000, 9995,10011,10034, 7857, 8150,

     8207,10002,10018, 8230,10021,10051, 8277,10013,10015,10007,
    10017,  662,10062,10031,10029,10073,10034,10030,10038,10033,
    10051, 8282,10041,10054,10083, 8324,10051,10063,10086, 8342,
    10050,10059, 8360,10063,10076, 8470,10101, 8574,10060,10108,
     8595,10111, 8642,10114, 8653, 8671,10064,10080,  649,10098,
    10102,10099,  646,10100,  630,10129, 8689,10097,10098,10100,
    10136,10101,10110,10115,10122, 8707,10108,10116,10146, 8725,
    10114,10129,10117,10134,10116,10164, 8743,10139,10140,10174,
     8779,10153,10189,10151,10153,10169,10161,10176, 8790,10195,
    10196, 8808,10202,10160,10183,10182, 8826,10178, 9370, 9381,

     9444,10176,  614,10178,10179,10181,  598,10189,  585,10193,
     9449,10225,10230,10203,10237, 9450,10185,10212,10197,10213,
    10242,  582,10248, 9453,10230,10225,10237,10229,10260,10263,
    10269, 9493,10270,10237, 9498,10273,10278, 9894,10288,10291,
    10247,10240,10253,10297,10298,10301,10306,10292,10314,10318,
    10321,10322,10284,10275,10281,10288,10291,10290,10290,10297,
    10298,10295,10295,10300,10304,10342,10346,10349,10350,10310,
    10361,10330,  535,10341,10332,10368,10372,10339,10375,10356,
    10361,10358,10344,10381,10385,10386,10389,10396,10401,10409,
    10413,10414,10417,10418,10421,10422,10426,10427,10432,10395,

    10439,10440,  532,10444,10445,10365,10410,10450,10449,10458,
    10467,10468,10426,10471,10475,10421,  519,10413,10428,10427,
    10428,10431,10449,10438,10451,10484,10492,10493,10462,10470,
    10465,10472,10499,10464,10502,10474,  516,10468,10510,10513,
    10517,10520,10521,10527,10528,10532,10536,10539,10540,10543,
    10544,10547,10548,10551,10522,10500,10524,10565,10566,10533,
    10571,10570,10574,10575,10529,10561,10537,10560,  503,  500,
    10547,10563,10552,10570,10592,10596,10599,10578,10570,10571,
    10572,10618,10622,10583,10610,10584,10625,10635,10640,10643,
    10647,10648,10652,10653,10656,10595,10608,10623,10624,10622,

    10663,10668,10628,10646,10636,10658,10655,10656,10657,10648,
    10659,10660,10661,10662,10684,10696,10685,10656,10700,10662,
    10661,10713,  487,10677,10664,10689,10724,10725,10728,10729,
    10687,10695,10733,10717,10736,10737,10713,10714,10708,10745,
    10714,10725,10734,10717,10757,10721,10764,10722,10763,10733,
    10775,10785,10788,10750,10738,10745,10762,10760,10792,10797,
    10765,10761,10762,10810,10801,10811,10814,10818,10823,10829,
    10779,10797,10795,10836,10840,10844,10794,10801,10812,10851,
    10854,10855,10859,10862,10866,10810,10870,10874,10877,10835,
    10829,10849,10863,10860,10883,10887,10894,10895,10867,10869,

    10898,10899,10902,10905,10917,  484,10871,  471,10921,10922,
    10925,10892,10890,10900,10926,10929,10930,10933,10934,10937,
    10947,10951,10923,10922,10927,10912,10917,10954,10955,10958,
    10959,10962,10965,10943,10948,10973,10945,10945,10949,10982,
      468,  455,10962,10985,10986,10990,10989,10957,10973,  452,
    10971,10970,10999,11000,11008,10986,11012,10970,11013,10982,
    10985,10986,10985,11020,10994,11002,11005,11002,11009,10999,
    11036,11037,11019,11041,11048,11021,11015,11017,11064,11020,
    11016,11039,11030,11046,11036,11069,11050,11073,11052,11055,
    11057,11081,11089,11092,11096,11099,  439,11064,11052,11065,

    11078,11083,11087,11117,11120,11121,11124,11125,11128,11132,
    11142,11105,11149,11150,11070,11071,11104,11110,11153,11154,
    11158,11159,11162,11167,11176,11177,11180,11184,11185,11188,
    11189,11195,11103,11132,11202,11206,11207,11210,11213,11214,
    11217,11218,11221,11225,11229,11232,11233,11236,11237,11240,
    11243,11244,11247,11254,11255,11258,11259,11262,11263,11266,
    11588,11277,11282,11287,11292,11297,11302,11307,11312,11317,
    11322,11327,11332,11337,11342,11347,11352,11357,11362,11367,
    11372,11377,11382,11387,11392,11397,11402,11407,11412,11417,
    11422,11427,11432,11437,11442,11447,11452,11457,11462,11467,

    11472,11477,11482,11484,11486,11488,11490,11492,11494,11496,
    11498,  477,11500,11502,11504,11506,11508,11510,11512,  464,
    11514,  461,  448,  445,  432,  429,  416,  413,  400,  397,
      384,  381,  368,  365,  352,  349,  336,  333,11516,11518,
    11520,11522,11527,11532,11534,11536,11538,11540,11542,11544,
    11546,11548,  320,11550,11552,11554,11556,11558,11560,11562,
      317,11564,  301,  274,  257,  242,  223,  210,  207,  191,
      178,  175,  159,  143,  130,  127,  111,   98,    0,11566,
    11568,11570,11572,11577,11582
    } ;

static yyconst flex_int16_t yy_def[2486] =
    {   0,
     2362, 2361, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2363, 2363, 2364, 2364,
     2365, 2365, 2366, 2366, 2367, 2367, 2368, 2368, 2369, 2369,
     2370, 2370, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2371, 2371, 2372, 2372, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,

     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2373, 2373, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2374, 2374,
     2375, 2375, 2376, 2376, 2377, 2377, 2378, 2378, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,

     2362, 2362, 2379, 2379, 2380, 2380, 2362, 2362, 2381, 2381,
     2382, 2382, 2362, 2362, 2383, 2383, 2384, 2384, 2385, 2385,
     2386, 2386, 2387, 2387, 2388, 2388, 2389, 2389, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2390, 2390, 2391, 2391,
     2392, 2392, 2393, 2393, 2362, 2362, 2394, 2394, 2395, 2395,
     2396, 2396, 2397, 2397, 2362, 2362, 2362, 2362, 2398, 2398,
     2399, 2399, 2362, 2362, 2362, 2362, 2362, 2362, 2400, 2400,
     2401, 2401, 2402, 2402, 2403, 2403, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2404, 2405, 2406, 2407,
     2408, 2409, 2410, 2411, 2361, 2361, 2361, 2361, 2412, 2413,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2414, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2415, 2416, 2417, 2418, 2419,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2420,
     2421, 2361, 2361, 2422, 2423, 2361, 2424, 2425, 2426, 2427,

     2428, 2429, 2430, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2431, 2432, 2433, 2434, 2361, 2435, 2436, 2437, 2438, 2361,
     2361, 2439, 2440, 2361, 2361, 2361, 2441, 2442, 2443, 2443,
     2443, 2443, 2444, 2444, 2444, 2444, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452,
     2361, 2361, 2361, 2361, 2453, 2454, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2455, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2456, 2457,

     2458, 2459, 2460, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2461, 2462, 2361, 2361, 2463, 2464, 2361,
     2465, 2466, 2467, 2468, 2469, 2470, 2471, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2472, 2473, 2474,
     2475, 2361, 2476, 2477, 2478, 2479, 2361, 2361, 2480, 2481,
     2361, 2361, 2361, 2482, 2483, 2484, 2484, 2484, 2485, 2485,
     2485, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
        0, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361
    } ;

static yyconst flex_int16_t yy_nxt[11661] =
    {   0,
     2361,  299,  300,  299,  866,  301,  298,  299,  300,  299,
      298,  302,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  303,  304,  305,  306,  307,  308,
      309,  310,  311,  298,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  298,  298,  322,  298,  298,  298,
      298,  298,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  298,  312,  313,  314,  315,  316,  317,  318,  319,
      320,  321,  298,  298,  322,  298,  298,  298,  299,  300,
      299,  557,  301,  557,  613,  558,  613,  323,  323,  323,
      323,  323,  323,  323,  299,  300,  299,  578,  302,  578,

      614,  562,  865,  323,  323,  323,  323,  323,  323,  323,
      299,  300,  299,  580,  301,  864,  901,  568,  901,  324,
      324,  324,  324,  324,  324,  324,  299,  300,  299,  562,
      302,  863,  902,  569,  861,  324,  324,  324,  324,  324,
      324,  324,  299,  300,  299,  568,  301,  860,  903,  575,
      903,  325,  325,  325,  325,  325,  325,  325,  299,  300,
      299,  569,  302,  859,  906,  576,  906,  325,  325,  325,
      325,  325,  325,  325,  299,  300,  299,  575,  301,  858,
      907,  577,  827,  326,  326,  326,  326,  326,  326,  326,
      299,  300,  299,  576,  302,  826,  908,  599,  908,  326,

      326,  326,  326,  326,  326,  326,  299,  300,  299,  577,
      301,  825,  909,  602,  824,  327,  327,  327,  327,  327,
      327,  327,  299,  300,  299,  599,  302,  823,  910,  615,
      910,  327,  327,  327,  327,  327,  327,  327,  299,  300,
      299,  602,  301,  912,  911,  912,  822,  328,  328,  328,
      328,  328,  328,  328,  299,  300,  299,  615,  302,  913,
      914,  821,  914,  328,  328,  328,  328,  328,  328,  328,
      299,  300,  299,  877,  301,  877,  915,  878,  819,  329,
      329,  329,  329,  329,  329,  329,  299,  300,  299,  557,
      302,  880,  613,  881,  613,  329,  329,  329,  329,  329,

      329,  329,  299,  300,  299,  818,  301,  330,  614,  330,
      331,  332,  332,  332,  332,  332,  332,  332,  299,  300,
      299,  814,  302,  330,  695,  330,  331,  332,  332,  332,
      332,  332,  332,  332,  299,  300,  299,  866,  301,  333,
      865,  333,  334,  335,  335,  335,  335,  335,  335,  335,
      299,  300,  299,  864,  302,  333,  863,  333,  334,  335,
      335,  335,  335,  335,  335,  335,  299,  300,  299,  861,
      301,  336,  860,  336,  337,  338,  338,  338,  338,  338,
      338,  338,  299,  300,  299,  859,  302,  336,  858,  336,
      337,  338,  338,  338,  338,  338,  338,  338,  299,  300,

      299,  827,  301,  339,  826,  339,  340,  341,  341,  341,
      341,  341,  341,  341,  299,  300,  299,  825,  302,  339,
      824,  339,  340,  341,  341,  341,  341,  341,  341,  341,
      299,  300,  299,  823,  301,  342,  822,  342,  343,  344,
      344,  344,  344,  344,  344,  344,  299,  300,  299,  821,
      302,  342,  819,  342,  343,  344,  344,  344,  344,  344,
      344,  344,  299,  300,  299,  818,  301,  345,  814,  345,
      346,  347,  347,  347,  347,  347,  347,  347,  299,  300,
      299,  695,  302,  345, 2312,  345,  346,  347,  347,  347,
      347,  347,  347,  347,  299,  300,  299, 2267,  301,  348,

     2262,  348,  349,  350,  350,  350,  350,  350,  350,  350,
      299,  300,  299, 2261,  302,  348, 2239,  348,  349,  350,
      350,  350,  350,  350,  350,  350,  299,  300,  299, 2237,
      301,  351, 2155,  351,  352,  353,  353,  353,  353,  353,
      353,  353,  299,  300,  299, 2110,  302,  351, 2109,  351,
      352,  353,  353,  353,  353,  353,  353,  353,  299,  300,
      299, 2085,  301,  354, 2066,  354,  355,  356,  356,  356,
      356,  356,  356,  356,  299,  300,  299, 2055,  302,  354,
     2030,  354,  355,  356,  356,  356,  356,  356,  356,  356,
      299,  300,  299,  557,  301,  557,  956,  558,  956,  357,

      357,  357,  357,  357,  357,  357,  299,  300,  299, 1034,
      302, 1034,  901,  882,  901,  357,  357,  357,  357,  357,
      357,  357,  299,  300,  299, 1035,  301, 1978,  902,  884,
     1964,  358,  358,  358,  358,  358,  358,  358,  299,  300,
      299,  882,  302, 1962, 1047,  885, 1047,  358,  358,  358,
      358,  358,  358,  358,  299,  300,  299,  884,  301, 1958,
      903,  886,  903,  359,  359,  359,  359,  359,  359,  359,
      299,  300,  299,  885,  302, 1910,  906,  887,  906,  359,
      359,  359,  359,  359,  359,  359,  299,  300,  299,  886,
      301, 1908,  907,  888, 1904,  360,  360,  360,  360,  360,

      360,  360,  299,  300,  299,  887,  302, 1875, 1050,  889,
     1050,  360,  360,  360,  360,  360,  360,  360,  299,  300,
      299,  888,  301, 1862,  908,  890,  908,  361,  361,  361,
      361,  361,  361,  361,  299,  300,  299,  889,  302, 1832,
      909,  891, 1817,  361,  361,  361,  361,  361,  361,  361,
      299,  300,  299,  890,  301,  362, 1051,  362, 1051,  363,
      363,  363,  363,  363,  363,  363,  299,  300,  299,  891,
      302,  362,  910,  362,  910,  363,  363,  363,  363,  363,
      363,  363,  299,  300,  299, 1052,  301, 1052,  911,  892,
     1741,  364,  364,  364,  364,  364,  364,  364,  299,  300,

      299, 1053,  302, 1053,  912,  893,  912,  364,  364,  364,
      364,  364,  364,  364,  299,  300,  299,  892,  301,  365,
      913,  365,  366,  367,  367,  367,  367,  367,  367,  367,
      299,  300,  299,  893,  302,  365, 1675,  365,  366,  367,
      367,  367,  367,  367,  367,  367,  299,  300,  299, 1674,
      301,  368, 1664,  368,  369,  370,  370,  370,  370,  370,
      370,  370,  299,  300,  299, 1660,  302,  368, 1652,  368,
      369,  370,  370,  370,  370,  370,  370,  370,  299,  300,
      299, 1651,  301,  371, 1648,  371,  372,  373,  373,  373,
      373,  373,  373,  373,  299,  300,  299, 1640,  302,  371,

     1639,  371,  372,  373,  373,  373,  373,  373,  373,  373,
      299,  300,  299, 1507,  301,  374, 1486,  374,  375,  376,
      376,  376,  376,  376,  376,  376,  299,  300,  299, 1485,
      302,  374, 1471,  374,  375,  376,  376,  376,  376,  376,
      376,  376,  298,  299,  300,  299, 1452,  301,  298,  298,
      298,  914,  894,  914, 1438,  298,  299,  300,  299,  298,
      302,  298,  298,  298, 1054, 1414, 1054,  915,  298,  299,
      300,  299,  298,  301,  298,  298,  298,  550,  300,  550,
      894,  551,  573,  896, 1401,  298,  298,  298,  299,  300,
      299, 1397,  302,  298,  298,  298, 1057,  574, 1057,  298,

      298,  299,  300,  299,  298,  301,  298,  298,  298, 1368,
      573,  896,  298,  298,  299,  300,  299,  298,  302,  298,
      298,  298,  550,  300,  550,  574,  552,  897,  898, 1338,
      298,  298,  298,  299,  300,  299, 1330,  301,  298,  298,
      298,  956,  899,  956,  298,  298,  299,  300,  299,  298,
      302,  298,  298,  298, 1324,  897,  898,  298,  298,  299,
      300,  299,  298,  301,  298,  298,  298,  299,  300,  554,
      899,  555,  900,  904, 1267,  298,  298,  298,  299,  300,
      299, 1256,  302,  298,  298,  298, 1110,  905, 1110,  298,
      298,  299,  300,  299,  298,  301,  298,  298,  298, 1218,

      900,  904,  298,  298,  299,  300,  299,  298,  302,  298,
      298,  298,  299,  300,  554,  905,  556,  916,  917, 1215,
      298,  298,  298,  299,  300,  299, 1206,  301,  298,  298,
      298,  923, 1205,  924,  298,  298,  299,  300,  299,  298,
      302,  298,  298,  298, 1183,  916,  917,  298,  298,  299,
      300,  299,  298,  301,  298,  298,  298,  925,  932,  923,
      600,  924,  933,  937, 1178,  298,  298,  298,  299,  300,
      299,  559,  302,  298,  298,  298,  570,  601,  560,  298,
     1168,  561,  571, 1154,  298,  925,  932,  572,  600,  926,
      933,  937,  298,  877,  557,  877,  880,  878,  881,  559,

     1047, 1150, 1047,  938,  570,  601,  560,  939,  927,  561,
      571,  298,  299,  300,  299,  572,  301,  926,  918,  940,
      918,  385,  385,  385,  385,  385,  385,  385,  299,  300,
      299,  938,  302, 1086,  919,  939, 1073,  385,  385,  385,
      385,  385,  385,  385,  299,  300,  299,  940,  301, 1055,
     1102,  946, 1102,  386,  386,  386,  386,  386,  386,  386,
      299,  300,  299, 1050,  302, 1050, 1103,  947, 1044,  386,
      386,  386,  386,  386,  386,  386,  299,  300,  299,  946,
      301, 1043, 1104,  948, 1104,  387,  387,  387,  387,  387,
      387,  387,  299,  300,  299,  947,  302, 1036, 1105,  951,

     1033,  387,  387,  387,  387,  387,  387,  387,  299,  300,
      299,  948,  301, 1034, 1051, 1034, 1051,  388,  388,  388,
      388,  388,  388,  388,  299,  300,  299,  951,  302, 1035,
     1052,  895, 1052,  388,  388,  388,  388,  388,  388,  388,
      298,  299,  300,  299,  298,  301,  298,  298,  298,  298,
     1053,  883, 1053,  298,  299,  300,  299,  298,  301,  298,
      298,  298, 1054, 1057, 1054, 1057,  298,  299,  300,  299,
      298,  302,  298,  298,  298,  616,  616,  616,  616,  616,
      616,  616, 2361,  298,  298,  298,  299,  300,  299,  298,
      302,  298,  298,  298,  298, 2361, 2361,  298,  952,  955,

      957, 2361,  298,  617,  617,  617,  617,  617,  617,  617,
      298,  618,  618,  618,  618,  618,  618,  618,  619,  619,
      619,  619,  619,  619,  619, 2361,  952,  955,  957,  298,
      299,  300,  299, 2361,  301,  391, 2361,  391,  392,  393,
      393,  393,  393,  393,  393,  393,  299,  300,  299, 2361,
      302,  391, 2361,  391,  392,  393,  393,  393,  393,  393,
      393,  393,  299,  300,  299, 1128,  301, 1128, 1157, 1026,
     1157,  394,  394,  394,  394,  394,  394,  394,  299,  300,
      299, 1129,  302, 2361, 1158, 1027, 2361,  394,  394,  394,
      394,  394,  394,  394,  299,  300,  299, 1026,  301, 2361,

     1159, 1030, 1159,  395,  395,  395,  395,  395,  395,  395,
      299,  300,  299, 1027,  302, 2361, 1160, 1031, 2361,  395,
      395,  395,  395,  395,  395,  395,  299,  300,  299, 1030,
      301, 2361, 1164, 1032, 1164,  396,  396,  396,  396,  396,
      396,  396,  299,  300,  299, 1031,  302, 2361, 1165, 1037,
     2361,  396,  396,  396,  396,  396,  396,  396,  299,  300,
      299, 1032,  301, 2361, 1102, 1038, 1102,  397,  397,  397,
      397,  397,  397,  397,  299,  300,  299, 1037,  302, 2361,
     1103, 1039, 2361,  397,  397,  397,  397,  397,  397,  397,
      299,  300,  299, 1038,  301, 2361, 1180, 1040, 1180,  398,

      398,  398,  398,  398,  398,  398,  299,  300,  299, 1039,
      302, 2361, 1104, 1041, 1104,  398,  398,  398,  398,  398,
      398,  398,  299,  300,  299, 1040,  301, 2361, 1105, 1042,
     2361,  399,  399,  399,  399,  399,  399,  399,  299,  300,
      299, 1041,  302, 2361, 1181, 1045, 1181,  399,  399,  399,
      399,  399,  399,  399,  299,  300,  299, 1042,  301, 2361,
     1110, 1046, 1110,  400,  400,  400,  400,  400,  400,  400,
      299,  300,  299, 1045,  302, 2361, 1128, 1048, 1128,  400,
      400,  400,  400,  400,  400,  400,  299,  300,  299, 1046,
      301, 2361, 1129, 1049, 2361,  401,  401,  401,  401,  401,

      401,  401,  299,  300,  299, 1048,  302, 2361, 1208, 1056,
     1208,  401,  401,  401,  401,  401,  401,  401,  299,  300,
      299, 1049,  301, 2361, 1209, 1058, 1209,  402,  402,  402,
      402,  402,  402,  402,  299,  300,  299, 1056,  302, 2361,
     1210, 1059, 2361,  402,  402,  402,  402,  402,  402,  402,
      299,  300,  299, 1058,  301,  403, 2361,  403,  404,  405,
      405,  405,  405,  405,  405,  405,  299,  300,  299, 1059,
      302,  403, 2361,  403,  404,  405,  405,  405,  405,  405,
      405,  405,  299,  300,  299, 2361,  301,  406, 2361,  406,
      407,  408,  408,  408,  408,  408,  408,  408,  299,  300,

      299, 2361,  302,  406, 2361,  406,  407,  408,  408,  408,
      408,  408,  408,  408,  299,  300,  299, 2361,  301,  409,
     2361,  409,  410,  411,  411,  411,  411,  411,  411,  411,
      299,  300,  299, 2361,  302,  409, 2361,  409,  410,  411,
      411,  411,  411,  411,  411,  411,  299,  300,  299, 2361,
      301,  412, 2361,  412,  413,  414,  414,  414,  414,  414,
      414,  414,  299,  300,  299, 2361,  302,  412, 2361,  412,
      413,  414,  414,  414,  414,  414,  414,  414,  299,  300,
      299, 1213,  301, 1213, 1216, 1060, 1216,  415,  415,  415,
      415,  415,  415,  415,  299,  300,  299, 1214,  302, 2361,

     1217, 1061, 2361,  415,  415,  415,  415,  415,  415,  415,
      299,  300,  299, 1060,  301, 2361, 1226, 1062, 1226,  416,
      416,  416,  416,  416,  416,  416,  299,  300,  299, 1061,
      302, 2361, 1227, 1063, 2361,  416,  416,  416,  416,  416,
      416,  416,  299,  300,  299, 1062,  301,  417, 2361,  417,
      418,  419,  419,  419,  419,  419,  419,  419,  299,  300,
      299, 1063,  302,  417, 2361,  417,  418,  419,  419,  419,
      419,  419,  419,  419,  299,  300,  299, 2361,  301,  420,
     2361,  420,  421,  422,  422,  422,  422,  422,  422,  422,
      299,  300,  299, 2361,  302,  420, 2361,  420,  421,  422,

      422,  422,  422,  422,  422,  422,  299,  300,  299, 2361,
      301,  423, 2361,  423,  424,  425,  425,  425,  425,  425,
      425,  425,  299,  300,  299, 2361,  302,  423, 2361,  423,
      424,  425,  425,  425,  425,  425,  425,  425,  299,  300,
      299, 2361,  301,  426, 2361,  426,  427,  428,  428,  428,
      428,  428,  428,  428,  299,  300,  299, 2361,  302,  426,
     2361,  426,  427,  428,  428,  428,  428,  428,  428,  428,
      299,  300,  299, 2361,  301,  429, 2361,  429,  430,  431,
      431,  431,  431,  431,  431,  431,  299,  300,  299, 2361,
      302,  429, 2361,  429,  430,  431,  431,  431,  431,  431,

      431,  431,  299,  300,  299, 2361,  301,  432, 2361,  432,
      433,  434,  434,  434,  434,  434,  434,  434,  299,  300,
      299, 2361,  302,  432, 2361,  432,  433,  434,  434,  434,
      434,  434,  434,  434,  299,  300,  299, 2361,  301,  435,
     2361,  435,  436,  437,  437,  437,  437,  437,  437,  437,
      299,  300,  299, 2361,  302,  435, 2361,  435,  436,  437,
      437,  437,  437,  437,  437,  437,  299,  300,  299, 2361,
      301,  438, 2361,  438,  439,  440,  440,  440,  440,  440,
      440,  440,  299,  300,  299, 2361,  302,  438, 2361,  438,
      439,  440,  440,  440,  440,  440,  440,  440,  299,  300,

      299, 2361,  301,  441, 2361,  441,  442,  443,  443,  443,
      443,  443,  443,  443,  299,  300,  299, 2361,  302,  441,
     2361,  441,  442,  443,  443,  443,  443,  443,  443,  443,
      299,  300,  299, 2361,  301,  444, 2361,  444,  445,  446,
      446,  446,  446,  446,  446,  446,  299,  300,  299, 2361,
      302,  444, 2361,  444,  445,  446,  446,  446,  446,  446,
      446,  446,  299,  300,  299, 1229,  301, 1229, 1231, 1064,
     1231,  447,  447,  447,  447,  447,  447,  447,  299,  300,
      299, 1230,  302, 2361, 1232, 1068, 2361,  447,  447,  447,
      447,  447,  447,  447,  299,  300,  299, 1064,  301, 2361,

     1157, 1069, 1157,  448,  448,  448,  448,  448,  448,  448,
      299,  300,  299, 1068,  302, 2361, 1158, 1070, 2361,  448,
      448,  448,  448,  448,  448,  448,  299,  300,  299, 1069,
      301, 2361, 1243, 1071, 1243,  449,  449,  449,  449,  449,
      449,  449,  299,  300,  299, 1070,  302, 2361, 1159, 1072,
     1159,  449,  449,  449,  449,  449,  449,  449,  299,  300,
      299, 1071,  301, 2361, 1160, 1074, 2361,  450,  450,  450,
      450,  450,  450,  450,  299,  300,  299, 1072,  302, 2361,
     1244, 1075, 1244,  450,  450,  450,  450,  450,  450,  450,
      299,  300,  299, 1074,  301,  451, 2361,  451,  452,  453,

      453,  453,  453,  453,  453,  453,  299,  300,  299, 1075,
      302,  451, 2361,  451,  452,  453,  453,  453,  453,  453,
      453,  453,  298,  299,  300,  299, 1076,  301,  298,  298,
      298, 1077, 1248, 2361, 1248,  298,  299,  300,  299,  298,
      302,  298,  298,  298,  620,  620,  620,  620,  620,  620,
      620, 1164,  298, 1164, 1076,  298,  299,  300,  299, 1077,
      301,  298,  298,  298, 2361, 2361,  298, 1165, 1180, 1181,
     1180, 1181,  298, 1282, 1078, 1282, 1208, 2361, 1208,  298,
      299,  300,  299, 2361,  301,  455, 2361,  455,  456,  457,
      457,  457,  457,  457,  457,  457,  299,  300,  299,  298,

      302,  455, 1078,  455,  456,  457,  457,  457,  457,  457,
      457,  457,  299,  300,  299, 1268,  301, 1268, 1271, 1079,
     1271,  458,  458,  458,  458,  458,  458,  458,  299,  300,
      299, 1269,  302, 2361, 1272, 1080, 2361,  458,  458,  458,
      458,  458,  458,  458,  299,  300,  299, 1079,  301,  459,
     1202,  459, 1202,  460,  460,  460,  460,  460,  460,  460,
      299,  300,  299, 1080,  302,  459, 1203,  459, 2361,  460,
      460,  460,  460,  460,  460,  460,  299,  300,  299, 2361,
      301,  461, 1291,  461, 1291,  462,  462,  462,  462,  462,
      462,  462,  299,  300,  299, 2361,  302,  461, 1292,  461,

     2361,  462,  462,  462,  462,  462,  462,  462,  299,  300,
      299, 2361,  301,  463, 1209,  463, 1209,  464,  464,  464,
      464,  464,  464,  464,  299,  300,  299, 2361,  302,  463,
     1210,  463, 2361,  464,  464,  464,  464,  464,  464,  464,
      299,  300,  299, 2361,  301,  465, 1293,  465, 1293,  466,
      466,  466,  466,  466,  466,  466,  299,  300,  299, 2361,
      302,  465, 1213,  465, 1213,  466,  466,  466,  466,  466,
      466,  466,  299,  300,  299, 1296,  301, 1296, 1214, 1081,
     2361,  467,  467,  467,  467,  467,  467,  467,  299,  300,
      299, 1298,  302, 1298, 1216, 1082, 1216,  467,  467,  467,

      467,  467,  467,  467,  299,  300,  299, 1081,  301, 2361,
     1217, 1083, 2361,  468,  468,  468,  468,  468,  468,  468,
      299,  300,  299, 1082,  302, 2361, 1226, 1084, 1226,  468,
      468,  468,  468,  468,  468,  468,  299,  300,  299, 1083,
      301, 2361, 1227, 1085, 2361,  469,  469,  469,  469,  469,
      469,  469,  299,  300,  299, 1084,  302, 2361, 1307, 1087,
     1307,  469,  469,  469,  469,  469,  469,  469,  299,  300,
      299, 1085,  301, 2361, 1229, 1088, 1229,  470,  470,  470,
      470,  470,  470,  470,  299,  300,  299, 1087,  302, 2361,
     1230, 1089, 2361,  470,  470,  470,  470,  470,  470,  470,

      299,  300,  299, 1088,  301, 2361, 1309, 1092, 1309,  471,
      471,  471,  471,  471,  471,  471,  299,  300,  299, 1089,
      302, 2361, 1231, 1093, 1231,  471,  471,  471,  471,  471,
      471,  471,  299,  300,  299, 1092,  301, 2361, 1232, 1094,
     2361,  472,  472,  472,  472,  472,  472,  472,  299,  300,
      299, 1093,  302, 2361, 1310, 1095, 1310,  472,  472,  472,
      472,  472,  472,  472,  299,  300,  299, 1094,  301, 2361,
     1321, 1096, 1321,  473,  473,  473,  473,  473,  473,  473,
      299,  300,  299, 1095,  302, 2361, 1322, 1097, 2361,  473,
      473,  473,  473,  473,  473,  473,  299,  300,  299, 1096,

      301, 2361, 1243, 1100, 1243,  474,  474,  474,  474,  474,
      474,  474,  299,  300,  299, 1097,  302, 2361, 1244, 1101,
     1244,  474,  474,  474,  474,  474,  474,  474,  299,  300,
      299, 1100,  301, 1248, 2361, 1248, 1106,  475,  475,  475,
      475,  475,  475,  475,  299,  300,  299, 1101,  302, 1354,
     1356, 1354, 1356,  475,  475,  475,  475,  475,  475,  475,
      298,  299,  300,  299, 1106,  302,  298,  298,  298, 1268,
     1282, 1268, 1282,  298,  299,  300,  299,  298,  301,  298,
      298,  298, 1381, 2361, 1381, 1269,  298,  299,  300,  299,
      298,  302,  298,  298,  298,  621,  621,  621,  621,  621,

      621,  621, 2361,  298,  298,  298,  299,  300,  299, 2361,
      301,  298,  298,  298, 1293, 2361, 1293,  298,  298,  299,
      300,  299,  298,  302,  298,  298,  298, 1296, 2361, 1296,
      298,  298,  299,  300,  299,  298,  301,  298,  298,  298,
      622,  622,  622,  622,  622,  622,  622, 2361,  298,  298,
      298,  299,  300,  299, 2361,  302,  298,  298,  298, 1298,
     2361, 1298,  298,  298,  299,  300,  299,  298,  301,  298,
      298,  298, 1107, 2361, 2361,  298,  298,  299,  300,  299,
      298,  302,  298,  298,  298,  623,  624,  624,  624,  624,
      624,  624,  624,  298,  298, 2361,  298,  299,  300,  299,

     1107,  301,  298,  298,  298, 2361, 1307,  298, 1307, 1309,
     1271, 1309, 1271,  298, 1108, 1109,  949, 1090, 2361, 2361,
      298,  299,  300,  299, 1091,  301, 1272, 1310,  950, 1310,
      481,  481,  481,  481,  481,  481,  481,  299,  300,  299,
      298,  302, 1108, 1109,  949, 1090,  481,  481,  481,  481,
      481,  481,  481,  299,  300,  299,  950,  301, 2361, 1291,
     1114, 1291,  482,  482,  482,  482,  482,  482,  482,  299,
      300,  299, 1406,  302, 1406, 1292, 1115, 2361,  482,  482,
      482,  482,  482,  482,  482,  299,  300,  299, 1114,  301,
     2361, 1382, 1116, 1382,  483,  483,  483,  483,  483,  483,

      483,  299,  300,  299, 1115,  302, 2361, 1383, 1117, 2361,
      483,  483,  483,  483,  483,  483,  483,  299,  300,  299,
     1116,  301,  484, 2361,  484,  485,  486,  486,  486,  486,
      486,  486,  486,  299,  300,  299, 1117,  302,  484, 2361,
      484,  485,  486,  486,  486,  486,  486,  486,  486,  299,
      300,  299, 1384,  301, 1384, 1321, 1118, 1321,  487,  487,
      487,  487,  487,  487,  487,  299,  300,  299, 1385,  302,
     2361, 1322, 1119, 2361,  487,  487,  487,  487,  487,  487,
      487,  299,  300,  299, 1118,  301, 2361, 1409, 1122, 1409,
      488,  488,  488,  488,  488,  488,  488,  299,  300,  299,

     1119,  302, 2361, 1410, 1123, 2361,  488,  488,  488,  488,
      488,  488,  488,  299,  300,  299, 1122,  301, 1357, 1358,
     1359, 1360,  489,  489,  489,  489,  489,  489,  489,  299,
      300,  299, 1123,  302, 1354, 1356, 1354, 1356,  489,  489,
      489,  489,  489,  489,  489,  298,  299,  300,  299,  298,
      301,  298,  298,  298,  298, 1464, 2361, 1464,  298,  299,
      300,  299,  298,  302,  298,  298,  298, 1381, 1481, 1381,
     1481,  298,  299,  300,  299,  298,  301,  298,  298,  298,
      623,  624,  624,  624,  624,  624,  624,  624,  298,  298,
      298,  299,  300,  299,  298,  302,  298,  298,  298,  298,

     2361, 1124,  298, 1125, 1126, 1127, 2361,  298,  659,  659,
      659,  659,  659,  659,  659,  298,  625,  625,  625,  625,
      625,  625,  625, 2361, 2361, 1429, 1130, 1429,  626, 1124,
     2361, 1125, 1126, 1127,  298,  299,  300,  299, 1482,  301,
     1482, 1430,  492, 2361,  493,  493,  493,  493,  493,  493,
      493,  299,  300,  299, 1130,  302,  626, 1406,  492, 1406,
      493,  493,  493,  493,  493,  493,  493,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298, 1510, 2361, 1510,
      298,  299,  300,  299,  298,  302,  298,  298,  298, 1538,
     1539, 1538, 1539,  298,  299,  300,  299,  298,  301,  298,

      298,  298,  627,  628,  628,  628,  628,  628,  628,  628,
      298,  298,  298,  299,  300,  299,  298,  302,  298,  298,
      298,  298, 2361, 2361,  298,  298,  299,  300,  299,  298,
      302,  298,  298,  298, 1540, 2361, 1540,  298,  298,  299,
      300,  299,  298,  301,  298,  298,  298,  627,  628,  628,
      628,  628,  628,  628,  628,  298,  298,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298, 2361, 2361,  298,
      298,  299,  300,  299,  298,  302,  298,  298,  298, 1541,
     2361, 1541,  298,  298,  299,  300,  299,  298,  301,  298,
      298,  298,  631,  632,  632,  632,  632,  632,  632,  632,

      298,  298,  298,  299,  300,  299,  298,  302,  298,  298,
      298,  298, 2361,  953,  298, 1131,  603, 1132, 1547,  298,
     1547, 1431,  954, 1431,  604,  605,  606,  298,  629,  629,
      629,  629,  629,  629,  629, 2361, 2361, 1432, 1133, 2361,
      630,  953, 1134, 1131,  603, 1132,  298,  299,  300,  299,
      954,  301,  604,  605,  606, 2361,  496,  496,  496,  496,
      496,  496,  496,  299,  300,  299, 1133,  302,  630, 1548,
     1134, 1548,  496,  496,  496,  496,  496,  496,  496,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298, 1433,
     2361, 1433,  298,  299,  300,  299,  298,  302,  298,  298,

      298, 1549, 1550, 1549, 1550, 1434, 1557,  563, 1557,  298,
      934, 1558, 1135, 1558,  564,  565, 1136,  935,  566,  936,
      567, 1137, 1138,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  586,  563,  298, 1139,  934,  587,
     1135,  298,  564,  565, 1136,  935,  566,  936,  567, 1137,
     1138,  928,  944, 1028,  588,  929,  930,  931, 2361,  589,
      945, 1029,  590, 1140, 1559, 1139, 1559, 2361,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  928,
      944, 1028,  588,  929,  930,  931,  298,  589,  945, 1029,
      590, 1140,  633,  633,  633,  633,  633,  633,  633, 1560,

     1562, 1560, 1562, 2361,  634,  631,  632,  632,  632,  632,
      632,  632,  632,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  660,  660,  660,  660,  660,  660,
      660,  298,  634,  635,  636,  636,  636,  636,  636,  636,
      636,  637,  637,  637,  637,  637,  637,  637, 2361, 1141,
     1142, 1143, 1144,  638, 1464, 1481, 1464, 1481,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  661,
      661,  661,  661,  661,  661,  661,  298, 1141, 1142, 1143,
     1144,  638,  635,  636,  636,  636,  636,  636,  636,  636,
      639,  640,  640,  640,  640,  640,  640,  640, 1482, 2361,

     1482, 1145, 1146,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  662,  662,  662,  662,  662,  662,
      662,  298,  641,  641,  641,  641,  641,  641,  641, 1145,
     1146, 1147, 1148, 1149,  642,  639,  640,  640,  640,  640,
      640,  640,  640, 1587, 1588, 1587, 1588, 2361,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298, 1147,
     1148, 1149,  642, 1151, 1153, 2361,  298,  643,  644,  644,
      644,  644,  644,  644,  644,  645,  645,  645,  645,  645,
      645,  645, 2361, 2361, 1155, 1156, 1161,  646, 2361, 2361,
     1152, 1151, 1153,  298,  298,  299,  300,  299,  298,  302,

      298,  298,  298,  298,  663,  663,  663,  663,  663,  663,
      663,  298, 1155, 1156, 1161,  646,  643,  644,  644,  644,
      644,  644,  644,  644,  647,  648,  648,  648,  648,  648,
      648,  648, 1589, 1590, 1589, 1590, 1162, 1163,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  664,
      664,  664,  664,  664,  664,  664,  298,  649,  649,  649,
      649,  649,  649,  649, 1162, 1163, 1166, 1167, 1169,  650,
      647,  648,  648,  648,  648,  648,  648,  648, 1592, 1510,
     1592, 1510, 2361,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298, 1166, 1167, 1169,  650, 1170, 1171,

     2361,  298,  651,  652,  652,  652,  652,  652,  652,  652,
      653,  653,  653,  653,  653,  653,  653, 2361, 2361, 1172,
     1173, 1179,  654, 1613, 2361, 1613, 1170, 1171,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  666,
      666,  666,  666,  666,  666,  666,  298, 1172, 1173, 1179,
      654,  651,  652,  652,  652,  652,  652,  652,  652,  655,
      656,  656,  656,  656,  656,  656,  656, 1621, 1625, 1621,
     1625, 1182, 1184,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  691,  691,  691,  691,  691,  691,
      691,  298,  657,  657,  657,  657,  657,  657,  657, 1182,

     1184, 1185, 1186, 1187,  658,  655,  656,  656,  656,  656,
      656,  656,  656, 1626, 1627, 1626, 1627, 2361,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298, 1185,
     1186, 1187,  658,  665, 1188,  665,  298,  664,  664,  664,
      664,  664,  664,  664,  667,  668,  668,  668,  668,  668,
      668,  668,  667,  668,  668,  668,  668,  668,  668,  668,
     2361, 2361, 1188,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  669,  669,  669,  669,  669,  669,
      669,  298, 2361, 1538, 1189, 1538,  670,  671,  672,  672,
      672,  672,  672,  672,  672,  671,  672,  672,  672,  672,

      672,  672,  672, 1190, 1120, 1191, 2361, 2361,  298,  299,
      300,  299, 1189,  301,  670, 1539, 1121, 1539,  504,  504,
      504,  504,  504,  504,  504,  299,  300,  299, 1540,  302,
     1540, 1190, 1120, 1191,  504,  504,  504,  504,  504,  504,
      504,  299,  300,  299, 1121,  301,  505, 2361,  505,  506,
      507,  507,  507,  507,  507,  507,  507,  299,  300,  299,
     2361,  302,  505, 2361,  505,  506,  507,  507,  507,  507,
      507,  507,  507,  299,  300,  299, 1435,  301, 1435, 1441,
     1192, 1441,  508,  508,  508,  508,  508,  508,  508,  299,
      300,  299, 1436,  302, 2361, 1442, 1193, 2361,  508,  508,

      508,  508,  508,  508,  508,  299,  300,  299, 1192,  301,
      509, 1443,  509, 1443,  510,  510,  510,  510,  510,  510,
      510,  299,  300,  299, 1193,  302,  509, 1444,  509, 2361,
      510,  510,  510,  510,  510,  510,  510,  299,  300,  299,
     2361,  301,  511, 1445,  511, 1445,  512,  512,  512,  512,
      512,  512,  512,  299,  300,  299, 2361,  302,  511, 1446,
      511, 2361,  512,  512,  512,  512,  512,  512,  512,  299,
      300,  299, 2361,  301,  513, 1447,  513, 1447,  514,  514,
      514,  514,  514,  514,  514,  299,  300,  299, 2361,  302,
      513, 1448,  513, 2361,  514,  514,  514,  514,  514,  514,

      514,  299,  300,  299, 2361,  301,  515, 1453,  515, 1453,
      516,  516,  516,  516,  516,  516,  516,  299,  300,  299,
     2361,  302,  515, 1454,  515, 2361,  516,  516,  516,  516,
      516,  516,  516,  299,  300,  299, 2361,  301,  517, 1455,
      517, 1455,  518,  518,  518,  518,  518,  518,  518,  299,
      300,  299, 2361,  302,  517, 1456,  517, 2361,  518,  518,
      518,  518,  518,  518,  518,  299,  300,  299, 2361,  301,
      519, 1457,  519, 1457,  520,  520,  520,  520,  520,  520,
      520,  299,  300,  299, 2361,  302,  519, 1458,  519, 2361,
      520,  520,  520,  520,  520,  520,  520,  299,  300,  299,

     2361,  301,  521, 1459,  521, 1459,  522,  522,  522,  522,
      522,  522,  522,  299,  300,  299, 2361,  302,  521, 1460,
      521, 2361,  522,  522,  522,  522,  522,  522,  522,  299,
      300,  299, 2361,  301,  523, 1362,  523, 1362,  524,  524,
      524,  524,  524,  524,  524,  299,  300,  299, 2361,  302,
      523, 1364,  523, 2361,  524,  524,  524,  524,  524,  524,
      524,  299,  300,  299, 2361,  301,  525, 1462,  525, 1462,
      526,  526,  526,  526,  526,  526,  526,  299,  300,  299,
     2361,  302,  525, 1463,  525, 2361,  526,  526,  526,  526,
      526,  526,  526,  299,  300,  299, 2361,  301,  527, 1382,

      527, 1382,  528,  528,  528,  528,  528,  528,  528,  299,
      300,  299, 2361,  302,  527, 1383,  527, 2361,  528,  528,
      528,  528,  528,  528,  528,  299,  300,  299, 2361,  301,
      529, 1384,  529, 1384,  530,  530,  530,  530,  530,  530,
      530,  299,  300,  299, 2361,  302,  529, 1385,  529, 2361,
      530,  530,  530,  530,  530,  530,  530,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298,  692,  692,  692,
      692,  692,  692,  692,  298,  673,  673,  673,  673,  673,
      673,  673, 1541, 2361, 1541, 1197, 2361,  674,  675,  676,
      676,  676,  676,  676,  676,  676,  918, 2361,  918, 1200,

     1201,  298,  298,  299,  300,  299,  298,  302,  298,  298,
      298,  298,  919, 1197,  920,  674,  921, 1207, 2361,  298,
      677,  677,  677,  677,  677,  677,  677, 1200, 1201, 1211,
     2361,  922,  678,  675,  676,  676,  676,  676,  676,  676,
      676, 1631,  920, 1631,  921, 1207,  298,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298, 1211, 1194,  922,
      678, 1195, 1212, 2361,  298,  679,  680,  680,  680,  680,
      680,  680,  680,  681,  681,  681,  681,  681,  681,  681,
     1196, 2361, 1219, 1220, 1221,  682, 1194, 2361, 2361, 1195,
     1212,  298,  298,  299,  300,  299,  298,  302,  298,  298,

      298,  298,  693,  693,  693,  693,  693,  693,  693,  298,
     1219, 1220, 1221,  682,  679,  680,  680,  680,  680,  680,
      680,  680,  694,  694,  694,  694,  694,  694,  694,  701,
      701,  701,  701,  701,  701,  701,  298,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298,  702,  702,  702,
      702,  702,  702,  702,  298,  697,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
     2361, 2361, 1222, 1223, 1224,  700, 1547, 1548, 1547, 1548,
     2361,  298,  298,  299,  300,  299,  298,  302,  298,  298,
      298,  298,  703,  703,  703,  703,  703,  703,  703,  298,

     1222, 1223, 1224,  700,  697,  698,  698,  698,  698,  698,
      698,  698,  704,  704,  704,  704,  704,  704,  704,  705,
      705,  705,  705,  705,  705,  705,  298,  298,  299,  300,
      299,  298,  301,  298,  298,  298,  298,  706,  706,  706,
      706,  706,  706,  706,  298,  707,  707,  707,  707,  707,
      707,  707,  708,  708,  708,  708,  708,  708,  708,  709,
      709,  709,  709,  709,  709,  709, 1549, 1550, 1549, 1550,
     2361,  298,  298,  299,  300,  299,  298,  302,  298,  298,
      298,  298,  726,  726,  726,  726,  726,  726,  726,  298,
      710,  711,  711,  711,  711,  711,  711,  711,  712,  712,

      712,  712,  712,  712,  712, 2361, 2361, 1488, 1225, 1488,
      713, 1228, 1233, 1234, 2361, 2361,  298,  299,  300,  299,
     1634,  301, 1634, 1489, 2361, 2361,  535,  535,  535,  535,
      535,  535,  535,  299,  300,  299, 1225,  302,  713, 1228,
     1233, 1234,  535,  535,  535,  535,  535,  535,  535,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  727,
      727,  727,  727,  727,  727,  727,  298,  710,  711,  711,
      711,  711,  711,  711,  711,  714,  715,  715,  715,  715,
      715,  715,  715,  714,  715,  715,  715,  715,  715,  715,
      715, 1235, 1236,  298,  298,  299,  300,  299,  298,  302,

      298,  298,  298,  298,  768,  768,  768,  768,  768,  768,
      768,  298,  716,  716,  716,  716,  716,  716,  716, 1235,
     1236, 1237, 2361, 1198,  717,  718,  719,  719,  719,  719,
      719,  719,  719, 1635, 2361, 1635, 1199, 1238,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298, 1237,
     1111, 1198,  717, 1112, 2361, 2361,  298,  720,  720,  720,
      720,  720,  720,  720, 1199, 1238, 1241, 1113, 2361,  721,
      718,  719,  719,  719,  719,  719,  719,  719, 1111, 2361,
     1202, 1112, 1202,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298, 1241, 1113, 1203,  721, 1242, 1245,

     2361,  298,  722,  723,  723,  723,  723,  723,  723,  723,
      724,  724,  724,  724,  724,  724,  724, 2361, 2361, 1246,
     1247, 1249,  725, 1557, 1204, 1557, 1242, 1245,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298,  769,
      769,  769,  769,  769,  769,  769,  298, 1246, 1247, 1249,
      725,  722,  723,  723,  723,  723,  723,  723,  723,  728,
      729,  729,  729,  729,  729,  729,  729, 1558, 1559, 1558,
     1559, 1250, 1251,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  770,  770,  770,  770,  770,  770,
      770,  298,  730,  730,  730,  730,  730,  730,  730, 1250,

     1251, 1252, 2361, 1253,  731,  728,  729,  729,  729,  729,
      729,  729,  729, 1560, 1562, 1560, 1562, 2361,  298,  298,
      299,  300,  299,  298,  301,  298,  298,  298,  298, 1252,
     1239, 1253,  731, 1240, 1254, 2361,  298,  732,  733,  733,
      733,  733,  733,  733,  733,  734,  734,  734,  734,  734,
      734,  734, 2361, 2361, 1255, 1259, 1260,  735, 1239, 2361,
     2361, 1240, 1254,  298,  298,  299,  300,  299,  298,  302,
      298,  298,  298,  298,  771,  771,  771,  771,  771,  771,
      771,  298, 1255, 1259, 1260,  735,  732,  733,  733,  733,
      733,  733,  733,  733,  736,  737,  737,  737,  737,  737,

      737,  737, 1261, 1262, 1263, 1264, 2361, 2361,  298,  299,
      300,  299, 1490,  301, 1490, 1643, 1265, 1643,  540,  540,
      540,  540,  540,  540,  540,  299,  300,  299, 1491,  302,
     1261, 1262, 1263, 1264,  540,  540,  540,  540,  540,  540,
      540,  299,  300,  299, 1265,  301, 2361, 1492, 1266, 1492,
      541,  541,  541,  541,  541,  541,  541,  299,  300,  299,
     1655,  302, 1655, 1493, 1270, 2361,  541,  541,  541,  541,
      541,  541,  541,  299,  300,  299, 1266,  301, 2361, 1494,
     1273, 1494,  544,  544,  544,  544,  544,  544,  544,  299,
      300,  299, 1270,  302, 2361, 1495, 1274, 2361,  544,  544,

      544,  544,  544,  544,  544,  299,  300,  299, 1273,  301,
     2361, 1497, 1275, 1497,  545,  545,  545,  545,  545,  545,
      545,  299,  300,  299, 1274,  302, 2361, 1498, 1276, 2361,
      545,  545,  545,  545,  545,  545,  545,  299,  300,  299,
     1275,  301, 1277, 1409, 2361, 1409,  546,  546,  546,  546,
      546,  546,  546,  299,  300,  299, 1276,  302, 1587, 1410,
     1587, 2361,  546,  546,  546,  546,  546,  546,  546,  578,
     1277,  578,  738,  738,  738,  738,  738,  738,  738, 1527,
     1588, 1527, 1588,  579,  739,  580,  581,  736,  737,  737,
      737,  737,  737,  737,  737, 1528, 1278, 1279, 1280, 1281,

      582,  740,  741,  741,  741,  741,  741,  741,  741,  583,
      584,  585,  739, 1283,  581, 2361, 2361,  742,  742,  742,
      742,  742,  742,  742, 1278, 1279, 1280, 1281,  582,  743,
      746,  746,  746,  746,  746,  746,  746,  583,  584,  585,
      591, 1283,  747,  941, 1257, 1294,  592, 1295, 2361,  593,
     1297, 1258,  594, 1289,  942,  595,  596,  743,  597, 2361,
     1290,  943, 1065, 2361, 1299,  598, 1300, 2361,  591, 1066,
      747,  941, 1257, 1294,  592, 1295, 1067,  593, 1297, 1258,
      594, 1289,  942,  595,  596, 2361,  597,  607, 1290,  943,
     1065,  608, 1299, 1301, 1300,  609, 1302, 1066, 1303,  610,

     1304,  611, 1305, 1306, 1067, 1308, 1311,  612,  781,  781,
      781,  781,  781,  781,  781,  607, 1532, 2361, 1532,  608,
     1589, 1301, 1589,  609, 1302, 2361, 1303,  610, 1304,  611,
     1305, 1306, 1533, 1308, 1311,  612,  740,  741,  741,  741,
      741,  741,  741,  741,  744,  745,  745,  745,  745,  745,
      745,  745,  744,  745,  745,  745,  745,  745,  745,  745,
      748,  749,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750, 2361, 1312, 1313, 1314, 1315,
      751,  748,  749,  749,  749,  749,  749,  749,  749,  752,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,

      754,  754,  754,  754, 1312, 1313, 1314, 1315,  751,  755,
      752,  753,  753,  753,  753,  753,  753,  753,  756,  757,
      757,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  758,  758, 2361, 1316, 1317, 1320,  755,  759,  756,
      757,  757,  757,  757,  757,  757,  757,  760,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762, 1316, 1317, 1320, 1323,  759,  763,  760,  761,
      761,  761,  761,  761,  761,  761,  764,  765,  765,  765,
      765,  765,  765,  765,  766,  766,  766,  766,  766,  766,
      766, 2361, 1325, 1323, 1326,  763,  767,  764,  765,  765,

      765,  765,  765,  765,  765,  772,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  774,  774,  774,  774,  774,
     1325, 1327, 1326, 1328,  767,  775,  772,  773,  773,  773,
      773,  773,  773,  773,  777,  778,  778,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  779,  779, 1327,
     1590, 1328, 1590,  775,  780,  777,  778,  778,  778,  778,
      778,  778,  778,  782,  782,  782,  782,  782,  782,  782,
      783, 1592,  783, 1592,  782,  782,  782,  782,  782,  782,
      782, 1329,  780,  784,  784,  784,  784,  784,  784,  784,
      785, 1680,  785, 1680,  784,  784,  784,  784,  784,  784,

      784,  786,  786,  786,  786,  786,  786,  786,  787, 1329,
      787, 2361,  786,  786,  786,  786,  786,  786,  786,  788,
      788,  788,  788,  788,  788,  788,  789, 1613,  789, 1613,
      788,  788,  788,  788,  788,  788,  788,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791,  792,  792,  792,  792,  792,  792,  792,  793,  793,
      793,  793,  793,  793,  793,  794,  794,  794,  794,  794,
      794,  794,  795,  795,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  796,  796,  797,  797,  797,  797,
      797,  797,  797,  798,  798,  798,  798,  798,  798,  798,

      804,  804,  804,  804,  804,  804,  804,  805,  805,  805,
      805,  805,  805,  805,  806,  806,  806,  806,  806,  806,
      806,  807,  808,  808,  808,  808,  808,  808,  808,  809,
      809,  809,  809,  809,  809,  809, 1333, 1334, 1336, 1337,
     1335,  810,  807,  808,  808,  808,  808,  808,  808,  808,
      811,  811,  811,  811,  811,  811,  811,  812,  812,  812,
      812,  812,  812,  812, 1333, 1334, 1336, 1337, 1335,  810,
      813,  813,  813,  813,  813,  813,  813,  816,  816,  816,
      816,  816,  816,  816,  817,  817,  817,  817,  817,  817,
      817,  820,  820,  820,  820,  820,  820,  820,  828,  828,

      828,  828,  828,  828,  828,  829,  830,  830,  830,  830,
      830,  830,  830,  831,  831,  831,  831,  831,  831,  831,
     1343, 1344, 1621, 2361, 1621,  832,  829,  830,  830,  830,
      830,  830,  830,  830,  833,  833,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  834,  834, 1343, 1344,
      835,  836,  835,  832,  834,  834,  834,  834,  834,  834,
      834,  837,  837,  837,  837,  837,  837,  837,  838, 1625,
      838, 1625,  837,  837,  837,  837,  837,  837,  837,  839,
      839,  839,  839,  839,  839,  839,  840, 1626,  840, 1626,
      839,  839,  839,  839,  839,  839,  839,  841,  841,  841,

      841,  841,  841,  841,  842, 1627,  842, 1627,  841,  841,
      841,  841,  841,  841,  841,  843,  843,  843,  843,  843,
      843,  843,  844, 1631,  844, 1631,  843,  843,  843,  843,
      843,  843,  843,  845,  845,  845,  845,  845,  845,  845,
      846, 1694,  846, 1694,  845,  845,  845,  845,  845,  845,
      845,  847,  847,  847,  847,  847,  847,  847,  848, 1634,
      848, 1634,  847,  847,  847,  847,  847,  847,  847,  849,
      849,  849,  849,  849,  849,  849,  850,  851,  850, 2361,
      849,  849,  849,  849,  849,  849,  849,  852,  852,  852,
      852,  852,  852,  852,  853, 1635,  853, 1635,  852,  852,

      852,  852,  852,  852,  852,  854,  854,  854,  854,  854,
      854,  854,  855, 1643,  855, 1643,  854,  854,  854,  854,
      854,  854,  854,  856,  856,  856,  856,  856,  856,  856,
      857, 1655,  857, 1655,  856,  856,  856,  856,  856,  856,
      856,  862,  862,  862,  862,  862,  862,  862,  867,  867,
      867,  867,  867,  867,  867,  868,  868,  868,  868,  868,
      868,  868,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  872,  872,  872,  873,  873,  873,  873,
      873,  873,  873,  616,  616,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  617,  617,  618,  618,  618,

      618,  618,  618,  618,  619,  619,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      622,  622,  625,  625,  625,  625,  625,  625,  625, 1345,
     1346, 1718, 1331, 1718,  626,  623,  624,  624,  624,  624,
      624,  624,  624,  625,  625,  625,  625,  625,  625,  625,
     1351, 1332, 1355, 1361, 1680,  626, 1680, 1345, 1346,  958,
     1331,  958,  626,  959,  959,  959,  959,  959,  959,  959,
      629,  629,  629,  629,  629,  629,  629, 1366, 1351, 2361,
     1355, 1361,  630,  626,  627,  628,  628,  628,  628,  628,

      628,  628,  629,  629,  629,  629,  629,  629,  629, 1367,
     1369, 1370, 2361, 1371,  630, 1366, 1694,  960, 1694,  960,
      630,  961,  961,  961,  961,  961,  961,  961,  633,  633,
      633,  633,  633,  633,  633, 2361, 1372, 1367, 1369, 1370,
      634, 1371,  630,  631,  632,  632,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  633,  633, 1375, 1376,
     2361, 1377, 1378,  634, 1372,  962, 2361,  962,  634,  963,
      963,  963,  963,  963,  963,  963,  637,  637,  637,  637,
      637,  637,  637, 1379, 2361, 2361, 1375, 1376,  638, 1377,
     1378,  634,  635,  636,  636,  636,  636,  636,  636,  636,

      637,  637,  637,  637,  637,  637,  637, 1380, 2361, 1386,
     1387, 1379,  638,  964, 2361,  964,  638,  965,  965,  965,
      965,  965,  965,  965,  641,  641,  641,  641,  641,  641,
      641, 1388, 1389, 2361, 1390, 1380,  642, 1386, 1387, 2361,
      638,  639,  640,  640,  640,  640,  640,  640,  640,  641,
      641,  641,  641,  641,  641,  641, 1391, 1392, 2361, 1388,
     1389,  642, 1390,  966,  642,  966, 2361,  967,  967,  967,
      967,  967,  967,  967,  645,  645,  645,  645,  645,  645,
      645, 1393, 2361, 2361, 1391, 1392,  646, 2361, 2361,  642,
      643,  644,  644,  644,  644,  644,  644,  644,  645,  645,

      645,  645,  645,  645,  645, 1394, 2361, 1395, 1396, 1393,
      646,  968, 2361,  968,  646,  969,  969,  969,  969,  969,
      969,  969,  649,  649,  649,  649,  649,  649,  649, 1398,
     1399, 2361, 1400, 1394,  650, 1395, 1396, 2361,  646,  647,
      648,  648,  648,  648,  648,  648,  648,  649,  649,  649,
      649,  649,  649,  649, 1402, 1403, 2361, 1398, 1399,  650,
     1400,  970,  650,  970, 2361,  971,  971,  971,  971,  971,
      971,  971,  653,  653,  653,  653,  653,  653,  653, 1404,
     2361, 2361, 1402, 1403,  654, 2361, 2361,  650,  651,  652,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,

      653,  653,  653, 1405, 2361, 1407, 1408, 1404,  654,  972,
     2361,  972,  654,  973,  973,  973,  973,  973,  973,  973,
      657,  657,  657,  657,  657,  657,  657, 1411, 1412, 2361,
     1413, 1405,  658, 1407, 1408, 2361,  654,  655,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657, 1786, 2361, 1786, 1411, 1412,  658, 1413,  974,
      658,  974, 2361,  975,  975,  975,  975,  975,  975,  975,
      659,  659,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  660,  660, 2361,  658,  661,  661,  661,  661,
      661,  661,  661,  662,  662,  662,  662,  662,  662,  662,

      663,  663,  663,  663,  663,  663,  663,  665, 1718,  665,
     1718,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  666,  666,  666,  666,  666,
      666,  666,  669,  669,  669,  669,  669,  669,  669, 1415,
     1416, 1791, 1422, 1791,  670,  667,  668,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
     1423, 1426, 1427, 1428, 1793,  670, 1793, 1415, 1416,  976,
     1422,  976,  670,  977,  977,  977,  977,  977,  977,  977,
      673,  673,  673,  673,  673,  673,  673, 1437, 1423, 1426,
     1427, 1428,  674,  670,  671,  672,  672,  672,  672,  672,

      672,  672,  673,  673,  673,  673,  673,  673,  673, 1439,
     1440, 1449, 2361, 1450,  674, 1437, 1800,  978, 1800,  978,
      674,  979,  979,  979,  979,  979,  979,  979,  677,  677,
      677,  677,  677,  677,  677, 2361, 1451, 1439, 1440, 1449,
      678, 1450,  674,  675,  676,  676,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  677,  677, 1461, 1465,
     2361, 1466, 1467,  678, 1451,  980, 2361,  980,  678,  981,
      981,  981,  981,  981,  981,  981,  681,  681,  681,  681,
      681,  681,  681, 1468, 2361, 2361, 1461, 1465,  682, 1466,
     1467,  678,  679,  680,  680,  680,  680,  680,  680,  680,

      681,  681,  681,  681,  681,  681,  681, 1801, 2361, 1801,
     1469, 1468,  682,  982, 2361,  982,  682,  983,  983,  983,
      983,  983,  983,  983,  691,  691,  691,  691,  691,  691,
      691,  692,  692,  692,  692,  692,  692,  692, 1469, 2361,
      682,  693,  693,  693,  693,  693,  693,  693,  694,  694,
      694,  694,  694,  694,  694,  699,  699,  699,  699,  699,
      699,  699, 1470, 1472, 1804, 1473, 1804,  700,  697,  698,
      698,  698,  698,  698,  698,  698,  699,  699,  699,  699,
      699,  699,  699, 1474, 1475, 1476, 1477, 1478,  700, 2361,
     1470, 1472,  984, 1473,  984,  700,  985,  985,  985,  985,

      985,  985,  985,  701,  701,  701,  701,  701,  701,  701,
     2361, 1474, 1475, 1476, 1477, 1478,  700,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  707,  708,
      708,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  709,  709,  712,  712,  712,  712,  712,  712,  712,
     1479, 1480, 1822, 1483, 1822,  713,  710,  711,  711,  711,
      711,  711,  711,  711,  712,  712,  712,  712,  712,  712,

      712, 1484, 1487, 1496, 1499, 1833,  713, 1833, 1479, 1480,
      986, 1483,  986,  713,  987,  987,  987,  987,  987,  987,
      987,  716,  716,  716,  716,  716,  716,  716, 1500, 1484,
     1487, 1496, 1499,  717,  713,  714,  715,  715,  715,  715,
      715,  715,  715,  716,  716,  716,  716,  716,  716,  716,
     1501, 1502, 1503, 2361, 1504,  717, 1500, 1836,  988, 1836,
      988,  717,  989,  989,  989,  989,  989,  989,  989,  720,
      720,  720,  720,  720,  720,  720, 2361, 1505, 1501, 1502,
     1503,  721, 1504,  717,  718,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720, 1506,

     1508, 2361, 1509, 1511,  721, 1505,  990, 2361,  990,  721,
      991,  991,  991,  991,  991,  991,  991,  724,  724,  724,
      724,  724,  724,  724, 1512, 2361, 2361, 1506, 1508,  725,
     1509, 1511,  721,  722,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  724,  724,  724,  724,  724, 1846, 2361,
     1846, 1513, 1512,  725,  992, 2361,  992,  725,  993,  993,
      993,  993,  993,  993,  993,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  727, 1513,
     2361,  725,  730,  730,  730,  730,  730,  730,  730, 1516,
     1521, 1786, 1522, 1786,  731,  728,  729,  729,  729,  729,

      729,  729,  729,  730,  730,  730,  730,  730,  730,  730,
     1523, 1524, 1529, 1530, 1791,  731, 1791, 1516, 1521,  994,
     1522,  994,  731,  995,  995,  995,  995,  995,  995,  995,
      734,  734,  734,  734,  734,  734,  734, 1531, 1523, 1524,
     1529, 1530,  735,  731,  732,  733,  733,  733,  733,  733,
      733,  733,  734,  734,  734,  734,  734,  734,  734, 1542,
     1543, 1544, 2361, 1551,  735, 1531, 1793,  996, 1793,  996,
      735,  997,  997,  997,  997,  997,  997,  997,  738,  738,
      738,  738,  738,  738,  738, 2361, 1556, 1542, 1543, 1544,
      739, 1551,  735,  736,  737,  737,  737,  737,  737,  737,

      737,  738,  738,  738,  738,  738,  738,  738, 1561, 1563,
     2361, 1564, 1565,  739, 1556,  998, 2361,  998,  739,  999,
      999,  999,  999,  999,  999,  999,  742,  742,  742,  742,
      742,  742,  742, 1566, 2361, 2361, 1561, 1563,  743, 1564,
     1565,  739,  740,  741,  741,  741,  741,  741,  741,  741,
      742,  742,  742,  742,  742,  742,  742, 1567, 1866, 1571,
     1866, 1566,  743, 1000, 2361, 1000,  743, 1001, 1001, 1001,
     1001, 1001, 1001, 1001,  746,  746,  746,  746,  746,  746,
      746, 1514, 1572, 2361, 1573, 1567,  747, 1571, 1515, 2361,
      743,  744,  745,  745,  745,  745,  745,  745,  745,  746,

      746,  746,  746,  746,  746,  746, 1574, 1575, 2361, 1514,
     1572,  747, 1573, 1002,  747, 1002, 1515, 1003, 1003, 1003,
     1003, 1003, 1003, 1003,  750,  750,  750,  750,  750,  750,
      750, 1576, 2361, 2361, 1574, 1575,  751, 2361, 2361,  747,
      748,  749,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750, 1577, 2361, 1578, 1579, 1576,
      751, 1004, 2361, 1004,  751, 1005, 1005, 1005, 1005, 1005,
     1005, 1005,  754,  754,  754,  754,  754,  754,  754, 1580,
     1583, 2361, 1584, 1577,  755, 1578, 1579, 2361,  751,  752,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,

      754,  754,  754,  754, 1585, 1586, 2361, 1580, 1583,  755,
     1584, 1006,  755, 1006, 2361, 1007, 1007, 1007, 1007, 1007,
     1007, 1007,  758,  758,  758,  758,  758,  758,  758, 1591,
     2361, 2361, 1585, 1586,  759, 2361, 2361,  755,  756,  757,
      757,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  758,  758, 1593, 2361, 1594, 1595, 1591,  759, 1008,
     2361, 1008,  759, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
      762,  762,  762,  762,  762,  762,  762, 1596, 1599, 2361,
     1600, 1593,  763, 1594, 1595, 2361,  759,  760,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,

      762,  762, 1601, 1602, 2361, 1596, 1599,  763, 1600, 1010,
      763, 1010, 2361, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
      766,  766,  766,  766,  766,  766,  766, 1603, 2361, 2361,
     1601, 1602,  767, 2361, 2361,  763,  764,  765,  765,  765,
      765,  765,  765,  765,  766,  766,  766,  766,  766,  766,
      766, 1800, 2361, 1800, 1604, 1603,  767, 1012, 2361, 1012,
      767, 1013, 1013, 1013, 1013, 1013, 1013, 1013,  768,  768,
      768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
      769,  769, 1604, 2361,  767,  770,  770,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  771,  771,  774,

      774,  774,  774,  774,  774,  774, 1605, 1606, 1801, 1607,
     1801,  775,  772,  773,  773,  773,  773,  773,  773,  773,
      774,  774,  774,  774,  774,  774,  774, 1608, 1609, 1610,
     1614, 1804,  775, 1804, 1605, 1606, 1014, 1607, 1014,  775,
     1015, 1015, 1015, 1015, 1015, 1015, 1015,  779,  779,  779,
      779,  779,  779,  779, 1615, 1608, 1609, 1610, 1614,  780,
      775,  777,  778,  778,  778,  778,  778,  778,  778,  779,
      779,  779,  779,  779,  779,  779, 1616, 1617, 1870, 1618,
     1870,  780, 1615, 1822, 1016, 1822, 1016,  780, 1017, 1017,
     1017, 1017, 1017, 1017, 1017,  781,  781,  781,  781,  781,

      781,  781, 2361, 2361, 1616, 1617,  783, 1618,  783,  780,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  785, 1889,  785, 1889,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  787, 1892,  787, 1892,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      789, 1833,  789, 1833,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  790,  790,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  792,  792,  793,

      793,  793,  793,  793,  793,  793,  794,  794,  794,  794,
      794,  794,  794,  795,  795,  795,  795,  795,  795,  795,
      796,  796,  796,  796,  796,  796,  796,  797,  797,  797,
      797,  797,  797,  797,  798,  798,  798,  798,  798,  798,
      798,  804,  804,  804,  804,  804,  804,  804,  805,  805,
      805,  805,  805,  805,  805,  806,  806,  806,  806,  806,
      806,  806,  809,  809,  809,  809,  809,  809,  809, 1619,
     1620, 1836, 1622, 1836,  810,  807,  808,  808,  808,  808,
      808,  808,  808,  809,  809,  809,  809,  809,  809,  809,
     1623, 1624, 1628, 1629, 1630,  810, 2361, 1619, 1620, 1018,

     1622, 1018,  810, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
      811,  811,  811,  811,  811,  811,  811, 2361, 1623, 1624,
     1628, 1629, 1630,  810,  812,  812,  812,  812,  812,  812,
      812,  813,  813,  813,  813,  813,  813,  813,  816,  816,
      816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      817,  817,  820,  820,  820,  820,  820,  820,  820,  828,
      828,  828,  828,  828,  828,  828,  831,  831,  831,  831,
      831,  831,  831, 1636, 1637, 1897, 1638, 1897,  832,  829,
      830,  830,  830,  830,  830,  830,  830,  831,  831,  831,
      831,  831,  831,  831, 1641, 1642, 1899, 2361, 1899,  832,

     2361, 1636, 1637, 1020, 1638, 1020,  832, 1021, 1021, 1021,
     1021, 1021, 1021, 1021,  833,  833,  833,  833,  833,  833,
      833, 2361, 1641, 1642,  835,  836,  835,  832,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834, 1022, 1900, 1022, 1900, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  838, 1901,  838, 1901,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  840, 1846,  840, 1846,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  842,
     1911,  842, 1911,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841,  841,  844, 1866,  844,
     1866,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  846, 1870,  846, 1870,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  848, 1932,  848, 1932,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  850,  851,  850, 2361,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849, 1024,
     1935, 1024, 1935, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
      853, 1889,  853, 1889,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  852,  852,  855, 1892,
      855, 1892,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  857, 1897,  857, 1897,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  862,  862,  862,  862,  862,  862,
      862,  867,  867,  867,  867,  867,  867,  867,  868,  868,
      868,  868,  868,  868,  868,  871,  871,  871,  871,  871,
      871,  871,  872,  872,  872,  872,  872,  872,  872,  873,
      873,  873,  873,  873,  873,  873,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,

      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  975,  975,

      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,

     1017, 1017, 1017, 1017, 1017, 1017, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1022, 1098, 1022, 2361, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1024,
     1099, 1024, 2361, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1174, 1899, 1174, 1899, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1176, 1900, 1176, 1900, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1174,

     1644, 1174, 2361, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1176, 1284, 1176,
     1318, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1644, 1285,
     1319, 1286, 1287, 1288, 1339, 1352, 1373, 1347, 1340, 1341,
     1342, 1348, 1349, 1350, 1353, 1901, 1284, 1901, 1318, 1374,
     1911, 1971, 1911, 1971, 1979, 2361, 1979, 1285, 1319, 1286,
     1287, 1288, 1339, 1352, 1373, 1347, 1340, 1341, 1342, 1348,
     1349, 1350, 1353, 1362, 1417, 1362, 1418, 1374, 1424, 1419,
     1420, 1517, 1525, 1517, 1363, 2361, 2361, 1421, 1425, 1364,
     2361, 2361, 1518, 1534, 1932, 1534, 1932, 1519, 1526, 1935,

     2361, 1935, 1417, 1536, 1418, 1536, 1424, 1419, 1420, 1535,
     1525, 1429, 1431, 1429, 1431, 1421, 1425, 1365, 1433, 1537,
     1433, 1435, 1545, 1435, 1545, 1520, 1526, 1430, 1432, 1441,
     1443, 1441, 1443, 1445, 1434, 1445, 2361, 1436, 1546, 1447,
     1552, 1447, 1552, 2361, 2361, 1442, 1444, 1645, 1554, 1446,
     1554, 1453, 1455, 1453, 1455, 1448, 1553, 1457, 1459, 1457,
     1459, 1462, 2361, 1462, 1555, 1646, 1647, 1454, 1456, 1568,
     1581, 1568, 1581, 1458, 1460, 1645, 1488, 1463, 1488, 1490,
     1492, 1490, 1492, 1597, 2361, 1569, 1582, 1494, 1497, 1494,
     1497, 1598, 1489, 1646, 1647, 1491, 1493, 2361, 1517, 1611,

     1517, 1611, 2361, 1495, 1498, 1527, 1532, 1527, 1532, 1649,
     1534, 1597, 1534, 1570, 1519, 1612, 1536, 1650, 1536, 1598,
     1653, 1528, 1533, 1545, 1654, 1545, 1535, 1632, 1552, 1632,
     1552, 1554, 1537, 1554, 1568, 1658, 1568, 1649, 1581, 1546,
     1581, 1659, 1661, 1633, 1553, 1650, 1662, 1555, 1653, 1656,
     1569, 1656, 1654, 1663, 1582, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1658, 1673, 1657, 1676, 1677, 1678, 1659,
     1661, 1679, 1681, 1682, 1662, 1611, 1683, 1611, 1684, 1685,
     1686, 1663, 1687, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
     1672, 1612, 1673, 1688, 1676, 1677, 1678, 1689, 1690, 1679,

     1681, 1682, 1691, 1692, 1683, 1693, 1684, 1685, 1686, 1695,
     1687, 1632, 1696, 1632, 1697, 1698, 1699, 1700, 1701, 1704,
     1702, 1688, 1705, 1706, 1709, 1689, 1690, 1633, 1703, 1707,
     1691, 1692, 1708, 1693, 1710, 1711, 1713, 1695, 1712, 1714,
     1696, 2361, 1697, 1698, 1699, 1700, 1701, 1704, 1702, 1717,
     1705, 1706, 1709, 1715, 1719, 1715, 1703, 1707, 1720, 1656,
     1708, 1656, 1710, 1711, 1713, 1721, 1712, 1714, 1722, 1716,
     1722, 1724, 1725, 1727, 1725, 1657, 1730, 1717, 1728, 1731,
     1735, 1731, 1719, 1736, 1723, 1739, 1720, 1729, 1726, 1733,
     1740, 1733, 1744, 1721, 1737, 1732, 1737, 1745, 1746, 1724,

     1747, 1727, 1748, 1742, 1730, 1734, 1728, 1749, 1735, 1750,
     1738, 1736, 1751, 1739, 1752, 1729, 1743, 1753, 1740, 1754,
     1744, 1757, 1755, 1758, 1755, 1745, 1746, 1759, 1747, 1760,
     1748, 1742, 1761, 1762, 1763, 1749, 1764, 1750, 1756, 1767,
     1751, 1768, 1752, 1771, 1743, 1753, 1772, 1754, 1773, 1757,
     1765, 1758, 1765, 1774, 1769, 1759, 1769, 1760, 1777, 1778,
     1761, 1762, 1763, 1775, 1764, 1775, 1766, 1767, 1779, 1768,
     1770, 1771, 1780, 1781, 1772, 1782, 1773, 1783, 1784, 1776,
     1785, 1774, 1715, 1787, 1715, 1788, 1777, 1778, 1789, 1790,
     1792, 1722, 1794, 1722, 1795, 1995, 1779, 1995, 1716, 1796,

     1780, 1781, 1797, 1782, 1802, 1783, 1784, 1723, 1785, 1803,
     1725, 1787, 1725, 1788, 1805, 1808, 1789, 1790, 1792, 1798,
     1794, 1798, 1795, 1731, 1809, 1731, 1726, 1796, 1810, 1733,
     1797, 1733, 1802, 1811, 1737, 1799, 1737, 1803, 1806, 1732,
     1806, 1812, 1805, 1808, 1813, 1734, 1814, 1815, 1816, 1818,
     1738, 1819, 1809, 1820, 1807, 1821, 1810, 1755, 1823, 1755,
     1824, 1811, 1825, 1827, 1825, 1828, 1829, 1831, 1829, 1812,
     1834, 1835, 1813, 1756, 1814, 1815, 1816, 1818, 1826, 1819,
     1847, 1820, 1830, 1821, 1848, 1765, 1823, 1765, 1824, 1849,
     1769, 1827, 1769, 1828, 1837, 1831, 1837, 1850, 1834, 1835,

     1840, 1766, 1840, 1842, 1851, 1842, 1770, 1844, 1847, 1844,
     1838, 1775, 1848, 1775, 1852, 1853, 1841, 1849, 1854, 1843,
     1855, 1858, 1859, 1845, 1856, 1850, 1856, 1776, 1860, 1861,
     1863, 1864, 1851, 1865, 1867, 1798, 1868, 1798, 1839, 1869,
     1857, 1871, 1852, 1853, 1872, 1873, 1854, 1874, 1855, 1858,
     1859, 1799, 1806, 1878, 1806, 1879, 1860, 1861, 1863, 1864,
     1882, 1865, 1867, 1876, 1868, 1876, 1883, 1869, 1807, 1871,
     1884, 1885, 1872, 1873, 1880, 1874, 1880, 1886, 1887, 1877,
     1888, 1878, 1890, 1879, 1825, 1891, 1825, 1829, 1882, 1829,
     1881, 1893, 1894, 1895, 1883, 1896, 1898, 2361, 1884, 1885,

     1826, 1902, 1837, 1830, 1837, 1886, 1887, 1903, 1888, 1840,
     1890, 1840, 1842, 1891, 1842, 1844, 1905, 1844, 1838, 1893,
     1894, 1895, 1906, 1896, 1898, 1841, 1907, 1909, 1843, 1902,
     1856, 1845, 1856, 1912, 1913, 1903, 1914, 1915, 1917, 1915,
     1918, 1919, 1920, 1921, 1905, 1922, 1857, 1923, 1925, 1923,
     1906, 1926, 1927, 1916, 1907, 1909, 1928, 1929, 1930, 1931,
     1933, 1912, 1913, 1924, 1914, 1876, 1917, 1876, 1918, 1919,
     1920, 1921, 1934, 1922, 1936, 1880, 1925, 1880, 2361, 1926,
     1927, 1877, 1939, 1940, 1928, 1929, 1930, 1931, 1933, 1941,
     1937, 1881, 1937, 1942, 1943, 1953, 1944, 1946, 1944, 1946,

     1934, 1954, 1936, 1949, 1955, 1949, 1938, 1956, 1957, 1959,
     1939, 1940, 1945, 1947, 1950, 1951, 1960, 1941, 1961, 1952,
     1963, 1942, 1943, 1953, 1965, 1970, 1966, 1972, 1966, 1954,
     1973, 1968, 1955, 1968, 1974, 1956, 1957, 1959, 1915, 1975,
     1915, 1948, 1967, 1976, 1960, 1976, 1961, 1969, 1963, 1923,
     1980, 1923, 1965, 1970, 1916, 1972, 1981, 1982, 1973, 1977,
     1983, 1984, 1974, 1984, 1986, 1924, 1986, 1975, 1992, 2001,
     1988, 1990, 1988, 1990, 1993, 2002, 1993, 1985, 1980, 1937,
     1987, 1937, 2003, 2361, 1981, 1982, 1989, 1991, 1983, 1996,
     1994, 1996, 1998, 2361, 1998, 1938, 1992, 2001, 1944, 2004,

     1944, 2004, 1946, 2002, 1946, 1997, 2013, 2005, 1999, 2005,
     2003, 2006, 2014, 2007, 1945, 1949, 2015, 1949, 1947, 2008,
     2016, 2008, 2010, 2012, 2010, 2012, 2017, 2018, 2019, 2020,
     2021, 1952, 2022, 2023, 2013, 2009, 2000, 2024, 2011, 2006,
     2014, 2007, 2025, 1966, 2015, 1966, 2028, 2026, 2016, 2026,
     1968, 2027, 1968, 2027, 2017, 2018, 2019, 2020, 2021, 1967,
     2022, 2023, 1971, 2029, 1971, 2024, 1969, 2031, 2032, 1976,
     2025, 1976, 2034, 2033, 2028, 2033, 1979, 2035, 1979, 2036,
     2037, 2038, 1984, 2056, 1984, 1977, 2039, 1986, 2039, 1986,
     2040, 2029, 2040, 2361, 2361, 2031, 2032, 1988, 1985, 1988,

     2034, 2361, 2041, 1987, 2041, 2035, 2361, 2036, 2037, 2038,
     1990, 2056, 1990, 1989, 2042, 2043, 2042, 2043, 1993, 2045,
     1993, 2045, 1995, 1996, 1995, 1996, 1991, 2046, 1998, 2046,
     1998, 2044, 2057, 2047, 1994, 2047, 2048, 2049, 2050, 1997,
     2051, 2053, 2051, 2053, 1999, 2004, 2005, 2004, 2005, 2060,
     2058, 2008, 2058, 2008, 2065, 2067, 2052, 2054, 2068, 2010,
     2057, 2010, 2069, 2070, 2048, 2049, 2050, 2009, 2059, 2012,
     2059, 2012, 2061, 2071, 2061, 2011, 2063, 2060, 2063, 2072,
     2073, 2074, 2065, 2067, 2077, 2026, 2068, 2026, 2062, 2078,
     2069, 2070, 2064, 2027, 2075, 2027, 2075, 2079, 2080, 2081,

     2033, 2071, 2033, 2082, 2084, 2082, 2086, 2072, 2073, 2074,
     2076, 2039, 2077, 2039, 2040, 2361, 2040, 2078, 2041, 2083,
     2041, 2042, 2043, 2042, 2043, 2079, 2080, 2081, 2087, 2045,
     2087, 2045, 2084, 2046, 2086, 2046, 2098, 2047, 2044, 2047,
     2088, 2090, 2088, 2090, 2092, 2051, 2092, 2051, 2094, 2053,
     2094, 2053, 2095, 2099, 2095, 2096, 2089, 2091, 2097, 2100,
     2093, 2052, 2103, 2361, 2098, 2054, 2058, 2059, 2058, 2059,
     2107, 2101, 2061, 2101, 2061, 2063, 2102, 2063, 2102, 2108,
     2111, 2099, 2112, 2096, 2104, 2113, 2097, 2100, 2062, 2114,
     2103, 2064, 2105, 2075, 2106, 2075, 2118, 2115, 2107, 2115,

     2116, 2119, 2116, 2120, 2121, 2123, 2361, 2108, 2111, 2076,
     2112, 2361, 2104, 2113, 2127, 2361, 2117, 2114, 2361, 2082,
     2105, 2082, 2106, 2122, 2118, 2122, 2087, 2361, 2087, 2119,
     2131, 2120, 2121, 2123, 2124, 2083, 2088, 2361, 2088, 2125,
     2132, 2128, 2127, 2128, 2090, 2133, 2090, 2126, 2129, 2092,
     2129, 2092, 2089, 2130, 2094, 2130, 2094, 2095, 2131, 2095,
     2091, 2134, 2124, 2135, 2101, 2093, 2101, 2125, 2132, 2102,
     2136, 2102, 2137, 2133, 2138, 2126, 2139, 2140, 2141, 2144,
     2142, 2145, 2146, 2147, 2148, 2115, 2149, 2115, 2149, 2134,
     2143, 2135, 2150, 2153, 2154, 2156, 2157, 2116, 2136, 2116,

     2137, 2151, 2138, 2151, 2139, 2140, 2141, 2144, 2142, 2145,
     2146, 2147, 2148, 2117, 2122, 2158, 2122, 2152, 2143, 2162,
     2150, 2153, 2154, 2156, 2157, 2159, 2128, 2159, 2128, 2129,
     2130, 2129, 2130, 2163, 2164, 2166, 2164, 2167, 2169, 2167,
     2169, 2160, 2171, 2158, 2172, 2173, 2174, 2162, 2174, 2176,
     2165, 2177, 2178, 2168, 2170, 2179, 2182, 2185, 2180, 2186,
     2180, 2163, 2175, 2166, 2149, 2183, 2149, 2183, 2190, 2161,
     2171, 2191, 2172, 2173, 2181, 2192, 2151, 2176, 2151, 2177,
     2178, 2184, 2193, 2179, 2182, 2185, 2187, 2186, 2187, 2188,
     2194, 2188, 2152, 2159, 2199, 2159, 2190, 2200, 2195, 2191,

     2195, 2206, 2201, 2192, 2201, 2189, 2196, 2197, 2198, 2160,
     2193, 2164, 2202, 2164, 2202, 2167, 2207, 2167, 2194, 2204,
     2208, 2204, 2199, 2212, 2169, 2200, 2169, 2165, 2203, 2206,
     2205, 2168, 2205, 2361, 2196, 2197, 2198, 2174, 2213, 2174,
     2170, 2209, 2214, 2209, 2207, 2210, 2221, 2210, 2208, 2361,
     2361, 2212, 2180, 2175, 2180, 2215, 2216, 2215, 2216, 2223,
     2183, 2211, 2183, 2218, 2224, 2218, 2213, 2219, 2181, 2219,
     2214, 2187, 2217, 2187, 2221, 2188, 2184, 2188, 2222, 2225,
     2222, 2226, 2227, 2220, 2195, 2234, 2195, 2223, 2228, 2235,
     2228, 2189, 2224, 2238, 2361, 2230, 2232, 2230, 2232, 2201,

     2202, 2201, 2202, 2236, 2229, 2236, 2204, 2225, 2204, 2226,
     2227, 2231, 2233, 2234, 2241, 2242, 2203, 2235, 2205, 2243,
     2205, 2238, 2209, 2210, 2209, 2210, 2240, 2215, 2240, 2215,
     2216, 2244, 2216, 2244, 2218, 2219, 2218, 2219, 2245, 2211,
     2245, 2248, 2241, 2242, 2249, 2250, 2217, 2243, 2246, 2251,
     2246, 2220, 2222, 2252, 2222, 2228, 2253, 2228, 2253, 2230,
     2254, 2230, 2254, 2232, 2247, 2232, 2255, 2256, 2255, 2248,
     2257, 2229, 2249, 2250, 2236, 2231, 2236, 2251, 2258, 2233,
     2259, 2252, 2260, 2240, 2263, 2240, 2244, 2245, 2244, 2245,
     2264, 2246, 2264, 2246, 2265, 2256, 2266, 2268, 2257, 2269,

     2253, 2254, 2253, 2254, 2270, 2273, 2258, 2247, 2259, 2255,
     2260, 2255, 2263, 2271, 2274, 2271, 2274, 2276, 2277, 2278,
     2279, 2264, 2265, 2264, 2266, 2268, 2280, 2269, 2281, 2272,
     2275, 2282, 2270, 2273, 2283, 2284, 2285, 2271, 2286, 2271,
     2286, 2287, 2274, 2289, 2274, 2276, 2277, 2278, 2279, 2288,
     2290, 2288, 2291, 2272, 2280, 2294, 2281, 2295, 2275, 2282,
     2296, 2297, 2283, 2284, 2285, 2292, 2298, 2292, 2299, 2287,
     2286, 2289, 2286, 2300, 2288, 2301, 2288, 2302, 2290, 2303,
     2291, 2293, 2292, 2294, 2292, 2295, 2313, 2314, 2296, 2297,
     2304, 2315, 2304, 2305, 2298, 2305, 2299, 2307, 2293, 2307,

     2310, 2300, 2310, 2301, 2316, 2302, 2317, 2303, 2308, 2306,
     2318, 2331, 2332, 2309, 2313, 2314, 2311, 2361, 2304, 2315,
     2304, 2305, 2319, 2305, 2319, 2307, 2320, 2307, 2320, 2322,
     2333, 2322, 2316, 2310, 2317, 2310, 2334, 2306, 2318, 2331,
     2332, 2309, 2321, 2323, 2348, 2323, 2324, 2325, 2326, 2311,
     2327, 2329, 2327, 2329, 2319, 2320, 2319, 2320, 2333, 2335,
     2322, 2335, 2322, 2323, 2334, 2323, 2328, 2330, 2336, 2361,
     2336, 2321, 2348, 2349, 2324, 2325, 2326, 2338, 2340, 2338,
     2340, 2327, 2361, 2327, 2337, 2342, 2329, 2342, 2329, 2343,
     2344, 2343, 2344, 2339, 2341, 2361, 2346, 2328, 2346, 2361,

     2361, 2349, 2330, 2335, 2361, 2335, 2345, 2336, 2350, 2336,
     2350, 2338, 2347, 2338, 2351, 2340, 2351, 2340, 2352, 2342,
     2352, 2342, 2343, 2337, 2343, 2361, 2344, 2339, 2344, 2361,
     2353, 2341, 2353, 2346, 2354, 2346, 2354, 2355, 2357, 2355,
     2357, 2350, 2345, 2350, 2351, 2352, 2351, 2352, 2353, 2347,
     2353, 2361, 2361, 2356, 2358, 2354, 2355, 2354, 2355, 2359,
     2357, 2359, 2357, 2360, 2359, 2360, 2359, 2360, 2361, 2360,
     2361, 2361, 2356, 2361, 2361, 2361, 2358,  298,  298,  298,
      298,  298,  377,  377,  377,  377,  377,  378,  378,  378,
      378,  378,  379,  379,  379,  379,  379,  380,  380,  380,

      380,  380,  381,  381,  381,  381,  381,  382,  382,  382,
      382,  382,  383,  383,  383,  383,  383,  384,  384,  384,
      384,  384,  389,  389,  389,  389,  389,  390,  390,  390,
      390,  390,  454,  454,  454,  454,  454,  476,  476,  476,
      476,  476,  477,  477,  477,  477,  477,  478,  478,  478,
      478,  478,  479,  479,  479,  479,  479,  480,  480,  480,
      480,  480,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  499,  499,  499,  499,  499,  500,  500,  500,

      500,  500,  501,  501,  501,  501,  501,  502,  502,  502,
      502,  502,  503,  503,  503,  503,  503,  531,  531,  531,
      531,  531,  532,  532,  532,  532,  532,  533,  533,  533,
      533,  533,  534,  534,  534,  534,  534,  536,  536,  536,
      536,  536,  537,  537,  537,  537,  537,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  542,  542,  542,
      542,  542,  543,  543,  543,  543,  543,  547,  547,  547,
      547,  547,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  553,  553,  553,  553,  553,  683,  683,  684,
      684,  685,  685,  686,  686,  687,  687,  688,  688,  689,

      689,  690,  690,  696,  696,  776,  776,  799,  799,  800,
      800,  801,  801,  802,  802,  803,  803,  815,  815,  869,
      869,  870,  870,  874,  874,  875,  875,  876,  876, 2361,
      876,  876,  879, 2361, 2361,  879,  879,  683,  683,  684,
      684,  685,  685,  686,  686,  687,  687,  688,  688,  689,
      689,  690,  690,  696,  696,  776,  776,  799,  799,  800,
      800,  801,  801,  802,  802,  803,  803,  815,  815,  869,
      869,  870,  870,  874,  874,  875,  875,  876,  876, 2361,
      876,  876,  879, 2361, 2361,  879,  879,  297, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361
    } ;

static yyconst flex_int16_t yy_chk[11661] =
    {   0,
        0,    1,    1,    1, 2479,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        3,  299,    3,  299,  321,  299,  321,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,  578,    4,  578,

      321,  304, 2478,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,  578,    5, 2477,  579,  306,  579,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    6,  304,
        6, 2476,  579,  307, 2475,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7,  306,    7, 2474,  580,  310,
      580,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,  307,    8, 2473,  583,  311,  583,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,  310,    9, 2472,
      583,  312, 2471,    9,    9,    9,    9,    9,    9,    9,
       10,   10,   10,  311,   10, 2470,  584,  316,  584,   10,

       10,   10,   10,   10,   10,   10,   11,   11,   11,  312,
       11, 2469,  584,  318, 2468,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  316,   12, 2467,  585,  322,
      585,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,  318,   13,  586,  585,  586, 2466,   13,   13,   13,
       13,   13,   13,   13,   14,   14,   14,  322,   14,  586,
      587, 2465,  587,   14,   14,   14,   14,   14,   14,   14,
       15,   15,   15,  550,   15,  550,  587,  550, 2464,   15,
       15,   15,   15,   15,   15,   15,   16,   16,   16,  554,
       16,  554,  613,  554,  613,   16,   16,   16,   16,   16,

       16,   16,   17,   17,   17, 2463,   17,   17,  613,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   18,   18,
       18, 2461,   18,   18, 2453,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   19,   19, 2438,   19,   19,
     2437,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   20,   20, 2436,   20,   20, 2435,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   21,   21, 2434,
       21,   21, 2433,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22, 2432,   22,   22, 2431,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   23,

       23, 2430,   23,   23, 2429,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   24,   24,   24, 2428,   24,   24,
     2427,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,   25, 2426,   25,   25, 2425,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   26,   26,   26, 2424,
       26,   26, 2423,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27, 2422,   27,   27, 2420,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   28,   28,
       28, 2412,   28,   28, 2297,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   29,   29, 2250,   29,   29,

     2242,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   30,   30, 2241,   30,   30, 2208,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   31,   31,   31, 2206,
       31,   31, 2123,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   32,   32,   32, 2070,   32,   32, 2069,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   33,
       33, 2037,   33,   33, 2017,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34, 2003,   34,   34,
     1973,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       35,   35,   35,  557,   35,  557,  614,  557,  614,   35,

       35,   35,   35,   35,   35,   35,   36,   36,   36,  889,
       36,  889,  901,  559,  901,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37,  889,   37, 1922,  901,  561,
     1909,   37,   37,   37,   37,   37,   37,   37,   38,   38,
       38,  559,   38, 1907,  902,  562,  902,   38,   38,   38,
       38,   38,   38,   38,   39,   39,   39,  561,   39, 1903,
      903,  563,  903,   39,   39,   39,   39,   39,   39,   39,
       40,   40,   40,  562,   40, 1855,  906,  564,  906,   40,
       40,   40,   40,   40,   40,   40,   41,   41,   41,  563,
       41, 1853,  906,  565, 1849,   41,   41,   41,   41,   41,

       41,   41,   42,   42,   42,  564,   42, 1812,  907,  566,
      907,   42,   42,   42,   42,   42,   42,   42,   43,   43,
       43,  565,   43, 1794,  908,  567,  908,   43,   43,   43,
       43,   43,   43,   43,   44,   44,   44,  566,   44, 1764,
      908,  568, 1750,   44,   44,   44,   44,   44,   44,   44,
       45,   45,   45,  567,   45,   45,  909,   45,  909,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,  568,
       46,   46,  910,   46,  910,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47,  911,   47,  911,  910,  569,
     1673,   47,   47,   47,   47,   47,   47,   47,   48,   48,

       48,  913,   48,  913,  912,  570,  912,   48,   48,   48,
       48,   48,   48,   48,   49,   49,   49,  569,   49,   49,
      912,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       50,   50,   50,  570,   50,   50, 1606,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   51,   51,   51, 1605,
       51,   51, 1595,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1586,   52,   52, 1578,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   53,   53,
       53, 1577,   53,   53, 1574,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   54,   54,   54, 1565,   54,   54,

     1564,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   55,   55, 1405,   55,   55, 1389,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   56,   56,   56, 1388,
       56,   56, 1371,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1355,   57,   57,   57,
       57,  914,  571,  914, 1344,   58,   58,   58,   58,   57,
       58,   58,   58,   58,  915, 1329,  915,  914,   59,   59,
       59,   59,   58,   59,   59,   59,   59,  293,  293,  293,
      571,  293,  309,  573, 1316,   59,   57,   60,   60,   60,
       60, 1312,   60,   60,   60,   60,  919,  309,  919,   58,

       61,   61,   61,   61,   60,   61,   61,   61,   61, 1278,
      309,  573,   59,   62,   62,   62,   62,   61,   62,   62,
       62,   62,  294,  294,  294,  309,  294,  574,  575, 1259,
       62,   60,   63,   63,   63,   63, 1253,   63,   63,   63,
       63,  956,  576,  956,   61,   64,   64,   64,   64,   63,
       64,   64,   64,   64, 1246,  574,  575,   62,   65,   65,
       65,   65,   64,   65,   65,   65,   65,  295,  295,  295,
      576,  295,  577,  581, 1189,   65,   63,   66,   66,   66,
       66, 1173,   66,   66,   66,   66, 1035,  582, 1035,   64,
       67,   67,   67,   67,   66,   67,   67,   67,   67, 1136,

      577,  581,   65,   68,   68,   68,   68,   67,   68,   68,
       68,   68,  296,  296,  296,  582,  296,  588,  589, 1134,
       68,   66,   69,   69,   69,   69, 1126,   69,   69,   69,
       69,  591, 1125,  592,   67,   70,   70,   70,   70,   69,
       70,   70,   70,   70, 1107,  588,  589,   68,   71,   71,
       71,   71,   70,   71,   71,   71,   71,  593,  596,  591,
      317,  592,  597,  599, 1100,   71,   69,   72,   72,   72,
       72,  303,   72,   72,   72,   72,  308,  317,  303,   70,
     1092,  303,  308, 1081,   72,  593,  596,  308,  317,  594,
      597,  599,   71,  877,  880,  877,  880,  877,  880,  303,

     1047, 1078, 1047,  600,  308,  317,  303,  601,  594,  303,
      308,   72,   73,   73,   73,  308,   73,  594,  918,  602,
      918,   73,   73,   73,   73,   73,   73,   73,   74,   74,
       74,  600,   74,  946,  918,  601,  933,   74,   74,   74,
       74,   74,   74,   74,   75,   75,   75,  602,   75,  916,
     1028,  605, 1028,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76, 1050,   76, 1050, 1028,  606,  898,   76,
       76,   76,   76,   76,   76,   76,   77,   77,   77,  605,
       77,  897, 1029,  607, 1029,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,  606,   78,  890, 1029,  609,

      888,   78,   78,   78,   78,   78,   78,   78,   79,   79,
       79,  607,   79, 1034, 1051, 1034, 1051,   79,   79,   79,
       79,   79,   79,   79,   80,   80,   80,  609,   80, 1034,
     1052,  572, 1052,   80,   80,   80,   80,   80,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
     1053,  560, 1053,   83,   83,   83,   83,   81,   83,   83,
       83,   83, 1054, 1057, 1054, 1057,   84,   84,   84,   84,
       83,   84,   84,   84,   84,  323,  323,  323,  323,  323,
      323,  323,  297,   84,   81,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,    0,    0,   83,  610,  612,

      615,    0,   82,  324,  324,  324,  324,  324,  324,  324,
       84,  325,  325,  325,  325,  325,  325,  325,  326,  326,
      326,  326,  326,  326,  326,    0,  610,  612,  615,   82,
       85,   85,   85,    0,   85,   85,    0,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   86,   86,   86,    0,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   87, 1056,   87, 1056, 1084,  882,
     1084,   87,   87,   87,   87,   87,   87,   87,   88,   88,
       88, 1056,   88,    0, 1084,  883,    0,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,  882,   89,    0,

     1085,  885, 1085,   89,   89,   89,   89,   89,   89,   89,
       90,   90,   90,  883,   90,    0, 1085,  886,    0,   90,
       90,   90,   90,   90,   90,   90,   91,   91,   91,  885,
       91,    0, 1089,  887, 1089,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,  886,   92,    0, 1089,  891,
        0,   92,   92,   92,   92,   92,   92,   92,   93,   93,
       93,  887,   93,    0, 1102,  892, 1102,   93,   93,   93,
       93,   93,   93,   93,   94,   94,   94,  891,   94,    0,
     1102,  893,    0,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,  892,   95,    0, 1103,  894, 1103,   95,

       95,   95,   95,   95,   95,   95,   96,   96,   96,  893,
       96,    0, 1104,  895, 1104,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97,  894,   97,    0, 1104,  896,
        0,   97,   97,   97,   97,   97,   97,   97,   98,   98,
       98,  895,   98,    0, 1105,  899, 1105,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   99,  896,   99,    0,
     1110,  900, 1110,   99,   99,   99,   99,   99,   99,   99,
      100,  100,  100,  899,  100,    0, 1128,  904, 1128,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  900,
      101,    0, 1128,  905,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102,  904,  102,    0, 1129,  917,
     1129,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  905,  103,    0, 1130,  920, 1130,  103,  103,  103,
      103,  103,  103,  103,  104,  104,  104,  917,  104,    0,
     1130,  921,    0,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,  920,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  106,  921,
      106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,

      108,    0,  108,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  109,  109,  109,    0,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,  110,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111,    0,
      111,  111,    0,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112,    0,  112,  112,    0,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  113,  113,
      113, 1133,  113, 1133, 1135,  922, 1135,  113,  113,  113,
      113,  113,  113,  113,  114,  114,  114, 1133,  114,    0,

     1135,  923,    0,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  922,  115,    0, 1144,  924, 1144,  115,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  923,
      116,    0, 1144,  925,    0,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117,  924,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  118,  118,
      118,  925,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,    0,  119,  119,
        0,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      120,  120,  120,    0,  120,  120,    0,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  121,  121,  121,    0,
      121,  121,    0,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,    0,  122,  122,    0,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  123,  123,
      123,    0,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  124,  124,  124,    0,  124,  124,
        0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,    0,
      126,  126,    0,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  127,  127,  127,    0,  127,  127,    0,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
      128,    0,  128,  128,    0,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  129,  129,  129,    0,  129,  129,
        0,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,    0,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,    0,
      131,  131,    0,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,    0,  132,  132,    0,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,

      133,    0,  133,  133,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,    0,  134,  134,
        0,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      135,  135,  135,    0,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136,    0,
      136,  136,    0,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137, 1146,  137, 1146, 1147,  926,
     1147,  137,  137,  137,  137,  137,  137,  137,  138,  138,
      138, 1146,  138,    0, 1147,  928,    0,  138,  138,  138,
      138,  138,  138,  138,  139,  139,  139,  926,  139,    0,

     1157,  929, 1157,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  928,  140,    0, 1157,  930,    0,  140,
      140,  140,  140,  140,  140,  140,  141,  141,  141,  929,
      141,    0, 1158,  931, 1158,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142,  930,  142,    0, 1159,  932,
     1159,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  931,  143,    0, 1159,  934,    0,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  932,  144,    0,
     1160,  935, 1160,  144,  144,  144,  144,  144,  144,  144,
      145,  145,  145,  934,  145,  145,    0,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  146,  146,  146,  935,
      146,  146,    0,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  147,  147,  936,  147,  147,  147,
      147,  937, 1165,    0, 1165,  148,  148,  148,  148,  147,
      148,  148,  148,  148,  327,  327,  327,  327,  327,  327,
      327, 1164,  148, 1164,  936,  179,  179,  179,  179,  937,
      179,  179,  179,  179,    0,    0,  147, 1164, 1180, 1181,
     1180, 1181,  179, 1203,  938, 1203, 1208,    0, 1208,  148,
      149,  149,  149,    0,  149,  149,    0,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150,  179,

      150,  150,  938,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  151,  151,  151, 1190,  151, 1190, 1192,  939,
     1192,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152, 1190,  152,    0, 1192,  940,    0,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,  939,  153,  153,
     1202,  153, 1202,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,  940,  154,  154, 1202,  154,    0,  154,
      154,  154,  154,  154,  154,  154,  155,  155,  155,    0,
      155,  155, 1207,  155, 1207,  155,  155,  155,  155,  155,
      155,  155,  156,  156,  156,    0,  156,  156, 1207,  156,

        0,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,    0,  157,  157, 1209,  157, 1209,  157,  157,  157,
      157,  157,  157,  157,  158,  158,  158,    0,  158,  158,
     1209,  158,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159,    0,  159,  159, 1210,  159, 1210,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160,    0,
      160,  160, 1213,  160, 1213,  160,  160,  160,  160,  160,
      160,  160,  161,  161,  161, 1214,  161, 1214, 1213,  941,
        0,  161,  161,  161,  161,  161,  161,  161,  162,  162,
      162, 1217,  162, 1217, 1216,  942, 1216,  162,  162,  162,

      162,  162,  162,  162,  163,  163,  163,  941,  163,    0,
     1216,  943,    0,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  942,  164,    0, 1226,  944, 1226,  164,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  943,
      165,    0, 1226,  945,    0,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  944,  166,    0, 1227,  947,
     1227,  166,  166,  166,  166,  166,  166,  166,  167,  167,
      167,  945,  167,    0, 1229,  948, 1229,  167,  167,  167,
      167,  167,  167,  167,  168,  168,  168,  947,  168,    0,
     1229,  949,    0,  168,  168,  168,  168,  168,  168,  168,

      169,  169,  169,  948,  169,    0, 1230,  951, 1230,  169,
      169,  169,  169,  169,  169,  169,  170,  170,  170,  949,
      170,    0, 1231,  952, 1231,  170,  170,  170,  170,  170,
      170,  170,  171,  171,  171,  951,  171,    0, 1231,  953,
        0,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      172,  952,  172,    0, 1232,  954, 1232,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  953,  173,    0,
     1242,  955, 1242,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174,  954,  174,    0, 1242,  957,    0,  174,
      174,  174,  174,  174,  174,  174,  175,  175,  175,  955,

      175,    0, 1243, 1026, 1243,  175,  175,  175,  175,  175,
      175,  175,  176,  176,  176,  957,  176,    0, 1244, 1027,
     1244,  176,  176,  176,  176,  176,  176,  176,  177,  177,
      177, 1026,  177, 1248,    0, 1248, 1030,  177,  177,  177,
      177,  177,  177,  177,  178,  178,  178, 1027,  178, 1269,
     1272, 1269, 1272,  178,  178,  178,  178,  178,  178,  178,
      180,  180,  180,  180, 1030,  180,  180,  180,  180, 1268,
     1282, 1268, 1282,  181,  181,  181,  181,  180,  181,  181,
      181,  181, 1292,    0, 1292, 1268,  182,  182,  182,  182,
      181,  182,  182,  182,  182,  328,  328,  328,  328,  328,

      328,  328,    0,  182,  180,  183,  183,  183,  183,    0,
      183,  183,  183,  183, 1293,    0, 1293,  181,  184,  184,
      184,  184,  183,  184,  184,  184,  184, 1296,    0, 1296,
      182,  185,  185,  185,  185,  184,  185,  185,  185,  185,
      329,  329,  329,  329,  329,  329,  329,    0,  185,  183,
      186,  186,  186,  186,    0,  186,  186,  186,  186, 1298,
        0, 1298,  184,  187,  187,  187,  187,  186,  187,  187,
      187,  187, 1031,    0,    0,  185,  188,  188,  188,  188,
      187,  188,  188,  188,  188,  330,  330,  330,  330,  330,
      330,  330,  330,  188,  186,    0,  205,  205,  205,  205,

     1031,  205,  205,  205,  205,    0, 1307,  187, 1307, 1309,
     1271, 1309, 1271,  205, 1032, 1033,  608,  950,    0,    0,
      188,  189,  189,  189,  950,  189, 1271, 1310,  608, 1310,
      189,  189,  189,  189,  189,  189,  189,  190,  190,  190,
      205,  190, 1032, 1033,  608,  950,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191,  608,  191,    0, 1291,
     1037, 1291,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192, 1322,  192, 1322, 1291, 1038,    0,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193, 1037,  193,
        0, 1294, 1039, 1294,  193,  193,  193,  193,  193,  193,

      193,  194,  194,  194, 1038,  194,    0, 1294, 1040,    0,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
     1039,  195,  195,    0,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  196,  196,  196, 1040,  196,  196,    0,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197, 1295,  197, 1295, 1321, 1041, 1321,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198, 1295,  198,
        0, 1321, 1042,    0,  198,  198,  198,  198,  198,  198,
      198,  199,  199,  199, 1041,  199,    0, 1325, 1044, 1325,
      199,  199,  199,  199,  199,  199,  199,  200,  200,  200,

     1042,  200,    0, 1325, 1045,    0,  200,  200,  200,  200,
      200,  200,  200,  201,  201,  201, 1044,  201, 1273, 1273,
     1273, 1273,  201,  201,  201,  201,  201,  201,  201,  202,
      202,  202, 1045,  202, 1354, 1356, 1354, 1356,  202,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203, 1364,    0, 1364,  206,  206,
      206,  206,  203,  206,  206,  206,  206, 1381, 1383, 1381,
     1383,  279,  279,  279,  279,  206,  279,  279,  279,  279,
      332,  332,  332,  332,  332,  332,  332,  332,  279,  203,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

        0, 1046,  206, 1048, 1049, 1055,    0,  204,  357,  357,
      357,  357,  357,  357,  357,  279,  331,  331,  331,  331,
      331,  331,  331,    0,    0, 1339, 1058, 1339,  331, 1046,
        0, 1048, 1049, 1055,  204,  207,  207,  207, 1385,  207,
     1385, 1339,  207,    0,  207,  207,  207,  207,  207,  207,
      207,  208,  208,  208, 1058,  208,  331, 1406,  208, 1406,
      208,  208,  208,  208,  208,  208,  208,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1410,    0, 1410,
      280,  280,  280,  280,  209,  280,  280,  280,  280, 1430,
     1432, 1430, 1432,  281,  281,  281,  281,  280,  281,  281,

      281,  281,  333,  333,  333,  333,  333,  333,  333,  333,
      281,  209,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,    0,    0,  280,  282,  282,  282,  282,  210,
      282,  282,  282,  282, 1434,    0, 1434,  281,  289,  289,
      289,  289,  282,  289,  289,  289,  289,  335,  335,  335,
      335,  335,  335,  335,  335,  289,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,    0,    0,  282,
      290,  290,  290,  290,  211,  290,  290,  290,  290, 1436,
        0, 1436,  289,  291,  291,  291,  291,  290,  291,  291,
      291,  291,  336,  336,  336,  336,  336,  336,  336,  336,

      291,  211,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,    0,  611,  290, 1059,  319, 1060, 1442,  212,
     1442, 1340,  611, 1340,  319,  319,  319,  291,  334,  334,
      334,  334,  334,  334,  334,    0,    0, 1340, 1061,    0,
      334,  611, 1062, 1059,  319, 1060,  212,  213,  213,  213,
      611,  213,  319,  319,  319,    0,  213,  213,  213,  213,
      213,  213,  213,  214,  214,  214, 1061,  214,  334, 1444,
     1062, 1444,  214,  214,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215, 1341,
        0, 1341,  292,  292,  292,  292,  215,  292,  292,  292,

      292, 1446, 1448, 1446, 1448, 1341, 1454,  305, 1454,  292,
      598, 1456, 1063, 1456,  305,  305, 1064,  598,  305,  598,
      305, 1065, 1066,  215,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  314,  305,  292, 1067,  598,  314,
     1063,  216,  305,  305, 1064,  598,  305,  598,  305, 1065,
     1066,  595,  604,  884,  314,  595,  595,  595,    0,  314,
      604,  884,  314, 1068, 1458, 1067, 1458,    0,  216,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  595,
      604,  884,  314,  595,  595,  595,  217,  314,  604,  884,
      314, 1068,  337,  337,  337,  337,  337,  337,  337, 1460,

     1463, 1460, 1463,    0,  337,  338,  338,  338,  338,  338,
      338,  338,  338,  217,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  358,  358,  358,  358,  358,  358,
      358,  218,  337,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,    0, 1069,
     1070, 1071, 1072,  340, 1464, 1481, 1464, 1481,  218,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  359,
      359,  359,  359,  359,  359,  359,  219, 1069, 1070, 1071,
     1072,  340,  341,  341,  341,  341,  341,  341,  341,  341,
      342,  342,  342,  342,  342,  342,  342,  342, 1482,    0,

     1482, 1073, 1074,  219,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  360,  360,  360,  360,  360,  360,
      360,  220,  343,  343,  343,  343,  343,  343,  343, 1073,
     1074, 1075, 1076, 1077,  343,  344,  344,  344,  344,  344,
      344,  344,  344, 1489, 1491, 1489, 1491,    0,  220,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221, 1075,
     1076, 1077,  343, 1079, 1080,    0,  221,  345,  345,  345,
      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      346,  346,    0,    0, 1082, 1083, 1086,  346,    0,    0,
     1079, 1079, 1080,  221,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  361,  361,  361,  361,  361,  361,
      361,  222, 1082, 1083, 1086,  346,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
      348,  348, 1493, 1495, 1493, 1495, 1087, 1088,  222,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  362,
      362,  362,  362,  362,  362,  362,  223,  349,  349,  349,
      349,  349,  349,  349, 1087, 1088, 1090, 1091, 1093,  349,
      350,  350,  350,  350,  350,  350,  350,  350, 1498, 1510,
     1498, 1510,    0,  223,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224, 1090, 1091, 1093,  349, 1094, 1095,

        0,  224,  351,  351,  351,  351,  351,  351,  351,  351,
      352,  352,  352,  352,  352,  352,  352,    0,    0, 1096,
     1097, 1101,  352, 1519,    0, 1519, 1094, 1095,  224,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  364,
      364,  364,  364,  364,  364,  364,  225, 1096, 1097, 1101,
      352,  353,  353,  353,  353,  353,  353,  353,  353,  354,
      354,  354,  354,  354,  354,  354,  354, 1528, 1533, 1528,
     1533, 1106, 1108,  225,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  385,  385,  385,  385,  385,  385,
      385,  226,  355,  355,  355,  355,  355,  355,  355, 1106,

     1108, 1109, 1111, 1112,  355,  356,  356,  356,  356,  356,
      356,  356,  356, 1535, 1537, 1535, 1537,    0,  226,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227, 1109,
     1111, 1112,  355,  363, 1113,  363,  227,  363,  363,  363,
      363,  363,  363,  363,  365,  365,  365,  365,  365,  365,
      365,  365,  367,  367,  367,  367,  367,  367,  367,  367,
        0,    0, 1113,  227,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  366,  366,  366,  366,  366,  366,
      366,  228,    0, 1538, 1114, 1538,  366,  368,  368,  368,
      368,  368,  368,  368,  368,  370,  370,  370,  370,  370,

      370,  370,  370, 1115, 1043, 1116,    0,    0,  228,  229,
      229,  229, 1114,  229,  366, 1539, 1043, 1539,  229,  229,
      229,  229,  229,  229,  229,  230,  230,  230, 1540,  230,
     1540, 1115, 1043, 1116,  230,  230,  230,  230,  230,  230,
      230,  231,  231,  231, 1043,  231,  231,    0,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
        0,  232,  232,    0,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  233,  233,  233, 1342,  233, 1342, 1347,
     1117, 1347,  233,  233,  233,  233,  233,  233,  233,  234,
      234,  234, 1342,  234,    0, 1347, 1118,    0,  234,  234,

      234,  234,  234,  234,  234,  235,  235,  235, 1117,  235,
      235, 1348,  235, 1348,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236, 1118,  236,  236, 1348,  236,    0,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
        0,  237,  237, 1349,  237, 1349,  237,  237,  237,  237,
      237,  237,  237,  238,  238,  238,    0,  238,  238, 1349,
      238,    0,  238,  238,  238,  238,  238,  238,  238,  239,
      239,  239,    0,  239,  239, 1350,  239, 1350,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,    0,  240,
      240, 1350,  240,    0,  240,  240,  240,  240,  240,  240,

      240,  241,  241,  241,    0,  241,  241, 1357,  241, 1357,
      241,  241,  241,  241,  241,  241,  241,  242,  242,  242,
        0,  242,  242, 1357,  242,    0,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,    0,  243,  243, 1358,
      243, 1358,  243,  243,  243,  243,  243,  243,  243,  244,
      244,  244,    0,  244,  244, 1358,  244,    0,  244,  244,
      244,  244,  244,  244,  244,  245,  245,  245,    0,  245,
      245, 1359,  245, 1359,  245,  245,  245,  245,  245,  245,
      245,  246,  246,  246,    0,  246,  246, 1359,  246,    0,
      246,  246,  246,  246,  246,  246,  246,  247,  247,  247,

        0,  247,  247, 1360,  247, 1360,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,    0,  248,  248, 1360,
      248,    0,  248,  248,  248,  248,  248,  248,  248,  249,
      249,  249,    0,  249,  249, 1362,  249, 1362,  249,  249,
      249,  249,  249,  249,  249,  250,  250,  250,    0,  250,
      250, 1362,  250,    0,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,    0,  251,  251, 1363,  251, 1363,
      251,  251,  251,  251,  251,  251,  251,  252,  252,  252,
        0,  252,  252, 1363,  252,    0,  252,  252,  252,  252,
      252,  252,  252,  253,  253,  253,    0,  253,  253, 1382,

      253, 1382,  253,  253,  253,  253,  253,  253,  253,  254,
      254,  254,    0,  254,  254, 1382,  254,    0,  254,  254,
      254,  254,  254,  254,  254,  255,  255,  255,    0,  255,
      255, 1384,  255, 1384,  255,  255,  255,  255,  255,  255,
      255,  256,  256,  256,    0,  256,  256, 1384,  256,    0,
      256,  256,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  386,  386,  386,
      386,  386,  386,  386,  257,  369,  369,  369,  369,  369,
      369,  369, 1541,    0, 1541, 1120,    0,  369,  371,  371,
      371,  371,  371,  371,  371,  371,  590,    0,  590, 1122,

     1123,  257,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  590, 1120,  590,  369,  590, 1127,    0,  258,
      372,  372,  372,  372,  372,  372,  372, 1122, 1123, 1131,
        0,  590,  372,  373,  373,  373,  373,  373,  373,  373,
      373, 1546,  590, 1546,  590, 1127,  258,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259, 1131, 1119,  590,
      372, 1119, 1132,    0,  259,  374,  374,  374,  374,  374,
      374,  374,  374,  375,  375,  375,  375,  375,  375,  375,
     1119,    0, 1137, 1138, 1139,  375, 1119,    0,    0, 1119,
     1132,  259,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  387,  387,  387,  387,  387,  387,  387,  260,
     1137, 1138, 1139,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  388,  388,  388,  388,  388,  388,  388,  394,
      394,  394,  394,  394,  394,  394,  260,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  395,  395,  395,
      395,  395,  395,  395,  261,  391,  391,  391,  391,  391,
      391,  391,  391,  392,  392,  392,  392,  392,  392,  392,
        0,    0, 1140, 1141, 1142,  392, 1547, 1548, 1547, 1548,
        0,  261,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  396,  396,  396,  396,  396,  396,  396,  262,

     1140, 1141, 1142,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  397,  397,  397,  397,  397,  397,  397,  398,
      398,  398,  398,  398,  398,  398,  262,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  399,  399,  399,
      399,  399,  399,  399,  263,  400,  400,  400,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  401,  401,  402,
      402,  402,  402,  402,  402,  402, 1549, 1550, 1549, 1550,
        0,  263,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  415,  415,  415,  415,  415,  415,  415,  264,
      403,  403,  403,  403,  403,  403,  403,  403,  404,  404,

      404,  404,  404,  404,  404,    0,    0, 1391, 1143, 1391,
      404, 1145, 1148, 1149,    0,    0,  264,  265,  265,  265,
     1553,  265, 1553, 1391,    0,    0,  265,  265,  265,  265,
      265,  265,  265,  266,  266,  266, 1143,  266,  404, 1145,
     1148, 1149,  266,  266,  266,  266,  266,  266,  266,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  416,
      416,  416,  416,  416,  416,  416,  267,  405,  405,  405,
      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  406,  406,  408,  408,  408,  408,  408,  408,  408,
      408, 1150, 1151,  267,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  447,  447,  447,  447,  447,  447,
      447,  268,  407,  407,  407,  407,  407,  407,  407, 1150,
     1151, 1152,    0, 1121,  407,  409,  409,  409,  409,  409,
      409,  409,  409, 1555,    0, 1555, 1121, 1153,  268,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269, 1152,
     1036, 1121,  407, 1036,    0,    0,  269,  410,  410,  410,
      410,  410,  410,  410, 1121, 1153, 1155, 1036,    0,  410,
      411,  411,  411,  411,  411,  411,  411,  411, 1036,    0,
     1124, 1036, 1124,  269,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270, 1155, 1036, 1124,  410, 1156, 1161,

        0,  270,  412,  412,  412,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  413,  413,    0,    0, 1162,
     1163, 1166,  413, 1557, 1124, 1557, 1156, 1161,  270,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  448,
      448,  448,  448,  448,  448,  448,  271, 1162, 1163, 1166,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  417,
      417,  417,  417,  417,  417,  417,  417, 1558, 1559, 1558,
     1559, 1167, 1168,  271,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  449,  449,  449,  449,  449,  449,
      449,  272,  418,  418,  418,  418,  418,  418,  418, 1167,

     1168, 1169,    0, 1170,  418,  419,  419,  419,  419,  419,
      419,  419,  419, 1560, 1562, 1560, 1562,    0,  272,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273, 1169,
     1154, 1170,  418, 1154, 1171,    0,  273,  420,  420,  420,
      420,  420,  420,  420,  420,  421,  421,  421,  421,  421,
      421,  421,    0,    0, 1172, 1179, 1182,  421, 1154,    0,
        0, 1154, 1171,  273,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  450,  450,  450,  450,  450,  450,
      450,  274, 1172, 1179, 1182,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,

      423,  423, 1183, 1184, 1185, 1186,    0,    0,  274,  275,
      275,  275, 1392,  275, 1392, 1569, 1187, 1569,  275,  275,
      275,  275,  275,  275,  275,  276,  276,  276, 1392,  276,
     1183, 1184, 1185, 1186,  276,  276,  276,  276,  276,  276,
      276,  277,  277,  277, 1187,  277,    0, 1393, 1188, 1393,
      277,  277,  277,  277,  277,  277,  277,  278,  278,  278,
     1582,  278, 1582, 1393, 1191,    0,  278,  278,  278,  278,
      278,  278,  278,  283,  283,  283, 1188,  283,    0, 1394,
     1193, 1394,  283,  283,  283,  283,  283,  283,  283,  284,
      284,  284, 1191,  284,    0, 1394, 1194,    0,  284,  284,

      284,  284,  284,  284,  284,  285,  285,  285, 1193,  285,
        0, 1396, 1195, 1396,  285,  285,  285,  285,  285,  285,
      285,  286,  286,  286, 1194,  286,    0, 1396, 1196,    0,
      286,  286,  286,  286,  286,  286,  286,  287,  287,  287,
     1195,  287, 1197, 1409,    0, 1409,  287,  287,  287,  287,
      287,  287,  287,  288,  288,  288, 1196,  288, 1587, 1409,
     1587,    0,  288,  288,  288,  288,  288,  288,  288,  313,
     1197,  313,  424,  424,  424,  424,  424,  424,  424, 1422,
     1588, 1422, 1588,  313,  424,  313,  313,  425,  425,  425,
      425,  425,  425,  425,  425, 1422, 1198, 1199, 1200, 1201,

      313,  426,  426,  426,  426,  426,  426,  426,  426,  313,
      313,  313,  424, 1204,  313,    0,    0,  427,  427,  427,
      427,  427,  427,  427, 1198, 1199, 1200, 1201,  313,  427,
      430,  430,  430,  430,  430,  430,  430,  313,  313,  313,
      315, 1204,  430,  603, 1178, 1211,  315, 1212,    0,  315,
     1215, 1178,  315, 1206,  603,  315,  315,  427,  315,    0,
     1206,  603,  927,    0, 1218,  315, 1219,    0,  315,  927,
      430,  603, 1178, 1211,  315, 1212,  927,  315, 1215, 1178,
      315, 1206,  603,  315,  315,    0,  315,  320, 1206,  603,
      927,  320, 1218, 1220, 1219,  320, 1221,  927, 1222,  320,

     1223,  320, 1224, 1225,  927, 1228, 1233,  320,  458,  458,
      458,  458,  458,  458,  458,  320, 1426,    0, 1426,  320,
     1589, 1220, 1589,  320, 1221,    0, 1222,  320, 1223,  320,
     1224, 1225, 1426, 1228, 1233,  320,  428,  428,  428,  428,
      428,  428,  428,  428,  429,  429,  429,  429,  429,  429,
      429,  429,  431,  431,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,  432,  432,  433,  433,
      433,  433,  433,  433,  433,    0, 1234, 1235, 1236, 1237,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,

      436,  436,  436,  436, 1234, 1235, 1236, 1237,  433,  436,
      437,  437,  437,  437,  437,  437,  437,  437,  438,  438,
      438,  438,  438,  438,  438,  438,  439,  439,  439,  439,
      439,  439,  439,    0, 1238, 1239, 1241,  436,  439,  440,
      440,  440,  440,  440,  440,  440,  440,  441,  441,  441,
      441,  441,  441,  441,  441,  442,  442,  442,  442,  442,
      442,  442, 1238, 1239, 1241, 1245,  439,  442,  443,  443,
      443,  443,  443,  443,  443,  443,  444,  444,  444,  444,
      444,  444,  444,  444,  445,  445,  445,  445,  445,  445,
      445,    0, 1247, 1245, 1249,  442,  445,  446,  446,  446,

      446,  446,  446,  446,  446,  451,  451,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
     1247, 1250, 1249, 1251,  445,  452,  453,  453,  453,  453,
      453,  453,  453,  453,  455,  455,  455,  455,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  456,  456, 1250,
     1590, 1251, 1590,  452,  456,  457,  457,  457,  457,  457,
      457,  457,  457,  459,  459,  459,  459,  459,  459,  459,
      460, 1592,  460, 1592,  460,  460,  460,  460,  460,  460,
      460, 1252,  456,  461,  461,  461,  461,  461,  461,  461,
      462, 1612,  462, 1612,  462,  462,  462,  462,  462,  462,

      462,  463,  463,  463,  463,  463,  463,  463,  464, 1252,
      464,    0,  464,  464,  464,  464,  464,  464,  464,  465,
      465,  465,  465,  465,  465,  465,  466, 1613,  466, 1613,
      466,  466,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  467,  467,  468,  468,  468,  468,  468,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  470,  470,
      470,  470,  470,  470,  470,  471,  471,  471,  471,  471,
      471,  471,  472,  472,  472,  472,  472,  472,  472,  473,
      473,  473,  473,  473,  473,  473,  474,  474,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  475,  475,  475,

      481,  481,  481,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      485,  485,  485,  485,  485,  485, 1255, 1256, 1257, 1258,
     1256,  485,  486,  486,  486,  486,  486,  486,  486,  486,
      487,  487,  487,  487,  487,  487,  487,  488,  488,  488,
      488,  488,  488,  488, 1255, 1256, 1257, 1258, 1256,  485,
      489,  489,  489,  489,  489,  489,  489,  492,  492,  492,
      492,  492,  492,  492,  493,  493,  493,  493,  493,  493,
      493,  496,  496,  496,  496,  496,  496,  496,  504,  504,

      504,  504,  504,  504,  504,  505,  505,  505,  505,  505,
      505,  505,  505,  506,  506,  506,  506,  506,  506,  506,
     1261, 1262, 1621,    0, 1621,  506,  507,  507,  507,  507,
      507,  507,  507,  507,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509, 1261, 1262,
      510,  510,  510,  506,  510,  510,  510,  510,  510,  510,
      510,  511,  511,  511,  511,  511,  511,  511,  512, 1625,
      512, 1625,  512,  512,  512,  512,  512,  512,  512,  513,
      513,  513,  513,  513,  513,  513,  514, 1626,  514, 1626,
      514,  514,  514,  514,  514,  514,  514,  515,  515,  515,

      515,  515,  515,  515,  516, 1627,  516, 1627,  516,  516,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      517,  517,  518, 1631,  518, 1631,  518,  518,  518,  518,
      518,  518,  518,  519,  519,  519,  519,  519,  519,  519,
      520, 1633,  520, 1633,  520,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  521,  522, 1634,
      522, 1634,  522,  522,  522,  522,  522,  522,  522,  523,
      523,  523,  523,  523,  523,  523,  524,  524,  524,    0,
      524,  524,  524,  524,  524,  524,  524,  525,  525,  525,
      525,  525,  525,  525,  526, 1635,  526, 1635,  526,  526,

      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  528, 1643,  528, 1643,  528,  528,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
      530, 1655,  530, 1655,  530,  530,  530,  530,  530,  530,
      530,  535,  535,  535,  535,  535,  535,  535,  540,  540,
      540,  540,  540,  540,  540,  541,  541,  541,  541,  541,
      541,  541,  544,  544,  544,  544,  544,  544,  544,  545,
      545,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  546,  546,  616,  616,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  617,  617,  618,  618,  618,

      618,  618,  618,  618,  619,  619,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      622,  622,  623,  623,  623,  623,  623,  623,  623, 1263,
     1264, 1657, 1254, 1657,  623,  624,  624,  624,  624,  624,
      624,  624,  624,  625,  625,  625,  625,  625,  625,  625,
     1266, 1254, 1270, 1274, 1680,  625, 1680, 1263, 1264,  626,
     1254,  626,  623,  626,  626,  626,  626,  626,  626,  626,
      627,  627,  627,  627,  627,  627,  627, 1276, 1266,    0,
     1270, 1274,  627,  625,  628,  628,  628,  628,  628,  628,

      628,  628,  629,  629,  629,  629,  629,  629,  629, 1277,
     1279, 1280,    0, 1281,  629, 1276, 1694,  630, 1694,  630,
      627,  630,  630,  630,  630,  630,  630,  630,  631,  631,
      631,  631,  631,  631,  631,    0, 1283, 1277, 1279, 1280,
      631, 1281,  629,  632,  632,  632,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  633,  633, 1285, 1286,
        0, 1287, 1288,  633, 1283,  634,    0,  634,  631,  634,
      634,  634,  634,  634,  634,  634,  635,  635,  635,  635,
      635,  635,  635, 1289,    0,    0, 1285, 1286,  635, 1287,
     1288,  633,  636,  636,  636,  636,  636,  636,  636,  636,

      637,  637,  637,  637,  637,  637,  637, 1290,    0, 1297,
     1299, 1289,  637,  638,    0,  638,  635,  638,  638,  638,
      638,  638,  638,  638,  639,  639,  639,  639,  639,  639,
      639, 1300, 1301,    0, 1302, 1290,  639, 1297, 1299,    0,
      637,  640,  640,  640,  640,  640,  640,  640,  640,  641,
      641,  641,  641,  641,  641,  641, 1303, 1304,    0, 1300,
     1301,  641, 1302,  642,  639,  642,    0,  642,  642,  642,
      642,  642,  642,  642,  643,  643,  643,  643,  643,  643,
      643, 1305,    0,    0, 1303, 1304,  643,    0,    0,  641,
      644,  644,  644,  644,  644,  644,  644,  644,  645,  645,

      645,  645,  645,  645,  645, 1306,    0, 1308, 1311, 1305,
      645,  646,    0,  646,  643,  646,  646,  646,  646,  646,
      646,  646,  647,  647,  647,  647,  647,  647,  647, 1313,
     1314,    0, 1315, 1306,  647, 1308, 1311,    0,  645,  648,
      648,  648,  648,  648,  648,  648,  648,  649,  649,  649,
      649,  649,  649,  649, 1317, 1318,    0, 1313, 1314,  649,
     1315,  650,  647,  650,    0,  650,  650,  650,  650,  650,
      650,  650,  651,  651,  651,  651,  651,  651,  651, 1319,
        0,    0, 1317, 1318,  651,    0,    0,  649,  652,  652,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,

      653,  653,  653, 1320,    0, 1323, 1324, 1319,  653,  654,
        0,  654,  651,  654,  654,  654,  654,  654,  654,  654,
      655,  655,  655,  655,  655,  655,  655, 1326, 1327,    0,
     1328, 1320,  655, 1323, 1324,    0,  653,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657, 1716,    0, 1716, 1326, 1327,  657, 1328,  658,
      655,  658,    0,  658,  658,  658,  658,  658,  658,  658,
      659,  659,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  660,  660,    0,  657,  661,  661,  661,  661,
      661,  661,  661,  662,  662,  662,  662,  662,  662,  662,

      663,  663,  663,  663,  663,  663,  663,  664, 1718,  664,
     1718,  664,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  667,  667,  667,  667,  667,  667,  667, 1330,
     1331, 1723, 1333, 1723,  667,  668,  668,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
     1334, 1336, 1337, 1338, 1726,  669, 1726, 1330, 1331,  670,
     1333,  670,  667,  670,  670,  670,  670,  670,  670,  670,
      671,  671,  671,  671,  671,  671,  671, 1343, 1334, 1336,
     1337, 1338,  671,  669,  672,  672,  672,  672,  672,  672,

      672,  672,  673,  673,  673,  673,  673,  673,  673, 1345,
     1346, 1351,    0, 1352,  673, 1343, 1732,  674, 1732,  674,
      671,  674,  674,  674,  674,  674,  674,  674,  675,  675,
      675,  675,  675,  675,  675,    0, 1353, 1345, 1346, 1351,
      675, 1352,  673,  676,  676,  676,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  677,  677, 1361, 1365,
        0, 1366, 1367,  677, 1353,  678,    0,  678,  675,  678,
      678,  678,  678,  678,  678,  678,  679,  679,  679,  679,
      679,  679,  679, 1368,    0,    0, 1361, 1365,  679, 1366,
     1367,  677,  680,  680,  680,  680,  680,  680,  680,  680,

      681,  681,  681,  681,  681,  681,  681, 1734,    0, 1734,
     1369, 1368,  681,  682,    0,  682,  679,  682,  682,  682,
      682,  682,  682,  682,  691,  691,  691,  691,  691,  691,
      691,  692,  692,  692,  692,  692,  692,  692, 1369,    0,
      681,  693,  693,  693,  693,  693,  693,  693,  694,  694,
      694,  694,  694,  694,  694,  697,  697,  697,  697,  697,
      697,  697, 1370, 1372, 1738, 1373, 1738,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  699,  699,  699,  699,
      699,  699,  699, 1374, 1375, 1376, 1377, 1378,  699,    0,
     1370, 1372,  700, 1373,  700,  697,  700,  700,  700,  700,

      700,  700,  700,  701,  701,  701,  701,  701,  701,  701,
        0, 1374, 1375, 1376, 1377, 1378,  699,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  707,  708,
      708,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  709,  709,  710,  710,  710,  710,  710,  710,  710,
     1379, 1380, 1756, 1386, 1756,  710,  711,  711,  711,  711,
      711,  711,  711,  711,  712,  712,  712,  712,  712,  712,

      712, 1387, 1390, 1395, 1397, 1766,  712, 1766, 1379, 1380,
      713, 1386,  713,  710,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714, 1398, 1387,
     1390, 1395, 1397,  714,  712,  715,  715,  715,  715,  715,
      715,  715,  715,  716,  716,  716,  716,  716,  716,  716,
     1399, 1400, 1401,    0, 1402,  716, 1398, 1770,  717, 1770,
      717,  714,  717,  717,  717,  717,  717,  717,  717,  718,
      718,  718,  718,  718,  718,  718,    0, 1403, 1399, 1400,
     1401,  718, 1402,  716,  719,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720, 1404,

     1407,    0, 1408, 1411,  720, 1403,  721,    0,  721,  718,
      721,  721,  721,  721,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  722, 1412,    0,    0, 1404, 1407,  722,
     1408, 1411,  720,  723,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  724,  724,  724,  724,  724, 1776,    0,
     1776, 1413, 1412,  724,  725,    0,  725,  722,  725,  725,
      725,  725,  725,  725,  725,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  727, 1413,
        0,  724,  728,  728,  728,  728,  728,  728,  728, 1415,
     1417, 1786, 1418, 1786,  728,  729,  729,  729,  729,  729,

      729,  729,  729,  730,  730,  730,  730,  730,  730,  730,
     1419, 1420, 1423, 1424, 1791,  730, 1791, 1415, 1417,  731,
     1418,  731,  728,  731,  731,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  732,  732, 1425, 1419, 1420,
     1423, 1424,  732,  730,  733,  733,  733,  733,  733,  733,
      733,  733,  734,  734,  734,  734,  734,  734,  734, 1437,
     1438, 1439,    0, 1449,  734, 1425, 1793,  735, 1793,  735,
      732,  735,  735,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  736,  736,    0, 1452, 1437, 1438, 1439,
      736, 1449,  734,  737,  737,  737,  737,  737,  737,  737,

      737,  738,  738,  738,  738,  738,  738,  738, 1461, 1465,
        0, 1466, 1467,  738, 1452,  739,    0,  739,  736,  739,
      739,  739,  739,  739,  739,  739,  740,  740,  740,  740,
      740,  740,  740, 1468,    0,    0, 1461, 1465,  740, 1466,
     1467,  738,  741,  741,  741,  741,  741,  741,  741,  741,
      742,  742,  742,  742,  742,  742,  742, 1469, 1799, 1471,
     1799, 1468,  742,  743,    0,  743,  740,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744, 1414, 1472,    0, 1473, 1469,  744, 1471, 1414,    0,
      742,  745,  745,  745,  745,  745,  745,  745,  745,  746,

      746,  746,  746,  746,  746,  746, 1474, 1475,    0, 1414,
     1472,  746, 1473,  747,  744,  747, 1414,  747,  747,  747,
      747,  747,  747,  747,  748,  748,  748,  748,  748,  748,
      748, 1476,    0,    0, 1474, 1475,  748,    0,    0,  746,
      749,  749,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750, 1477,    0, 1478, 1479, 1476,
      750,  751,    0,  751,  748,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752, 1480,
     1484,    0, 1485, 1477,  752, 1478, 1479,    0,  750,  753,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,

      754,  754,  754,  754, 1486, 1487,    0, 1480, 1484,  754,
     1485,  755,  752,  755,    0,  755,  755,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  756,  756,  756, 1496,
        0,    0, 1486, 1487,  756,    0,    0,  754,  757,  757,
      757,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  758,  758, 1499,    0, 1500, 1501, 1496,  758,  759,
        0,  759,  756,  759,  759,  759,  759,  759,  759,  759,
      760,  760,  760,  760,  760,  760,  760, 1502, 1504,    0,
     1505, 1499,  760, 1500, 1501,    0,  758,  761,  761,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,

      762,  762, 1506, 1507,    0, 1502, 1504,  762, 1505,  763,
      760,  763,    0,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764, 1508,    0,    0,
     1506, 1507,  764,    0,    0,  762,  765,  765,  765,  765,
      765,  765,  765,  765,  766,  766,  766,  766,  766,  766,
      766, 1800,    0, 1800, 1509, 1508,  766,  767,    0,  767,
      764,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
      769,  769, 1509,    0,  766,  770,  770,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  771,  771,  772,

      772,  772,  772,  772,  772,  772, 1511, 1512, 1801, 1513,
     1801,  772,  773,  773,  773,  773,  773,  773,  773,  773,
      774,  774,  774,  774,  774,  774,  774, 1514, 1515, 1516,
     1520, 1804,  774, 1804, 1511, 1512,  775, 1513,  775,  772,
      775,  775,  775,  775,  775,  775,  775,  777,  777,  777,
      777,  777,  777,  777, 1521, 1514, 1515, 1516, 1520,  777,
      774,  778,  778,  778,  778,  778,  778,  778,  778,  779,
      779,  779,  779,  779,  779,  779, 1522, 1523, 1807, 1524,
     1807,  779, 1521, 1822,  780, 1822,  780,  777,  780,  780,
      780,  780,  780,  780,  780,  781,  781,  781,  781,  781,

      781,  781,    0,    0, 1522, 1523,  782, 1524,  782,  779,
      782,  782,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  783,  783,  783,  784, 1826,  784, 1826,  784,  784,
      784,  784,  784,  784,  784,  785,  785,  785,  785,  785,
      785,  785,  786, 1830,  786, 1830,  786,  786,  786,  786,
      786,  786,  786,  787,  787,  787,  787,  787,  787,  787,
      788, 1833,  788, 1833,  788,  788,  788,  788,  788,  788,
      788,  789,  789,  789,  789,  789,  789,  789,  790,  790,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  792,  792,  793,

      793,  793,  793,  793,  793,  793,  794,  794,  794,  794,
      794,  794,  794,  795,  795,  795,  795,  795,  795,  795,
      796,  796,  796,  796,  796,  796,  796,  797,  797,  797,
      797,  797,  797,  797,  798,  798,  798,  798,  798,  798,
      798,  804,  804,  804,  804,  804,  804,  804,  805,  805,
      805,  805,  805,  805,  805,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807, 1525,
     1526, 1836, 1529, 1836,  807,  808,  808,  808,  808,  808,
      808,  808,  808,  809,  809,  809,  809,  809,  809,  809,
     1530, 1531, 1542, 1543, 1544,  809,    0, 1525, 1526,  810,

     1529,  810,  807,  810,  810,  810,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  811,  811,    0, 1530, 1531,
     1542, 1543, 1544,  809,  812,  812,  812,  812,  812,  812,
      812,  813,  813,  813,  813,  813,  813,  813,  816,  816,
      816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      817,  817,  820,  820,  820,  820,  820,  820,  820,  828,
      828,  828,  828,  828,  828,  828,  829,  829,  829,  829,
      829,  829,  829, 1556, 1561, 1838, 1563, 1838,  829,  830,
      830,  830,  830,  830,  830,  830,  830,  831,  831,  831,
      831,  831,  831,  831, 1566, 1567, 1841,    0, 1841,  831,

        0, 1556, 1561,  832, 1563,  832,  829,  832,  832,  832,
      832,  832,  832,  832,  833,  833,  833,  833,  833,  833,
      833,    0, 1566, 1567,  834,  834,  834,  831,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  835,
      835,  835,  836, 1843,  836, 1843,  836,  836,  836,  836,
      836,  836,  836,  837, 1845,  837, 1845,  837,  837,  837,
      837,  837,  837,  837,  838,  838,  838,  838,  838,  838,
      838,  839, 1846,  839, 1846,  839,  839,  839,  839,  839,
      839,  839,  840,  840,  840,  840,  840,  840,  840,  841,
     1857,  841, 1857,  841,  841,  841,  841,  841,  841,  841,

      842,  842,  842,  842,  842,  842,  842,  843, 1866,  843,
     1866,  843,  843,  843,  843,  843,  843,  843,  844,  844,
      844,  844,  844,  844,  844,  845, 1870,  845, 1870,  845,
      845,  845,  845,  845,  845,  845,  846,  846,  846,  846,
      846,  846,  846,  847, 1877,  847, 1877,  847,  847,  847,
      847,  847,  847,  847,  848,  848,  848,  848,  848,  848,
      848,  849,  849,  849,    0,  849,  849,  849,  849,  849,
      849,  849,  850,  850,  850,  850,  850,  850,  850,  851,
     1881,  851, 1881,  851,  851,  851,  851,  851,  851,  851,
      852, 1889,  852, 1889,  852,  852,  852,  852,  852,  852,

      852,  853,  853,  853,  853,  853,  853,  853,  854, 1892,
      854, 1892,  854,  854,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  855,  855,  856, 1897,  856, 1897,
      856,  856,  856,  856,  856,  856,  856,  857,  857,  857,
      857,  857,  857,  857,  862,  862,  862,  862,  862,  862,
      862,  867,  867,  867,  867,  867,  867,  867,  868,  868,
      868,  868,  868,  868,  868,  871,  871,  871,  871,  871,
      871,  871,  872,  872,  872,  872,  872,  872,  872,  873,
      873,  873,  873,  873,  873,  873,  958,  958,  958,  958,
      958,  958,  958,  959,  959,  959,  959,  959,  959,  959,

      960,  960,  960,  960,  960,  960,  960,  961,  961,  961,
      961,  961,  961,  961,  962,  962,  962,  962,  962,  962,
      962,  963,  963,  963,  963,  963,  963,  963,  964,  964,
      964,  964,  964,  964,  964,  965,  965,  965,  965,  965,
      965,  965,  966,  966,  966,  966,  966,  966,  966,  967,
      967,  967,  967,  967,  967,  967,  968,  968,  968,  968,
      968,  968,  968,  969,  969,  969,  969,  969,  969,  969,
      970,  970,  970,  970,  970,  970,  970,  971,  971,  971,
      971,  971,  971,  971,  972,  972,  972,  972,  972,  972,
      972,  973,  973,  973,  973,  973,  973,  973,  974,  974,

      974,  974,  974,  974,  974,  975,  975,  975,  975,  975,
      975,  975,  976,  976,  976,  976,  976,  976,  976,  977,
      977,  977,  977,  977,  977,  977,  978,  978,  978,  978,
      978,  978,  978,  979,  979,  979,  979,  979,  979,  979,
      980,  980,  980,  980,  980,  980,  980,  981,  981,  981,
      981,  981,  981,  981,  982,  982,  982,  982,  982,  982,
      982,  983,  983,  983,  983,  983,  983,  983,  984,  984,
      984,  984,  984,  984,  984,  985,  985,  985,  985,  985,
      985,  985,  986,  986,  986,  986,  986,  986,  986,  987,
      987,  987,  987,  987,  987,  987,  988,  988,  988,  988,

      988,  988,  988,  989,  989,  989,  989,  989,  989,  989,
      990,  990,  990,  990,  990,  990,  990,  991,  991,  991,
      991,  991,  991,  991,  992,  992,  992,  992,  992,  992,
      992,  993,  993,  993,  993,  993,  993,  993,  994,  994,
      994,  994,  994,  994,  994,  995,  995,  995,  995,  995,
      995,  995,  996,  996,  996,  996,  996,  996,  996,  997,
      997,  997,  997,  997,  997,  997,  998,  998,  998,  998,
      998,  998,  998,  999,  999,  999,  999,  999,  999,  999,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002, 1002,

     1002, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017,

     1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1023, 1023, 1023,    0, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1025,
     1025, 1025,    0, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1098, 1899, 1098, 1899, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1099, 1900, 1099, 1900, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175,

     1570, 1175,    0, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177, 1205, 1177,
     1240, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1570, 1205,
     1240, 1205, 1205, 1205, 1260, 1267, 1284, 1265, 1260, 1260,
     1260, 1265, 1265, 1265, 1267, 1901, 1205, 1901, 1240, 1284,
     1911, 1916, 1911, 1916, 1924,    0, 1924, 1205, 1240, 1205,
     1205, 1205, 1260, 1267, 1284, 1265, 1260, 1260, 1260, 1265,
     1265, 1265, 1267, 1275, 1332, 1275, 1332, 1284, 1335, 1332,
     1332, 1416, 1421, 1416, 1275,    0,    0, 1332, 1335, 1275,
        0,    0, 1416, 1427, 1932, 1427, 1932, 1416, 1421, 1935,

        0, 1935, 1332, 1428, 1332, 1428, 1335, 1332, 1332, 1427,
     1421, 1429, 1431, 1429, 1431, 1332, 1335, 1275, 1433, 1428,
     1433, 1435, 1440, 1435, 1440, 1416, 1421, 1429, 1431, 1441,
     1443, 1441, 1443, 1445, 1433, 1445,    0, 1435, 1440, 1447,
     1450, 1447, 1450,    0,    0, 1441, 1443, 1571, 1451, 1445,
     1451, 1453, 1455, 1453, 1455, 1447, 1450, 1457, 1459, 1457,
     1459, 1462,    0, 1462, 1451, 1572, 1573, 1453, 1455, 1470,
     1483, 1470, 1483, 1457, 1459, 1571, 1488, 1462, 1488, 1490,
     1492, 1490, 1492, 1503,    0, 1470, 1483, 1494, 1497, 1494,
     1497, 1503, 1488, 1572, 1573, 1490, 1492,    0, 1517, 1518,

     1517, 1518,    0, 1494, 1497, 1527, 1532, 1527, 1532, 1575,
     1534, 1503, 1534, 1470, 1517, 1518, 1536, 1576, 1536, 1503,
     1579, 1527, 1532, 1545, 1580, 1545, 1534, 1551, 1552, 1551,
     1552, 1554, 1536, 1554, 1568, 1584, 1568, 1575, 1581, 1545,
     1581, 1585, 1591, 1551, 1552, 1576, 1593, 1554, 1579, 1583,
     1568, 1583, 1580, 1594, 1581, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1603, 1584, 1604, 1583, 1607, 1608, 1609, 1585,
     1591, 1610, 1614, 1615, 1593, 1611, 1616, 1611, 1617, 1618,
     1619, 1594, 1620, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1611, 1604, 1622, 1607, 1608, 1609, 1623, 1624, 1610,

     1614, 1615, 1628, 1629, 1616, 1630, 1617, 1618, 1619, 1636,
     1620, 1632, 1637, 1632, 1638, 1639, 1640, 1641, 1642, 1645,
     1644, 1622, 1646, 1647, 1649, 1623, 1624, 1632, 1644, 1648,
     1628, 1629, 1648, 1630, 1650, 1651, 1652, 1636, 1651, 1652,
     1637,    0, 1638, 1639, 1640, 1641, 1642, 1645, 1644, 1654,
     1646, 1647, 1649, 1653, 1658, 1653, 1644, 1648, 1659, 1656,
     1648, 1656, 1650, 1651, 1652, 1660, 1651, 1652, 1661, 1653,
     1661, 1662, 1663, 1664, 1663, 1656, 1665, 1654, 1664, 1666,
     1668, 1666, 1658, 1669, 1661, 1671, 1659, 1664, 1663, 1667,
     1672, 1667, 1675, 1660, 1670, 1666, 1670, 1676, 1677, 1662,

     1678, 1664, 1679, 1674, 1665, 1667, 1664, 1681, 1668, 1682,
     1670, 1669, 1683, 1671, 1684, 1664, 1674, 1685, 1672, 1686,
     1675, 1688, 1687, 1689, 1687, 1676, 1677, 1690, 1678, 1691,
     1679, 1674, 1692, 1693, 1695, 1681, 1696, 1682, 1687, 1698,
     1683, 1699, 1684, 1701, 1674, 1685, 1702, 1686, 1703, 1688,
     1697, 1689, 1697, 1704, 1700, 1690, 1700, 1691, 1706, 1707,
     1692, 1693, 1695, 1705, 1696, 1705, 1697, 1698, 1708, 1699,
     1700, 1701, 1709, 1710, 1702, 1711, 1703, 1712, 1713, 1705,
     1714, 1704, 1715, 1717, 1715, 1719, 1706, 1707, 1720, 1721,
     1724, 1722, 1727, 1722, 1728, 1938, 1708, 1938, 1715, 1729,

     1709, 1710, 1729, 1711, 1735, 1712, 1713, 1722, 1714, 1736,
     1725, 1717, 1725, 1719, 1739, 1741, 1720, 1721, 1724, 1730,
     1727, 1730, 1728, 1731, 1742, 1731, 1725, 1729, 1743, 1733,
     1729, 1733, 1735, 1744, 1737, 1730, 1737, 1736, 1740, 1731,
     1740, 1745, 1739, 1741, 1746, 1733, 1747, 1748, 1749, 1751,
     1737, 1752, 1742, 1753, 1740, 1754, 1743, 1755, 1757, 1755,
     1758, 1744, 1759, 1760, 1759, 1761, 1762, 1763, 1762, 1745,
     1767, 1768, 1746, 1755, 1747, 1748, 1749, 1751, 1759, 1752,
     1777, 1753, 1762, 1754, 1778, 1765, 1757, 1765, 1758, 1779,
     1769, 1760, 1769, 1761, 1771, 1763, 1771, 1780, 1767, 1768,

     1772, 1765, 1772, 1773, 1781, 1773, 1769, 1774, 1777, 1774,
     1771, 1775, 1778, 1775, 1782, 1783, 1772, 1779, 1784, 1773,
     1785, 1788, 1789, 1774, 1787, 1780, 1787, 1775, 1790, 1792,
     1795, 1796, 1781, 1797, 1802, 1798, 1803, 1798, 1771, 1805,
     1787, 1808, 1782, 1783, 1809, 1810, 1784, 1811, 1785, 1788,
     1789, 1798, 1806, 1814, 1806, 1815, 1790, 1792, 1795, 1796,
     1817, 1797, 1802, 1813, 1803, 1813, 1818, 1805, 1806, 1808,
     1819, 1820, 1809, 1810, 1816, 1811, 1816, 1821, 1823, 1813,
     1824, 1814, 1827, 1815, 1825, 1828, 1825, 1829, 1817, 1829,
     1816, 1831, 1832, 1834, 1818, 1835, 1839,    0, 1819, 1820,

     1825, 1847, 1837, 1829, 1837, 1821, 1823, 1848, 1824, 1840,
     1827, 1840, 1842, 1828, 1842, 1844, 1850, 1844, 1837, 1831,
     1832, 1834, 1851, 1835, 1839, 1840, 1852, 1854, 1842, 1847,
     1856, 1844, 1856, 1858, 1859, 1848, 1860, 1861, 1862, 1861,
     1863, 1864, 1865, 1867, 1850, 1868, 1856, 1869, 1871, 1869,
     1851, 1872, 1873, 1861, 1852, 1854, 1874, 1875, 1875, 1875,
     1878, 1858, 1859, 1869, 1860, 1876, 1862, 1876, 1863, 1864,
     1865, 1867, 1879, 1868, 1882, 1880, 1871, 1880,    0, 1872,
     1873, 1876, 1884, 1885, 1874, 1875, 1875, 1875, 1878, 1886,
     1883, 1880, 1883, 1887, 1888, 1894, 1890, 1891, 1890, 1891,

     1879, 1895, 1882, 1893, 1896, 1893, 1883, 1898, 1902, 1904,
     1884, 1885, 1890, 1891, 1893, 1893, 1905, 1886, 1906, 1893,
     1908, 1887, 1888, 1894, 1910, 1914, 1912, 1917, 1912, 1895,
     1918, 1913, 1896, 1913, 1919, 1898, 1902, 1904, 1915, 1920,
     1915, 1891, 1912, 1921, 1905, 1921, 1906, 1913, 1908, 1923,
     1925, 1923, 1910, 1914, 1915, 1917, 1926, 1927, 1918, 1921,
     1928, 1929, 1919, 1929, 1930, 1923, 1930, 1920, 1934, 1941,
     1931, 1933, 1931, 1933, 1936, 1942, 1936, 1929, 1925, 1937,
     1930, 1937, 1943,    0, 1926, 1927, 1931, 1933, 1928, 1939,
     1936, 1939, 1940,    0, 1940, 1937, 1934, 1941, 1944, 1945,

     1944, 1945, 1946, 1942, 1946, 1939, 1953, 1947, 1940, 1947,
     1943, 1948, 1954, 1948, 1944, 1949, 1955, 1949, 1946, 1950,
     1956, 1950, 1951, 1952, 1951, 1952, 1957, 1958, 1959, 1960,
     1961, 1949, 1962, 1963, 1953, 1950, 1940, 1964, 1951, 1948,
     1954, 1948, 1965, 1966, 1955, 1966, 1970, 1967, 1956, 1967,
     1968, 1969, 1968, 1969, 1957, 1958, 1959, 1960, 1961, 1966,
     1962, 1963, 1971, 1972, 1971, 1964, 1968, 1974, 1975, 1976,
     1965, 1976, 1978, 1977, 1970, 1977, 1979, 1980, 1979, 1981,
     1982, 1983, 1984, 2006, 1984, 1976, 1985, 1986, 1985, 1986,
     1987, 1972, 1987,    0,    0, 1974, 1975, 1988, 1984, 1988,

     1978,    0, 1989, 1986, 1989, 1980,    0, 1981, 1982, 1983,
     1990, 2006, 1990, 1988, 1991, 1992, 1991, 1992, 1993, 1994,
     1993, 1994, 1995, 1996, 1995, 1996, 1990, 1997, 1998, 1997,
     1998, 1992, 2007, 1999, 1993, 1999, 2000, 2000, 2000, 1996,
     2001, 2002, 2001, 2002, 1998, 2004, 2005, 2004, 2005, 2013,
     2009, 2008, 2009, 2008, 2016, 2018, 2001, 2002, 2019, 2010,
     2007, 2010, 2020, 2021, 2000, 2000, 2000, 2008, 2011, 2012,
     2011, 2012, 2014, 2022, 2014, 2010, 2015, 2013, 2015, 2023,
     2024, 2025, 2016, 2018, 2029, 2026, 2019, 2026, 2014, 2030,
     2020, 2021, 2015, 2027, 2028, 2027, 2028, 2031, 2032, 2034,

     2033, 2022, 2033, 2035, 2036, 2035, 2038, 2023, 2024, 2025,
     2028, 2039, 2029, 2039, 2040,    0, 2040, 2030, 2041, 2035,
     2041, 2042, 2043, 2042, 2043, 2031, 2032, 2034, 2044, 2045,
     2044, 2045, 2036, 2046, 2038, 2046, 2056, 2047, 2043, 2047,
     2048, 2049, 2048, 2049, 2050, 2051, 2050, 2051, 2052, 2053,
     2052, 2053, 2054, 2057, 2054, 2055, 2048, 2049, 2055, 2060,
     2050, 2051, 2065,    0, 2056, 2053, 2058, 2059, 2058, 2059,
     2067, 2062, 2061, 2062, 2061, 2063, 2064, 2063, 2064, 2068,
     2071, 2057, 2072, 2055, 2066, 2073, 2055, 2060, 2061, 2074,
     2065, 2063, 2066, 2075, 2066, 2075, 2078, 2076, 2067, 2076,

     2077, 2079, 2077, 2080, 2081, 2084,    0, 2068, 2071, 2075,
     2072,    0, 2066, 2073, 2086,    0, 2077, 2074,    0, 2082,
     2066, 2082, 2066, 2083, 2078, 2083, 2087,    0, 2087, 2079,
     2096, 2080, 2081, 2084, 2085, 2082, 2088,    0, 2088, 2085,
     2097, 2089, 2086, 2089, 2090, 2098, 2090, 2085, 2091, 2092,
     2091, 2092, 2088, 2093, 2094, 2093, 2094, 2095, 2096, 2095,
     2090, 2099, 2085, 2100, 2101, 2092, 2101, 2085, 2097, 2102,
     2103, 2102, 2104, 2098, 2105, 2085, 2106, 2107, 2108, 2110,
     2109, 2111, 2112, 2113, 2114, 2115, 2117, 2115, 2117, 2099,
     2109, 2100, 2118, 2120, 2121, 2124, 2125, 2116, 2103, 2116,

     2104, 2119, 2105, 2119, 2106, 2107, 2108, 2110, 2109, 2111,
     2112, 2113, 2114, 2116, 2122, 2126, 2122, 2119, 2109, 2131,
     2118, 2120, 2121, 2124, 2125, 2127, 2128, 2127, 2128, 2129,
     2130, 2129, 2130, 2132, 2133, 2134, 2133, 2135, 2136, 2135,
     2136, 2127, 2137, 2126, 2138, 2139, 2140, 2131, 2140, 2141,
     2133, 2142, 2143, 2135, 2136, 2144, 2146, 2148, 2145, 2150,
     2145, 2132, 2140, 2134, 2149, 2147, 2149, 2147, 2154, 2127,
     2137, 2155, 2138, 2139, 2145, 2156, 2151, 2141, 2151, 2142,
     2143, 2147, 2157, 2144, 2146, 2148, 2152, 2150, 2152, 2153,
     2158, 2153, 2151, 2159, 2162, 2159, 2154, 2163, 2160, 2155,

     2160, 2171, 2165, 2156, 2165, 2153, 2161, 2161, 2161, 2159,
     2157, 2164, 2166, 2164, 2166, 2167, 2172, 2167, 2158, 2168,
     2173, 2168, 2162, 2177, 2169, 2163, 2169, 2164, 2166, 2171,
     2170, 2167, 2170,    0, 2161, 2161, 2161, 2174, 2178, 2174,
     2169, 2175, 2179, 2175, 2172, 2176, 2186, 2176, 2173,    0,
        0, 2177, 2180, 2174, 2180, 2181, 2182, 2181, 2182, 2190,
     2183, 2176, 2183, 2184, 2191, 2184, 2178, 2185, 2180, 2185,
     2179, 2187, 2182, 2187, 2186, 2188, 2183, 2188, 2189, 2192,
     2189, 2193, 2194, 2185, 2195, 2199, 2195, 2190, 2196, 2200,
     2196, 2188, 2191, 2207,    0, 2197, 2198, 2197, 2198, 2201,

     2202, 2201, 2202, 2203, 2196, 2203, 2204, 2192, 2204, 2193,
     2194, 2197, 2198, 2199, 2212, 2213, 2202, 2200, 2205, 2214,
     2205, 2207, 2209, 2210, 2209, 2210, 2211, 2215, 2211, 2215,
     2216, 2217, 2216, 2217, 2218, 2219, 2218, 2219, 2220, 2210,
     2220, 2223, 2212, 2213, 2224, 2225, 2216, 2214, 2221, 2226,
     2221, 2219, 2222, 2227, 2222, 2228, 2229, 2228, 2229, 2230,
     2231, 2230, 2231, 2232, 2221, 2232, 2233, 2234, 2233, 2223,
     2235, 2228, 2224, 2225, 2236, 2230, 2236, 2226, 2237, 2232,
     2238, 2227, 2239, 2240, 2243, 2240, 2244, 2245, 2244, 2245,
     2247, 2246, 2247, 2246, 2248, 2234, 2249, 2251, 2235, 2252,

     2253, 2254, 2253, 2254, 2256, 2258, 2237, 2246, 2238, 2255,
     2239, 2255, 2243, 2257, 2259, 2257, 2259, 2260, 2261, 2262,
     2263, 2264, 2248, 2264, 2249, 2251, 2265, 2252, 2266, 2257,
     2259, 2267, 2256, 2258, 2268, 2269, 2270, 2271, 2272, 2271,
     2272, 2273, 2274, 2276, 2274, 2260, 2261, 2262, 2263, 2275,
     2277, 2275, 2278, 2271, 2265, 2280, 2266, 2281, 2274, 2267,
     2282, 2283, 2268, 2269, 2270, 2279, 2284, 2279, 2285, 2273,
     2286, 2276, 2286, 2287, 2288, 2289, 2288, 2290, 2277, 2291,
     2278, 2279, 2292, 2280, 2292, 2281, 2298, 2299, 2282, 2283,
     2293, 2300, 2293, 2294, 2284, 2294, 2285, 2295, 2292, 2295,

     2296, 2287, 2296, 2289, 2301, 2290, 2302, 2291, 2295, 2294,
     2303, 2315, 2316, 2295, 2298, 2299, 2296,    0, 2304, 2300,
     2304, 2305, 2306, 2305, 2306, 2307, 2308, 2307, 2308, 2309,
     2317, 2309, 2301, 2310, 2302, 2310, 2318, 2305, 2303, 2315,
     2316, 2307, 2308, 2311, 2333, 2311, 2312, 2312, 2312, 2310,
     2313, 2314, 2313, 2314, 2319, 2320, 2319, 2320, 2317, 2321,
     2322, 2321, 2322, 2323, 2318, 2323, 2313, 2314, 2324,    0,
     2324, 2320, 2333, 2334, 2312, 2312, 2312, 2325, 2326, 2325,
     2326, 2327,    0, 2327, 2324, 2328, 2329, 2328, 2329, 2330,
     2331, 2330, 2331, 2325, 2326,    0, 2332, 2327, 2332,    0,

        0, 2334, 2329, 2335,    0, 2335, 2331, 2336, 2337, 2336,
     2337, 2338, 2332, 2338, 2339, 2340, 2339, 2340, 2341, 2342,
     2341, 2342, 2343, 2336, 2343,    0, 2344, 2338, 2344,    0,
     2345, 2340, 2345, 2346, 2347, 2346, 2347, 2348, 2349, 2348,
     2349, 2350, 2344, 2350, 2351, 2352, 2351, 2352, 2353, 2346,
     2353,    0,    0, 2348, 2349, 2354, 2355, 2354, 2355, 2356,
     2357, 2356, 2357, 2358, 2359, 2358, 2359, 2360,    0, 2360,
        0,    0, 2355,    0,    0,    0, 2357, 2362, 2362, 2362,
     2362, 2362, 2363, 2363, 2363, 2363, 2363, 2364, 2364, 2364,
     2364, 2364, 2365, 2365, 2365, 2365, 2365, 2366, 2366, 2366,

     2366, 2366, 2367, 2367, 2367, 2367, 2367, 2368, 2368, 2368,
     2368, 2368, 2369, 2369, 2369, 2369, 2369, 2370, 2370, 2370,
     2370, 2370, 2371, 2371, 2371, 2371, 2371, 2372, 2372, 2372,
     2372, 2372, 2373, 2373, 2373, 2373, 2373, 2374, 2374, 2374,
     2374, 2374, 2375, 2375, 2375, 2375, 2375, 2376, 2376, 2376,
     2376, 2376, 2377, 2377, 2377, 2377, 2377, 2378, 2378, 2378,
     2378, 2378, 2379, 2379, 2379, 2379, 2379, 2380, 2380, 2380,
     2380, 2380, 2381, 2381, 2381, 2381, 2381, 2382, 2382, 2382,
     2382, 2382, 2383, 2383, 2383, 2383, 2383, 2384, 2384, 2384,
     2384, 2384, 2385, 2385, 2385, 2385, 2385, 2386, 2386, 2386,

     2386, 2386, 2387, 2387, 2387, 2387, 2387, 2388, 2388, 2388,
     2388, 2388, 2389, 2389, 2389, 2389, 2389, 2390, 2390, 2390,
     2390, 2390, 2391, 2391, 2391, 2391, 2391, 2392, 2392, 2392,
     2392, 2392, 2393, 2393, 2393, 2393, 2393, 2394, 2394, 2394,
     2394, 2394, 2395, 2395, 2395, 2395, 2395, 2396, 2396, 2396,
     2396, 2396, 2397, 2397, 2397, 2397, 2397, 2398, 2398, 2398,
     2398, 2398, 2399, 2399, 2399, 2399, 2399, 2400, 2400, 2400,
     2400, 2400, 2401, 2401, 2401, 2401, 2401, 2402, 2402, 2402,
     2402, 2402, 2403, 2403, 2403, 2403, 2403, 2404, 2404, 2405,
     2405, 2406, 2406, 2407, 2407, 2408, 2408, 2409, 2409, 2410,

     2410, 2411, 2411, 2413, 2413, 2414, 2414, 2415, 2415, 2416,
     2416, 2417, 2417, 2418, 2418, 2419, 2419, 2421, 2421, 2439,
     2439, 2440, 2440, 2441, 2441, 2442, 2442, 2443, 2443,    0,
     2443, 2443, 2444,    0,    0, 2444, 2444, 2445, 2445, 2446,
     2446, 2447, 2447, 2448, 2448, 2449, 2449, 2450, 2450, 2451,
     2451, 2452, 2452, 2454, 2454, 2455, 2455, 2456, 2456, 2457,
     2457, 2458, 2458, 2459, 2459, 2460, 2460, 2462, 2462, 2480,
     2480, 2481, 2481, 2482, 2482, 2483, 2483, 2484, 2484,    0,
     2484, 2484, 2485,    0,    0, 2485, 2485, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,

     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 22 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}



















































































































































#line 4033 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define ASOVERA 115
#define NUMTHREADS 116
#define SRCMOM 117
#define SRCMOMX 118
#define SRCMOMY 119
#define SRCMOMZ 120
#define SNKMOMX 121
#define SNKMOMY 122
#define SNKMOMZ 123
#define SEQSRCMOM 124
#define SEQSRCMOMX 125
#define SEQSRCMOMY 126
#define SEQSRCMOMZ 127
#define CPUPREC 128
#define GPUPREC 129
#define GPUPRECSLOPPY 130
#define INVERTERTYPE 131
#define MMSID 132
#define CHKINVERSION 133
#define LAPHSTIMEPROJTYPE 134
#define LAPHSSPINPROJTYPE 135
#define LAPHSEVECPROJTYPE 136
#define LAPHSEVECNUMBER 137
#define LAPHSRNDVECNUMBER 138
#define LAPHSEVECPATHPRFX 139
#define LAPHSEVECFILEPRFX 140
#define LAPHS_TIME_SRC_NUMBER 141
#define LAPHS_SPIN_SRC_NUMBER 142
#define LAPHS_EVEC_SRC_NUMBER 143
#define LAPHS_PERAMBULATOR_PATH_PREFIX 144
#define LAPHS_PERAMBULATOR_FILE_PREFIX 145
#define COMMENT 146
#define ERROR 147

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

int cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 205 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"

#line 4372 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2362 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2361 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 206 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 207 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 208 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 209 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 210 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 211 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 212 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 213 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 214 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 215 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 216 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 217 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 218 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 219 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 220 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 221 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 222 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 223 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 224 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 225 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 226 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 227 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 228 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 229 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 230 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 231 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 232 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 233 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 234 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 235 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 236 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 237 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 238 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 239 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 240 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 241 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 242 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 243 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 244 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 245 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 246 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 247 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 248 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 249 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 250 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 251 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 252 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 253 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 254 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 255 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 256 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 257 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 258 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 259 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 260 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 261 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 262 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 263 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 264 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 265 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 266 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 267 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 268 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 269 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 270 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 271 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 272 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 273 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 274 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 275 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 276 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 277 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 278 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 279 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 280 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 281 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 283 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 288 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 289 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 292 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 293 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 294 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 295 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 296 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 297 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 298 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 299 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 300 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 301 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 302 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 303 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 304 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 305 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 306 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 307 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 308 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 309 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 310 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 311 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 312 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 313 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 314 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 315 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 316 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 317 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 319 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 320 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 322 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 323 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 326 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 327 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 328 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 329 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 330 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 331 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 332 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 333 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 334 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 335 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 336 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 337 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 338 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 339 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 340 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 341 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 342 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 343 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 344 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 345 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 347 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 348 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 349 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 350 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 351 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 352 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 353 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 354 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 355 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 356 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 358 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 359 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
/* start namespace inclusion here */
case 146:
YY_RULE_SETUP
#line 364 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 368 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 372 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 376 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 380 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 384 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 388 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 392 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 396 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 400 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 404 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 408 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 412 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 416 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 421 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 426 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 430 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 434 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 438 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 442 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 446 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 450 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 454 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 458 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 462 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 466 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 470 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 474 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 478 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 482 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 487 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 492 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 497 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 501 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 505 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 509 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 513 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 517 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 521 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 525 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 529 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 537 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 555 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 559 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 563 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 567 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 571 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 575 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 579 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 583 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 587 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 591 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 595 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 599 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 603 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 607 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 611 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 615 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 619 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 623 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 627 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 631 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 635 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 639 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 643 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 647 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 651 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 655 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 659 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 663 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 667 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 671 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 675 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 679 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 684 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 688 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 692 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 701 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 705 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 709 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 714 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 723 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 733 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 737 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 741 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 745 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 749 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 753 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 757 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 762 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 768 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 774 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 780 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 786 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 792 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 797 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 801 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 806 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 811 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 816 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 820 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 828 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 833 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 838 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 842 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 852 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 860 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 868 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 876 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 884 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 893 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 902 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 911 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 919 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 923 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 927 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 931 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 936 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 941 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 946 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 952 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 960 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 965 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 970 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 975 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 980 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 985 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 991 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 998 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1008 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1018 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1028 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1032 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1036 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1045 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1050 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1055 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1061 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1066 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1071 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1076 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1081 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1086 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1091 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1097 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1102 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1110 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1114 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1118 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 1122 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1127 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1130 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 298:
YY_RULE_SETUP
#line 1137 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 6519 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2362 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2362 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2361);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
int cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1137 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

