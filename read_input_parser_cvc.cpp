
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,int len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 296
#define YY_END_OF_BUFFER 297
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2346] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      292,  292,  295,  295,  297,  294,  294,  293,  291,  290,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      145,  148,  149,  150,  146,  147,  160,  294,  151,  294,
      294,  152,  294,  294,  154,  294,  294,  155,  294,  294,
      156,  294,  294,  153,  294,  294,  157,  294,  294,  158,
      294,  165,  166,  168,  169,  170,  294,  159,  182,  294,
      161,  294,  294,  162,  294,  294,  163,  294,  294,  164,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  179,
      180,  181,  183,  184,  294,  294,  186,  294,  188,  167,
      189,  190,  191,  194,  195,  196,  197,  294,  192,  294,

      294,  193,  294,  294,  198,  294,  294,  199,  294,  200,
      201,  294,  202,  294,  294,  203,  294,  294,  204,  294,
      294,  205,  294,  294,  206,  294,  294,  207,  294,  294,
      208,  294,  294,  209,  294,  294,  210,  294,  294,  211,
      294,  212,  213,  215,  214,  294,  216,  294,  294,  294,
      218,  294,  219,  294,  220,  294,  221,  294,  222,  294,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
      294,  294,  294,  294,  294,  238,  239,  240,  294,  187,
      294,  241,  242,  243,  244,  294,  294,  246,  248,  256,
      257,  249,  250,  251,  252,  253,  254,  255,  258,  294,

      259,  294,  260,  294,  294,  294,  261,  294,  262,  294,
      263,  294,  265,  294,  266,  294,  267,  294,  294,  294,
      268,  294,  269,  294,  270,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  294,  294,  285,  286,
      287,  294,  294,  292,  292,  291,  290,  294,  294,  291,
      290,    0,  291,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    1,    0,  145,
      148,  149,  150,  146,  147,  160,  151,    0,  151,    0,
      152,    0,  152,    0,  154,    0,  154,    0,  155,    0,
      155,    0,  156,    0,  156,    0,  153,    0,  153,    0,
      157,    0,  157,    0,  158,    0,  158,    0,  165,  166,
      168,  169,  170,  159,    0,  182,  161,    0,  161,    0,
      162,    0,  162,    0,  163,    0,  163,    0,  164,    0,
      164,    0,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  183,  184,  185,  186,    0,  186,    0,
      188,  167,  189,  190,  191,  194,  195,  196,  197,  192,

        0,  192,    0,  193,    0,  193,    0,  198,    0,  198,
        0,  199,    0,  199,    0,  200,  201,  202,    0,  202,
        0,  203,    0,  203,    0,  204,    0,  204,    0,  205,
        0,  205,    0,  206,    0,  206,    0,  207,    0,  207,
        0,  208,    0,  208,    0,  209,    0,  209,    0,  210,
        0,  210,    0,  211,    0,  211,    0,  212,  213,  215,
      214,  216,    0,  216,    0,  217,  218,    0,  218,    0,
      219,  220,    0,  221,    0,  222,    0,  223,    0,  224,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  187,    0,  187,    0,

      241,  242,  243,  244,  245,  247,  246,  248,  256,  257,
      249,  250,  251,  252,  253,  254,  255,  258,  259,    0,
      259,    0,  260,    0,    0,    0,  261,    0,  262,    0,
      263,    0,  265,    0,  266,    0,  267,    0,    0,    0,
        0,  268,    0,  269,    0,  270,    0,  272,  273,  274,
      275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  292,  292,  291,  295,  295,
      291,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    2,    0,    0,    0,    4,    0,    5,    0,    6,

        0,   12,    0,   11,    0,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,    0,  151,    0,  152,
        0,  154,    0,  155,    0,  156,    0,  153,    0,  157,
        0,  158,    0,  161,    0,  162,    0,  163,    0,  164,
        0,  186,    0,  192,    0,  193,    0,  198,    0,  199,
        0,  202,    0,  203,    0,  204,    0,  205,    0,  206,
        0,  207,    0,  208,    0,  209,    0,  210,    0,  211,

        0,  216,    0,  218,    0,  187,    0,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    3,    0,    0,    4,    5,    6,   12,   11,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,    0,   56,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   60,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   55,    0,   54,    0,    0,    0,    0,   38,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  264,    0,
      271,    0,    0,   57,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
        0,   60,    0,   10,    0,    0,    0,   14,    0,    0,

       68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,    0,    0,   69,    0,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,   54,    0,    0,
        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   13,    0,    0,   22,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   15,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  131,   10,    0,    0,   14,
        0,   68,    0,    0,    0,    0,    0,    0,    0,    0,
       21,    0,   69,   72,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,   22,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  131,    0,    9,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   23,    0,   24,    0,   25,    0,   26,
        0,    0,    0,    0,    0,   50,    0,   51,    0,   52,
        0,   53,    0,    0,    0,    0,    0,   61,    0,   62,
        0,   63,    0,   64,    0,    0,   19,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    9,    8,    0,    0,    0,    0,
        0,    0,   85,    0,   86,    0,   87,    0,   88,    0,
        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,

        0,    0,   16,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,   71,    0,   73,    0,
      114,   23,   24,   25,   26,    0,    0,    0,    0,   48,
       50,   51,   52,   53,    0,    0,   59,    0,   58,    0,
       61,   62,   63,   64,    0,   19,    0,    0,    0,    0,
        0,    0,   47,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    0,    0,    0,
       85,   86,   87,   88,    0,   70,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,   16,    0,    0,    0,

        0,    0,    0,    0,   36,    0,    0,    0,   71,   73,
      114,    0,    0,    0,   48,    0,   49,   59,   58,    0,
        0,    0,    0,    0,    0,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   89,

        0,   39,    0,    0,    0,    0,  115,    0,    0,   34,
        0,    0,    0,    0,    0,   67,    0,   66,    0,    0,
        0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
        0,    0,    0,   96,    0,    0,    0,    0,    0,   74,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
        0,    0,    0,    0,  115,    0,   34,    0,    0,    0,
        0,    0,   65,   67,   66,    0,    0,  107,    0,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   40,    0,    0,    0,  106,
        0,    0,    0,  127,    0,    0,   20,    0,    0,   96,
        0,  128,    0,    0,   46,    0,   45,    0,  130,   74,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       90,    0,    0,    0,    0,    0,    0,    0,    0,   65,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
       91,    0,    0,    0,   44,    0,    0,    0,    0,    0,
        0,    0,  106,    0,    0,  127,    0,    0,    0,    0,
      128,    0,   46,   45,  130,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   90,    0,    0,    0,    0,   33,

        0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,   91,    0,    0,   44,    0,
        0,  102,    0,    0,    0,    0,    0,    0,  132,    0,
       97,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,    0,   83,    0,   33,    0,    0,    0,    0,    0,
      109,    0,   42,    0,    0,    0,    0,    0,  120,    0,
      121,    0,  122,    0,   92,    0,    0,   81,  102,    0,
       37,    0,  116,    0,    0,    0,    0,  132,   97,    0,
        0,    0,   28,    0,   29,   27,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   82,
       83,    0,    0,    0,    0,    0,  109,    0,    0,    0,
        0,    0,  120,  121,  122,   92,    0,   41,   81,   37,
      116,    0,    0,    0,    0,   75,    0,  108,    0,    0,
        0,   28,   29,    0,    0,  100,    0,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   84,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
       41,    0,  117,    0,  118,    0,  119,   75,  108,    0,
        0,    0,    0,    0,  100,   95,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   84,    0,

      103,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,  117,  118,  119,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  103,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,  126,    0,    0,    0,    0,   98,    0,
        0,   32,    0,  129,    0,    0,    0,    0,  135,    0,
        0,    0,    0,    0,  134,    0,    0,  133,    0,    0,
       94,    0,  105,    0,    0,    0,    0,    0,  126,    0,
        0,    0,    0,    0,   98,    0,   99,   32,  129,    0,
        0,    0,  135,    0,  142,    0,    0,    0,  134,    0,

      141,  133,    0,  140,    0,  105,    0,    0,    0,    0,
        0,    0,  123,    0,  124,    0,  125,    0,    0,   99,
        0,    0,    0,  142,    0,    0,    0,  141,  140,    0,
      104,    0,    0,    0,    0,    0,  123,  124,  125,    0,
        0,    0,    0,    0,    0,    0,    0,  104,    0,    0,
        0,    0,    0,    0,    0,  111,    0,    0,  136,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  111,
        0,  136,    0,    0,    0,    0,  137,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  137,    0,  110,
        0,    0,   30,    0,   80,    0,    0,    0,    0,    0,

        0,    0,  110,    0,   31,   30,   80,    0,    0,    0,
        0,   76,    0,  112,    0,    0,    0,    0,   31,    0,
       77,    0,   78,    0,   79,   76,  112,    0,  139,    0,
      138,    0,    0,   77,   78,   79,  139,  138,    0,  144,
        0,  143,  144,  143,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    9,   10,    5,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,    1,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   45,   45,   45,   46,   45,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[2470] =
    {   0,
        0,    6,   77,   93,  109,  125,  141,  157,  173,  189,
      205,  221,  237,  253,  269,  285,  301,  317,  333,  349,
      365,  381,  397,  413,  429,  445,  461,  477,  493,  509,
      525,  541,  557,  573,  589,  605,  621,  637,  653,  669,
      685,  701,  717,  733,  749,  765,  781,  797,  813,  829,
      845,  861,  877,  893,  910,  923,  936,  955,  968,  981,
     1000, 1013, 1026, 1045, 1058, 1071, 1090, 1103, 1116, 1135,
     1179, 1195, 1211, 1227, 1243, 1259, 1275, 1291, 1308, 1353,
     1321, 1334, 1397, 1413, 1429, 1445, 1461, 1477, 1493, 1509,
     1525, 1541, 1557, 1573, 1589, 1605, 1621, 1637, 1653, 1669,

     1685, 1701, 1717, 1733, 1749, 1765, 1781, 1797, 1813, 1829,
     1845, 1861, 1877, 1893, 1909, 1925, 1941, 1957, 1973, 1989,
     2005, 2021, 2037, 2053, 2069, 2085, 2101, 2117, 2133, 2149,
     2165, 2181, 2197, 2213, 2229, 2245, 2261, 2277, 2293, 2309,
     2325, 2341, 2357, 2373, 2390, 2403, 2447, 2463, 2479, 2495,
     2511, 2527, 2543, 2559, 2575, 2591, 2607, 2623, 2639, 2655,
     2671, 2687, 2703, 2719, 2735, 2751, 2767, 2783, 2799, 2815,
     2831, 2847, 2863, 2879, 2895, 2911, 2423, 2928, 2941, 2954,
     2973, 2986, 2999, 3018, 3031, 3044, 3088, 3104, 3120, 3136,
     3152, 3168, 3184, 3200, 3216, 3232, 3248, 3264, 3280, 3296,

     3313, 3358, 3064, 3326, 3402, 3418, 3435, 3480, 3525, 3570,
     3614, 3630, 3647, 3692, 3737, 3782, 3827, 3872, 3917, 3962,
     4007, 4052, 4097, 4142, 4187, 4232, 4276, 4292, 4308, 4324,
     4340, 4356, 4372, 4388, 4404, 4420, 4436, 4452, 4468, 4484,
     4500, 4516, 4532, 4548, 4564, 4580, 4596, 4612, 4628, 4644,
     4660, 4676, 4692, 4708, 4725, 4770, 4815, 4860, 4905, 4950,
     4995, 5040, 5084, 5100, 5117, 5162, 5207, 5252, 5297, 5342,
     5387, 5432, 5476, 5492, 5508, 5524, 3339, 3448, 3461, 3493,
     5540, 5556, 5572, 5588, 5604, 5620, 3506, 3538, 3551, 3660,
      944,  989, 1034, 1079, 1402,11490,   80,11490,11490,11490,

     1110,   81, 3650,   97,  100, 1118,  932,  116,  134,  163,
     5636, 3692, 5688,  159, 1110,  188, 3562, 5737,   83,  194,
     1333, 1361, 1369, 1376, 2402, 2953, 2998, 3044, 3374, 3339,
     3461, 3586, 3506, 3551, 3750, 3764, 3792, 3799, 3841, 3849,
     3880, 3894, 3926, 3933, 3975, 3983, 4015, 4029, 4061, 4068,
     4110, 3366, 3782, 3827, 3872, 3962, 4007, 4121, 4097, 4151,
     4158, 4200, 4208, 4232, 4246, 4254, 4733, 4747, 4779, 4786,
     4828,    0,    0,    0,    0,    0,    0,    0,    0, 4142,
     4187, 4725, 4815,    0,    0, 4836, 4868, 4882, 4860, 4913,
     4920, 4927, 4950, 4958, 4965, 4972, 4995, 5004, 5011, 5053,

     5061, 5125, 5139, 5171, 5178, 5220, 5228, 5260, 5274, 5040,
     5117, 5306, 5313, 5355, 5363, 5395, 5409, 5441, 5448, 5631,
     5646, 5659, 5674, 5688, 5766, 5795, 5808, 5815, 5829, 5837,
     5844, 5858, 5866, 5873, 5887, 5895, 5902, 5916, 5924, 5931,
     5945, 5207, 5252, 5342, 5387, 5953, 5960, 5974,    0, 5982,
     5989, 6003, 6010, 6017, 6030, 6037, 6048, 6055, 6066, 6073,
     6084, 6091, 6098, 6105, 6112, 6119, 6126, 6133, 6140, 6147,
        0,    0,    0,    0,    0, 6154, 6161, 6168, 6176, 6183,
     6197, 6204, 6211, 6224,    0,    0, 6231, 6238,    0,    0,
     6245,    0,    0,    0,    0,    0,    0,    0, 6252, 6260,

     6267, 6281, 6288, 6295, 6308, 6315, 6326, 6333, 6344, 6351,
     6362, 6369, 6380, 6387, 6398, 6405, 6416, 6423, 6434, 6441,
     6452, 6459, 6470, 6477, 6488,    0,    0,    0,    0, 6495,
        0,    0,    0,    0, 6502, 6509,    0,    0, 6516, 6523,
     6530,    0,    0,    0,  272,    0,    0,    0,  288,    0,
        0,  560,11490,  548, 1348,  573,  595,  607,  620,  623,
      640,  661,  673,  728,  738, 1324,  882,  913,  973,  957,
      977,   96,  115,  147, 1007, 1021,  163,  195,  227,  242,
      259, 1019, 1060, 6546, 1054, 1062, 1069, 1131, 3643, 1107,
     1096, 5694, 1093, 1094, 1139, 1157, 5693, 3702, 1163, 1182,

     1205, 3062, 1220, 1245, 3552, 1347,  291,  563, 1341, 6540,
     6558, 6565, 6573, 6586, 6593, 6601, 6608, 6622, 6629, 6649,
     6656, 6671, 6678, 6697, 6704, 6720, 6727, 6745, 6752, 6769,
     6776, 6793, 6800, 6818, 6825, 6843, 6850, 6867, 6874, 6891,
     6898, 6916, 6923, 6941, 6948, 6965, 6972, 6989, 6996, 7003,
     7013, 7020, 7027, 7038, 7045, 7052, 7059, 7073, 7080, 7100,
     7107, 7122, 7129, 7148, 7155, 7171, 7178, 7196, 7203, 7220,
     7227, 7244,    0,    0,    0,    0,    0,    0,    0,    0,
     7251, 7258, 7268, 7275,    0,    0, 7282, 7296, 7303, 7323,
     7330, 7344, 7351, 7358, 7365, 7372, 7379, 7386, 7393, 7400,

     7414, 7421, 7441, 7448, 7463, 7470, 7489, 7496, 7512, 7519,
     7537, 7544, 7561, 7568, 7585, 7592, 7599, 7609, 7623, 7630,
     7650, 7657, 7672, 7679, 7698, 7705, 7721, 7728, 7746, 7753,
     7770, 7777, 7794, 7801, 7819, 7826, 7844, 7851, 7868, 7875,
     7892, 7899, 7917, 7924, 7942, 7949, 7966, 7973, 7990, 7997,
     8015, 8022, 8040, 8047, 8064, 8071, 8088, 8095, 8102, 8112,
     8119, 8126, 8140, 8147, 8167,    0, 8174, 8189, 8196, 8215,
     8222, 8237, 8244, 8255, 8262, 8273, 8280, 8291, 8298, 8305,
     8312, 8319, 8326, 8333, 8340, 8347, 8354, 8361,    0,    0,
        0,    0,    0, 8368, 8375, 8382, 8389, 8403, 8410, 8430,

     8437, 8451, 8458,    0,    0, 8465, 8472,    0,    0, 8479,
        0,    0,    0,    0,    0,    0,    0, 8486, 8493, 8507,
     8514, 8534, 8541, 8555, 8562, 8573, 8584, 8591, 8602, 8609,
     8620, 8627, 8638, 8645, 8656, 8663, 8674, 8681, 8692, 8699,
     8710, 8721, 8728, 8739, 8746, 8757, 8764,    0,    0,    0,
        0, 8771,    0,    0,    0,    0, 8778, 8785,    0,    0,
     8792, 8799, 8806,    0,    0,    0, 1160,    0,    0, 1161,
        0, 1343, 1405, 3692, 1422, 1449, 1463, 1319, 1318, 1479,
     1498, 1511, 1519, 1530, 1557, 1305, 1274, 1575, 1580,  576,
      579,  595, 1604, 1627,  611,  643,  659,  691,  707,  739,

      752,  755,  771,  918, 1255, 1629, 1185,  931, 1659, 1671,
     1683, 1822, 1847, 1854, 1865, 5696, 2204, 2220, 2236, 2252,
     2262, 1223, 2284, 2291, 2331, 2371, 2374, 2409, 2450, 2482,
     2621, 2625, 2638, 2664, 1220, 2693, 2694, 2722, 3047, 2731,
     2757, 2752, 2772, 2786,  932, 2802, 8813, 8820, 8827, 8834,
     8841, 8848, 8855, 8862, 8869, 8876, 8883, 8890, 8897, 8904,
     8911, 8918, 8925, 8932, 8939, 8946, 8953, 8960, 8967, 8974,
     8981, 8988, 8995, 9002, 9009, 9016, 9023, 9030, 9037, 9044,
     9051, 9058, 9065, 9072, 9079, 9086, 9093, 9100, 9107, 9114,
     9121, 9128, 9135, 9142, 9149, 9156, 9163, 9170, 9177, 9184,

     9191, 9198, 9205, 9212, 9219, 9226, 9233, 9240, 9247, 9258,
     9265, 9276, 2837, 2832, 1217, 1249, 2863, 2876, 3005, 3049,
     5695, 3060, 3110, 3113, 3142, 3146, 3202, 3657, 3208, 3221,
     3254,  963, 3333, 3342, 1008, 1053, 1167, 1230, 1280, 3346,
     1281, 1296, 3338, 3365, 3559, 3562, 3571, 3586, 3637, 3648,
     3679, 3682, 3688, 3689, 3690, 3696, 3795, 3781, 3797, 3787,
     3849, 3844, 1204, 3882, 3865, 1191, 3913, 3902, 1432, 1435,
     3929, 3916, 3925, 1467, 3982, 3969, 1172, 3999, 4013, 4016,
     4031, 4045, 9287, 9298, 1159, 4065, 1499, 1317, 1531, 1329,
     4059, 1156, 4067, 4142, 4147, 4153, 4207, 4229, 4236, 4254,

     4236, 4266, 4758, 4326, 5449, 4329, 4715, 4765, 1124, 1106,
     4764, 1563, 1330, 1595, 4768, 4776, 1627, 1103, 1659, 1087,
     4770, 4833, 4823, 4855, 4856, 4857, 4887, 1691, 4895, 1848,
     1851, 4998, 5002, 4999, 5054, 5048, 5046, 5140, 5062, 5122,
     1883, 2232, 2235, 2248, 5120, 5155, 5175, 2267, 2299, 5167,
     5167, 5219, 5228, 5244, 5258, 5263, 1067, 9305, 9316, 9323,
     9334, 5743, 5276, 2315, 2331, 5290, 5306, 5302, 5312, 5360,
     5350, 5393, 1055, 2347, 5385, 2418, 5375, 5420, 5426, 5445,
     5433, 5438, 5494, 5511, 5526, 2482, 2399, 5537, 5630, 5735,
     2485, 2435, 2517, 2436, 5562, 5578, 2549, 2440, 5580, 2581,

     2443, 5611, 5629, 5685, 5697, 5708, 5714, 5717, 5746, 2613,
     2642, 5735, 2645, 2658, 2677, 2709, 5753, 5751, 5739, 5766,
     5753, 5751, 5798, 9319, 5805, 2725, 2757, 2773, 5806, 1049,
     5800, 2789, 5854, 5854, 5861, 5901, 1042, 6602, 5929, 5973,
     5918, 5938, 1022, 9315, 5976, 6163, 6181, 6173, 9318, 6177,
     9327, 2805, 2837, 6182, 2853, 2885, 2906, 6255, 9365, 6259,
     6536, 1004, 6544, 6544, 6590, 2900, 6608, 9337, 6624, 6630,
     6616, 6647, 6663, 6666, 2936, 2937, 2949, 3077, 3126, 2981,
     6679, 2994, 6657, 6704, 6707, 6714, 6711, 6712, 6733, 6757,
     3026, 6773, 3073, 3076, 6770,  997, 6795, 6781, 6785,  977,

     6810, 6809, 6829, 6869, 3158, 3094, 6871, 6872, 3219, 6889,
     6881, 6888,  959, 6907, 6920, 9341, 6928, 6957, 9342, 7054,
     7044, 7061, 3222, 3254, 3285, 3286, 7058,  952, 7072, 7077,
     3392, 3588, 4343, 4346, 7062, 7094, 7124, 3139,  932, 3322,
     4378, 4410, 4442, 4474, 7125, 4506, 4538, 3334, 7112, 7121,
     7153, 7164, 7170, 7163,  914, 7179, 7196, 7225, 7264, 7269,
     7276, 7290, 7301, 7300, 3335, 4570, 3405, 4602, 3424, 7282,
     7291,  907,  877, 7393, 4634, 4666, 4698, 4750, 7400, 5087,
     7387, 7415, 7407, 7410, 7411, 7432, 7449, 7453,  869, 3444,
     7458, 7454, 5142, 3456, 7496, 7516, 7515, 7789, 7504, 9400,

     7522, 7530, 7556, 7594, 9371, 5466, 7595, 7595, 7609, 5514,
     5546, 5578, 5610, 3457, 9404, 3501, 9413, 3546, 9417, 3585,
     7626, 7613, 7614, 9421, 9425, 3636, 9426, 3668, 9430, 3669,
     9434, 3673, 7638, 9443, 9447, 7663, 9451, 3678, 9452, 3731,
     9455, 3766, 9456, 3767, 7666, 9460, 3821, 3822, 7661, 7678,
     7701, 7713, 7710, 9464, 7711, 7717, 7748, 7774, 7778, 7798,
     7790, 7821, 7826, 7850, 3865, 3910, 9473, 7870, 7864, 7865,
     7894, 9477, 3911, 9481, 3955, 9482, 3999, 9485, 4000, 7896,
     9486, 4045, 7884, 7915, 7907, 7930, 9474, 7972, 7970, 7973,
     7993, 7997, 7987, 4046, 8010, 8018, 8033, 8059, 8113, 8122,

     9490, 9494, 4090, 8110, 8134, 8144, 8146, 8137, 8161, 8180,
     9505, 4127, 8181, 8178, 8371, 9509, 4137, 9512, 4180, 9513,
     4181, 4225, 4226, 4282, 4295, 8372, 8377, 8401, 9516, 4852,
     4853, 4898, 4899, 4943, 9520, 9524, 4988, 9531, 4989, 8393,
     5033, 5034, 5090, 5155, 8411, 5244, 8408,  855,  852, 8410,
     8484, 9535, 5245, 8481, 8471, 8512, 8501,  839, 9342, 9376,
      836,  823, 9382, 9461, 9539, 5290, 9542, 9500, 9517,  820,
     5291, 5335, 5379, 5380, 9503, 5425, 9522, 9506,  807, 9515,
     9509, 9520, 9529, 9523, 9533, 9535, 9528, 9540,  804,  791,
     9524, 9542, 9542, 9545, 9567, 5426, 5479, 9529, 9539, 9545,

     9555, 9552, 9554, 9558, 5527, 9569, 9569, 9575, 5625, 6054,
     6072, 9560, 9560, 9568, 6090, 9604, 6285, 6332, 6350, 9581,
     9576, 9576, 9587, 9580, 9590, 9581, 6368, 9596, 9583, 9591,
     9579, 9594, 9601, 9595, 9596, 9600, 9646, 9621, 6386, 9651,
     6404, 9615, 9620, 9629, 9664, 9639, 9669, 9650, 9631, 9672,
     9675, 9659, 9643, 9690, 9653, 9663,  788, 9665, 9665, 9658,
     9680, 9681, 9674, 6422, 9681, 9686, 9686, 9672, 9681, 9678,
     9716, 9691, 9687, 9698, 9695, 9687, 9694, 6458, 9707, 9713,
     9735, 9707, 9703, 9744, 9713, 9710, 9723, 9733, 9756, 9734,
     9725, 9727, 9726, 9726, 9731, 9733, 9735, 9736, 9774, 6476,

     9753, 6494, 9740, 9742, 9762, 9784, 6556, 9755, 9794, 6557,
     9766, 9771, 9768, 9804, 9809, 6626, 9812, 6649, 9779, 9792,
     9819, 6701, 9782, 9822, 9786, 9801, 9798, 9800, 9803, 9805,
     9800, 9801, 9805,  775, 9818, 9815, 9805, 9814, 9847, 6988,
     9827, 9812, 9850, 9822, 9836, 9871, 9831,  772, 9875, 7044,
     9824, 9845, 9878, 7077, 9888, 9893, 9896, 9897, 9901, 7100,
     9860, 9851, 9873, 9872, 9884, 9875, 9889, 9880, 9895, 7152,
     9919, 9894, 9895, 9883, 7243, 9882, 7300,  759, 9894, 9889,
     9904, 9929, 7418, 7441, 7493, 9895, 9910, 7584, 9913, 9947,
     7627, 9910, 9910, 9903, 9912,  726, 9957, 9927, 9931, 9962,

     9935, 9926, 9936, 9933, 9946, 7650, 9936, 9949, 9975, 7702,
     9949, 9959, 9981, 7794, 9942, 9953, 8087, 9957, 9969, 8144,
     9990, 8167, 9958,10001, 8214,10009, 8219,10016, 8261, 8279,
     9958, 9970,  681, 9988, 9993, 9993,  662, 9994,  646,10026,
     8297, 9988, 9992, 9994,10034, 9994,10002,10010,10018, 8407,
    10004,10011,10044, 8511,10008,10022,10011,10028,10012,10062,
     8532,10036,10030,10070, 8579,10048,10074,10045,10050,10064,
    10054,10070, 8590,10092,10093, 8608,10110,10054,10074,10076,
     8626,10071, 8644, 8662, 8680,10069,  633,10071,10066,10068,
      630,10075,  614,10076, 8716,10136,10139,10093,10143, 8727,

    10077,10103,10087,10110,10154,  598,10158, 8745,10121,10114,
    10128,10119,10162,10165,10169, 8763,10180,10131, 9293,10184,
    10188, 9304,10191,10192,10152,10149,10159,10197, 9322,10203,
     9372,10192,10214,10218,10221, 9393,10177,10181,10188,10193,
    10191,10191,10191,10198,10200,10196,10196,10199,10202,10242,
    10241,10246,10247,10216,10264,10222,  585,10240,10233,10269,
    10270,10241,10274,10255,10260,10257,10244,10281,10284,10288,
    10287,10298,10292,10307,10310,10311,10315,10316,10319,10320,
    10324,10328,10332,10297,10333,10340,  582,10341,10345,10308,
    10308,10346,10350,10358,10359,10368,10329,10369,10373,10322,

      566,10314,10334,10330,10338,10335,10348,10337,10351,10384,
    10388,10393,10366,10376,10365,10372,10399,10364,10411,10373,
      550,10366,10410,10414,10417,10418,10421,10432,10433,10436,
    10439,10440,10443,10444,10447,10448,10451,10452,10423,10394,
    10433,10462,10466,10440,10469,10470,10474,10473,10445,10462,
    10446,10461,  503,  500,10448,10463,10450,10469,10495,10496,
    10500,10474,10469,10470,10472,10521,10524,10483,10502,10484,
    10533,10534,10540,10543,10544,10547,10552,10555,10560,10494,
    10508,10527,10515,10521,10568,10569,10523,10540,10535,10556,
    10553,10554,10555,10548,10559,10560,10561,10562,10584,10588,

    10594,10550,10612,10561,10563,10597,  487,10581,10576,10591,
    10618,10622,10625,10629,10586,10584,10630,10616,10636,10637,
    10612,10612,10606,10648,10609,10622,10634,10617,10656,10621,
    10657,10626,10663,10641,10674,10678,10684,10650,10645,10652,
    10666,10658,10691,10696,10661,10657,10658,10706,10697,10710,
    10716,10719,10723,10733,10693,10706,10703,10734,10738,10741,
    10700,10701,10715,10745,10746,10751,10758,10762,10766,10714,
    10769,10773,10776,10736,10729,10741,10762,10759,10781,10784,
    10788,10793,10768,10773,10794,10799,10803,10810,10814,  484,
    10776,  471,10817,10821,10822,10781,10782,10793,10826,10827,

    10831,10836,10840,10844,10845,10848,10815,10814,10824,10813,
    10816,10852,10853,10857,10862,10865,10870,10835,10845,10874,
    10839,10841,10846,10880,  468,  455,10862,10885,10888,10889,
    10893,10848,10870,  452,10871,10869,10898,10902,10907,10884,
    10914,10874,10915,10876,10881,10886,10885,10921,10891,10901,
    10902,10897,10907,10897,10935,10940,10913,10943,10963,10918,
    10910,10914,10964,10915,10913,10937,10928,10949,10938,10971,
    10948,10982,10952,10954,10957,10988,10987,10991,10999,10992,
      439,10962,10961,10975,10980,10987,10990,11014,11018,11017,
    11022,11025,11029,11030,11042,11007,11043,11050,10986,10995,

    11011,11014,11051,11055,11056,11060,11068,11072,11078,11079,
    11082,11083,11087,11090,11091,11097,11033,11046,11100,11104,
    11108,11109,11115,11116,11119,11122,11126,11127,11131,11134,
    11135,11138,11139,11142,11145,11146,11149,11156,11157,11160,
    11161,11164,11165,11168,11490,11179,11184,11189,11194,11199,
    11204,11209,11214,11219,11224,11229,11234,11239,11244,11249,
    11254,11259,11264,11269,11274,11279,11284,11289,11294,11299,
    11304,11309,11314,11319,11324,11329,11334,11339,11344,11349,
    11354,11359,11364,11369,11374,11379,11384,11386,11388,11390,
    11392,11394,11396,11398,11400,  477,11402,11404,11406,11408,

    11410,11412,11414,  464,11416,  461,  448,  445,  432,  429,
      416,  413,  400,  397,  384,  381,  368,  365,  352,  349,
      336,  333,11418,11420,11422,11424,11429,11434,11436,11438,
    11440,11442,11444,11446,11448,11450,  320,11452,11454,11456,
    11458,11460,11462,11464,  317,11466,  301,  274,  257,  242,
      223,  210,  207,  191,  178,  175,  159,  143,  130,  127,
      111,   98,    0,11468,11470,11472,11474,11479,11484
    } ;

static yyconst flex_int16_t yy_def[2470] =
    {   0,
     2346, 2345, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2347, 2347, 2348, 2348, 2349, 2349,
     2350, 2350, 2351, 2351, 2352, 2352, 2353, 2353, 2354, 2354,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2355, 2355,
     2356, 2356, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,

     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2357, 2357, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2358, 2358, 2359, 2359,
     2360, 2360, 2361, 2361, 2362, 2362, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,

     2363, 2363, 2364, 2364, 2346, 2346, 2365, 2365, 2366, 2366,
     2346, 2346, 2367, 2367, 2368, 2368, 2369, 2369, 2370, 2370,
     2371, 2371, 2372, 2372, 2373, 2373, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2346, 2346, 2374, 2374, 2375, 2375, 2376, 2376,
     2377, 2377, 2346, 2346, 2378, 2378, 2379, 2379, 2380, 2380,
     2381, 2381, 2346, 2346, 2346, 2346, 2382, 2382, 2383, 2383,
     2346, 2346, 2346, 2346, 2346, 2346, 2384, 2384, 2385, 2385,
     2386, 2386, 2387, 2387, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2345,
     2345, 2345, 2345, 2396, 2397, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2398, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2399, 2400, 2401, 2402, 2403, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2404, 2405, 2345, 2345, 2406, 2407,
     2345, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2415, 2416, 2417, 2418, 2345,
     2419, 2420, 2421, 2422, 2345, 2345, 2423, 2424, 2345, 2345,
     2345, 2425, 2426, 2427, 2427, 2427, 2427, 2428, 2428, 2428,
     2428, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436,
     2345, 2345, 2345, 2345, 2437, 2438, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2439, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2440, 2441,
     2442, 2443, 2444, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2445, 2446, 2345, 2345, 2447, 2448, 2345,
     2449, 2450, 2451, 2452, 2453, 2454, 2455, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2456, 2457, 2458,
     2459, 2345, 2460, 2461, 2462, 2463, 2345, 2345, 2464, 2465,
     2345, 2345, 2345, 2466, 2467, 2468, 2468, 2468, 2469, 2469,
     2469, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345,    0, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345
    } ;

static yyconst flex_int16_t yy_nxt[11563] =
    {   0,
     2345,  297,  298,  297,  856,  299,  296,  297,  298,  297,
      296,  300,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  301,  302,  303,  304,  305,  306,
      307,  308,  309,  296,  310,  311,  312,  313,  314,  315,
      316,  317,  318,  319,  296,  296,  320,  296,  296,  296,
      296,  296,  301,  302,  303,  304,  305,  306,  307,  308,
      309,  296,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  296,  296,  320,  296,  296,  296,  297,  298,
      297,  552,  299,  552,  607,  553,  607,  321,  321,  321,
      321,  321,  321,  321,  297,  298,  297,  572,  300,  572,

      608,  557,  855,  321,  321,  321,  321,  321,  321,  321,
      297,  298,  297,  574,  299,  854,  890,  562,  890,  322,
      322,  322,  322,  322,  322,  322,  297,  298,  297,  557,
      300,  853,  891,  563,  851,  322,  322,  322,  322,  322,
      322,  322,  297,  298,  297,  562,  299,  850,  892,  569,
      892,  323,  323,  323,  323,  323,  323,  323,  297,  298,
      297,  563,  300,  849,  895,  570,  895,  323,  323,  323,
      323,  323,  323,  323,  297,  298,  297,  569,  299,  848,
      896,  571,  817,  324,  324,  324,  324,  324,  324,  324,
      297,  298,  297,  570,  300,  816,  897,  593,  897,  324,

      324,  324,  324,  324,  324,  324,  297,  298,  297,  571,
      299,  815,  898,  596,  814,  325,  325,  325,  325,  325,
      325,  325,  297,  298,  297,  593,  300,  813,  899,  609,
      899,  325,  325,  325,  325,  325,  325,  325,  297,  298,
      297,  596,  299,  901,  900,  901,  812,  326,  326,  326,
      326,  326,  326,  326,  297,  298,  297,  609,  300,  902,
      903,  811,  903,  326,  326,  326,  326,  326,  326,  326,
      297,  298,  297,  867,  299,  867,  904,  868,  809,  327,
      327,  327,  327,  327,  327,  327,  297,  298,  297,  552,
      300,  870,  607,  871,  607,  327,  327,  327,  327,  327,

      327,  327,  297,  298,  297,  808,  299,  328,  608,  328,
      329,  330,  330,  330,  330,  330,  330,  330,  297,  298,
      297,  804,  300,  328,  685,  328,  329,  330,  330,  330,
      330,  330,  330,  330,  297,  298,  297,  856,  299,  331,
      855,  331,  332,  333,  333,  333,  333,  333,  333,  333,
      297,  298,  297,  854,  300,  331,  853,  331,  332,  333,
      333,  333,  333,  333,  333,  333,  297,  298,  297,  851,
      299,  334,  850,  334,  335,  336,  336,  336,  336,  336,
      336,  336,  297,  298,  297,  849,  300,  334,  848,  334,
      335,  336,  336,  336,  336,  336,  336,  336,  297,  298,

      297,  817,  299,  337,  816,  337,  338,  339,  339,  339,
      339,  339,  339,  339,  297,  298,  297,  815,  300,  337,
      814,  337,  338,  339,  339,  339,  339,  339,  339,  339,
      297,  298,  297,  813,  299,  340,  812,  340,  341,  342,
      342,  342,  342,  342,  342,  342,  297,  298,  297,  811,
      300,  340,  809,  340,  341,  342,  342,  342,  342,  342,
      342,  342,  297,  298,  297,  808,  299,  343,  804,  343,
      344,  345,  345,  345,  345,  345,  345,  345,  297,  298,
      297,  685,  300,  343, 2296,  343,  344,  345,  345,  345,
      345,  345,  345,  345,  297,  298,  297, 2251,  299,  346,

     2246,  346,  347,  348,  348,  348,  348,  348,  348,  348,
      297,  298,  297, 2245,  300,  346, 2223,  346,  347,  348,
      348,  348,  348,  348,  348,  348,  297,  298,  297, 2221,
      299,  349, 2139,  349,  350,  351,  351,  351,  351,  351,
      351,  351,  297,  298,  297, 2094,  300,  349, 2093,  349,
      350,  351,  351,  351,  351,  351,  351,  351,  297,  298,
      297,  552,  299,  552,  945,  553,  945,  352,  352,  352,
      352,  352,  352,  352,  297,  298,  297,  890,  300,  890,
     1032,  872, 1032,  352,  352,  352,  352,  352,  352,  352,
      297,  298,  297,  891,  299, 2069,  892,  874,  892,  353,

      353,  353,  353,  353,  353,  353,  297,  298,  297,  872,
      300, 2050,  895,  875,  895,  353,  353,  353,  353,  353,
      353,  353,  297,  298,  297,  874,  299, 2039,  896,  876,
     2014,  354,  354,  354,  354,  354,  354,  354,  297,  298,
      297,  875,  300, 1962, 1035,  877, 1035,  354,  354,  354,
      354,  354,  354,  354,  297,  298,  297,  876,  299, 1948,
      897,  878,  897,  355,  355,  355,  355,  355,  355,  355,
      297,  298,  297,  877,  300, 1946,  898,  879, 1942,  355,
      355,  355,  355,  355,  355,  355,  297,  298,  297,  878,
      299, 1894, 1036,  880, 1036,  356,  356,  356,  356,  356,

      356,  356,  297,  298,  297,  879,  300, 1892,  899,  881,
      899,  356,  356,  356,  356,  356,  356,  356,  297,  298,
      297,  880,  299,  357,  900,  357, 1888,  358,  358,  358,
      358,  358,  358,  358,  297,  298,  297,  881,  300,  357,
     1037,  357, 1037,  358,  358,  358,  358,  358,  358,  358,
      297,  298,  297,  901,  299,  901, 1038,  882, 1038,  359,
      359,  359,  359,  359,  359,  359,  297,  298,  297,  902,
      300, 1859,  903,  883,  903,  359,  359,  359,  359,  359,
      359,  359,  297,  298,  297,  882,  299,  360,  904,  360,
      361,  362,  362,  362,  362,  362,  362,  362,  297,  298,

      297,  883,  300,  360, 1846,  360,  361,  362,  362,  362,
      362,  362,  362,  362,  297,  298,  297, 1816,  299,  363,
     1801,  363,  364,  365,  365,  365,  365,  365,  365,  365,
      297,  298,  297, 1725,  300,  363, 1659,  363,  364,  365,
      365,  365,  365,  365,  365,  365,  297,  298,  297, 1658,
      299,  366, 1648,  366,  367,  368,  368,  368,  368,  368,
      368,  368,  297,  298,  297, 1644,  300,  366, 1636,  366,
      367,  368,  368,  368,  368,  368,  368,  368,  297,  298,
      297, 1635,  299,  369, 1632,  369,  370,  371,  371,  371,
      371,  371,  371,  371,  297,  298,  297, 1624,  300,  369,

     1623,  369,  370,  371,  371,  371,  371,  371,  371,  371,
      296,  297,  298,  297, 1491,  299,  296,  296,  296, 1039,
      885, 1039, 1470,  296,  297,  298,  297,  296,  300,  296,
      296,  296, 1042,  945, 1042,  945,  296,  297,  298,  297,
      296,  299,  296,  296,  296,  545,  298,  545,  885,  546,
      567,  886, 1469,  296,  296,  296,  297,  298,  297, 1455,
      300,  296,  296,  296, 1032,  568, 1032,  296,  296,  297,
      298,  297,  296,  299,  296,  296,  296, 1436,  567,  886,
      296,  296,  297,  298,  297,  296,  300,  296,  296,  296,
      545,  298,  545,  568,  547,  887,  888, 1422,  296,  296,

      296,  297,  298,  297, 1398,  299,  296,  296,  296, 1035,
      889, 1035,  296,  296,  297,  298,  297,  296,  300,  296,
      296,  296, 1385,  887,  888,  296,  296,  297,  298,  297,
      296,  299,  296,  296,  296,  297,  298,  549,  889,  550,
      893,  894, 1381,  296,  296,  296,  297,  298,  297, 1352,
      300,  296,  296,  296, 1036,  905, 1036,  296,  296,  297,
      298,  297,  296,  299,  296,  296,  296, 1322,  893,  894,
      296,  296,  297,  298,  297,  296,  300,  296,  296,  296,
      297,  298,  549,  905,  551,  906,  912, 1314,  296,  296,
      296,  297,  298,  297, 1308,  299,  296,  296,  296,  913,

     1251,  914,  296,  296,  297,  298,  297,  296,  300,  296,
      296,  296, 1240,  906,  912,  296,  296,  297,  298,  297,
      296,  299,  296,  296,  296,  921,  922,  913,  594,  914,
      926,  927, 1202,  296,  296,  296,  297,  298,  297,  554,
      300,  296,  296,  296,  564,  595,  555,  296, 1199,  556,
      565, 1190,  296,  921,  922,  566,  594,  915,  926,  927,
      296,  867,  552,  867,  870,  868,  871,  554, 1037, 1189,
     1037,  928,  564,  595,  555,  929,  916,  556,  565,  296,
      297,  298,  297,  566,  299,  915,  907,  935,  907,  380,
      380,  380,  380,  380,  380,  380,  297,  298,  297,  928,

      300, 1167,  908,  929, 1162,  380,  380,  380,  380,  380,
      380,  380,  297,  298,  297,  935,  299, 1152, 1087,  936,
     1087,  381,  381,  381,  381,  381,  381,  381,  297,  298,
      297, 1038,  300, 1038, 1088,  937, 1138,  381,  381,  381,
      381,  381,  381,  381,  297,  298,  297,  936,  299, 1134,
     1089,  940, 1089,  382,  382,  382,  382,  382,  382,  382,
      297,  298,  297,  937,  300, 1071, 1090,  941, 1058,  382,
      382,  382,  382,  382,  382,  382,  297,  298,  297,  940,
      299, 1039, 1112, 1039, 1112,  383,  383,  383,  383,  383,
      383,  383,  297,  298,  297,  941,  300, 1042, 1113, 1042,

     1040,  383,  383,  383,  383,  383,  383,  383,  296,  297,
      298,  297,  296,  299,  296,  296,  296,  296, 1164, 1029,
     1164,  296,  297,  298,  297,  296,  299,  296,  296,  296,
     1165, 1192, 1165, 1192,  296,  297,  298,  297,  296,  300,
      296,  296,  296,  610,  610,  610,  610,  610,  610,  610,
     1028,  296,  296,  296,  297,  298,  297,  296,  300,  296,
      296,  296,  296, 1021, 1020,  296,  944,  946, 1013,  884,
      296,  611,  611,  611,  611,  611,  611,  611,  296,  612,
      612,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,  613,  613,  873,  944,  946, 1013,  296,  297,  298,

      297, 2345,  299,  386, 2345,  386,  387,  388,  388,  388,
      388,  388,  388,  388,  297,  298,  297, 2345,  300,  386,
     2345,  386,  387,  388,  388,  388,  388,  388,  388,  388,
      297,  298,  297, 1141,  299, 1141, 1143, 1014, 1143,  389,
      389,  389,  389,  389,  389,  389,  297,  298,  297, 1142,
      300, 2345, 1144, 1017, 2345,  389,  389,  389,  389,  389,
      389,  389,  297,  298,  297, 1014,  299, 2345, 1148, 1018,
     1148,  390,  390,  390,  390,  390,  390,  390,  297,  298,
      297, 1017,  300, 2345, 1149, 1019, 2345,  390,  390,  390,
      390,  390,  390,  390,  297,  298,  297, 1018,  299, 2345,

     1087, 1022, 1087,  391,  391,  391,  391,  391,  391,  391,
      297,  298,  297, 1019,  300, 2345, 1088, 1023, 2345,  391,
      391,  391,  391,  391,  391,  391,  297,  298,  297, 1022,
      299, 2345, 1089, 1024, 1089,  392,  392,  392,  392,  392,
      392,  392,  297,  298,  297, 1023,  300, 2345, 1090, 1025,
     2345,  392,  392,  392,  392,  392,  392,  392,  297,  298,
      297, 1024,  299, 2345, 1112, 1026, 1112,  393,  393,  393,
      393,  393,  393,  393,  297,  298,  297, 1025,  300, 2345,
     1113, 1027, 2345,  393,  393,  393,  393,  393,  393,  393,
      297,  298,  297, 1026,  299, 2345, 1193, 1030, 1193,  394,

      394,  394,  394,  394,  394,  394,  297,  298,  297, 1027,
      300, 2345, 1194, 1031, 2345,  394,  394,  394,  394,  394,
      394,  394,  297,  298,  297, 1030,  299, 2345, 1197, 1033,
     1197,  395,  395,  395,  395,  395,  395,  395,  297,  298,
      297, 1031,  300, 2345, 1198, 1034, 2345,  395,  395,  395,
      395,  395,  395,  395,  297,  298,  297, 1033,  299, 2345,
     1200, 1041, 1200,  396,  396,  396,  396,  396,  396,  396,
      297,  298,  297, 1034,  300, 2345, 1201, 1043, 2345,  396,
      396,  396,  396,  396,  396,  396,  297,  298,  297, 1041,
      299, 2345, 1210, 1044, 1210,  397,  397,  397,  397,  397,

      397,  397,  297,  298,  297, 1043,  300, 2345, 1211, 1045,
     2345,  397,  397,  397,  397,  397,  397,  397,  297,  298,
      297, 1044,  299,  398, 2345,  398,  399,  400,  400,  400,
      400,  400,  400,  400,  297,  298,  297, 1045,  300,  398,
     2345,  398,  399,  400,  400,  400,  400,  400,  400,  400,
      297,  298,  297, 2345,  299,  401, 2345,  401,  402,  403,
      403,  403,  403,  403,  403,  403,  297,  298,  297, 2345,
      300,  401, 2345,  401,  402,  403,  403,  403,  403,  403,
      403,  403,  297,  298,  297, 2345,  299,  404, 2345,  404,
      405,  406,  406,  406,  406,  406,  406,  406,  297,  298,

      297, 2345,  300,  404, 2345,  404,  405,  406,  406,  406,
      406,  406,  406,  406,  297,  298,  297, 2345,  299,  407,
     2345,  407,  408,  409,  409,  409,  409,  409,  409,  409,
      297,  298,  297, 2345,  300,  407, 2345,  407,  408,  409,
      409,  409,  409,  409,  409,  409,  297,  298,  297, 1213,
      299, 1213, 1215, 1046, 1215,  410,  410,  410,  410,  410,
      410,  410,  297,  298,  297, 1214,  300, 2345, 1216, 1047,
     2345,  410,  410,  410,  410,  410,  410,  410,  297,  298,
      297, 1046,  299, 2345, 1141, 1048, 1141,  411,  411,  411,
      411,  411,  411,  411,  297,  298,  297, 1047,  300, 2345,

     1142, 1049, 2345,  411,  411,  411,  411,  411,  411,  411,
      297,  298,  297, 1048,  299,  412, 2345,  412,  413,  414,
      414,  414,  414,  414,  414,  414,  297,  298,  297, 1049,
      300,  412, 2345,  412,  413,  414,  414,  414,  414,  414,
      414,  414,  297,  298,  297, 2345,  299,  415, 2345,  415,
      416,  417,  417,  417,  417,  417,  417,  417,  297,  298,
      297, 2345,  300,  415, 2345,  415,  416,  417,  417,  417,
      417,  417,  417,  417,  297,  298,  297, 2345,  299,  418,
     2345,  418,  419,  420,  420,  420,  420,  420,  420,  420,
      297,  298,  297, 2345,  300,  418, 2345,  418,  419,  420,

      420,  420,  420,  420,  420,  420,  297,  298,  297, 2345,
      299,  421, 2345,  421,  422,  423,  423,  423,  423,  423,
      423,  423,  297,  298,  297, 2345,  300,  421, 2345,  421,
      422,  423,  423,  423,  423,  423,  423,  423,  297,  298,
      297, 2345,  299,  424, 2345,  424,  425,  426,  426,  426,
      426,  426,  426,  426,  297,  298,  297, 2345,  300,  424,
     2345,  424,  425,  426,  426,  426,  426,  426,  426,  426,
      297,  298,  297, 2345,  299,  427, 2345,  427,  428,  429,
      429,  429,  429,  429,  429,  429,  297,  298,  297, 2345,
      300,  427, 2345,  427,  428,  429,  429,  429,  429,  429,

      429,  429,  297,  298,  297, 2345,  299,  430, 2345,  430,
      431,  432,  432,  432,  432,  432,  432,  432,  297,  298,
      297, 2345,  300,  430, 2345,  430,  431,  432,  432,  432,
      432,  432,  432,  432,  297,  298,  297, 2345,  299,  433,
     2345,  433,  434,  435,  435,  435,  435,  435,  435,  435,
      297,  298,  297, 2345,  300,  433, 2345,  433,  434,  435,
      435,  435,  435,  435,  435,  435,  297,  298,  297, 2345,
      299,  436, 2345,  436,  437,  438,  438,  438,  438,  438,
      438,  438,  297,  298,  297, 2345,  300,  436, 2345,  436,
      437,  438,  438,  438,  438,  438,  438,  438,  297,  298,

      297, 2345,  299,  439, 2345,  439,  440,  441,  441,  441,
      441,  441,  441,  441,  297,  298,  297, 2345,  300,  439,
     2345,  439,  440,  441,  441,  441,  441,  441,  441,  441,
      297,  298,  297, 1227,  299, 1227, 1143, 1053, 1143,  442,
      442,  442,  442,  442,  442,  442,  297,  298,  297, 1228,
      300, 1228, 1144, 1054, 2345,  442,  442,  442,  442,  442,
      442,  442,  297,  298,  297, 1053,  299, 2345, 1148, 1055,
     1148,  443,  443,  443,  443,  443,  443,  443,  297,  298,
      297, 1054,  300, 2345, 1149, 1056, 2345,  443,  443,  443,
      443,  443,  443,  443,  297,  298,  297, 1055,  299, 2345,

     1232, 1057, 1232,  444,  444,  444,  444,  444,  444,  444,
      297,  298,  297, 1056,  300, 2345, 1164, 1059, 1164,  444,
      444,  444,  444,  444,  444,  444,  297,  298,  297, 1057,
      299, 2345, 1165, 1060, 1165,  445,  445,  445,  445,  445,
      445,  445,  297,  298,  297, 1059,  300, 2345, 1252, 1061,
     1252,  445,  445,  445,  445,  445,  445,  445,  297,  298,
      297, 1060,  299,  446, 1253,  446,  447,  448,  448,  448,
      448,  448,  448,  448,  297,  298,  297, 1061,  300,  446,
     2345,  446,  447,  448,  448,  448,  448,  448,  448,  448,
      296,  297,  298,  297, 1062,  299,  296,  296,  296, 1063,

     1266, 2345, 1266,  296,  297,  298,  297,  296,  300,  296,
      296,  296,  614,  614,  614,  614,  614,  614,  614, 1255,
      296, 1255, 1062,  296,  297,  298,  297, 1063,  299,  296,
      296,  296, 2345, 2345,  296, 1256, 1192, 1277, 1192, 1277,
      296, 1280, 1064, 1280, 1282, 2345, 1282,  296,  297,  298,
      297, 2345,  299,  450, 2345,  450,  451,  452,  452,  452,
      452,  452,  452,  452,  297,  298,  297,  296,  300,  450,
     1064,  450,  451,  452,  452,  452,  452,  452,  452,  452,
      297,  298,  297, 1186,  299, 1186, 1275, 1065, 1275,  453,
      453,  453,  453,  453,  453,  453,  297,  298,  297, 1187,

      300, 2345, 1276, 1066, 2345,  453,  453,  453,  453,  453,
      453,  453,  297,  298,  297, 1065,  299,  454, 1193,  454,
     1193,  455,  455,  455,  455,  455,  455,  455,  297,  298,
      297, 1066,  300,  454, 1194,  454, 2345,  455,  455,  455,
      455,  455,  455,  455,  297,  298,  297, 2345,  299,  456,
     1197,  456, 1197,  457,  457,  457,  457,  457,  457,  457,
      297,  298,  297, 2345,  300,  456, 1198,  456, 2345,  457,
      457,  457,  457,  457,  457,  457,  297,  298,  297, 2345,
      299,  458, 1200,  458, 1200,  459,  459,  459,  459,  459,
      459,  459,  297,  298,  297, 2345,  300,  458, 1201,  458,

     2345,  459,  459,  459,  459,  459,  459,  459,  297,  298,
      297, 2345,  299,  460, 1210,  460, 1210,  461,  461,  461,
      461,  461,  461,  461,  297,  298,  297, 2345,  300,  460,
     1211,  460, 2345,  461,  461,  461,  461,  461,  461,  461,
      297,  298,  297, 1291,  299, 1291, 1213, 1067, 1213,  462,
      462,  462,  462,  462,  462,  462,  297,  298,  297, 1293,
      300, 1293, 1214, 1068, 2345,  462,  462,  462,  462,  462,
      462,  462,  297,  298,  297, 1067,  299, 2345, 1215, 1069,
     1215,  463,  463,  463,  463,  463,  463,  463,  297,  298,
      297, 1068,  300, 2345, 1216, 1070, 2345,  463,  463,  463,

      463,  463,  463,  463,  297,  298,  297, 1069,  299, 2345,
     1294, 1072, 1294,  464,  464,  464,  464,  464,  464,  464,
      297,  298,  297, 1070,  300, 2345, 1305, 1073, 1305,  464,
      464,  464,  464,  464,  464,  464,  297,  298,  297, 1072,
      299, 2345, 1306, 1074, 2345,  465,  465,  465,  465,  465,
      465,  465,  297,  298,  297, 1073,  300, 2345, 1227, 1077,
     1227,  465,  465,  465,  465,  465,  465,  465,  297,  298,
      297, 1074,  299, 2345, 1228, 1078, 1228,  466,  466,  466,
      466,  466,  466,  466,  297,  298,  297, 1077,  300, 2345,
     1232, 1079, 1232,  466,  466,  466,  466,  466,  466,  466,

      297,  298,  297, 1078,  299, 2345, 1252, 1080, 1252,  467,
      467,  467,  467,  467,  467,  467,  297,  298,  297, 1079,
      300, 2345, 1253, 1081, 2345,  467,  467,  467,  467,  467,
      467,  467,  297,  298,  297, 1080,  299, 2345, 1338, 1082,
     1338,  468,  468,  468,  468,  468,  468,  468,  297,  298,
      297, 1081,  300, 2345, 1255, 1085, 1255,  468,  468,  468,
      468,  468,  468,  468,  297,  298,  297, 1082,  299, 2345,
     1256, 1086, 2345,  469,  469,  469,  469,  469,  469,  469,
      297,  298,  297, 1085,  300, 2345, 1340, 1091, 1340,  469,
      469,  469,  469,  469,  469,  469,  297,  298,  297, 1086,

      299, 1266, 2345, 1266, 1092,  470,  470,  470,  470,  470,
      470,  470,  297,  298,  297, 1091,  300, 1341, 1342, 1343,
     1344,  470,  470,  470,  470,  470,  470,  470,  296,  297,
      298,  297, 1092,  300,  296,  296,  296, 1275, 1365, 1275,
     1365,  296,  297,  298,  297,  296,  299,  296,  296,  296,
     1277, 2345, 1277, 1276,  296,  297,  298,  297,  296,  300,
      296,  296,  296,  615,  615,  615,  615,  615,  615,  615,
     2345,  296,  296,  296,  297,  298,  297, 2345,  299,  296,
      296,  296, 1280, 2345, 1280,  296,  296,  297,  298,  297,
      296,  300,  296,  296,  296, 1282, 2345, 1282,  296,  296,

      297,  298,  297,  296,  299,  296,  296,  296,  616,  616,
      616,  616,  616,  616,  616, 2345,  296,  296,  296,  297,
      298,  297, 2345,  300,  296,  296,  296, 1291, 2345, 1291,
      296,  296,  297,  298,  297,  296,  299,  296,  296,  296,
     1093, 2345, 2345,  296,  296,  297,  298,  297,  296,  300,
      296,  296,  296,  617,  618,  618,  618,  618,  618,  618,
      618,  296,  296, 2345,  296,  297,  298,  297, 1093,  299,
      296,  296,  296, 2345, 1293,  296, 1293, 1294, 1366, 1294,
     1366,  296, 1094, 1098,  938, 1075, 2345, 2345,  296,  297,
      298,  297, 1076,  299, 1367, 1390,  939, 1390,  476,  476,

      476,  476,  476,  476,  476,  297,  298,  297,  296,  300,
     1094, 1098,  938, 1075,  476,  476,  476,  476,  476,  476,
      476,  297,  298,  297,  939,  299, 2345, 1368, 1099, 1368,
      477,  477,  477,  477,  477,  477,  477,  297,  298,  297,
     1338,  300, 1338, 1369, 1100, 2345,  477,  477,  477,  477,
      477,  477,  477,  297,  298,  297, 1099,  299, 2345, 1305,
     1101, 1305,  478,  478,  478,  478,  478,  478,  478,  297,
      298,  297, 1100,  300, 2345, 1306, 1102, 2345,  478,  478,
      478,  478,  478,  478,  478,  297,  298,  297, 1101,  299,
      479, 2345,  479,  480,  481,  481,  481,  481,  481,  481,

      481,  297,  298,  297, 1102,  300,  479, 2345,  479,  480,
      481,  481,  481,  481,  481,  481,  481,  297,  298,  297,
     1393,  299, 1393, 1413, 1103, 1413,  482,  482,  482,  482,
      482,  482,  482,  297,  298,  297, 1394,  300, 2345, 1414,
     1106, 2345,  482,  482,  482,  482,  482,  482,  482,  297,
      298,  297, 1103,  299, 2345, 1415, 1107, 1415,  483,  483,
      483,  483,  483,  483,  483,  297,  298,  297, 1106,  300,
     2345, 1416, 1108, 2345,  483,  483,  483,  483,  483,  483,
      483,  297,  298,  297, 1107,  299, 1417, 1419, 1417, 1419,
      484,  484,  484,  484,  484,  484,  484,  297,  298,  297,

     1108,  300, 1418, 1420, 2345, 2345,  484,  484,  484,  484,
      484,  484,  484,  296,  297,  298,  297,  296,  299,  296,
      296,  296,  296, 1340, 2345, 1340,  296,  297,  298,  297,
      296,  300,  296,  296,  296, 1448, 1365, 1448, 1365,  296,
      297,  298,  297,  296,  299,  296,  296,  296,  617,  618,
      618,  618,  618,  618,  618,  618,  296,  296,  296,  297,
      298,  297,  296,  300,  296,  296,  296,  296, 2345, 1109,
      296, 1110, 1111, 1114, 2345,  296,  649,  649,  649,  649,
      649,  649,  649,  296,  619,  619,  619,  619,  619,  619,
      619, 2345, 2345, 1425, 1115, 1425,  620, 1109, 2345, 1110,

     1111, 1114,  296,  297,  298,  297, 1465,  299, 1465, 1426,
      487, 2345,  488,  488,  488,  488,  488,  488,  488,  297,
      298,  297, 1115,  300,  620, 1466,  487, 1466,  488,  488,
      488,  488,  488,  488,  488,  296,  297,  298,  297,  296,
      299,  296,  296,  296,  296, 1390, 2345, 1390,  296,  297,
      298,  297,  296,  300,  296,  296,  296, 1494, 1522, 1494,
     1522,  296,  297,  298,  297,  296,  299,  296,  296,  296,
      621,  622,  622,  622,  622,  622,  622,  622,  296,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
     2345, 2345,  296,  296,  297,  298,  297,  296,  300,  296,

      296,  296, 1523, 2345, 1523,  296,  296,  297,  298,  297,
      296,  299,  296,  296,  296,  621,  622,  622,  622,  622,
      622,  622,  622,  296,  296,  296,  297,  298,  297,  296,
      299,  296,  296,  296,  296, 2345, 2345,  296,  296,  297,
      298,  297,  296,  300,  296,  296,  296, 1524, 2345, 1524,
      296,  296,  297,  298,  297,  296,  299,  296,  296,  296,
      625,  626,  626,  626,  626,  626,  626,  626,  296,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
     2345,  942,  296, 1116,  597, 1117, 1525,  296, 1525, 1427,
      943, 1427,  598,  599,  600,  296,  623,  623,  623,  623,

      623,  623,  623, 2345, 2345, 1428, 1118, 2345,  624,  942,
     1119, 1116,  597, 1117,  296,  297,  298,  297,  943,  299,
      598,  599,  600, 2345,  491,  491,  491,  491,  491,  491,
      491,  297,  298,  297, 1118,  300,  624, 1531, 1119, 1531,
      491,  491,  491,  491,  491,  491,  491,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296, 2345, 2345, 1120,
      296,  297,  298,  297,  296,  300,  296,  296,  296, 1532,
     1533, 1532, 1533, 2345, 1534,  558, 1534,  296, 1104, 1541,
      917, 1541,  559,  560,  918,  919,  920, 1120,  561, 1121,
     1105,  296,  296,  297,  298,  297,  296,  300,  296,  296,

      296,  296,  580,  558,  296, 1122, 1104,  581,  917,  296,
      559,  560,  918,  919,  920, 2345,  561, 1121, 1105, 1123,
      933, 1015,  582, 1124, 1125, 1126, 2345,  583,  934, 1016,
      584, 1127, 1542, 1122, 1542, 2345,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296, 1123,  933, 1015,
      582, 1124, 1125, 1126,  296,  583,  934, 1016,  584, 1127,
      627,  627,  627,  627,  627,  627,  627, 1543, 1544, 1543,
     1544, 2345,  628,  625,  626,  626,  626,  626,  626,  626,
      626,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  650,  650,  650,  650,  650,  650,  650,  296,

      628,  629,  630,  630,  630,  630,  630,  630,  630,  631,
      631,  631,  631,  631,  631,  631, 2345, 1128, 1129, 1130,
     1131,  632, 1546, 1448, 1546, 1448,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  651,  651,  651,
      651,  651,  651,  651,  296, 1128, 1129, 1130, 1131,  632,
      629,  630,  630,  630,  630,  630,  630,  630,  633,  634,
      634,  634,  634,  634,  634,  634, 1465, 2345, 1465, 1132,
     1133,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  652,  652,  652,  652,  652,  652,  652,  296,
      635,  635,  635,  635,  635,  635,  635, 1132, 1133, 2345,

     1135, 1137,  636,  633,  634,  634,  634,  634,  634,  634,
      634, 1466, 1571, 1466, 1571, 2345,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296, 1136, 1135, 1137,
      636, 1139, 1140, 2345,  296,  637,  638,  638,  638,  638,
      638,  638,  638,  639,  639,  639,  639,  639,  639,  639,
     2345, 2345, 1145, 1146, 1147,  640, 1572, 2345, 1572, 1139,
     1140,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  653,  653,  653,  653,  653,  653,  653,  296,
     1145, 1146, 1147,  640,  637,  638,  638,  638,  638,  638,
      638,  638,  641,  642,  642,  642,  642,  642,  642,  642,

     1573, 1574, 1573, 1574, 1150, 1151,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  654,  654,  654,
      654,  654,  654,  654,  296,  643,  643,  643,  643,  643,
      643,  643, 1150, 1151, 1153, 1154, 1155,  644,  641,  642,
      642,  642,  642,  642,  642,  642, 1576, 1494, 1576, 1494,
     2345,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296, 1153, 1154, 1155,  644, 1156, 1157, 2345,  296,
      645,  646,  646,  646,  646,  646,  646,  646,  647,  647,
      647,  647,  647,  647,  647, 2345, 2345, 1163, 1166, 1168,
      648, 1597, 2345, 1597, 1156, 1157,  296,  296,  297,  298,

      297,  296,  299,  296,  296,  296,  296,  656,  656,  656,
      656,  656,  656,  656,  296, 1163, 1166, 1168,  648,  645,
      646,  646,  646,  646,  646,  646,  646,  655, 1605,  655,
     1605,  654,  654,  654,  654,  654,  654,  654, 1609, 2345,
     1609,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  681,  681,  681,  681,  681,  681,  681,  296,
      657,  658,  658,  658,  658,  658,  658,  658,  659,  659,
      659,  659,  659,  659,  659, 2345, 2345, 1169, 1170, 1171,
      660, 1610, 1611, 1610, 1611, 2345,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  682,  682,  682,

      682,  682,  682,  682,  296, 1169, 1170, 1171,  660,  657,
      658,  658,  658,  658,  658,  658,  658,  661,  662,  662,
      662,  662,  662,  662,  662, 1172, 1522, 1523, 1522, 1523,
     2345,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  663,  663,  663,  663,  663,  663,  663,  296,
     2345, 2345, 1173, 1172,  664,  661,  662,  662,  662,  662,
      662,  662,  662,  665,  666,  666,  666,  666,  666,  666,
      666, 1174, 1175, 1176, 2345, 2345,  296,  297,  298,  297,
     1173,  299,  664, 1524, 1177, 1524,  499,  499,  499,  499,
      499,  499,  499,  297,  298,  297, 1525,  300, 1525, 1174,

     1175, 1176,  499,  499,  499,  499,  499,  499,  499,  297,
      298,  297, 1177,  299,  500, 2345,  500,  501,  502,  502,
      502,  502,  502,  502,  502,  297,  298,  297, 2345,  300,
      500, 2345,  500,  501,  502,  502,  502,  502,  502,  502,
      502,  297,  298,  297, 1429,  299, 1429, 1431, 1181, 1431,
      503,  503,  503,  503,  503,  503,  503,  297,  298,  297,
     1430,  300, 2345, 1432, 1184, 2345,  503,  503,  503,  503,
      503,  503,  503,  297,  298,  297, 1181,  299,  504, 1437,
      504, 1437,  505,  505,  505,  505,  505,  505,  505,  297,
      298,  297, 1184,  300,  504, 1438,  504, 2345,  505,  505,

      505,  505,  505,  505,  505,  297,  298,  297, 2345,  299,
      506, 1439,  506, 1439,  507,  507,  507,  507,  507,  507,
      507,  297,  298,  297, 2345,  300,  506, 1440,  506, 2345,
      507,  507,  507,  507,  507,  507,  507,  297,  298,  297,
     2345,  299,  508, 1441,  508, 1441,  509,  509,  509,  509,
      509,  509,  509,  297,  298,  297, 2345,  300,  508, 1442,
      508, 2345,  509,  509,  509,  509,  509,  509,  509,  297,
      298,  297, 2345,  299,  510, 1443,  510, 1443,  511,  511,
      511,  511,  511,  511,  511,  297,  298,  297, 2345,  300,
      510, 1444,  510, 2345,  511,  511,  511,  511,  511,  511,

      511,  297,  298,  297, 2345,  299,  512, 1346,  512, 1346,
      513,  513,  513,  513,  513,  513,  513,  297,  298,  297,
     2345,  300,  512, 1348,  512, 2345,  513,  513,  513,  513,
      513,  513,  513,  297,  298,  297, 2345,  299,  514, 1446,
      514, 1446,  515,  515,  515,  515,  515,  515,  515,  297,
      298,  297, 2345,  300,  514, 1447,  514, 2345,  515,  515,
      515,  515,  515,  515,  515,  297,  298,  297, 2345,  299,
      516, 1366,  516, 1366,  517,  517,  517,  517,  517,  517,
      517,  297,  298,  297, 2345,  300,  516, 1367,  516, 2345,
      517,  517,  517,  517,  517,  517,  517,  297,  298,  297,

     2345,  299,  518, 1368,  518, 1368,  519,  519,  519,  519,
      519,  519,  519,  297,  298,  297, 2345,  300,  518, 1369,
      518, 2345,  519,  519,  519,  519,  519,  519,  519,  297,
      298,  297, 2345,  299,  520, 1472,  520, 1472,  521,  521,
      521,  521,  521,  521,  521,  297,  298,  297, 2345,  300,
      520, 1473,  520, 2345,  521,  521,  521,  521,  521,  521,
      521,  297,  298,  297, 2345,  299,  522, 1474,  522, 1474,
      523,  523,  523,  523,  523,  523,  523,  297,  298,  297,
     2345,  300,  522, 1475,  522, 2345,  523,  523,  523,  523,
      523,  523,  523,  297,  298,  297, 2345,  299,  524, 1476,

      524, 1476,  525,  525,  525,  525,  525,  525,  525,  297,
      298,  297, 2345,  300,  524, 1477,  524, 2345,  525,  525,
      525,  525,  525,  525,  525,  296,  297,  298,  297,  296,
      299,  296,  296,  296,  296,  683,  683,  683,  683,  683,
      683,  683,  296,  667,  667,  667,  667,  667,  667,  667,
     2345, 1478, 1185, 1478, 2345,  668,  665,  666,  666,  666,
      666,  666,  666,  666, 2345, 2345, 1186, 1479, 1186,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
     1185, 1178, 1187,  668, 1179, 1191, 2345,  296,  669,  670,
      670,  670,  670,  670,  670,  670,  671,  671,  671,  671,

      671,  671,  671, 1180, 2345, 1195, 1196, 1203,  672, 1178,
     1188, 2345, 1179, 1191,  296,  296,  297,  298,  297,  296,
      299,  296,  296,  296,  296,  684,  684,  684,  684,  684,
      684,  684,  296, 1195, 1196, 1203,  672,  669,  670,  670,
      670,  670,  670,  670,  670,  687,  688,  688,  688,  688,
      688,  688,  688, 1615, 1531, 1615, 1531, 1204, 1205,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
      691,  691,  691,  691,  691,  691,  691,  296,  689,  689,
      689,  689,  689,  689,  689, 1204, 1205, 1206, 1207, 1208,
      690,  687,  688,  688,  688,  688,  688,  688,  688, 1532,

     1533, 1532, 1533, 2345,  296,  296,  297,  298,  297,  296,
      299,  296,  296,  296,  296, 1206, 1207, 1208,  690, 1209,
     1212, 2345,  296,  692,  692,  692,  692,  692,  692,  692,
      693,  693,  693,  693,  693,  693,  693,  694,  694,  694,
      694,  694,  694,  694, 1534, 2345, 1534, 1209, 1212,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
      695,  695,  695,  695,  695,  695,  695,  296,  696,  696,
      696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
      697,  697,  698,  698,  698,  698,  698,  698,  698, 1618,
     1619, 1618, 1619, 2345,  296,  296,  297,  298,  297,  296,

      299,  296,  296,  296,  296,  699,  699,  699,  699,  699,
      699,  699,  296,  700,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702, 2345, 2345,
     1217, 1218, 1219,  703, 1541, 1542, 1541, 1542, 2345,  296,
      296,  297,  298,  297,  296,  300,  296,  296,  296,  296,
      716,  716,  716,  716,  716,  716,  716,  296, 1217, 1218,
     1219,  703,  700,  701,  701,  701,  701,  701,  701,  701,
      704,  705,  705,  705,  705,  705,  705,  705, 1220, 1221,
     1222, 1225, 2345, 2345,  296,  297,  298,  297, 1481,  299,
     1481, 1543, 2345, 1543,  530,  530,  530,  530,  530,  530,

      530,  297,  298,  297, 1482,  300, 1220, 1221, 1222, 1225,
      530,  530,  530,  530,  530,  530,  530,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  717,  717,  717,
      717,  717,  717,  717,  296,  706,  706,  706,  706,  706,
      706,  706, 2345, 1393, 1226, 1393, 1229,  707,  704,  705,
      705,  705,  705,  705,  705,  705, 1544, 2345, 1544, 1394,
     2345,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296, 1226, 1223, 1229,  707, 1224, 1230, 2345,  296,
      708,  709,  709,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  710, 2345, 2345, 1231, 1233, 1234,

      711, 1223, 2345, 2345, 1224, 1230,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  758,  758,  758,
      758,  758,  758,  758,  296, 1231, 1233, 1234,  711,  708,
      709,  709,  709,  709,  709,  709,  709,  712,  713,  713,
      713,  713,  713,  713,  713, 1546, 1627, 1546, 1627, 1235,
     1236,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  759,  759,  759,  759,  759,  759,  759,  296,
      714,  714,  714,  714,  714,  714,  714, 1235, 1236, 1237,
     1238, 1239,  715,  712,  713,  713,  713,  713,  713,  713,
      713, 1639, 1571, 1639, 1571, 2345,  296,  296,  297,  298,

      297,  296,  299,  296,  296,  296,  296, 1237, 1238, 1239,
      715, 1243, 1244, 2345,  296,  718,  719,  719,  719,  719,
      719,  719,  719,  720,  720,  720,  720,  720,  720,  720,
     2345, 2345, 1245, 1246, 1247,  721, 1572, 2345, 1572, 1243,
     1244,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296,  760,  760,  760,  760,  760,  760,  760,  296,
     1245, 1246, 1247,  721,  718,  719,  719,  719,  719,  719,
      719,  719,  722,  723,  723,  723,  723,  723,  723,  723,
     1573, 1574, 1573, 1574, 1248, 1249,  296,  296,  297,  298,
      297,  296,  299,  296,  296,  296,  296,  761,  761,  761,

      761,  761,  761,  761,  296,  724,  724,  724,  724,  724,
      724,  724, 1248, 1249, 1250, 1254, 1257,  725,  722,  723,
      723,  723,  723,  723,  723,  723, 1576, 1664, 1576, 1664,
     2345,  296,  296,  297,  298,  297,  296,  300,  296,  296,
      296,  296, 1250, 1254, 1257,  725, 1258, 1259, 2345,  296,
      726,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  728,  728, 2345, 2345, 1511, 1260, 1511,
      729, 1182, 1261, 1262, 1258, 1259,  296,  297,  298,  297,
     1597,  299, 1597, 1512, 1183, 2345,  535,  535,  535,  535,
      535,  535,  535,  297,  298,  297, 1260,  300,  729, 1182,

     1261, 1262,  535,  535,  535,  535,  535,  535,  535,  297,
      298,  297, 1183,  299, 2345, 1516, 1263, 1516,  536,  536,
      536,  536,  536,  536,  536,  297,  298,  297, 1605,  300,
     1605, 1517, 1264, 2345,  536,  536,  536,  536,  536,  536,
      536,  297,  298,  297, 1263,  299, 2345, 1518, 1265, 1518,
      539,  539,  539,  539,  539,  539,  539,  297,  298,  297,
     1264,  300, 2345, 1519, 1267, 2345,  539,  539,  539,  539,
      539,  539,  539,  297,  298,  297, 1265,  299, 2345, 1520,
     1278, 1520,  540,  540,  540,  540,  540,  540,  540,  297,
      298,  297, 1267,  300, 2345, 1521, 1279, 2345,  540,  540,

      540,  540,  540,  540,  540,  297,  298,  297, 1278,  299,
     1281, 1413, 2345, 1413,  541,  541,  541,  541,  541,  541,
      541,  297,  298,  297, 1279,  300, 1609, 1414, 1609, 2345,
      541,  541,  541,  541,  541,  541,  541,  572, 1281,  572,
      726,  727,  727,  727,  727,  727,  727,  727, 1283, 2345,
     2345,  573, 1268,  574,  575,  730,  731,  731,  731,  731,
      731,  731,  731, 1269, 1284, 1270, 1271, 1272,  576,  732,
      732,  732,  732,  732,  732,  732, 1283,  577,  578,  579,
     1268,  733,  575,  730,  731,  731,  731,  731,  731,  731,
      731, 1269, 1284, 1270, 1271, 1272,  576,  734,  735,  735,

      735,  735,  735,  735,  735,  577,  578,  579,  585,  733,
     1285,  930,  923, 1095,  586, 1286, 1096,  587, 1050,  924,
      588,  925,  931,  589,  590, 1051,  591, 2345, 1287,  932,
     1097, 2345, 1052,  592, 1288, 2345,  585, 1289, 1285,  930,
      923, 1095,  586, 1286, 1096,  587, 1050,  924,  588,  925,
      931,  589,  590, 1051,  591,  601, 1287,  932, 1097,  602,
     1052, 1241, 1288,  603, 1273, 1289, 1290,  604, 1242,  605,
     1292, 1274, 1295, 1296, 1297,  606,  736,  736,  736,  736,
      736,  736,  736,  601, 1298, 1299, 1300,  602,  737, 1241,
     2345,  603, 1273, 2345, 1290,  604, 1242,  605, 1292, 1274,

     1295, 1296, 1297,  606,  734,  735,  735,  735,  735,  735,
      735,  735, 1298, 1299, 1300, 2345,  737,  738,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      740,  740, 2345, 1301, 1304, 1307, 1309,  741,  738,  739,
      739,  739,  739,  739,  739,  739,  742,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744, 1301, 1304, 1307, 1309,  741,  745,  742,  743,  743,
      743,  743,  743,  743,  743,  746,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
     2345, 1310, 1311, 1312,  745,  749,  746,  747,  747,  747,

      747,  747,  747,  747,  750,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752, 1310,
     1311, 1312, 1313,  749,  753,  750,  751,  751,  751,  751,
      751,  751,  751,  754,  755,  755,  755,  755,  755,  755,
      755,  756,  756,  756,  756,  756,  756,  756, 2345, 1317,
     1313, 1320,  753,  757,  754,  755,  755,  755,  755,  755,
      755,  755,  762,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764, 1317, 2345, 1320,
     1321,  757,  765,  762,  763,  763,  763,  763,  763,  763,
      763,  767,  768,  768,  768,  768,  768,  768,  768,  769,

      769,  769,  769,  769,  769,  769, 1318, 1327, 1321, 1319,
      765,  770,  767,  768,  768,  768,  768,  768,  768,  768,
      771,  771,  771,  771,  771,  771,  771,  772,  772,  772,
      772,  772,  772,  772, 1318, 1327,  773, 1319,  773,  770,
      772,  772,  772,  772,  772,  772,  772,  774,  774,  774,
      774,  774,  774,  774,  775, 1610,  775, 1610,  774,  774,
      774,  774,  774,  774,  774,  776,  776,  776,  776,  776,
      776,  776,  777, 1611,  777, 1611,  776,  776,  776,  776,
      776,  776,  776,  778,  778,  778,  778,  778,  778,  778,
      779, 1615,  779, 1615,  778,  778,  778,  778,  778,  778,

      778,  780,  780,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  783,  783,  784,
      784,  784,  784,  784,  784,  784,  785,  785,  785,  785,
      785,  785,  785,  786,  786,  786,  786,  786,  786,  786,
      787,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  794,  794,  794,  794,  794,  794,
      794,  795,  795,  795,  795,  795,  795,  795,  796,  796,
      796,  796,  796,  796,  796,  797,  798,  798,  798,  798,
      798,  798,  798,  799,  799,  799,  799,  799,  799,  799,

     1328, 1329, 1330, 1335, 1339,  800,  797,  798,  798,  798,
      798,  798,  798,  798,  801,  801,  801,  801,  801,  801,
      801,  802,  802,  802,  802,  802,  802,  802, 1328, 1329,
     1330, 1335, 1339,  800,  803,  803,  803,  803,  803,  803,
      803,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      807,  807,  807,  807,  807,  810,  810,  810,  810,  810,
      810,  810,  818,  818,  818,  818,  818,  818,  818,  819,
      820,  820,  820,  820,  820,  820,  820,  821,  821,  821,
      821,  821,  821,  821, 1345, 1350, 1678, 2345, 1678,  822,
      819,  820,  820,  820,  820,  820,  820,  820,  823,  823,

      823,  823,  823,  823,  823,  824,  824,  824,  824,  824,
      824,  824, 1345, 1350,  825,  826,  825,  822,  824,  824,
      824,  824,  824,  824,  824,  827,  827,  827,  827,  827,
      827,  827,  828, 1618,  828, 1618,  827,  827,  827,  827,
      827,  827,  827,  829,  829,  829,  829,  829,  829,  829,
      830, 1619,  830, 1619,  829,  829,  829,  829,  829,  829,
      829,  831,  831,  831,  831,  831,  831,  831,  832, 1627,
      832, 1627,  831,  831,  831,  831,  831,  831,  831,  833,
      833,  833,  833,  833,  833,  833,  834, 1639,  834, 1639,
      833,  833,  833,  833,  833,  833,  833,  835,  835,  835,

      835,  835,  835,  835,  836, 1702,  836, 1702,  835,  835,
      835,  835,  835,  835,  835,  837,  837,  837,  837,  837,
      837,  837,  838, 1664,  838, 1664,  837,  837,  837,  837,
      837,  837,  837,  839,  839,  839,  839,  839,  839,  839,
      840,  841,  840, 2345,  839,  839,  839,  839,  839,  839,
      839,  842,  842,  842,  842,  842,  842,  842,  843, 1678,
      843, 1678,  842,  842,  842,  842,  842,  842,  842,  844,
      844,  844,  844,  844,  844,  844,  845, 1770,  845, 1770,
      844,  844,  844,  844,  844,  844,  844,  846,  846,  846,
      846,  846,  846,  846,  847, 1702,  847, 1702,  846,  846,

      846,  846,  846,  846,  846,  852,  852,  852,  852,  852,
      852,  852,  857,  857,  857,  857,  857,  857,  857,  858,
      858,  858,  858,  858,  858,  858,  861,  861,  861,  861,
      861,  861,  861,  862,  862,  862,  862,  862,  862,  862,
      863,  863,  863,  863,  863,  863,  863,  907, 2345,  907,
      610,  610,  610,  610,  610,  610,  610, 1775, 1777, 1775,
     1777, 2345, 1351,  908, 1353,  909, 1354,  910,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  911,  613,  613,  613,  613,  613,  613,  613,
     1351, 2345, 1353,  909, 1354,  910,  614,  614,  614,  614,

      614,  614,  614,  615,  615,  615,  615,  615,  615,  615,
      911,  616,  616,  616,  616,  616,  616,  616,  619,  619,
      619,  619,  619,  619,  619, 1355, 1356, 1784, 1315, 1784,
      620,  617,  618,  618,  618,  618,  618,  618,  618,  619,
      619,  619,  619,  619,  619,  619, 1359, 1316, 1360, 1361,
     1785,  620, 1785, 1355, 1356,  947, 1315,  947,  620,  948,
      948,  948,  948,  948,  948,  948,  623,  623,  623,  623,
      623,  623,  623, 1362, 1359, 2345, 1360, 1361,  624,  620,
      621,  622,  622,  622,  622,  622,  622,  622,  623,  623,
      623,  623,  623,  623,  623, 1363, 1364, 1370, 2345, 1371,

      624, 1362, 1788,  949, 1788,  949,  624,  950,  950,  950,
      950,  950,  950,  950,  627,  627,  627,  627,  627,  627,
      627, 2345, 1372, 1363, 1364, 1370,  628, 1371,  624,  625,
      626,  626,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  627,  627, 1373, 1374, 2345, 1375, 1376,  628,
     1372,  951, 2345,  951,  628,  952,  952,  952,  952,  952,
      952,  952,  631,  631,  631,  631,  631,  631,  631, 1377,
     2345, 2345, 1373, 1374,  632, 1375, 1376,  628,  629,  630,
      630,  630,  630,  630,  630,  630,  631,  631,  631,  631,
      631,  631,  631, 1378, 2345, 1379, 1380, 1377,  632,  953,

     2345,  953,  632,  954,  954,  954,  954,  954,  954,  954,
      635,  635,  635,  635,  635,  635,  635, 1382, 1383, 2345,
     1384, 1378,  636, 1379, 1380, 2345,  632,  633,  634,  634,
      634,  634,  634,  634,  634,  635,  635,  635,  635,  635,
      635,  635, 1386, 1387, 2345, 1382, 1383,  636, 1384,  955,
      636,  955, 2345,  956,  956,  956,  956,  956,  956,  956,
      639,  639,  639,  639,  639,  639,  639, 1388, 2345, 2345,
     1386, 1387,  640, 2345, 2345,  636,  637,  638,  638,  638,
      638,  638,  638,  638,  639,  639,  639,  639,  639,  639,
      639, 1389, 2345, 1391, 1392, 1388,  640,  957, 2345,  957,

      640,  958,  958,  958,  958,  958,  958,  958,  643,  643,
      643,  643,  643,  643,  643, 1395, 1396, 2345, 1397, 1389,
      644, 1391, 1392, 2345,  640,  641,  642,  642,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
     1399, 1400, 2345, 1395, 1396,  644, 1397,  959,  644,  959,
     2345,  960,  960,  960,  960,  960,  960,  960,  647,  647,
      647,  647,  647,  647,  647, 1406, 2345, 2345, 1399, 1400,
      648, 2345, 2345,  644,  645,  646,  646,  646,  646,  646,
      646,  646,  647,  647,  647,  647,  647,  647,  647, 1806,
     2345, 1806, 1407, 1406,  648,  961, 2345,  961,  648,  962,

      962,  962,  962,  962,  962,  962,  649,  649,  649,  649,
      649,  649,  649,  650,  650,  650,  650,  650,  650,  650,
     1407, 2345,  648,  651,  651,  651,  651,  651,  651,  651,
      652,  652,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  653,  653,  655, 1817,  655, 1817,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  656,  656,  656,  656,  656,  656,  656,  659,
      659,  659,  659,  659,  659,  659, 1410, 1411, 1820, 1412,
     1820,  660,  657,  658,  658,  658,  658,  658,  658,  658,
      659,  659,  659,  659,  659,  659,  659, 1421, 1423, 1424,

     1433, 1830,  660, 1830, 1410, 1411,  963, 1412,  963,  660,
      964,  964,  964,  964,  964,  964,  964,  663,  663,  663,
      663,  663,  663,  663, 1434, 1421, 1423, 1424, 1433,  664,
      660,  661,  662,  662,  662,  662,  662,  662,  662,  663,
      663,  663,  663,  663,  663,  663, 1435, 1445, 1449, 2345,
     1450,  664, 1434, 1770,  965, 1770,  965,  664,  966,  966,
      966,  966,  966,  966,  966,  667,  667,  667,  667,  667,
      667,  667, 2345, 1451, 1435, 1445, 1449,  668, 1450,  664,
      665,  666,  666,  666,  666,  666,  666,  666,  667,  667,
      667,  667,  667,  667,  667, 1452, 1453, 2345, 1454, 1456,

      668, 1451,  967, 2345,  967,  668,  968,  968,  968,  968,
      968,  968,  968,  671,  671,  671,  671,  671,  671,  671,
     1457, 2345, 2345, 1452, 1453,  672, 1454, 1456,  668,  669,
      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671, 1775, 2345, 1775, 1458, 1457,  672,
      969, 2345,  969,  672,  970,  970,  970,  970,  970,  970,
      970,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682, 1458, 2345,  672,  683,  683,
      683,  683,  683,  683,  683,  684,  684,  684,  684,  684,
      684,  684,  689,  689,  689,  689,  689,  689,  689, 1459,

     1460, 1777, 1461, 1777,  690,  687,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,
     1462, 1463, 1464, 1467, 1468,  690, 2345, 1459, 1460,  971,
     1461,  971,  690,  972,  972,  972,  972,  972,  972,  972,
      691,  691,  691,  691,  691,  691,  691, 2345, 1462, 1463,
     1464, 1467, 1468,  690,  692,  692,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  693,  693,  694,  694,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  698,  698,  698,  698,

      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      702,  702,  702,  702,  702,  702,  702, 1471, 1480, 1850,
     1483, 1850,  703,  700,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702, 1484, 1485,
     1486, 1487, 1784,  703, 1784, 1471, 1480,  973, 1483,  973,
      703,  974,  974,  974,  974,  974,  974,  974,  706,  706,
      706,  706,  706,  706,  706, 1488, 1484, 1485, 1486, 1487,
      707,  703,  704,  705,  705,  705,  705,  705,  705,  705,
      706,  706,  706,  706,  706,  706,  706, 1489, 1490, 1492,
     2345, 1493,  707, 1488, 1785,  975, 1785,  975,  707,  976,

      976,  976,  976,  976,  976,  976,  710,  710,  710,  710,
      710,  710,  710, 2345, 1495, 1489, 1490, 1492,  711, 1493,
      707,  708,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710, 1496, 1497, 2345, 1500,
     1505,  711, 1495,  977, 2345,  977,  711,  978,  978,  978,
      978,  978,  978,  978,  714,  714,  714,  714,  714,  714,
      714, 1506, 2345, 2345, 1496, 1497,  715, 1500, 1505,  711,
      712,  713,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714, 1788, 2345, 1788, 1507, 1506,
      715,  979, 2345,  979,  715,  980,  980,  980,  980,  980,

      980,  980,  716,  716,  716,  716,  716,  716,  716,  717,
      717,  717,  717,  717,  717,  717, 1507, 2345,  715,  720,
      720,  720,  720,  720,  720,  720, 1508, 1513, 1854, 1514,
     1854,  721,  718,  719,  719,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  720,  720, 1515, 1526, 1527,
     1528, 1806,  721, 1806, 1508, 1513,  981, 1514,  981,  721,
      982,  982,  982,  982,  982,  982,  982,  724,  724,  724,
      724,  724,  724,  724, 1535, 1515, 1526, 1527, 1528,  725,
      721,  722,  723,  723,  723,  723,  723,  723,  723,  724,
      724,  724,  724,  724,  724,  724, 1540, 1545, 1547, 2345,

     1548,  725, 1535, 1873,  983, 1873,  983,  725,  984,  984,
      984,  984,  984,  984,  984,  728,  728,  728,  728,  728,
      728,  728, 2345, 1549, 1540, 1545, 1547,  729, 1548,  725,
      726,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  728,  728, 1550, 1551, 2345, 1555, 1556,
      729, 1549,  985, 2345,  985,  729,  986,  986,  986,  986,
      986,  986,  986,  732,  732,  732,  732,  732,  732,  732,
     1557, 2345, 2345, 1550, 1551,  733, 1555, 1556,  729,  730,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732, 1558, 1876, 1559, 1876, 1557,  733,

      987, 2345,  987,  733,  988,  988,  988,  988,  988,  988,
      988,  736,  736,  736,  736,  736,  736,  736, 1498, 1560,
     2345, 1561, 1558,  737, 1559, 1499, 2345,  733,  734,  735,
      735,  735,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  736,  736, 1562, 1563, 2345, 1498, 1560,  737, 1561,
      989,  737,  989, 1499,  990,  990,  990,  990,  990,  990,
      990,  740,  740,  740,  740,  740,  740,  740, 1564, 2345,
     2345, 1562, 1563,  741, 2345, 2345,  737,  738,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      740,  740, 1567, 2345, 1568, 1569, 1564,  741,  991, 2345,

      991,  741,  992,  992,  992,  992,  992,  992,  992,  744,
      744,  744,  744,  744,  744,  744, 1570, 1575, 2345, 1577,
     1567,  745, 1568, 1569, 2345,  741,  742,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744, 1578, 1579, 2345, 1570, 1575,  745, 1577,  993,  745,
      993, 2345,  994,  994,  994,  994,  994,  994,  994,  748,
      748,  748,  748,  748,  748,  748, 1580, 2345, 2345, 1578,
     1579,  749, 2345, 2345,  745,  746,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
     1583, 2345, 1584, 1585, 1580,  749,  995, 2345,  995,  749,

      996,  996,  996,  996,  996,  996,  996,  752,  752,  752,
      752,  752,  752,  752, 1586, 1587, 2345, 1588, 1583,  753,
     1584, 1585, 2345,  749,  750,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752, 1589,
     1590, 2345, 1586, 1587,  753, 1588,  997,  753,  997, 2345,
      998,  998,  998,  998,  998,  998,  998,  756,  756,  756,
      756,  756,  756,  756, 1591, 2345, 2345, 1589, 1590,  757,
     2345, 2345,  753,  754,  755,  755,  755,  755,  755,  755,
      755,  756,  756,  756,  756,  756,  756,  756, 1817, 2345,
     1817, 1592, 1591,  757,  999, 2345,  999,  757, 1000, 1000,

     1000, 1000, 1000, 1000, 1000,  758,  758,  758,  758,  758,
      758,  758,  759,  759,  759,  759,  759,  759,  759, 1592,
     2345,  757,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761,  764,  764,  764,  764,
      764,  764,  764, 1593, 1594, 1820, 1598, 1820,  765,  762,
      763,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  764,  764, 1599, 1600, 1601, 1602, 1881,  765,
     1881, 1593, 1594, 1001, 1598, 1001,  765, 1002, 1002, 1002,
     1002, 1002, 1002, 1002,  769,  769,  769,  769,  769,  769,
      769, 1603, 1599, 1600, 1601, 1602,  770,  765,  767,  768,

      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  769, 1604, 1606, 1883, 1607, 1883,  770, 1603,
     1884, 1003, 1884, 1003,  770, 1004, 1004, 1004, 1004, 1004,
     1004, 1004,  771,  771,  771,  771,  771,  771,  771, 2345,
     2345, 1604, 1606,  773, 1607,  773,  770,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  775, 1885,  775, 1885,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  777,
     1830,  777, 1830,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  779, 1895,  779,

     1895,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  780,  780,  780,  780,  780,
      780,  780,  781,  781,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  783,  783,  784,  784,  784,  784,  784,  784,  784,
      785,  785,  785,  785,  785,  785,  785,  786,  786,  786,
      786,  786,  786,  786,  787,  787,  787,  787,  787,  787,
      787,  788,  788,  788,  788,  788,  788,  788,  794,  794,
      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      795,  795,  796,  796,  796,  796,  796,  796,  796,  799,

      799,  799,  799,  799,  799,  799, 1608, 1612, 1850, 1613,
     1850,  800,  797,  798,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799, 1614, 1620, 1621,
     1622, 1625,  800, 2345, 1608, 1612, 1005, 1613, 1005,  800,
     1006, 1006, 1006, 1006, 1006, 1006, 1006,  801,  801,  801,
      801,  801,  801,  801, 2345, 1614, 1620, 1621, 1622, 1625,
      800,  802,  802,  802,  802,  802,  802,  802,  803,  803,
      803,  803,  803,  803,  803,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807,  810,
      810,  810,  810,  810,  810,  810,  818,  818,  818,  818,

      818,  818,  818,  821,  821,  821,  821,  821,  821,  821,
     1626, 1628, 1854, 1629, 1854,  822,  819,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821, 1630, 1631, 1916, 2345, 1916,  822, 2345, 1626, 1628,
     1007, 1629, 1007,  822, 1008, 1008, 1008, 1008, 1008, 1008,
     1008,  823,  823,  823,  823,  823,  823,  823, 2345, 1630,
     1631,  825,  826,  825,  822,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824, 1009,
     1919, 1009, 1919, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
      828, 1873,  828, 1873,  827,  827,  827,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  830, 1876,
      830, 1876,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  832, 1881,  832, 1881,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  834, 1883,  834, 1883,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  836, 1884,  836, 1884,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      838, 1885,  838, 1885,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  840,  841,

      840, 2345,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839, 1011, 1895, 1011, 1895,
     1012, 1012, 1012, 1012, 1012, 1012, 1012,  843, 1955,  843,
     1955,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  845, 1963,  845, 1963,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  847, 1916,  847, 1916,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  852,  852,  852,  852,  852,  852,  852,  857,  857,
      857,  857,  857,  857,  857,  858,  858,  858,  858,  858,

      858,  858,  861,  861,  861,  861,  861,  861,  861,  862,
      862,  862,  862,  862,  862,  862,  863,  863,  863,  863,
      863,  863,  863,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  958,  958,  958,  958,  958,  958,  958,

      958,  958,  958,  958,  958,  958,  958,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  972,  972,  972,  972,  972,  972,  972,  972,  972,

      972,  972,  972,  972,  972,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1009, 1083, 1009, 2345, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1011, 1084, 1011, 2345, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1158, 1919, 1158, 1919, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1160, 1979, 1160, 1979, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1158, 1988, 1158, 1988, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1160, 1302, 1160, 2345, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1303, 1323, 1336, 2345, 1331, 1324, 1325, 1326, 1332,
     1333, 1334, 1337, 1357, 1408, 1401, 1346, 1402, 1346, 1302,
     1403, 1404, 1633, 1989, 1409, 1989, 1358, 1347, 1405, 1303,
     1323, 1336, 1348, 1331, 1324, 1325, 1326, 1332, 1333, 1334,
     1337, 1357, 1408, 1401, 1996, 1402, 1996, 1509, 1403, 1404,

     1633, 1501, 1409, 1501, 1358, 1415, 1405, 1415, 1634, 2345,
     1349, 1637, 1502, 1510, 1417, 2345, 1417, 1503, 1419, 2345,
     1419, 1416, 1529, 2345, 1529, 1509, 1425, 1427, 1425, 1427,
     1418, 1429, 2345, 1429, 1420, 1431, 1634, 1431, 1530, 1637,
     2345, 1510, 1426, 1428, 1536, 1504, 1536, 1430, 1538, 2345,
     1538, 1432, 1437, 1439, 1437, 1439, 1441, 1443, 1441, 1443,
     1537, 1446, 2345, 1446, 1539, 1552, 2345, 1552, 1438, 1440,
     2345, 2345, 1442, 1444, 1565, 2345, 1565, 1447, 1472, 2345,
     1472, 1553, 1474, 1476, 1474, 1476, 1478, 1481, 1478, 1481,
     1566, 1501, 1581, 1501, 1473, 1595, 1638, 1595, 1475, 1477,

     1582, 2345, 1479, 1482, 2345, 2345, 1511, 1503, 1511, 1554,
     1516, 1596, 1516, 1518, 1520, 1518, 1520, 1529, 1642, 1529,
     1581, 1616, 1512, 1616, 1638, 1536, 1517, 1536, 1582, 1519,
     1521, 2345, 1538, 1530, 1538, 1643, 1552, 1617, 1552, 1645,
     1565, 1537, 1565, 1640, 1646, 1640, 1642, 1647, 1539, 1649,
     1650, 1651, 1553, 1652, 1653, 1654, 1566, 1655, 1656, 1641,
     1657, 1660, 1661, 1643, 1662, 1663, 1665, 1645, 1595, 1666,
     1595, 1667, 1646, 1668, 1669, 1647, 1670, 1649, 1650, 1651,
     1671, 1652, 1653, 1654, 1596, 1655, 1656, 1672, 1657, 1660,
     1661, 1673, 1662, 1663, 1665, 1674, 1675, 1666, 1676, 1667,

     1677, 1668, 1669, 1679, 1670, 1616, 1680, 1616, 1671, 1681,
     1682, 1683, 1684, 1685, 1686, 1672, 1688, 1689, 1690, 1673,
     1693, 1617, 1687, 1674, 1675, 1694, 1676, 1691, 1677, 1695,
     1692, 1679, 1696, 1697, 1680, 2345, 1698, 1681, 1682, 1683,
     1684, 1685, 1686, 1701, 1688, 1689, 1690, 1699, 1693, 1699,
     1687, 1703, 1640, 1694, 1640, 1691, 1704, 1695, 1692, 1705,
     1696, 1697, 1708, 1700, 1698, 1706, 1714, 1706, 1641, 1711,
     1709, 1701, 1709, 1715, 1712, 1715, 1717, 1719, 1717, 1703,
     1720, 1707, 1723, 1713, 1704, 1724, 1710, 1705, 1726, 1716,
     1708, 1721, 1718, 1721, 1714, 1728, 1729, 1711, 1730, 1731,

     1732, 1727, 1712, 1733, 1734, 1719, 1735, 1722, 1720, 1736,
     1723, 1713, 1737, 1724, 1738, 1741, 1726, 1739, 1742, 1739,
     1743, 1744, 1745, 1728, 1729, 1746, 1730, 1731, 1732, 1727,
     1747, 1733, 1734, 1740, 1735, 1748, 1749, 1736, 1749, 1751,
     1737, 1752, 1738, 1741, 1755, 1753, 1742, 1753, 1743, 1744,
     1745, 1756, 1750, 1746, 1757, 1758, 1761, 1759, 1747, 1759,
     1762, 1754, 1763, 1748, 1764, 1765, 1766, 1751, 1767, 1752,
     1768, 1769, 1755, 1760, 1771, 1699, 1772, 1699, 1773, 1756,
     1774, 1776, 1757, 1758, 1761, 1706, 1778, 1706, 1762, 1779,
     1763, 1700, 1764, 1765, 1766, 1709, 1767, 1709, 1768, 1769,

     1780, 1707, 1771, 1781, 1772, 1782, 1773, 1782, 1774, 1776,
     1715, 1710, 1715, 1717, 1778, 1717, 1786, 1779, 1787, 1789,
     1721, 1783, 1721, 1790, 1792, 1790, 1716, 1793, 1780, 1718,
     1794, 1781, 1795, 1796, 1797, 1798, 1722, 1799, 1800, 1791,
     1802, 1803, 1804, 1805, 1786, 1807, 1787, 1789, 1739, 1808,
     1739, 1809, 1792, 1809, 1811, 1793, 1812, 1815, 1794, 1818,
     1795, 1796, 1797, 1798, 1740, 1799, 1800, 1810, 1802, 1803,
     1804, 1805, 1813, 1807, 1813, 1819, 1749, 1808, 1749, 1753,
     1831, 1753, 1811, 1832, 1812, 1815, 2345, 1818, 1814, 1821,
     2345, 1821, 1750, 1833, 1824, 1754, 1824, 1826, 1828, 1826,

     1828, 1834, 1759, 1819, 1759, 1822, 1835, 1836, 1831, 1837,
     1825, 1832, 1838, 1827, 1829, 1839, 1842, 1843, 1760, 1844,
     1840, 1833, 1840, 1845, 1847, 1848, 1849, 1851, 1852, 1834,
     1782, 1853, 1782, 1823, 1835, 1836, 1841, 1837, 1855, 1856,
     1838, 1857, 1858, 1839, 1842, 1843, 1783, 1844, 1790, 1862,
     1790, 1845, 1847, 1848, 1849, 1851, 1852, 1863, 1860, 1853,
     1860, 1866, 1867, 1864, 1791, 1864, 1855, 1856, 1868, 1857,
     1858, 1869, 1870, 1871, 1861, 1872, 1809, 1862, 1809, 1865,
     1874, 1875, 1813, 1877, 1813, 1863, 1878, 1879, 1880, 1866,
     1867, 1821, 1810, 1821, 1882, 1886, 1868, 1887, 1814, 1869,

     1870, 1871, 1824, 1872, 1824, 2345, 1889, 1822, 1874, 1875,
     1826, 1877, 1826, 1890, 1878, 1879, 1880, 1828, 1825, 1828,
     1891, 1893, 1882, 1886, 1896, 1887, 1827, 1840, 1897, 1840,
     1898, 1901, 1902, 1829, 1889, 1899, 1903, 1899, 1904, 1905,
     1906, 1890, 1909, 1841, 1910, 1907, 1911, 1907, 1891, 1893,
     1912, 1900, 1896, 1913, 1914, 1915, 1897, 1917, 1898, 1901,
     1902, 1908, 1918, 1860, 1903, 1860, 1904, 1905, 1906, 1920,
     1909, 1864, 1910, 1864, 1911, 1921, 1923, 1921, 1912, 1861,
     1924, 1913, 1914, 1915, 1925, 1917, 1926, 1865, 1927, 1937,
     1918, 1922, 1938, 1928, 1930, 1928, 1930, 1920, 1939, 2345,

     1940, 1941, 1943, 1944, 1923, 1945, 1947, 1949, 1924, 1929,
     1931, 1933, 1925, 1933, 1926, 1954, 1927, 1937, 2345, 1956,
     1938, 1957, 1934, 1935, 1958, 2345, 1939, 1936, 1940, 1941,
     1943, 1944, 2345, 1945, 1947, 1949, 1959, 1950, 1932, 1950,
     1952, 1964, 1952, 1954, 1899, 1965, 1899, 1956, 1966, 1957,
     1967, 2345, 1958, 1951, 2345, 1960, 1953, 1960, 2345, 1907,
     1900, 1907, 1976, 1968, 1959, 1968, 1970, 2345, 1970, 1964,
     1972, 1961, 1972, 1965, 1985, 1908, 1966, 2345, 1967, 1969,
     2345, 1974, 1971, 1974, 1986, 1977, 1973, 1977, 1987, 1921,
     1976, 1921, 1980, 1982, 1980, 1982, 2345, 1975, 1928, 1997,

     1928, 1978, 1985, 2345, 1930, 1922, 1930, 2345, 1981, 1983,
     2345, 1990, 1986, 1991, 1929, 1933, 1987, 1933, 1998, 1992,
     1931, 1992, 1994, 1999, 1994, 2000, 2001, 1997, 2002, 2003,
     2004, 1936, 2005, 2006, 2007, 1993, 2008, 1984, 1995, 1990,
     2009, 1991, 2010, 1950, 2010, 1950, 1998, 1952, 2011, 1952,
     2011, 1999, 2012, 2000, 2001, 2013, 2002, 2003, 2004, 1951,
     2005, 2006, 2007, 1953, 2008, 1955, 2015, 1955, 2009, 2016,
     1960, 2017, 1960, 2017, 2018, 1963, 2019, 1963, 2020, 2021,
     2012, 2022, 1968, 2013, 1968, 2023, 1961, 2023, 2024, 1970,
     2024, 1970, 2345, 2025, 2015, 2025, 2345, 2016, 1969, 1972,

     2345, 1972, 2018, 2345, 2019, 1971, 2020, 2021, 1974, 2022,
     1974, 2026, 2027, 2026, 2027, 1973, 1977, 2029, 1977, 2029,
     1979, 1980, 1979, 1980, 1975, 2030, 2040, 2030, 2028, 1982,
     2041, 1982, 1978, 2031, 2035, 2031, 2035, 1981, 2032, 2033,
     2034, 2037, 1988, 2037, 1988, 1983, 1989, 1992, 1989, 1992,
     2036, 2042, 2044, 2042, 2040, 2049, 2051, 2038, 2041, 1994,
     2043, 1994, 2043, 1993, 2052, 2053, 2032, 2033, 2034, 1996,
     2045, 1996, 2045, 2054, 2047, 1995, 2047, 2055, 2056, 2057,
     2044, 2058, 2345, 2049, 2051, 2010, 2046, 2010, 2061, 2011,
     2048, 2011, 2052, 2053, 2059, 2062, 2059, 2063, 2064, 2065,

     2017, 2054, 2017, 2068, 2070, 2055, 2056, 2057, 2345, 2058,
     2060, 2023, 2066, 2023, 2066, 2024, 2061, 2024, 2025, 2026,
     2025, 2026, 2027, 2062, 2027, 2063, 2064, 2065, 2067, 2345,
     2082, 2068, 2070, 2071, 2029, 2071, 2029, 2030, 2028, 2030,
     2031, 2072, 2031, 2072, 2074, 2076, 2074, 2076, 2035, 2078,
     2035, 2078, 2037, 2079, 2037, 2079, 2080, 2073, 2082, 2081,
     2075, 2077, 2083, 2042, 2036, 2042, 2084, 2043, 2038, 2043,
     2045, 2085, 2045, 2085, 2086, 2047, 2086, 2047, 2087, 2091,
     2092, 2095, 2096, 2097, 2080, 2088, 2046, 2081, 2098, 2345,
     2083, 2048, 2102, 2089, 2084, 2090, 2059, 2099, 2059, 2099,

     2103, 2100, 2104, 2100, 2105, 2107, 2087, 2091, 2092, 2095,
     2096, 2097, 2060, 2088, 2111, 2345, 2098, 2101, 2345, 2345,
     2102, 2089, 2066, 2090, 2066, 2106, 2108, 2106, 2103, 2115,
     2104, 2109, 2105, 2107, 2071, 2072, 2071, 2072, 2067, 2110,
     2116, 2112, 2111, 2112, 2074, 2113, 2074, 2113, 2076, 2117,
     2076, 2073, 2118, 2114, 2108, 2114, 2078, 2115, 2078, 2109,
     2075, 2079, 2119, 2079, 2077, 2120, 2121, 2110, 2116, 2085,
     2086, 2085, 2086, 2122, 2123, 2124, 2125, 2117, 2126, 2128,
     2118, 2129, 2130, 2131, 2132, 2099, 2134, 2099, 2127, 2100,
     2119, 2100, 2137, 2120, 2121, 2133, 2138, 2133, 2106, 2140,

     2106, 2122, 2123, 2124, 2125, 2101, 2126, 2128, 2141, 2129,
     2130, 2131, 2132, 2135, 2134, 2135, 2127, 2142, 2146, 2143,
     2137, 2143, 2147, 2112, 2138, 2112, 2113, 2140, 2113, 2136,
     2114, 2148, 2114, 2148, 2150, 2144, 2141, 2151, 2153, 2151,
     2153, 2155, 2156, 2157, 2160, 2142, 2146, 2149, 2161, 2158,
     2147, 2158, 2162, 2152, 2154, 2163, 2166, 2164, 2167, 2164,
     2167, 2169, 2150, 2145, 2133, 2159, 2133, 2170, 2174, 2155,
     2156, 2157, 2160, 2165, 2168, 2135, 2161, 2135, 2175, 2171,
     2162, 2171, 2176, 2163, 2166, 2172, 2177, 2172, 2178, 2169,
     2183, 2136, 2143, 2184, 2143, 2170, 2174, 2179, 2185, 2179,

     2185, 2173, 2180, 2181, 2182, 2345, 2175, 2148, 2144, 2148,
     2176, 2186, 2345, 2186, 2177, 2190, 2178, 2151, 2183, 2151,
     2188, 2184, 2188, 2149, 2153, 2191, 2153, 2187, 2192, 2196,
     2180, 2181, 2182, 2152, 2189, 2158, 2189, 2158, 2197, 2193,
     2154, 2193, 2194, 2190, 2194, 2198, 2164, 2199, 2164, 2199,
     2205, 2159, 2200, 2191, 2200, 2345, 2192, 2196, 2195, 2167,
     2207, 2167, 2165, 2202, 2208, 2202, 2197, 2203, 2201, 2203,
     2171, 2209, 2171, 2198, 2172, 2168, 2172, 2206, 2205, 2206,
     2210, 2211, 2179, 2204, 2179, 2212, 2218, 2212, 2207, 2214,
     2173, 2214, 2208, 2219, 2216, 2185, 2216, 2185, 2222, 2209,

     2186, 2213, 2186, 2225, 2220, 2215, 2220, 2226, 2210, 2211,
     2217, 2188, 2227, 2188, 2218, 2189, 2187, 2189, 2193, 2345,
     2193, 2219, 2194, 2224, 2194, 2224, 2222, 2199, 2200, 2199,
     2200, 2225, 2228, 2232, 2228, 2226, 2233, 2202, 2195, 2202,
     2227, 2203, 2234, 2203, 2201, 2229, 2230, 2229, 2230, 2206,
     2235, 2206, 2236, 2212, 2237, 2212, 2237, 2204, 2214, 2240,
     2214, 2232, 2231, 2238, 2233, 2238, 2216, 2241, 2216, 2213,
     2234, 2239, 2242, 2239, 2215, 2220, 2243, 2220, 2235, 2244,
     2236, 2224, 2217, 2224, 2247, 2249, 2228, 2240, 2228, 2229,
     2230, 2229, 2230, 2250, 2248, 2241, 2248, 2252, 2253, 2237,

     2242, 2237, 2254, 2238, 2243, 2238, 2231, 2244, 2239, 2257,
     2239, 2260, 2247, 2249, 2261, 2255, 2258, 2255, 2258, 2262,
     2263, 2250, 2248, 2264, 2248, 2252, 2253, 2265, 2266, 2267,
     2254, 2256, 2259, 2268, 2269, 2271, 2255, 2257, 2255, 2260,
     2273, 2270, 2261, 2270, 2258, 2274, 2258, 2262, 2263, 2275,
     2278, 2264, 2256, 2345, 2279, 2265, 2266, 2267, 2280, 2281,
     2259, 2268, 2269, 2271, 2272, 2276, 2272, 2276, 2273, 2282,
     2283, 2284, 2270, 2274, 2270, 2285, 2286, 2275, 2278, 2287,
     2345, 2277, 2279, 2272, 2297, 2272, 2280, 2281, 2288, 2276,
     2288, 2276, 2289, 2294, 2289, 2294, 2298, 2282, 2283, 2284,

     2291, 2299, 2291, 2285, 2286, 2277, 2300, 2287, 2290, 2295,
     2301, 2292, 2297, 2302, 2345, 2288, 2293, 2288, 2303, 2289,
     2303, 2289, 2345, 2291, 2298, 2291, 2304, 2315, 2304, 2299,
     2306, 2294, 2306, 2294, 2300, 2290, 2316, 2317, 2301, 2293,
     2318, 2302, 2305, 2307, 2311, 2307, 2311, 2295, 2308, 2309,
     2310, 2313, 2303, 2313, 2303, 2315, 2304, 2319, 2304, 2319,
     2312, 2306, 2345, 2306, 2316, 2317, 2345, 2314, 2318, 2307,
     2345, 2307, 2305, 2320, 2332, 2320, 2308, 2309, 2310, 2322,
     2324, 2322, 2324, 2311, 2326, 2311, 2326, 2333, 2313, 2321,
     2313, 2327, 2328, 2327, 2328, 2323, 2325, 2345, 2330, 2312,

     2330, 2319, 2332, 2319, 2314, 2320, 2345, 2320, 2329, 2334,
     2322, 2334, 2322, 2345, 2331, 2333, 2335, 2324, 2335, 2324,
     2336, 2321, 2336, 2326, 2345, 2326, 2323, 2327, 2328, 2327,
     2328, 2345, 2337, 2325, 2337, 2330, 2338, 2330, 2338, 2339,
     2341, 2339, 2341, 2334, 2329, 2334, 2335, 2336, 2335, 2336,
     2337, 2331, 2337, 2345, 2345, 2340, 2342, 2338, 2339, 2338,
     2339, 2343, 2341, 2343, 2341, 2344, 2343, 2344, 2343, 2344,
     2345, 2344, 2345, 2345, 2340, 2345, 2345, 2345, 2342,  296,
      296,  296,  296,  296,  372,  372,  372,  372,  372,  373,
      373,  373,  373,  373,  374,  374,  374,  374,  374,  375,

      375,  375,  375,  375,  376,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  378,  378,  378,  378,  378,  379,
      379,  379,  379,  379,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  385,  449,  449,  449,  449,  449,  471,
      471,  471,  471,  471,  472,  472,  472,  472,  472,  473,
      473,  473,  473,  473,  474,  474,  474,  474,  474,  475,
      475,  475,  475,  475,  485,  485,  485,  485,  485,  486,
      486,  486,  486,  486,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  492,  492,  492,  492,  492,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  494,  495,

      495,  495,  495,  495,  496,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  498,  498,  498,  498,  498,  526,
      526,  526,  526,  526,  527,  527,  527,  527,  527,  528,
      528,  528,  528,  528,  529,  529,  529,  529,  529,  531,
      531,  531,  531,  531,  532,  532,  532,  532,  532,  533,
      533,  533,  533,  533,  534,  534,  534,  534,  534,  537,
      537,  537,  537,  537,  538,  538,  538,  538,  538,  542,
      542,  542,  542,  542,  543,  543,  543,  543,  543,  544,
      544,  544,  544,  544,  548,  548,  548,  548,  548,  673,
      673,  674,  674,  675,  675,  676,  676,  677,  677,  678,

      678,  679,  679,  680,  680,  686,  686,  766,  766,  789,
      789,  790,  790,  791,  791,  792,  792,  793,  793,  805,
      805,  859,  859,  860,  860,  864,  864,  865,  865,  866,
      866, 2345,  866,  866,  869, 2345, 2345,  869,  869,  673,
      673,  674,  674,  675,  675,  676,  676,  677,  677,  678,
      678,  679,  679,  680,  680,  686,  686,  766,  766,  789,
      789,  790,  790,  791,  791,  792,  792,  793,  793,  805,
      805,  859,  859,  860,  860,  864,  864,  865,  865,  866,
      866, 2345,  866,  866,  869, 2345, 2345,  869,  869,  295,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345
    } ;

static yyconst flex_int16_t yy_chk[11563] =
    {   0,
        0,    1,    1,    1, 2463,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        3,  297,    3,  297,  319,  297,  319,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,  572,    4,  572,

      319,  302, 2462,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,  572,    5, 2461,  573,  304,  573,    5,
        5,    5,    5,    5,    5,    5,    6,    6,    6,  302,
        6, 2460,  573,  305, 2459,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7,  304,    7, 2458,  574,  308,
      574,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,  305,    8, 2457,  577,  309,  577,    8,    8,    8,
        8,    8,    8,    8,    9,    9,    9,  308,    9, 2456,
      577,  310, 2455,    9,    9,    9,    9,    9,    9,    9,
       10,   10,   10,  309,   10, 2454,  578,  314,  578,   10,

       10,   10,   10,   10,   10,   10,   11,   11,   11,  310,
       11, 2453,  578,  316, 2452,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  314,   12, 2451,  579,  320,
      579,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,  316,   13,  580,  579,  580, 2450,   13,   13,   13,
       13,   13,   13,   13,   14,   14,   14,  320,   14,  580,
      581, 2449,  581,   14,   14,   14,   14,   14,   14,   14,
       15,   15,   15,  545,   15,  545,  581,  545, 2448,   15,
       15,   15,   15,   15,   15,   15,   16,   16,   16,  549,
       16,  549,  607,  549,  607,   16,   16,   16,   16,   16,

       16,   16,   17,   17,   17, 2447,   17,   17,  607,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   18,   18,
       18, 2445,   18,   18, 2437,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   19,   19, 2422,   19,   19,
     2421,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   20,   20, 2420,   20,   20, 2419,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   21,   21,   21, 2418,
       21,   21, 2417,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22, 2416,   22,   22, 2415,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   23,

       23, 2414,   23,   23, 2413,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   24,   24,   24, 2412,   24,   24,
     2411,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,   25, 2410,   25,   25, 2409,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   26,   26,   26, 2408,
       26,   26, 2407,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27, 2406,   27,   27, 2404,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   28,   28,
       28, 2396,   28,   28, 2281,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   29,   29, 2234,   29,   29,

     2226,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   30,   30, 2225,   30,   30, 2192,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   31,   31,   31, 2190,
       31,   31, 2107,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   32,   32,   32, 2054,   32,   32, 2053,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   33,
       33,  552,   33,  552,  608,  552,  608,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34,  890,   34,  890,
      891,  554,  891,   34,   34,   34,   34,   34,   34,   34,
       35,   35,   35,  890,   35, 2021,  892,  556,  892,   35,

       35,   35,   35,   35,   35,   35,   36,   36,   36,  554,
       36, 2001,  895,  557,  895,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37,  556,   37, 1987,  895,  558,
     1957,   37,   37,   37,   37,   37,   37,   37,   38,   38,
       38,  557,   38, 1906,  896,  559,  896,   38,   38,   38,
       38,   38,   38,   38,   39,   39,   39,  558,   39, 1893,
      897,  560,  897,   39,   39,   39,   39,   39,   39,   39,
       40,   40,   40,  559,   40, 1891,  897,  561, 1887,   40,
       40,   40,   40,   40,   40,   40,   41,   41,   41,  560,
       41, 1839,  898,  562,  898,   41,   41,   41,   41,   41,

       41,   41,   42,   42,   42,  561,   42, 1837,  899,  563,
      899,   42,   42,   42,   42,   42,   42,   42,   43,   43,
       43,  562,   43,   43,  899,   43, 1833,   43,   43,   43,
       43,   43,   43,   43,   44,   44,   44,  563,   44,   44,
      900,   44,  900,   44,   44,   44,   44,   44,   44,   44,
       45,   45,   45,  901,   45,  901,  902,  564,  902,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,  901,
       46, 1796,  903,  565,  903,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47,  564,   47,   47,  903,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   48,   48,

       48,  565,   48,   48, 1778,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   49,   49,   49, 1748,   49,   49,
     1734,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       50,   50,   50, 1657,   50,   50, 1590,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   51,   51,   51, 1589,
       51,   51, 1579,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1570,   52,   52, 1562,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   53,   53,
       53, 1561,   53,   53, 1558,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   54,   54,   54, 1549,   54,   54,

     1548,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   55,   55,   55, 1389,   55,   55,   55,   55,  904,
      567,  904, 1373,   56,   56,   56,   56,   55,   56,   56,
       56,   56,  908,  945,  908,  945,   57,   57,   57,   57,
       56,   57,   57,   57,   57,  291,  291,  291,  567,  291,
      307,  568, 1372,   57,   55,   58,   58,   58,   58, 1355,
       58,   58,   58,   58, 1032,  307, 1032,   56,   59,   59,
       59,   59,   58,   59,   59,   59,   59, 1339,  307,  568,
       57,   60,   60,   60,   60,   59,   60,   60,   60,   60,
      292,  292,  292,  307,  292,  569,  570, 1328,   60,   58,

       61,   61,   61,   61, 1313,   61,   61,   61,   61, 1035,
      571, 1035,   59,   62,   62,   62,   62,   61,   62,   62,
       62,   62, 1300,  569,  570,   60,   63,   63,   63,   63,
       62,   63,   63,   63,   63,  293,  293,  293,  571,  293,
      575,  576, 1296,   63,   61,   64,   64,   64,   64, 1262,
       64,   64,   64,   64, 1036,  582, 1036,   62,   65,   65,
       65,   65,   64,   65,   65,   65,   65, 1243,  575,  576,
       63,   66,   66,   66,   66,   65,   66,   66,   66,   66,
      294,  294,  294,  582,  294,  583,  585, 1237,   66,   64,
       67,   67,   67,   67, 1230,   67,   67,   67,   67,  586,

     1173,  587,   65,   68,   68,   68,   68,   67,   68,   68,
       68,   68, 1157,  583,  585,   66,   69,   69,   69,   69,
       68,   69,   69,   69,   69,  590,  591,  586,  315,  587,
      593,  594, 1120,   69,   67,   70,   70,   70,   70,  301,
       70,   70,   70,   70,  306,  315,  301,   68, 1118,  301,
      306, 1110,   70,  590,  591,  306,  315,  588,  593,  594,
       69,  867,  870,  867,  870,  867,  870,  301, 1037, 1109,
     1037,  595,  306,  315,  301,  596,  588,  301,  306,   70,
       71,   71,   71,  306,   71,  588,  907,  599,  907,   71,
       71,   71,   71,   71,   71,   71,   72,   72,   72,  595,

       72, 1092,  907,  596, 1085,   72,   72,   72,   72,   72,
       72,   72,   73,   73,   73,  599,   73, 1077, 1015,  600,
     1015,   73,   73,   73,   73,   73,   73,   73,   74,   74,
       74, 1038,   74, 1038, 1015,  601, 1066,   74,   74,   74,
       74,   74,   74,   74,   75,   75,   75,  600,   75, 1063,
     1016,  603, 1016,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,  601,   76,  935, 1016,  604,  922,   76,
       76,   76,   76,   76,   76,   76,   77,   77,   77,  603,
       77, 1039, 1041, 1039, 1041,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,  604,   78, 1042, 1041, 1042,

      905,   78,   78,   78,   78,   78,   78,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79, 1088,  887,
     1088,   81,   81,   81,   81,   79,   81,   81,   81,   81,
     1090, 1113, 1090, 1113,   82,   82,   82,   82,   81,   82,
       82,   82,   82,  321,  321,  321,  321,  321,  321,  321,
      886,   82,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,  879,  878,   81,  606,  609,  872,  566,
       80,  322,  322,  322,  322,  322,  322,  322,   82,  323,
      323,  323,  323,  323,  323,  323,  324,  324,  324,  324,
      324,  324,  324,  555,  606,  609,  872,   80,   83,   83,

       83,  295,   83,   83,    0,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   84,   84,   84,    0,   84,   84,
        0,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85, 1069,   85, 1069, 1070,  873, 1070,   85,
       85,   85,   85,   85,   85,   85,   86,   86,   86, 1069,
       86,    0, 1070,  875,    0,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   87,  873,   87,    0, 1074,  876,
     1074,   87,   87,   87,   87,   87,   87,   87,   88,   88,
       88,  875,   88,    0, 1074,  877,    0,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,  876,   89,    0,

     1087,  880, 1087,   89,   89,   89,   89,   89,   89,   89,
       90,   90,   90,  877,   90,    0, 1087,  881,    0,   90,
       90,   90,   90,   90,   90,   90,   91,   91,   91,  880,
       91,    0, 1089,  882, 1089,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,  881,   92,    0, 1089,  883,
        0,   92,   92,   92,   92,   92,   92,   92,   93,   93,
       93,  882,   93,    0, 1112,  884, 1112,   93,   93,   93,
       93,   93,   93,   93,   94,   94,   94,  883,   94,    0,
     1112,  885,    0,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,  884,   95,    0, 1114,  888, 1114,   95,

       95,   95,   95,   95,   95,   95,   96,   96,   96,  885,
       96,    0, 1114,  889,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97,  888,   97,    0, 1117,  893,
     1117,   97,   97,   97,   97,   97,   97,   97,   98,   98,
       98,  889,   98,    0, 1117,  894,    0,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   99,  893,   99,    0,
     1119,  906, 1119,   99,   99,   99,   99,   99,   99,   99,
      100,  100,  100,  894,  100,    0, 1119,  909,    0,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  906,
      101,    0, 1128,  910, 1128,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102,  909,  102,    0, 1128,  911,
        0,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  910,  103,  103,    0,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  104,  104,  104,  911,  104,  104,
        0,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  106,    0,
      106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107,  107,    0,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,

      108,    0,  108,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  109,  109,  109,    0,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,  110,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111, 1130,
      111, 1130, 1131,  912, 1131,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1130,  112,    0, 1131,  913,
        0,  112,  112,  112,  112,  112,  112,  112,  113,  113,
      113,  912,  113,    0, 1141,  914, 1141,  113,  113,  113,
      113,  113,  113,  113,  114,  114,  114,  913,  114,    0,

     1141,  915,    0,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  914,  115,  115,    0,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  915,
      116,  116,    0,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117,    0,  117,  117,    0,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  118,  118,
      118,    0,  118,  118,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,    0,  119,  119,
        0,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      120,  120,  120,    0,  120,  120,    0,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  121,  121,  121,    0,
      121,  121,    0,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,    0,  122,  122,    0,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  123,  123,
      123,    0,  123,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  124,  124,  124,    0,  124,  124,
        0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      125,  125,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,    0,
      126,  126,    0,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  127,  127,  127,    0,  127,  127,    0,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
      128,    0,  128,  128,    0,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  129,  129,  129,    0,  129,  129,
        0,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,    0,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,    0,
      131,  131,    0,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,    0,  132,  132,    0,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,

      133,    0,  133,  133,    0,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,    0,  134,  134,
        0,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      135,  135,  135, 1142,  135, 1142, 1143,  917, 1143,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136, 1144,
      136, 1144, 1143,  918,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137,  917,  137,    0, 1148,  919,
     1148,  137,  137,  137,  137,  137,  137,  137,  138,  138,
      138,  918,  138,    0, 1148,  920,    0,  138,  138,  138,
      138,  138,  138,  138,  139,  139,  139,  919,  139,    0,

     1149,  921, 1149,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  920,  140,    0, 1164,  923, 1164,  140,
      140,  140,  140,  140,  140,  140,  141,  141,  141,  921,
      141,    0, 1165,  924, 1165,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142,  923,  142,    0, 1174,  925,
     1174,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  924,  143,  143, 1174,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  144,  144,  925,  144,  144,
        0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      145,  145,  145,  145,  926,  145,  145,  145,  145,  927,

     1187,    0, 1187,  146,  146,  146,  146,  145,  146,  146,
      146,  146,  325,  325,  325,  325,  325,  325,  325, 1176,
      146, 1176,  926,  177,  177,  177,  177,  927,  177,  177,
      177,  177,    0,    0,  145, 1176, 1192, 1194, 1192, 1194,
      177, 1198,  928, 1198, 1201,    0, 1201,  146,  147,  147,
      147,    0,  147,  147,    0,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  177,  148,  148,
      928,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      149,  149,  149, 1186,  149, 1186, 1191,  929, 1191,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1186,

      150,    0, 1191,  930,    0,  150,  150,  150,  150,  150,
      150,  150,  151,  151,  151,  929,  151,  151, 1193,  151,
     1193,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152,  930,  152,  152, 1193,  152,    0,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,    0,  153,  153,
     1197,  153, 1197,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,    0,  154,  154, 1197,  154,    0,  154,
      154,  154,  154,  154,  154,  154,  155,  155,  155,    0,
      155,  155, 1200,  155, 1200,  155,  155,  155,  155,  155,
      155,  155,  156,  156,  156,    0,  156,  156, 1200,  156,

        0,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,    0,  157,  157, 1210,  157, 1210,  157,  157,  157,
      157,  157,  157,  157,  158,  158,  158,    0,  158,  158,
     1210,  158,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159, 1211,  159, 1211, 1213,  931, 1213,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160, 1214,
      160, 1214, 1213,  932,    0,  160,  160,  160,  160,  160,
      160,  160,  161,  161,  161,  931,  161,    0, 1215,  933,
     1215,  161,  161,  161,  161,  161,  161,  161,  162,  162,
      162,  932,  162,    0, 1215,  934,    0,  162,  162,  162,

      162,  162,  162,  162,  163,  163,  163,  933,  163,    0,
     1216,  936, 1216,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  934,  164,    0, 1226,  937, 1226,  164,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  936,
      165,    0, 1226,  938,    0,  165,  165,  165,  165,  165,
      165,  165,  166,  166,  166,  937,  166,    0, 1227,  940,
     1227,  166,  166,  166,  166,  166,  166,  166,  167,  167,
      167,  938,  167,    0, 1228,  941, 1228,  167,  167,  167,
      167,  167,  167,  167,  168,  168,  168,  940,  168,    0,
     1232,  942, 1232,  168,  168,  168,  168,  168,  168,  168,

      169,  169,  169,  941,  169,    0, 1252,  943, 1252,  169,
      169,  169,  169,  169,  169,  169,  170,  170,  170,  942,
      170,    0, 1252,  944,    0,  170,  170,  170,  170,  170,
      170,  170,  171,  171,  171,  943,  171,    0, 1253,  946,
     1253,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      172,  944,  172,    0, 1255, 1013, 1255,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  946,  173,    0,
     1255, 1014,    0,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174, 1013,  174,    0, 1256, 1017, 1256,  174,
      174,  174,  174,  174,  174,  174,  175,  175,  175, 1014,

      175, 1266,    0, 1266, 1018,  175,  175,  175,  175,  175,
      175,  175,  176,  176,  176, 1017,  176, 1257, 1257, 1257,
     1257,  176,  176,  176,  176,  176,  176,  176,  178,  178,
      178,  178, 1018,  178,  178,  178,  178, 1275, 1276, 1275,
     1276,  179,  179,  179,  179,  178,  179,  179,  179,  179,
     1277,    0, 1277, 1275,  180,  180,  180,  180,  179,  180,
      180,  180,  180,  326,  326,  326,  326,  326,  326,  326,
        0,  180,  178,  181,  181,  181,  181,    0,  181,  181,
      181,  181, 1280,    0, 1280,  179,  182,  182,  182,  182,
      181,  182,  182,  182,  182, 1282,    0, 1282,  180,  183,

      183,  183,  183,  182,  183,  183,  183,  183,  327,  327,
      327,  327,  327,  327,  327,    0,  183,  181,  184,  184,
      184,  184,    0,  184,  184,  184,  184, 1291,    0, 1291,
      182,  185,  185,  185,  185,  184,  185,  185,  185,  185,
     1019,    0,    0,  183,  186,  186,  186,  186,  185,  186,
      186,  186,  186,  328,  328,  328,  328,  328,  328,  328,
      328,  186,  184,    0,  203,  203,  203,  203, 1019,  203,
      203,  203,  203,    0, 1293,  185, 1293, 1294, 1278, 1294,
     1278,  203, 1020, 1022,  602,  939,    0,    0,  186,  187,
      187,  187,  939,  187, 1278, 1306,  602, 1306,  187,  187,

      187,  187,  187,  187,  187,  188,  188,  188,  203,  188,
     1020, 1022,  602,  939,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  602,  189,    0, 1279, 1023, 1279,
      189,  189,  189,  189,  189,  189,  189,  190,  190,  190,
     1338,  190, 1338, 1279, 1024,    0,  190,  190,  190,  190,
      190,  190,  190,  191,  191,  191, 1023,  191,    0, 1305,
     1025, 1305,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192, 1024,  192,    0, 1305, 1026,    0,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193, 1025,  193,
      193,    0,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  194,  194,  194, 1026,  194,  194,    0,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
     1309,  195, 1309, 1323, 1027, 1323,  195,  195,  195,  195,
      195,  195,  195,  196,  196,  196, 1309,  196,    0, 1323,
     1029,    0,  196,  196,  196,  196,  196,  196,  196,  197,
      197,  197, 1027,  197,    0, 1324, 1030, 1324,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198, 1029,  198,
        0, 1324, 1031,    0,  198,  198,  198,  198,  198,  198,
      198,  199,  199,  199, 1030,  199, 1325, 1326, 1325, 1326,
      199,  199,  199,  199,  199,  199,  199,  200,  200,  200,

     1031,  200, 1325, 1326,    0,    0,  200,  200,  200,  200,
      200,  200,  200,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201, 1340,    0, 1340,  204,  204,  204,  204,
      201,  204,  204,  204,  204, 1348, 1365, 1348, 1365,  277,
      277,  277,  277,  204,  277,  277,  277,  277,  330,  330,
      330,  330,  330,  330,  330,  330,  277,  201,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,    0, 1033,
      204, 1034, 1040, 1043,    0,  202,  352,  352,  352,  352,
      352,  352,  352,  277,  329,  329,  329,  329,  329,  329,
      329,    0,    0, 1331, 1044, 1331,  329, 1033,    0, 1034,

     1040, 1043,  202,  205,  205,  205, 1367,  205, 1367, 1331,
      205,    0,  205,  205,  205,  205,  205,  205,  205,  206,
      206,  206, 1044,  206,  329, 1369,  206, 1369,  206,  206,
      206,  206,  206,  206,  206,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207, 1390,    0, 1390,  278,  278,
      278,  278,  207,  278,  278,  278,  278, 1394, 1414, 1394,
     1414,  279,  279,  279,  279,  278,  279,  279,  279,  279,
      331,  331,  331,  331,  331,  331,  331,  331,  279,  207,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
        0,    0,  278,  280,  280,  280,  280,  208,  280,  280,

      280,  280, 1416,    0, 1416,  279,  287,  287,  287,  287,
      280,  287,  287,  287,  287,  333,  333,  333,  333,  333,
      333,  333,  333,  287,  208,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,    0,    0,  280,  288,  288,
      288,  288,  209,  288,  288,  288,  288, 1418,    0, 1418,
      287,  289,  289,  289,  289,  288,  289,  289,  289,  289,
      334,  334,  334,  334,  334,  334,  334,  334,  289,  209,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
        0,  605,  288, 1045,  317, 1046, 1420,  210, 1420, 1332,
      605, 1332,  317,  317,  317,  289,  332,  332,  332,  332,

      332,  332,  332,    0,    0, 1332, 1047,    0,  332,  605,
     1048, 1045,  317, 1046,  210,  211,  211,  211,  605,  211,
      317,  317,  317,    0,  211,  211,  211,  211,  211,  211,
      211,  212,  212,  212, 1047,  212,  332, 1426, 1048, 1426,
      212,  212,  212,  212,  212,  212,  212,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,    0,    0, 1049,
      290,  290,  290,  290,  213,  290,  290,  290,  290, 1428,
     1430, 1428, 1430,    0, 1432,  303, 1432,  290, 1028, 1438,
      589, 1438,  303,  303,  589,  589,  589, 1049,  303, 1050,
     1028,  213,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  312,  303,  290, 1051, 1028,  312,  589,  214,
      303,  303,  589,  589,  589,    0,  303, 1050, 1028, 1052,
      598,  874,  312, 1053, 1054, 1055,    0,  312,  598,  874,
      312, 1056, 1440, 1051, 1440,    0,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215, 1052,  598,  874,
      312, 1053, 1054, 1055,  215,  312,  598,  874,  312, 1056,
      335,  335,  335,  335,  335,  335,  335, 1442, 1444, 1442,
     1444,    0,  335,  336,  336,  336,  336,  336,  336,  336,
      336,  215,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  353,  353,  353,  353,  353,  353,  353,  216,

      335,  337,  337,  337,  337,  337,  337,  337,  337,  338,
      338,  338,  338,  338,  338,  338,    0, 1057, 1058, 1059,
     1060,  338, 1447, 1448, 1447, 1448,  216,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  354,  354,  354,
      354,  354,  354,  354,  217, 1057, 1058, 1059, 1060,  338,
      339,  339,  339,  339,  339,  339,  339,  339,  340,  340,
      340,  340,  340,  340,  340,  340, 1465,    0, 1465, 1061,
     1062,  217,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  355,  355,  355,  355,  355,  355,  355,  218,
      341,  341,  341,  341,  341,  341,  341, 1061, 1062,    0,

     1064, 1065,  341,  342,  342,  342,  342,  342,  342,  342,
      342, 1466, 1473, 1466, 1473,    0,  218,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219, 1064, 1064, 1065,
      341, 1067, 1068,    0,  219,  343,  343,  343,  343,  343,
      343,  343,  343,  344,  344,  344,  344,  344,  344,  344,
        0,    0, 1071, 1072, 1073,  344, 1475,    0, 1475, 1067,
     1068,  219,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  356,  356,  356,  356,  356,  356,  356,  220,
     1071, 1072, 1073,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  346,  346,  346,  346,  346,  346,  346,  346,

     1477, 1479, 1477, 1479, 1075, 1076,  220,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  357,  357,  357,
      357,  357,  357,  357,  221,  347,  347,  347,  347,  347,
      347,  347, 1075, 1076, 1078, 1079, 1080,  347,  348,  348,
      348,  348,  348,  348,  348,  348, 1482, 1494, 1482, 1494,
        0,  221,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222, 1078, 1079, 1080,  347, 1081, 1082,    0,  222,
      349,  349,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,    0,    0, 1086, 1091, 1093,
      350, 1503,    0, 1503, 1081, 1082,  222,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  359,  359,  359,
      359,  359,  359,  359,  223, 1086, 1091, 1093,  350,  351,
      351,  351,  351,  351,  351,  351,  351,  358, 1512,  358,
     1512,  358,  358,  358,  358,  358,  358,  358, 1517,    0,
     1517,  223,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  380,  380,  380,  380,  380,  380,  380,  224,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,    0,    0, 1094, 1095, 1096,
      361, 1519, 1521, 1519, 1521,    0,  224,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  381,  381,  381,

      381,  381,  381,  381,  225, 1094, 1095, 1096,  361,  362,
      362,  362,  362,  362,  362,  362,  362,  363,  363,  363,
      363,  363,  363,  363,  363, 1097, 1522, 1523, 1522, 1523,
        0,  225,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  364,  364,  364,  364,  364,  364,  364,  226,
        0,    0, 1098, 1097,  364,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366, 1099, 1100, 1101,    0,    0,  226,  227,  227,  227,
     1098,  227,  364, 1524, 1102, 1524,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228, 1525,  228, 1525, 1099,

     1100, 1101,  228,  228,  228,  228,  228,  228,  228,  229,
      229,  229, 1102,  229,  229,    0,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  230,  230,  230,    0,  230,
      230,    0,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  231,  231,  231, 1333,  231, 1333, 1334, 1104, 1334,
      231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
     1333,  232,    0, 1334, 1106,    0,  232,  232,  232,  232,
      232,  232,  232,  233,  233,  233, 1104,  233,  233, 1341,
      233, 1341,  233,  233,  233,  233,  233,  233,  233,  234,
      234,  234, 1106,  234,  234, 1341,  234,    0,  234,  234,

      234,  234,  234,  234,  234,  235,  235,  235,    0,  235,
      235, 1342,  235, 1342,  235,  235,  235,  235,  235,  235,
      235,  236,  236,  236,    0,  236,  236, 1342,  236,    0,
      236,  236,  236,  236,  236,  236,  236,  237,  237,  237,
        0,  237,  237, 1343,  237, 1343,  237,  237,  237,  237,
      237,  237,  237,  238,  238,  238,    0,  238,  238, 1343,
      238,    0,  238,  238,  238,  238,  238,  238,  238,  239,
      239,  239,    0,  239,  239, 1344,  239, 1344,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,    0,  240,
      240, 1344,  240,    0,  240,  240,  240,  240,  240,  240,

      240,  241,  241,  241,    0,  241,  241, 1346,  241, 1346,
      241,  241,  241,  241,  241,  241,  241,  242,  242,  242,
        0,  242,  242, 1346,  242,    0,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,    0,  243,  243, 1347,
      243, 1347,  243,  243,  243,  243,  243,  243,  243,  244,
      244,  244,    0,  244,  244, 1347,  244,    0,  244,  244,
      244,  244,  244,  244,  244,  245,  245,  245,    0,  245,
      245, 1366,  245, 1366,  245,  245,  245,  245,  245,  245,
      245,  246,  246,  246,    0,  246,  246, 1366,  246,    0,
      246,  246,  246,  246,  246,  246,  246,  247,  247,  247,

        0,  247,  247, 1368,  247, 1368,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,    0,  248,  248, 1368,
      248,    0,  248,  248,  248,  248,  248,  248,  248,  249,
      249,  249,    0,  249,  249, 1375,  249, 1375,  249,  249,
      249,  249,  249,  249,  249,  250,  250,  250,    0,  250,
      250, 1375,  250,    0,  250,  250,  250,  250,  250,  250,
      250,  251,  251,  251,    0,  251,  251, 1376,  251, 1376,
      251,  251,  251,  251,  251,  251,  251,  252,  252,  252,
        0,  252,  252, 1376,  252,    0,  252,  252,  252,  252,
      252,  252,  252,  253,  253,  253,    0,  253,  253, 1377,

      253, 1377,  253,  253,  253,  253,  253,  253,  253,  254,
      254,  254,    0,  254,  254, 1377,  254,    0,  254,  254,
      254,  254,  254,  254,  254,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  382,  382,  382,  382,  382,
      382,  382,  255,  367,  367,  367,  367,  367,  367,  367,
        0, 1378, 1107, 1378,    0,  367,  368,  368,  368,  368,
      368,  368,  368,  368,    0,    0, 1108, 1378, 1108,  255,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
     1107, 1103, 1108,  367, 1103, 1111,    0,  256,  369,  369,
      369,  369,  369,  369,  369,  369,  370,  370,  370,  370,

      370,  370,  370, 1103,    0, 1115, 1116, 1121,  370, 1103,
     1108,    0, 1103, 1111,  256,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  383,  383,  383,  383,  383,
      383,  383,  257, 1115, 1116, 1121,  370,  371,  371,  371,
      371,  371,  371,  371,  371,  386,  386,  386,  386,  386,
      386,  386,  386, 1530, 1531, 1530, 1531, 1122, 1123,  257,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      389,  389,  389,  389,  389,  389,  389,  258,  387,  387,
      387,  387,  387,  387,  387, 1122, 1123, 1124, 1125, 1126,
      387,  388,  388,  388,  388,  388,  388,  388,  388, 1532,

     1533, 1532, 1533,    0,  258,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259, 1124, 1125, 1126,  387, 1127,
     1129,    0,  259,  390,  390,  390,  390,  390,  390,  390,
      391,  391,  391,  391,  391,  391,  391,  392,  392,  392,
      392,  392,  392,  392, 1534,    0, 1534, 1127, 1129,  259,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      393,  393,  393,  393,  393,  393,  393,  260,  394,  394,
      394,  394,  394,  394,  394,  395,  395,  395,  395,  395,
      395,  395,  396,  396,  396,  396,  396,  396,  396, 1537,
     1539, 1537, 1539,    0,  260,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  397,  397,  397,  397,  397,
      397,  397,  261,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  399,  399,  399,    0,    0,
     1132, 1133, 1134,  399, 1541, 1542, 1541, 1542,    0,  261,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      410,  410,  410,  410,  410,  410,  410,  262, 1132, 1133,
     1134,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      401,  401,  401,  401,  401,  401,  401,  401, 1135, 1136,
     1137, 1139,    0,    0,  262,  263,  263,  263, 1380,  263,
     1380, 1543,    0, 1543,  263,  263,  263,  263,  263,  263,

      263,  264,  264,  264, 1380,  264, 1135, 1136, 1137, 1139,
      264,  264,  264,  264,  264,  264,  264,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  411,  411,  411,
      411,  411,  411,  411,  265,  402,  402,  402,  402,  402,
      402,  402,    0, 1393, 1140, 1393, 1145,  402,  403,  403,
      403,  403,  403,  403,  403,  403, 1544,    0, 1544, 1393,
        0,  265,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266, 1140, 1138, 1145,  402, 1138, 1146,    0,  266,
      404,  404,  404,  404,  404,  404,  404,  404,  405,  405,
      405,  405,  405,  405,  405,    0,    0, 1147, 1150, 1151,

      405, 1138,    0,    0, 1138, 1146,  266,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  442,  442,  442,
      442,  442,  442,  442,  267, 1147, 1150, 1151,  405,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  407,  407, 1546, 1553, 1546, 1553, 1152,
     1153,  267,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  443,  443,  443,  443,  443,  443,  443,  268,
      408,  408,  408,  408,  408,  408,  408, 1152, 1153, 1154,
     1155, 1156,  408,  409,  409,  409,  409,  409,  409,  409,
      409, 1566, 1571, 1566, 1571,    0,  268,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269, 1154, 1155, 1156,
      408, 1163, 1166,    0,  269,  412,  412,  412,  412,  412,
      412,  412,  412,  413,  413,  413,  413,  413,  413,  413,
        0,    0, 1167, 1168, 1169,  413, 1572,    0, 1572, 1163,
     1166,  269,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  444,  444,  444,  444,  444,  444,  444,  270,
     1167, 1168, 1169,  413,  414,  414,  414,  414,  414,  414,
      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,
     1573, 1574, 1573, 1574, 1170, 1171,  270,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  445,  445,  445,

      445,  445,  445,  445,  271,  416,  416,  416,  416,  416,
      416,  416, 1170, 1171, 1172, 1175, 1177,  416,  417,  417,
      417,  417,  417,  417,  417,  417, 1576, 1596, 1576, 1596,
        0,  271,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272, 1172, 1175, 1177,  416, 1178, 1179,    0,  272,
      418,  418,  418,  418,  418,  418,  418,  418,  419,  419,
      419,  419,  419,  419,  419,    0,    0, 1406, 1180, 1406,
      419, 1105, 1181, 1182, 1178, 1179,  272,  273,  273,  273,
     1597,  273, 1597, 1406, 1105,    0,  273,  273,  273,  273,
      273,  273,  273,  274,  274,  274, 1180,  274,  419, 1105,

     1181, 1182,  274,  274,  274,  274,  274,  274,  274,  275,
      275,  275, 1105,  275,    0, 1410, 1183, 1410,  275,  275,
      275,  275,  275,  275,  275,  276,  276,  276, 1605,  276,
     1605, 1410, 1184,    0,  276,  276,  276,  276,  276,  276,
      276,  281,  281,  281, 1183,  281,    0, 1411, 1185, 1411,
      281,  281,  281,  281,  281,  281,  281,  282,  282,  282,
     1184,  282,    0, 1411, 1188,    0,  282,  282,  282,  282,
      282,  282,  282,  283,  283,  283, 1185,  283,    0, 1412,
     1195, 1412,  283,  283,  283,  283,  283,  283,  283,  284,
      284,  284, 1188,  284,    0, 1412, 1196,    0,  284,  284,

      284,  284,  284,  284,  284,  285,  285,  285, 1195,  285,
     1199, 1413,    0, 1413,  285,  285,  285,  285,  285,  285,
      285,  286,  286,  286, 1196,  286, 1609, 1413, 1609,    0,
      286,  286,  286,  286,  286,  286,  286,  311, 1199,  311,
      420,  420,  420,  420,  420,  420,  420,  420, 1202,    0,
        0,  311, 1189,  311,  311,  421,  421,  421,  421,  421,
      421,  421,  421, 1189, 1203, 1189, 1189, 1189,  311,  422,
      422,  422,  422,  422,  422,  422, 1202,  311,  311,  311,
     1189,  422,  311,  423,  423,  423,  423,  423,  423,  423,
      423, 1189, 1203, 1189, 1189, 1189,  311,  424,  424,  424,

      424,  424,  424,  424,  424,  311,  311,  311,  313,  422,
     1204,  597,  592, 1021,  313, 1205, 1021,  313,  916,  592,
      313,  592,  597,  313,  313,  916,  313,    0, 1206,  597,
     1021,    0,  916,  313, 1207,    0,  313, 1208, 1204,  597,
      592, 1021,  313, 1205, 1021,  313,  916,  592,  313,  592,
      597,  313,  313,  916,  313,  318, 1206,  597, 1021,  318,
      916, 1162, 1207,  318, 1190, 1208, 1209,  318, 1162,  318,
     1212, 1190, 1217, 1218, 1219,  318,  425,  425,  425,  425,
      425,  425,  425,  318, 1220, 1221, 1222,  318,  425, 1162,
        0,  318, 1190,    0, 1209,  318, 1162,  318, 1212, 1190,

     1217, 1218, 1219,  318,  426,  426,  426,  426,  426,  426,
      426,  426, 1220, 1221, 1222,    0,  425,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,
      428,  428,    0, 1223, 1225, 1229, 1231,  428,  429,  429,
      429,  429,  429,  429,  429,  429,  430,  430,  430,  430,
      430,  430,  430,  430,  431,  431,  431,  431,  431,  431,
      431, 1223, 1225, 1229, 1231,  428,  431,  432,  432,  432,
      432,  432,  432,  432,  432,  433,  433,  433,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  434,  434,
        0, 1233, 1234, 1235,  431,  434,  435,  435,  435,  435,

      435,  435,  435,  435,  436,  436,  436,  436,  436,  436,
      436,  436,  437,  437,  437,  437,  437,  437,  437, 1233,
     1234, 1235, 1236,  434,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  440,  440,  440,  440,  440,    0, 1239,
     1236, 1241,  437,  440,  441,  441,  441,  441,  441,  441,
      441,  441,  446,  446,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  447,  447, 1239,    0, 1241,
     1242,  440,  447,  448,  448,  448,  448,  448,  448,  448,
      448,  450,  450,  450,  450,  450,  450,  450,  450,  451,

      451,  451,  451,  451,  451,  451, 1240, 1245, 1242, 1240,
      447,  451,  452,  452,  452,  452,  452,  452,  452,  452,
      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454, 1240, 1245,  455, 1240,  455,  451,
      455,  455,  455,  455,  455,  455,  455,  456,  456,  456,
      456,  456,  456,  456,  457, 1610,  457, 1610,  457,  457,
      457,  457,  457,  457,  457,  458,  458,  458,  458,  458,
      458,  458,  459, 1611,  459, 1611,  459,  459,  459,  459,
      459,  459,  459,  460,  460,  460,  460,  460,  460,  460,
      461, 1615,  461, 1615,  461,  461,  461,  461,  461,  461,

      461,  462,  462,  462,  462,  462,  462,  462,  463,  463,
      463,  463,  463,  463,  463,  464,  464,  464,  464,  464,
      464,  464,  465,  465,  465,  465,  465,  465,  465,  466,
      466,  466,  466,  466,  466,  466,  467,  467,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      469,  469,  469,  469,  469,  469,  469,  470,  470,  470,
      470,  470,  470,  470,  476,  476,  476,  476,  476,  476,
      476,  477,  477,  477,  477,  477,  477,  477,  478,  478,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,

     1246, 1247, 1248, 1250, 1254,  480,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  482,  482,  482,  482,  482,
      482,  483,  483,  483,  483,  483,  483,  483, 1246, 1247,
     1248, 1250, 1254,  480,  484,  484,  484,  484,  484,  484,
      484,  487,  487,  487,  487,  487,  487,  487,  488,  488,
      488,  488,  488,  488,  488,  491,  491,  491,  491,  491,
      491,  491,  499,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  501,  501, 1258, 1260, 1617,    0, 1617,  501,
      502,  502,  502,  502,  502,  502,  502,  502,  503,  503,

      503,  503,  503,  503,  503,  504,  504,  504,  504,  504,
      504,  504, 1258, 1260,  505,  505,  505,  501,  505,  505,
      505,  505,  505,  505,  505,  506,  506,  506,  506,  506,
      506,  506,  507, 1618,  507, 1618,  507,  507,  507,  507,
      507,  507,  507,  508,  508,  508,  508,  508,  508,  508,
      509, 1619,  509, 1619,  509,  509,  509,  509,  509,  509,
      509,  510,  510,  510,  510,  510,  510,  510,  511, 1627,
      511, 1627,  511,  511,  511,  511,  511,  511,  511,  512,
      512,  512,  512,  512,  512,  512,  513, 1639,  513, 1639,
      513,  513,  513,  513,  513,  513,  513,  514,  514,  514,

      514,  514,  514,  514,  515, 1641,  515, 1641,  515,  515,
      515,  515,  515,  515,  515,  516,  516,  516,  516,  516,
      516,  516,  517, 1664,  517, 1664,  517,  517,  517,  517,
      517,  517,  517,  518,  518,  518,  518,  518,  518,  518,
      519,  519,  519,    0,  519,  519,  519,  519,  519,  519,
      519,  520,  520,  520,  520,  520,  520,  520,  521, 1678,
      521, 1678,  521,  521,  521,  521,  521,  521,  521,  522,
      522,  522,  522,  522,  522,  522,  523, 1700,  523, 1700,
      523,  523,  523,  523,  523,  523,  523,  524,  524,  524,
      524,  524,  524,  524,  525, 1702,  525, 1702,  525,  525,

      525,  525,  525,  525,  525,  530,  530,  530,  530,  530,
      530,  530,  535,  535,  535,  535,  535,  535,  535,  536,
      536,  536,  536,  536,  536,  536,  539,  539,  539,  539,
      539,  539,  539,  540,  540,  540,  540,  540,  540,  540,
      541,  541,  541,  541,  541,  541,  541,  584,    0,  584,
      610,  610,  610,  610,  610,  610,  610, 1707, 1710, 1707,
     1710,    0, 1261,  584, 1263,  584, 1264,  584,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  584,  613,  613,  613,  613,  613,  613,  613,
     1261,    0, 1263,  584, 1264,  584,  614,  614,  614,  614,

      614,  614,  614,  615,  615,  615,  615,  615,  615,  615,
      584,  616,  616,  616,  616,  616,  616,  616,  617,  617,
      617,  617,  617,  617,  617, 1265, 1267, 1716, 1238, 1716,
      617,  618,  618,  618,  618,  618,  618,  618,  618,  619,
      619,  619,  619,  619,  619,  619, 1269, 1238, 1270, 1271,
     1718,  619, 1718, 1265, 1267,  620, 1238,  620,  617,  620,
      620,  620,  620,  620,  620,  620,  621,  621,  621,  621,
      621,  621,  621, 1272, 1269,    0, 1270, 1271,  621,  619,
      622,  622,  622,  622,  622,  622,  622,  622,  623,  623,
      623,  623,  623,  623,  623, 1273, 1274, 1281,    0, 1283,

      623, 1272, 1722,  624, 1722,  624,  621,  624,  624,  624,
      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,    0, 1284, 1273, 1274, 1281,  625, 1283,  623,  626,
      626,  626,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  627,  627, 1285, 1286,    0, 1287, 1288,  627,
     1284,  628,    0,  628,  625,  628,  628,  628,  628,  628,
      628,  628,  629,  629,  629,  629,  629,  629,  629, 1289,
        0,    0, 1285, 1286,  629, 1287, 1288,  627,  630,  630,
      630,  630,  630,  630,  630,  630,  631,  631,  631,  631,
      631,  631,  631, 1290,    0, 1292, 1295, 1289,  631,  632,

        0,  632,  629,  632,  632,  632,  632,  632,  632,  632,
      633,  633,  633,  633,  633,  633,  633, 1297, 1298,    0,
     1299, 1290,  633, 1292, 1295,    0,  631,  634,  634,  634,
      634,  634,  634,  634,  634,  635,  635,  635,  635,  635,
      635,  635, 1301, 1302,    0, 1297, 1298,  635, 1299,  636,
      633,  636,    0,  636,  636,  636,  636,  636,  636,  636,
      637,  637,  637,  637,  637,  637,  637, 1303,    0,    0,
     1301, 1302,  637,    0,    0,  635,  638,  638,  638,  638,
      638,  638,  638,  638,  639,  639,  639,  639,  639,  639,
      639, 1304,    0, 1307, 1308, 1303,  639,  640,    0,  640,

      637,  640,  640,  640,  640,  640,  640,  640,  641,  641,
      641,  641,  641,  641,  641, 1310, 1311,    0, 1312, 1304,
      641, 1307, 1308,    0,  639,  642,  642,  642,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
     1314, 1315,    0, 1310, 1311,  643, 1312,  644,  641,  644,
        0,  644,  644,  644,  644,  644,  644,  644,  645,  645,
      645,  645,  645,  645,  645, 1317,    0,    0, 1314, 1315,
      645,    0,    0,  643,  646,  646,  646,  646,  646,  646,
      646,  646,  647,  647,  647,  647,  647,  647,  647, 1740,
        0, 1740, 1318, 1317,  647,  648,    0,  648,  645,  648,

      648,  648,  648,  648,  648,  648,  649,  649,  649,  649,
      649,  649,  649,  650,  650,  650,  650,  650,  650,  650,
     1318,    0,  647,  651,  651,  651,  651,  651,  651,  651,
      652,  652,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  653,  653,  654, 1750,  654, 1750,  654,  654,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656,  657,
      657,  657,  657,  657,  657,  657, 1320, 1321, 1754, 1322,
     1754,  657,  658,  658,  658,  658,  658,  658,  658,  658,
      659,  659,  659,  659,  659,  659,  659, 1327, 1329, 1330,

     1335, 1760,  659, 1760, 1320, 1321,  660, 1322,  660,  657,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661, 1336, 1327, 1329, 1330, 1335,  661,
      659,  662,  662,  662,  662,  662,  662,  662,  662,  663,
      663,  663,  663,  663,  663,  663, 1337, 1345, 1349,    0,
     1350,  663, 1336, 1770,  664, 1770,  664,  661,  664,  664,
      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      665,  665,    0, 1351, 1337, 1345, 1349,  665, 1350,  663,
      666,  666,  666,  666,  666,  666,  666,  666,  667,  667,
      667,  667,  667,  667,  667, 1352, 1353,    0, 1354, 1356,

      667, 1351,  668,    0,  668,  665,  668,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
     1357,    0,    0, 1352, 1353,  669, 1354, 1356,  667,  670,
      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671, 1775,    0, 1775, 1358, 1357,  671,
      672,    0,  672,  669,  672,  672,  672,  672,  672,  672,
      672,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682, 1358,    0,  671,  683,  683,
      683,  683,  683,  683,  683,  684,  684,  684,  684,  684,
      684,  684,  687,  687,  687,  687,  687,  687,  687, 1359,

     1360, 1777, 1361, 1777,  687,  688,  688,  688,  688,  688,
      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,
     1362, 1363, 1364, 1370, 1371,  689,    0, 1359, 1360,  690,
     1361,  690,  687,  690,  690,  690,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  691,    0, 1362, 1363,
     1364, 1370, 1371,  689,  692,  692,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  693,  693,  694,  694,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  698,  698,  698,  698,

      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  700,  700, 1374, 1379, 1783,
     1381, 1783,  700,  701,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702, 1382, 1383,
     1384, 1385, 1784,  702, 1784, 1374, 1379,  703, 1381,  703,
      700,  703,  703,  703,  703,  703,  703,  703,  704,  704,
      704,  704,  704,  704,  704, 1386, 1382, 1383, 1384, 1385,
      704,  702,  705,  705,  705,  705,  705,  705,  705,  705,
      706,  706,  706,  706,  706,  706,  706, 1387, 1388, 1391,
        0, 1392,  706, 1386, 1785,  707, 1785,  707,  704,  707,

      707,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  708,  708,    0, 1395, 1387, 1388, 1391,  708, 1392,
      706,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710, 1396, 1397,    0, 1399,
     1401,  710, 1395,  711,    0,  711,  708,  711,  711,  711,
      711,  711,  711,  711,  712,  712,  712,  712,  712,  712,
      712, 1402,    0,    0, 1396, 1397,  712, 1399, 1401,  710,
      713,  713,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714, 1788,    0, 1788, 1403, 1402,
      714,  715,    0,  715,  712,  715,  715,  715,  715,  715,

      715,  715,  716,  716,  716,  716,  716,  716,  716,  717,
      717,  717,  717,  717,  717,  717, 1403,    0,  714,  718,
      718,  718,  718,  718,  718,  718, 1404, 1407, 1791, 1408,
     1791,  718,  719,  719,  719,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  720,  720, 1409, 1421, 1422,
     1423, 1806,  720, 1806, 1404, 1407,  721, 1408,  721,  718,
      721,  721,  721,  721,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  722, 1433, 1409, 1421, 1422, 1423,  722,
      720,  723,  723,  723,  723,  723,  723,  723,  723,  724,
      724,  724,  724,  724,  724,  724, 1436, 1445, 1449,    0,

     1450,  724, 1433, 1810,  725, 1810,  725,  722,  725,  725,
      725,  725,  725,  725,  725,  726,  726,  726,  726,  726,
      726,  726,    0, 1451, 1436, 1445, 1449,  726, 1450,  724,
      727,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  728,  728, 1452, 1453,    0, 1455, 1456,
      728, 1451,  729,    0,  729,  726,  729,  729,  729,  729,
      729,  729,  729,  730,  730,  730,  730,  730,  730,  730,
     1457,    0,    0, 1452, 1453,  730, 1455, 1456,  728,  731,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732, 1458, 1814, 1459, 1814, 1457,  732,

      733,    0,  733,  730,  733,  733,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  734,  734, 1398, 1460,
        0, 1461, 1458,  734, 1459, 1398,    0,  732,  735,  735,
      735,  735,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  736,  736, 1462, 1463,    0, 1398, 1460,  736, 1461,
      737,  734,  737, 1398,  737,  737,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  738,  738, 1464,    0,
        0, 1462, 1463,  738,    0,    0,  736,  739,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      740,  740, 1468,    0, 1469, 1470, 1464,  740,  741,    0,

      741,  738,  741,  741,  741,  741,  741,  741,  741,  742,
      742,  742,  742,  742,  742,  742, 1471, 1480,    0, 1483,
     1468,  742, 1469, 1470,    0,  740,  743,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744, 1484, 1485,    0, 1471, 1480,  744, 1483,  745,  742,
      745,    0,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746, 1486,    0,    0, 1484,
     1485,  746,    0,    0,  744,  747,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
     1488,    0, 1489, 1490, 1486,  748,  749,    0,  749,  746,

      749,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  750,  750, 1491, 1492,    0, 1493, 1488,  750,
     1489, 1490,    0,  748,  751,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752, 1495,
     1496,    0, 1491, 1492,  752, 1493,  753,  750,  753,    0,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,
      754,  754,  754,  754, 1497,    0,    0, 1495, 1496,  754,
        0,    0,  752,  755,  755,  755,  755,  755,  755,  755,
      755,  756,  756,  756,  756,  756,  756,  756, 1817,    0,
     1817, 1498, 1497,  756,  757,    0,  757,  754,  757,  757,

      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  758,  759,  759,  759,  759,  759,  759,  759, 1498,
        0,  756,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761,  762,  762,  762,  762,
      762,  762,  762, 1499, 1500, 1820, 1504, 1820,  762,  763,
      763,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  764,  764, 1505, 1506, 1507, 1508, 1822,  764,
     1822, 1499, 1500,  765, 1504,  765,  762,  765,  765,  765,
      765,  765,  765,  765,  767,  767,  767,  767,  767,  767,
      767, 1509, 1505, 1506, 1507, 1508,  767,  764,  768,  768,

      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  769, 1510, 1513, 1825, 1514, 1825,  769, 1509,
     1827,  770, 1827,  770,  767,  770,  770,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  771,  771,    0,
        0, 1510, 1513,  772, 1514,  772,  769,  772,  772,  772,
      772,  772,  772,  772,  773,  773,  773,  773,  773,  773,
      773,  774, 1829,  774, 1829,  774,  774,  774,  774,  774,
      774,  774,  775,  775,  775,  775,  775,  775,  775,  776,
     1830,  776, 1830,  776,  776,  776,  776,  776,  776,  776,
      777,  777,  777,  777,  777,  777,  777,  778, 1841,  778,

     1841,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  781,  781,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  783,  783,  784,  784,  784,  784,  784,  784,  784,
      785,  785,  785,  785,  785,  785,  785,  786,  786,  786,
      786,  786,  786,  786,  787,  787,  787,  787,  787,  787,
      787,  788,  788,  788,  788,  788,  788,  788,  794,  794,
      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      795,  795,  796,  796,  796,  796,  796,  796,  796,  797,

      797,  797,  797,  797,  797,  797, 1515, 1526, 1850, 1527,
     1850,  797,  798,  798,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799, 1528, 1540, 1545,
     1547, 1550,  799,    0, 1515, 1526,  800, 1527,  800,  797,
      800,  800,  800,  800,  800,  800,  800,  801,  801,  801,
      801,  801,  801,  801,    0, 1528, 1540, 1545, 1547, 1550,
      799,  802,  802,  802,  802,  802,  802,  802,  803,  803,
      803,  803,  803,  803,  803,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807,  810,
      810,  810,  810,  810,  810,  810,  818,  818,  818,  818,

      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
     1551, 1554, 1854, 1555, 1854,  819,  820,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821, 1556, 1557, 1861,    0, 1861,  821,    0, 1551, 1554,
      822, 1555,  822,  819,  822,  822,  822,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  823,  823,    0, 1556,
     1557,  824,  824,  824,  821,  824,  824,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,  825,  826,
     1865,  826, 1865,  826,  826,  826,  826,  826,  826,  826,
      827, 1873,  827, 1873,  827,  827,  827,  827,  827,  827,

      827,  828,  828,  828,  828,  828,  828,  828,  829, 1876,
      829, 1876,  829,  829,  829,  829,  829,  829,  829,  830,
      830,  830,  830,  830,  830,  830,  831, 1881,  831, 1881,
      831,  831,  831,  831,  831,  831,  831,  832,  832,  832,
      832,  832,  832,  832,  833, 1883,  833, 1883,  833,  833,
      833,  833,  833,  833,  833,  834,  834,  834,  834,  834,
      834,  834,  835, 1884,  835, 1884,  835,  835,  835,  835,
      835,  835,  835,  836,  836,  836,  836,  836,  836,  836,
      837, 1885,  837, 1885,  837,  837,  837,  837,  837,  837,
      837,  838,  838,  838,  838,  838,  838,  838,  839,  839,

      839,    0,  839,  839,  839,  839,  839,  839,  839,  840,
      840,  840,  840,  840,  840,  840,  841, 1895,  841, 1895,
      841,  841,  841,  841,  841,  841,  841,  842, 1900,  842,
     1900,  842,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  843,  844, 1908,  844, 1908,  844,
      844,  844,  844,  844,  844,  844,  845,  845,  845,  845,
      845,  845,  845,  846, 1916,  846, 1916,  846,  846,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847,  852,  852,  852,  852,  852,  852,  852,  857,  857,
      857,  857,  857,  857,  857,  858,  858,  858,  858,  858,

      858,  858,  861,  861,  861,  861,  861,  861,  861,  862,
      862,  862,  862,  862,  862,  862,  863,  863,  863,  863,
      863,  863,  863,  947,  947,  947,  947,  947,  947,  947,
      948,  948,  948,  948,  948,  948,  948,  949,  949,  949,
      949,  949,  949,  949,  950,  950,  950,  950,  950,  950,
      950,  951,  951,  951,  951,  951,  951,  951,  952,  952,
      952,  952,  952,  952,  952,  953,  953,  953,  953,  953,
      953,  953,  954,  954,  954,  954,  954,  954,  954,  955,
      955,  955,  955,  955,  955,  955,  956,  956,  956,  956,
      956,  956,  956,  957,  957,  957,  957,  957,  957,  957,

      958,  958,  958,  958,  958,  958,  958,  959,  959,  959,
      959,  959,  959,  959,  960,  960,  960,  960,  960,  960,
      960,  961,  961,  961,  961,  961,  961,  961,  962,  962,
      962,  962,  962,  962,  962,  963,  963,  963,  963,  963,
      963,  963,  964,  964,  964,  964,  964,  964,  964,  965,
      965,  965,  965,  965,  965,  965,  966,  966,  966,  966,
      966,  966,  966,  967,  967,  967,  967,  967,  967,  967,
      968,  968,  968,  968,  968,  968,  968,  969,  969,  969,
      969,  969,  969,  969,  970,  970,  970,  970,  970,  970,
      970,  971,  971,  971,  971,  971,  971,  971,  972,  972,

      972,  972,  972,  972,  972,  973,  973,  973,  973,  973,
      973,  973,  974,  974,  974,  974,  974,  974,  974,  975,
      975,  975,  975,  975,  975,  975,  976,  976,  976,  976,
      976,  976,  976,  977,  977,  977,  977,  977,  977,  977,
      978,  978,  978,  978,  978,  978,  978,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,
      980,  981,  981,  981,  981,  981,  981,  981,  982,  982,
      982,  982,  982,  982,  982,  983,  983,  983,  983,  983,
      983,  983,  984,  984,  984,  984,  984,  984,  984,  985,
      985,  985,  985,  985,  985,  985,  986,  986,  986,  986,

      986,  986,  986,  987,  987,  987,  987,  987,  987,  987,
      988,  988,  988,  988,  988,  988,  988,  989,  989,  989,
      989,  989,  989,  989,  990,  990,  990,  990,  990,  990,
      990,  991,  991,  991,  991,  991,  991,  991,  992,  992,
      992,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      993,  993,  994,  994,  994,  994,  994,  994,  994,  995,
      995,  995,  995,  995,  995,  995,  996,  996,  996,  996,
      996,  996,  996,  997,  997,  997,  997,  997,  997,  997,
      998,  998,  998,  998,  998,  998,  998,  999,  999,  999,
      999,  999,  999,  999, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1010, 1010, 1010,    0, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1012, 1012, 1012,    0, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1083, 1919, 1083, 1919, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1084, 1922, 1084, 1922, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1159, 1929, 1159, 1929, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1161, 1224, 1161,    0, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1224, 1244, 1251,    0, 1249, 1244, 1244, 1244, 1249,
     1249, 1249, 1251, 1268, 1319, 1316, 1259, 1316, 1259, 1224,
     1316, 1316, 1559, 1931, 1319, 1931, 1268, 1259, 1316, 1224,
     1244, 1251, 1259, 1249, 1244, 1244, 1244, 1249, 1249, 1249,
     1251, 1268, 1319, 1316, 1936, 1316, 1936, 1405, 1316, 1316,

     1559, 1400, 1319, 1400, 1268, 1415, 1316, 1415, 1560,    0,
     1259, 1563, 1400, 1405, 1417,    0, 1417, 1400, 1419,    0,
     1419, 1415, 1424,    0, 1424, 1405, 1425, 1427, 1425, 1427,
     1417, 1429,    0, 1429, 1419, 1431, 1560, 1431, 1424, 1563,
        0, 1405, 1425, 1427, 1434, 1400, 1434, 1429, 1435,    0,
     1435, 1431, 1437, 1439, 1437, 1439, 1441, 1443, 1441, 1443,
     1434, 1446,    0, 1446, 1435, 1454,    0, 1454, 1437, 1439,
        0,    0, 1441, 1443, 1467,    0, 1467, 1446, 1472,    0,
     1472, 1454, 1474, 1476, 1474, 1476, 1478, 1481, 1478, 1481,
     1467, 1501, 1487, 1501, 1472, 1502, 1564, 1502, 1474, 1476,

     1487,    0, 1478, 1481,    0,    0, 1511, 1501, 1511, 1454,
     1516, 1502, 1516, 1518, 1520, 1518, 1520, 1529, 1568, 1529,
     1487, 1535, 1511, 1535, 1564, 1536, 1516, 1536, 1487, 1518,
     1520,    0, 1538, 1529, 1538, 1569, 1552, 1535, 1552, 1575,
     1565, 1536, 1565, 1567, 1577, 1567, 1568, 1578, 1538, 1580,
     1581, 1582, 1552, 1583, 1584, 1585, 1565, 1586, 1587, 1567,
     1588, 1591, 1592, 1569, 1593, 1594, 1598, 1575, 1595, 1599,
     1595, 1600, 1577, 1601, 1602, 1578, 1603, 1580, 1581, 1582,
     1604, 1583, 1584, 1585, 1595, 1586, 1587, 1606, 1588, 1591,
     1592, 1607, 1593, 1594, 1598, 1608, 1612, 1599, 1613, 1600,

     1614, 1601, 1602, 1620, 1603, 1616, 1621, 1616, 1604, 1622,
     1623, 1624, 1625, 1626, 1628, 1606, 1629, 1630, 1631, 1607,
     1633, 1616, 1628, 1608, 1612, 1634, 1613, 1632, 1614, 1635,
     1632, 1620, 1635, 1636, 1621,    0, 1636, 1622, 1623, 1624,
     1625, 1626, 1628, 1638, 1629, 1630, 1631, 1637, 1633, 1637,
     1628, 1642, 1640, 1634, 1640, 1632, 1643, 1635, 1632, 1644,
     1635, 1636, 1646, 1637, 1636, 1645, 1649, 1645, 1640, 1648,
     1647, 1638, 1647, 1650, 1648, 1650, 1651, 1652, 1651, 1642,
     1653, 1645, 1655, 1648, 1643, 1656, 1647, 1644, 1658, 1650,
     1646, 1654, 1651, 1654, 1649, 1659, 1660, 1648, 1661, 1662,

     1663, 1658, 1648, 1665, 1666, 1652, 1667, 1654, 1653, 1668,
     1655, 1648, 1669, 1656, 1670, 1672, 1658, 1671, 1673, 1671,
     1674, 1675, 1676, 1659, 1660, 1677, 1661, 1662, 1663, 1658,
     1679, 1665, 1666, 1671, 1667, 1680, 1681, 1668, 1681, 1682,
     1669, 1683, 1670, 1672, 1685, 1684, 1673, 1684, 1674, 1675,
     1676, 1686, 1681, 1677, 1687, 1688, 1690, 1689, 1679, 1689,
     1691, 1684, 1692, 1680, 1693, 1694, 1695, 1682, 1696, 1683,
     1697, 1698, 1685, 1689, 1701, 1699, 1703, 1699, 1704, 1686,
     1705, 1708, 1687, 1688, 1690, 1706, 1711, 1706, 1691, 1712,
     1692, 1699, 1693, 1694, 1695, 1709, 1696, 1709, 1697, 1698,

     1713, 1706, 1701, 1713, 1703, 1714, 1704, 1714, 1705, 1708,
     1715, 1709, 1715, 1717, 1711, 1717, 1719, 1712, 1720, 1723,
     1721, 1714, 1721, 1724, 1725, 1724, 1715, 1726, 1713, 1717,
     1727, 1713, 1728, 1729, 1730, 1731, 1721, 1732, 1733, 1724,
     1735, 1736, 1737, 1738, 1719, 1741, 1720, 1723, 1739, 1742,
     1739, 1743, 1725, 1743, 1744, 1726, 1745, 1747, 1727, 1751,
     1728, 1729, 1730, 1731, 1739, 1732, 1733, 1743, 1735, 1736,
     1737, 1738, 1746, 1741, 1746, 1752, 1749, 1742, 1749, 1753,
     1761, 1753, 1744, 1762, 1745, 1747,    0, 1751, 1746, 1755,
        0, 1755, 1749, 1763, 1756, 1753, 1756, 1757, 1758, 1757,

     1758, 1764, 1759, 1752, 1759, 1755, 1765, 1766, 1761, 1767,
     1756, 1762, 1768, 1757, 1758, 1769, 1772, 1773, 1759, 1774,
     1771, 1763, 1771, 1776, 1779, 1780, 1781, 1786, 1787, 1764,
     1782, 1789, 1782, 1755, 1765, 1766, 1771, 1767, 1792, 1793,
     1768, 1794, 1795, 1769, 1772, 1773, 1782, 1774, 1790, 1798,
     1790, 1776, 1779, 1780, 1781, 1786, 1787, 1799, 1797, 1789,
     1797, 1801, 1802, 1800, 1790, 1800, 1792, 1793, 1803, 1794,
     1795, 1804, 1805, 1807, 1797, 1808, 1809, 1798, 1809, 1800,
     1811, 1812, 1813, 1815, 1813, 1799, 1816, 1818, 1819, 1801,
     1802, 1821, 1809, 1821, 1823, 1831, 1803, 1832, 1813, 1804,

     1805, 1807, 1824, 1808, 1824,    0, 1834, 1821, 1811, 1812,
     1826, 1815, 1826, 1835, 1816, 1818, 1819, 1828, 1824, 1828,
     1836, 1838, 1823, 1831, 1842, 1832, 1826, 1840, 1843, 1840,
     1844, 1846, 1847, 1828, 1834, 1845, 1848, 1845, 1849, 1851,
     1852, 1835, 1855, 1840, 1856, 1853, 1857, 1853, 1836, 1838,
     1858, 1845, 1842, 1859, 1859, 1859, 1843, 1862, 1844, 1846,
     1847, 1853, 1863, 1860, 1848, 1860, 1849, 1851, 1852, 1866,
     1855, 1864, 1856, 1864, 1857, 1867, 1868, 1867, 1858, 1860,
     1869, 1859, 1859, 1859, 1870, 1862, 1871, 1864, 1872, 1878,
     1863, 1867, 1879, 1874, 1875, 1874, 1875, 1866, 1880,    0,

     1882, 1886, 1888, 1889, 1868, 1890, 1892, 1894, 1869, 1874,
     1875, 1877, 1870, 1877, 1871, 1898, 1872, 1878,    0, 1901,
     1879, 1902, 1877, 1877, 1903,    0, 1880, 1877, 1882, 1886,
     1888, 1889,    0, 1890, 1892, 1894, 1904, 1896, 1875, 1896,
     1897, 1909, 1897, 1898, 1899, 1910, 1899, 1901, 1911, 1902,
     1912,    0, 1903, 1896,    0, 1905, 1897, 1905,    0, 1907,
     1899, 1907, 1918, 1913, 1904, 1913, 1914,    0, 1914, 1909,
     1915, 1905, 1915, 1910, 1925, 1907, 1911,    0, 1912, 1913,
        0, 1917, 1914, 1917, 1926, 1920, 1915, 1920, 1927, 1921,
     1918, 1921, 1923, 1924, 1923, 1924,    0, 1917, 1928, 1937,

     1928, 1920, 1925,    0, 1930, 1921, 1930,    0, 1923, 1924,
        0, 1932, 1926, 1932, 1928, 1933, 1927, 1933, 1938, 1934,
     1930, 1934, 1935, 1939, 1935, 1940, 1941, 1937, 1942, 1943,
     1944, 1933, 1945, 1946, 1947, 1934, 1948, 1924, 1935, 1932,
     1949, 1932, 1951, 1950, 1951, 1950, 1938, 1952, 1953, 1952,
     1953, 1939, 1954, 1940, 1941, 1956, 1942, 1943, 1944, 1950,
     1945, 1946, 1947, 1952, 1948, 1955, 1958, 1955, 1949, 1959,
     1960, 1961, 1960, 1961, 1962, 1963, 1964, 1963, 1965, 1966,
     1954, 1967, 1968, 1956, 1968, 1969, 1960, 1969, 1971, 1970,
     1971, 1970,    0, 1973, 1958, 1973,    0, 1959, 1968, 1972,

        0, 1972, 1962,    0, 1964, 1970, 1965, 1966, 1974, 1967,
     1974, 1975, 1976, 1975, 1976, 1972, 1977, 1978, 1977, 1978,
     1979, 1980, 1979, 1980, 1974, 1981, 1990, 1981, 1976, 1982,
     1991, 1982, 1977, 1983, 1985, 1983, 1985, 1980, 1984, 1984,
     1984, 1986, 1988, 1986, 1988, 1982, 1989, 1992, 1989, 1992,
     1985, 1993, 1997, 1993, 1990, 2000, 2002, 1986, 1991, 1994,
     1995, 1994, 1995, 1992, 2003, 2004, 1984, 1984, 1984, 1996,
     1998, 1996, 1998, 2005, 1999, 1994, 1999, 2006, 2007, 2008,
     1997, 2009,    0, 2000, 2002, 2010, 1998, 2010, 2013, 2011,
     1999, 2011, 2003, 2004, 2012, 2014, 2012, 2015, 2016, 2018,

     2017, 2005, 2017, 2020, 2022, 2006, 2007, 2008,    0, 2009,
     2012, 2023, 2019, 2023, 2019, 2024, 2013, 2024, 2025, 2026,
     2025, 2026, 2027, 2014, 2027, 2015, 2016, 2018, 2019,    0,
     2040, 2020, 2022, 2028, 2029, 2028, 2029, 2030, 2027, 2030,
     2031, 2032, 2031, 2032, 2033, 2034, 2033, 2034, 2035, 2036,
     2035, 2036, 2037, 2038, 2037, 2038, 2039, 2032, 2040, 2039,
     2033, 2034, 2041, 2042, 2035, 2042, 2044, 2043, 2037, 2043,
     2045, 2046, 2045, 2046, 2048, 2047, 2048, 2047, 2049, 2051,
     2052, 2055, 2056, 2057, 2039, 2050, 2045, 2039, 2058,    0,
     2041, 2047, 2062, 2050, 2044, 2050, 2059, 2060, 2059, 2060,

     2063, 2061, 2064, 2061, 2065, 2068, 2049, 2051, 2052, 2055,
     2056, 2057, 2059, 2050, 2070,    0, 2058, 2061,    0,    0,
     2062, 2050, 2066, 2050, 2066, 2067, 2069, 2067, 2063, 2080,
     2064, 2069, 2065, 2068, 2071, 2072, 2071, 2072, 2066, 2069,
     2081, 2073, 2070, 2073, 2074, 2075, 2074, 2075, 2076, 2082,
     2076, 2072, 2083, 2077, 2069, 2077, 2078, 2080, 2078, 2069,
     2074, 2079, 2084, 2079, 2076, 2087, 2088, 2069, 2081, 2085,
     2086, 2085, 2086, 2089, 2090, 2091, 2092, 2082, 2093, 2094,
     2083, 2095, 2096, 2097, 2098, 2099, 2102, 2099, 2093, 2100,
     2084, 2100, 2104, 2087, 2088, 2101, 2105, 2101, 2106, 2108,

     2106, 2089, 2090, 2091, 2092, 2100, 2093, 2094, 2109, 2095,
     2096, 2097, 2098, 2103, 2102, 2103, 2093, 2110, 2115, 2111,
     2104, 2111, 2116, 2112, 2105, 2112, 2113, 2108, 2113, 2103,
     2114, 2117, 2114, 2117, 2118, 2111, 2109, 2119, 2120, 2119,
     2120, 2121, 2122, 2123, 2125, 2110, 2115, 2117, 2126, 2124,
     2116, 2124, 2127, 2119, 2120, 2128, 2130, 2129, 2131, 2129,
     2131, 2132, 2118, 2111, 2133, 2124, 2133, 2134, 2138, 2121,
     2122, 2123, 2125, 2129, 2131, 2135, 2126, 2135, 2139, 2136,
     2127, 2136, 2140, 2128, 2130, 2137, 2141, 2137, 2142, 2132,
     2146, 2135, 2143, 2147, 2143, 2134, 2138, 2144, 2149, 2144,

     2149, 2137, 2145, 2145, 2145,    0, 2139, 2148, 2143, 2148,
     2140, 2150,    0, 2150, 2141, 2155, 2142, 2151, 2146, 2151,
     2152, 2147, 2152, 2148, 2153, 2156, 2153, 2150, 2157, 2161,
     2145, 2145, 2145, 2151, 2154, 2158, 2154, 2158, 2162, 2159,
     2153, 2159, 2160, 2155, 2160, 2163, 2164, 2165, 2164, 2165,
     2170, 2158, 2166, 2156, 2166,    0, 2157, 2161, 2160, 2167,
     2174, 2167, 2164, 2168, 2175, 2168, 2162, 2169, 2166, 2169,
     2171, 2176, 2171, 2163, 2172, 2167, 2172, 2173, 2170, 2173,
     2177, 2178, 2179, 2169, 2179, 2180, 2183, 2180, 2174, 2181,
     2172, 2181, 2175, 2184, 2182, 2185, 2182, 2185, 2191, 2176,

     2186, 2180, 2186, 2196, 2187, 2181, 2187, 2197, 2177, 2178,
     2182, 2188, 2198, 2188, 2183, 2189, 2186, 2189, 2193,    0,
     2193, 2184, 2194, 2195, 2194, 2195, 2191, 2199, 2200, 2199,
     2200, 2196, 2201, 2207, 2201, 2197, 2208, 2202, 2194, 2202,
     2198, 2203, 2209, 2203, 2200, 2204, 2205, 2204, 2205, 2206,
     2210, 2206, 2211, 2212, 2213, 2212, 2213, 2203, 2214, 2218,
     2214, 2207, 2205, 2215, 2208, 2215, 2216, 2219, 2216, 2212,
     2209, 2217, 2221, 2217, 2214, 2220, 2222, 2220, 2210, 2223,
     2211, 2224, 2216, 2224, 2227, 2232, 2228, 2218, 2228, 2229,
     2230, 2229, 2230, 2233, 2231, 2219, 2231, 2235, 2236, 2237,

     2221, 2237, 2240, 2238, 2222, 2238, 2230, 2223, 2239, 2242,
     2239, 2244, 2227, 2232, 2245, 2241, 2243, 2241, 2243, 2246,
     2247, 2233, 2248, 2249, 2248, 2235, 2236, 2250, 2251, 2252,
     2240, 2241, 2243, 2253, 2254, 2257, 2255, 2242, 2255, 2244,
     2260, 2256, 2245, 2256, 2258, 2261, 2258, 2246, 2247, 2262,
     2264, 2249, 2255,    0, 2265, 2250, 2251, 2252, 2266, 2267,
     2258, 2253, 2254, 2257, 2259, 2263, 2259, 2263, 2260, 2268,
     2269, 2271, 2270, 2261, 2270, 2273, 2274, 2262, 2264, 2275,
        0, 2263, 2265, 2272, 2282, 2272, 2266, 2267, 2277, 2276,
     2277, 2276, 2278, 2280, 2278, 2280, 2283, 2268, 2269, 2271,

     2279, 2284, 2279, 2273, 2274, 2276, 2285, 2275, 2278, 2280,
     2286, 2279, 2282, 2287,    0, 2288, 2279, 2288, 2290, 2289,
     2290, 2289,    0, 2291, 2283, 2291, 2292, 2299, 2292, 2284,
     2293, 2294, 2293, 2294, 2285, 2289, 2300, 2301, 2286, 2291,
     2302, 2287, 2292, 2295, 2297, 2295, 2297, 2294, 2296, 2296,
     2296, 2298, 2303, 2298, 2303, 2299, 2304, 2305, 2304, 2305,
     2297, 2306,    0, 2306, 2300, 2301,    0, 2298, 2302, 2307,
        0, 2307, 2304, 2308, 2317, 2308, 2296, 2296, 2296, 2309,
     2310, 2309, 2310, 2311, 2312, 2311, 2312, 2318, 2313, 2308,
     2313, 2314, 2315, 2314, 2315, 2309, 2310,    0, 2316, 2311,

     2316, 2319, 2317, 2319, 2313, 2320,    0, 2320, 2315, 2321,
     2322, 2321, 2322,    0, 2316, 2318, 2323, 2324, 2323, 2324,
     2325, 2320, 2325, 2326,    0, 2326, 2322, 2327, 2328, 2327,
     2328,    0, 2329, 2324, 2329, 2330, 2331, 2330, 2331, 2332,
     2333, 2332, 2333, 2334, 2328, 2334, 2335, 2336, 2335, 2336,
     2337, 2330, 2337,    0,    0, 2332, 2333, 2338, 2339, 2338,
     2339, 2340, 2341, 2340, 2341, 2342, 2343, 2342, 2343, 2344,
        0, 2344,    0,    0, 2339,    0,    0,    0, 2341, 2346,
     2346, 2346, 2346, 2346, 2347, 2347, 2347, 2347, 2347, 2348,
     2348, 2348, 2348, 2348, 2349, 2349, 2349, 2349, 2349, 2350,

     2350, 2350, 2350, 2350, 2351, 2351, 2351, 2351, 2351, 2352,
     2352, 2352, 2352, 2352, 2353, 2353, 2353, 2353, 2353, 2354,
     2354, 2354, 2354, 2354, 2355, 2355, 2355, 2355, 2355, 2356,
     2356, 2356, 2356, 2356, 2357, 2357, 2357, 2357, 2357, 2358,
     2358, 2358, 2358, 2358, 2359, 2359, 2359, 2359, 2359, 2360,
     2360, 2360, 2360, 2360, 2361, 2361, 2361, 2361, 2361, 2362,
     2362, 2362, 2362, 2362, 2363, 2363, 2363, 2363, 2363, 2364,
     2364, 2364, 2364, 2364, 2365, 2365, 2365, 2365, 2365, 2366,
     2366, 2366, 2366, 2366, 2367, 2367, 2367, 2367, 2367, 2368,
     2368, 2368, 2368, 2368, 2369, 2369, 2369, 2369, 2369, 2370,

     2370, 2370, 2370, 2370, 2371, 2371, 2371, 2371, 2371, 2372,
     2372, 2372, 2372, 2372, 2373, 2373, 2373, 2373, 2373, 2374,
     2374, 2374, 2374, 2374, 2375, 2375, 2375, 2375, 2375, 2376,
     2376, 2376, 2376, 2376, 2377, 2377, 2377, 2377, 2377, 2378,
     2378, 2378, 2378, 2378, 2379, 2379, 2379, 2379, 2379, 2380,
     2380, 2380, 2380, 2380, 2381, 2381, 2381, 2381, 2381, 2382,
     2382, 2382, 2382, 2382, 2383, 2383, 2383, 2383, 2383, 2384,
     2384, 2384, 2384, 2384, 2385, 2385, 2385, 2385, 2385, 2386,
     2386, 2386, 2386, 2386, 2387, 2387, 2387, 2387, 2387, 2388,
     2388, 2389, 2389, 2390, 2390, 2391, 2391, 2392, 2392, 2393,

     2393, 2394, 2394, 2395, 2395, 2397, 2397, 2398, 2398, 2399,
     2399, 2400, 2400, 2401, 2401, 2402, 2402, 2403, 2403, 2405,
     2405, 2423, 2423, 2424, 2424, 2425, 2425, 2426, 2426, 2427,
     2427,    0, 2427, 2427, 2428,    0,    0, 2428, 2428, 2429,
     2429, 2430, 2430, 2431, 2431, 2432, 2432, 2433, 2433, 2434,
     2434, 2435, 2435, 2436, 2436, 2438, 2438, 2439, 2439, 2440,
     2440, 2441, 2441, 2442, 2442, 2443, 2443, 2444, 2444, 2446,
     2446, 2464, 2464, 2465, 2465, 2466, 2466, 2467, 2467, 2468,
     2468,    0, 2468, 2468, 2469,    0,    0, 2469, 2469, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,

     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 22 "read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}


















































































































































#line 4006 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define SOURCEID 16
#define SOURCEID2 17
#define GAUGEID 18
#define GAUGEID2 19
#define GAUGESTEP 20
#define NNSAVE 21
#define FFORMAT 22
#define BCT 23
#define BCX 24
#define BCY 25
#define BCZ 26
#define PREFIX 27
#define PREFIX2 28
#define PREFIX3 29
#define SEQPREFIX 30
#define SEQPREFIX2 31
#define GAUGEPREFIX 32
#define OUTPREFIX 33
#define PATHPREFIX 34
#define RESUME 35
#define SUBTRACT 36
#define SOURCELOC 37
#define SSEED 38
#define NOISETYPE 39
#define SRCTYPE 40
#define SPREC 41
#define MAXITER 42
#define SOURCEIDSTEP 43
#define HPEMIN 44
#define HPEMAX 45
#define HPEORD 46
#define CUTDIRT 47
#define CUTDIRX 48
#define CUTDIRY 49
#define CUTDIRZ 50
#define CUTANG 51
#define CUTRAD 52
#define RMIN 53
#define RMAX 54
#define AVGTT 55
#define AVGLL 56
#define MODEL_DCOEFFRE 57
#define MODEL_DCOEFFIM 58
#define MODEL_MRHO 59
#define FTRMAX1 60
#define FTRMAX2 61
#define FTRMAX3 62
#define FTRMAX4 63
#define PROPNORMSQR 64
#define QHATSQRMIN 65
#define QHATSQRMAX 66
#define NLONG 67
#define NAPE 68
#define NJACOBI 69
#define NHYP 70
#define ALPHAAPE 71
#define ALPHAHYP 72
#define KAPPAJACOBI 73
#define SRCTIMESLICE 74
#define SEQSRCTIMESLICE 75
#define SEQSRCLOCATIONX 76
#define SEQSRCLOCATIONY 77
#define SEQSRCLOCATIONZ 78
#define SEQSRCGAMMAID 79
#define SRCGAMMAID 80
#define MMSNOMASSES 81
#define NOLIGHTMASSES 82
#define NOSTRANGEMASSES 83
#define NOTPROCS 84
#define NOXPROCS 85
#define NOYPROCS 86
#define NOZPROCS 87
#define LOCLOC 88
#define LOCSME 89
#define SMELOC 90
#define SMESME 91
#define ROTATE 92
#define PROPPOS 93
#define GPUDEVICENUMBER 94
#define GPUPERNODE 95
#define RELDELTA 96
#define COHSRC 97
#define COHSRCBASE 98
#define COHSRCDELTA 99
#define GAUGEFILEFORMAT 100
#define RNGFILE 101
#define SRCINDEX 102
#define PROPBCTYPE 103
#define PROPGAMMA 104
#define PROPPREC 105
#define WRITESRC 106
#define READSRC 107
#define WRITEPROP 108
#define READPROP 109
#define READSEQPROP 110
#define WRITESEQSRC 111
#define WRITESEQPROP 112
#define NSAMPLE 113
#define ASOVERA 114
#define NUMTHREADS 115
#define SRCMOM 116
#define SRCMOMX 117
#define SRCMOMY 118
#define SRCMOMZ 119
#define SNKMOMX 120
#define SNKMOMY 121
#define SNKMOMZ 122
#define SEQSRCMOM 123
#define SEQSRCMOMX 124
#define SEQSRCMOMY 125
#define SEQSRCMOMZ 126
#define CPUPREC 127
#define GPUPREC 128
#define GPUPRECSLOPPY 129
#define INVERTERTYPE 130
#define MMSID 131
#define CHKINVERSION 132
#define LAPHSTIMEPROJTYPE 133
#define LAPHSSPINPROJTYPE 134
#define LAPHSEVECPROJTYPE 135
#define LAPHSEVECNUMBER 136
#define LAPHSRNDVECNUMBER 137
#define LAPHSEVECPATHPRFX 138
#define LAPHSEVECFILEPRFX 139
#define LAPHS_TIME_SRC_NUMBER 140
#define LAPHS_SPIN_SRC_NUMBER 141
#define LAPHS_EVEC_SRC_NUMBER 142
#define LAPHS_PERAMBULATOR_PATH_PREFIX 143
#define LAPHS_PERAMBULATOR_FILE_PREFIX 144
#define COMMENT 145
#define ERROR 146

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

int cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 204 "read_input_parser_cvc.l"

#line 4344 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2346 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2345 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 205 "read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 206 "read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 207 "read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 208 "read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 209 "read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 210 "read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 211 "read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 212 "read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 213 "read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 214 "read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 215 "read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 216 "read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 217 "read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 218 "read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 219 "read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 220 "read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 221 "read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 222 "read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 223 "read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 224 "read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 225 "read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 226 "read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 227 "read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 228 "read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 229 "read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 230 "read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 231 "read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 232 "read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 233 "read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 234 "read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 235 "read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 236 "read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 237 "read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 238 "read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 240 "read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 241 "read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 242 "read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 243 "read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 244 "read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 245 "read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 246 "read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 247 "read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 248 "read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 249 "read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 250 "read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 251 "read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 252 "read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 253 "read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 254 "read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 255 "read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 256 "read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 257 "read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 258 "read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 259 "read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 260 "read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 261 "read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 262 "read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 263 "read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 264 "read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 265 "read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 266 "read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 267 "read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 268 "read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 269 "read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 270 "read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 271 "read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 272 "read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 273 "read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 274 "read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 275 "read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 276 "read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 277 "read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 278 "read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 279 "read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 281 "read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 282 "read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 283 "read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 284 "read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 290 "read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 291 "read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 292 "read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 293 "read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 294 "read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 295 "read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 296 "read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 297 "read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 298 "read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 299 "read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 300 "read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 301 "read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 302 "read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 303 "read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 304 "read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 305 "read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 306 "read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 307 "read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 308 "read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 309 "read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 310 "read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 311 "read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 312 "read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 313 "read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 314 "read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 315 "read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 317 "read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 318 "read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 320 "read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 321 "read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 322 "read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 326 "read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 327 "read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 328 "read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 329 "read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 330 "read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 331 "read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 332 "read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 333 "read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 335 "read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 336 "read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 337 "read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 338 "read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 339 "read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 340 "read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 341 "read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 343 "read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 345 "read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 346 "read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 347 "read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 348 "read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 349 "read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 350 "read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 351 "read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 352 "read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 353 "read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 354 "read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 356 "read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 357 "read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
/* start namespace inclusion here */
case 145:
YY_RULE_SETUP
#line 362 "read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 366 "read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 370 "read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 374 "read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 378 "read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 382 "read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 386 "read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 390 "read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 394 "read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 398 "read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 402 "read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 406 "read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 410 "read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 414 "read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 418 "read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 422 "read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 426 "read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 430 "read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 434 "read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 438 "read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 442 "read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 446 "read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 450 "read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 454 "read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 458 "read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 462 "read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 466 "read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 470 "read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 474 "read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 479 "read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 484 "read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 489 "read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 493 "read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 497 "read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 501 "read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 505 "read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 509 "read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 513 "read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 517 "read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 521 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 529 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 547 "read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 551 "read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 555 "read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 559 "read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 563 "read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 567 "read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 571 "read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 575 "read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 579 "read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 583 "read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 587 "read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 591 "read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 595 "read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 599 "read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 603 "read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 607 "read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 611 "read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 615 "read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 619 "read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 623 "read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 627 "read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 631 "read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 635 "read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 639 "read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 643 "read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 647 "read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 651 "read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 655 "read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 659 "read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 663 "read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 667 "read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 671 "read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 676 "read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 680 "read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 684 "read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 693 "read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 697 "read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 701 "read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 706 "read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 715 "read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 725 "read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 729 "read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 733 "read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 737 "read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 741 "read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 745 "read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 749 "read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 754 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 760 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 766 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 772 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 778 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 784 "read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 789 "read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 793 "read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 798 "read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 803 "read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 808 "read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 812 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 820 "read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 825 "read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 830 "read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 834 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 844 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 852 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 860 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 868 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 876 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 885 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 894 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 903 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 911 "read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 915 "read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 919 "read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 923 "read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 928 "read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 933 "read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 938 "read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 944 "read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 952 "read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 957 "read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 962 "read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 967 "read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 972 "read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 977 "read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 983 "read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 990 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1000 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1010 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1020 "read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1024 "read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1028 "read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1037 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1042 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1047 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1053 "read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1058 "read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1063 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1068 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1073 "read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1078 "read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1083 "read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1089 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1094 "read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1102 "read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1106 "read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1110 "read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 1114 "read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1119 "read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1122 "read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 296:
YY_RULE_SETUP
#line 1129 "read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 6478 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2346 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2346 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2345);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
int cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1129 "read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

