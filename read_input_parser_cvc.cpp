
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 321
#define YY_END_OF_BUFFER 322
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2552] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  317,  317,  320,  320,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      322,  319,  319,  318,  316,  315,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  158,  161,  162,  163,
      159,  160,  174,  319,  164,  319,  319,  165,  319,  319,
      167,  319,  319,  168,  319,  319,  169,  319,  319,  166,
      319,  319,  170,  319,  319,  171,  319,  319,  172,  319,
      179,  180,  182,  183,  184,  319,  173,  196,  319,  175,
      319,  319,  176,  319,  319,  177,  319,  319,  178,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  193,  194,
      195,  197,  198,  319,  319,  200,  319,  202,  181,  203,
      204,  205,  208,  209,  210,  211,  319,  206,  319,  319,
      207,  319,  319,  212,  319,  319,  213,  319,  214,  215,
      319,  216,  319,  319,  217,  319,  319,  218,  319,  319,
      219,  319,  319,  220,  319,  319,  221,  319,  319,  222,
      319,  319,  223,  319,  319,  224,  319,  319,  225,  319,
      226,  227,  229,  228,  319,  230,  319,  319,  319,  232,
      319,  233,  319,  234,  319,  235,  319,  236,  319,  237,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  319,

      319,  319,  319,  319,  252,  253,  254,  319,  201,  319,
      255,  256,  257,  258,  319,  319,  260,  262,  270,  271,
      263,  264,  265,  266,  267,  268,  269,  272,  273,  319,
      274,  319,  275,  319,  319,  319,  276,  319,  277,  319,
      278,  319,  319,  319,  280,  319,  281,  319,  282,  319,
      319,  319,  284,  319,  285,  319,  286,  319,  319,  319,
      288,  319,  289,  319,  290,  292,  293,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  319,  319,  305,  306,
      307,  319,  317,  317,  316,  315,  319,  319,  316,  315,
      319,  319,  319,  319,  313,  314,    0,  316,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    0,  158,
      161,  162,  163,  159,  160,  174,  164,    0,  164,    0,
      165,    0,  165,    0,  167,    0,  167,    0,  168,    0,
      168,    0,  169,    0,  169,    0,  166,    0,  166,    0,
      170,    0,  170,    0,  171,    0,  171,    0,  172,    0,

      172,    0,  179,  180,  182,  183,  184,  173,    0,  196,
      175,    0,  175,    0,  176,    0,  176,    0,  177,    0,
      177,    0,  178,    0,  178,    0,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  197,  198,  199,
      200,    0,  200,    0,  202,  181,  203,  204,  205,  208,
      209,  210,  211,  206,    0,  206,    0,  207,    0,  207,
        0,  212,    0,  212,    0,  213,    0,  213,    0,  214,
      215,  216,    0,  216,    0,  217,    0,  217,    0,  218,
        0,  218,    0,  219,    0,  219,    0,  220,    0,  220,
        0,  221,    0,  221,    0,  222,    0,  222,    0,  223,

        0,  223,    0,  224,    0,  224,    0,  225,    0,  225,
        0,  226,  227,  229,  228,  230,    0,  230,    0,  231,
      232,    0,  232,    0,  233,  234,    0,  235,    0,  236,
        0,  237,    0,  238,  239,  240,  241,  242,  243,  244,
      245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
      201,    0,  201,    0,  255,  256,  257,  258,  259,  261,
      260,  262,  270,  271,  263,  264,  265,  266,  267,  268,
      269,  272,  273,  274,    0,  274,    0,  275,    0,    0,
        0,  276,    0,  277,    0,  278,    0,    0,    0,    0,
      280,    0,  281,    0,  282,    0,    0,    0,    0,  284,

        0,  285,    0,  286,    0,    0,    0,    0,  288,    0,
      289,    0,  290,    0,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  317,  317,  316,  320,  320,  316,  309,  311,  312,
      310,  313,  314,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    3,    2,    0,    0,    0,    4,
        0,    5,    0,    6,    0,   12,    0,   11,    0,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    0,    0,  164,    0,  165,    0,  167,    0,
      168,    0,  169,    0,  166,    0,  170,    0,  171,    0,
      172,    0,  175,    0,  176,    0,  177,    0,  178,    0,
      200,    0,  206,    0,  207,    0,  212,    0,  213,    0,
      216,    0,  217,    0,  218,    0,  219,    0,  220,    0,
      221,    0,  222,    0,  223,    0,  224,    0,  225,    0,
      230,    0,  232,    0,  201,    0,  274,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    3,    0,    0,
        4,    5,    6,   12,   11,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
        0,   58,    0,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,    0,   56,
        0,    0,    0,    0,   40,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  279,    0,  283,    0,
      287,    0,  291,    0,    0,   59,   58,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,    0,    0,    0,   62,    0,   10,    0,    0,    0,

        0,    0,   15,    0,    0,   70,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   22,    0,    0,   71,    0,
       74,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   57,   56,    0,    0,    0,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  139,   10,    0,    0,    0,    0,   15,
        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,

       22,    0,   71,   74,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,    0,    9,
        0,    8,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   36,    0,    0,    0,  115,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,   25,    0,   26,    0,   27,
        0,    0,    0,    0,    0,   52,    0,   53,    0,   54,
        0,   55,    0,    0,    0,    0,    0,    0,   63,    0,
       64,    0,   65,    0,   66,    0,    0,   20,   19,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    9,    8,    0,  153,    0,
        0,    0,    0,    0,    0,   87,    0,   88,    0,   89,

        0,   90,    0,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,    0,   73,    0,   75,    0,  117,   24,   25,
       26,   27,    0,    0,    0,    0,   50,   52,   53,   54,
       55,    0,    0,   61,    0,   60,    0,    0,   63,   64,
       65,   66,    0,   20,    0,    0,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   45,    0,    0,    0,    0,   87,

       88,   89,   90,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   18,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   37,    0,    0,
        0,   73,   75,  117,    0,    0,    0,   50,    0,   51,
       61,   60,    0,    0,    0,    0,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   45,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,  154,   41,    0,    0,    0,    0,  118,    0,
        0,   35,    0,    0,    0,    0,    0,   69,    0,   68,
        0,    0,    0,  109,    0,    0,    0,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,  155,    0,    0,    0,   21,    0,

        0,    0,   98,    0,    0,    0,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
      154,    0,    0,    0,  118,    0,   35,    0,    0,    0,
        0,    0,   67,   69,   68,    0,    0,  109,    0,    0,
      103,    0,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,  108,    0,    0,    0,  135,  155,    0,
        0,   21,    0,    0,   98,    0,  136,    0,    0,   48,
        0,   47,    0,  138,   76,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,

        0,    0,    0,    0,   67,    0,    0,    0,  103,    0,
        0,    0,    0,    0,    0,  123,    0,    0,   93,    0,
        0,    0,   46,    0,   39,    0,    0,    0,    0,    0,
        0,    0,    0,  108,    0,    0,  135,    0,    0,    0,
        0,  136,    0,   48,   47,  138,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,   44,    0,
        0,    0,    0,    0,  123,    0,    0,    0,   93,    0,
        0,   46,   39,    0,    0,  104,    0,    0,    0,    0,
        0,    0,    0,  140,    0,   99,    0,    0,    0,    0,

       28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   84,    0,   85,    0,   34,
        0,    0,    0,    0,    0,  111,    0,   44,    0,    0,
        0,    0,    0,    0,  124,    0,  125,    0,  126,    0,
       94,    0,    0,   83,  104,    0,   38,    0,  119,    0,
        0,    0,    0,    0,  140,   99,    0,    0,    0,    0,
       29,    0,   30,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   84,   85,    0,
        0,    0,    0,    0,  111,    0,    0,    0,    0,    0,
        0,  124,  125,  126,   94,    0,   43,   83,   38,  119,

        0,    0,    0,    0,   77,    0,    0,  110,    0,    0,
        0,    0,   29,   30,    0,    0,  102,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,    0,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,   43,    0,  120,    0,  121,    0,  122,   77,
        0,  110,    0,    0,    0,    0,    0,    0,  102,   97,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   86,    0,  105,    0,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,  120,  121,  122,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
        0,    0,   96,    0,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,  100,    0,    0,
        0,   33,    0,  137,    0,    0,    0,    0,  143,    0,
        0,    0,    0,    0,  142,    0,    0,  141,    0,    0,
       96,    0,  107,    0,    0,  134,    0,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,    0,  100,    0,
      101,    0,   33,  137,    0,    0,    0,  143,    0,  150,
        0,    0,    0,  142,    0,  149,  141,    0,  148,    0,
      107,    0,  134,    0,    0,    0,    0,    0,    0,    0,

        0,  127,    0,  128,    0,  129,    0,    0,    0,  101,
        0,  157,    0,    0,    0,  150,    0,    0,    0,  149,
      148,    0,  106,    0,    0,  131,    0,  132,    0,  133,
        0,    0,    0,    0,  127,  128,  129,    0,    0,    0,
      157,    0,    0,    0,    0,    0,    0,  106,    0,  131,
      132,  133,    0,    0,    0,    0,    0,  156,    0,    0,
      113,    0,    0,  144,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,    0,  113,    0,  144,    0,    0,
        0,    0,  145,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  145,    0,  112,    0,    0,   31,    0,

       82,    0,    0,    0,    0,    0,    0,    0,  112,    0,
       32,   31,   82,    0,    0,    0,    0,   78,    0,  114,
        0,    0,    0,    0,   32,    0,   79,    0,   80,    0,
       81,   78,  114,    0,  147,    0,  146,    0,    0,   79,
       80,   81,  147,  146,    0,  152,    0,  151,  152,  151,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    7,
        7,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,    1,    7,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   47,   47,   47,   48,   47,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[2676] =
    {   0,
        0,    6,   79,   97,  115,  133,  151,  169,  187,  205,
      223,  241,  259,  277,  295,  313,  331,  349,  367,  385,
      403,  421,  439,  457,  475,  493,  511,  529,  547,  565,
      583,  601,  619,  637,  655,  673,  691,  709,  727,  745,
      763,  781,  799,  817,  835,  853,  871,  889,  907,  925,
      943,  961,  979,  997, 1015, 1033, 1052, 1061, 1076, 1085,
     1108, 1118, 1133, 1142, 1165, 1175, 1190, 1199, 1222, 1232,
     1247, 1256, 1268, 1293, 1311, 1329, 1347, 1365, 1383, 1401,
     1420, 1467, 1435, 1444, 1513, 1531, 1482, 1549, 1567, 1585,
     1603, 1621, 1639, 1657, 1675, 1693, 1711, 1729, 1747, 1765,

     1783, 1801, 1819, 1837, 1855, 1873, 1891, 1909, 1927, 1945,
     1963, 1981, 1999, 2017, 2035, 2053, 2071, 2089, 2107, 2125,
     2143, 2161, 2179, 2197, 2215, 2233, 2251, 2269, 2287, 2305,
     2323, 2341, 2359, 2377, 2395, 2413, 2431, 2449, 2467, 2485,
     2503, 2521, 2539, 2557, 2575, 2593, 2612, 2621, 2667, 2685,
     2631, 2703, 2721, 2739, 2757, 2775, 2793, 2811, 2829, 2847,
     2865, 2883, 2901, 2919, 2937, 2955, 2973, 2991, 3009, 3027,
     3045, 3063, 3081, 3099, 3117, 3135, 3153, 3171, 3190, 3199,
     3214, 3223, 3246, 3256, 3271, 3280, 3303, 3313, 3322, 3340,
     3359, 3377, 3395, 3413, 3431, 3449, 3467, 3485, 3503, 3521,

     3539, 3557, 3576, 3623, 3591, 3600, 3669, 3687, 3706, 3753,
     3800, 3847, 3638, 3717, 3894, 3941, 3988, 4035, 4082, 4129,
     4176, 4223, 4270, 4317, 4364, 4411, 4458, 4505, 3764, 3811,
     3858, 3905, 4551, 4569, 3952, 3999, 4587, 4605, 4623, 4641,
     4659, 4677, 4695, 4713, 4731, 4749, 4767, 4785, 4803, 4821,
     4839, 4857, 4875, 4893, 4911, 4929, 4947, 4965, 4983, 5001,
     5019, 5037, 5055, 5073, 5091, 5109, 5127, 5145, 5164, 5211,
     5258, 5305, 5352, 5399, 5446, 5493, 4046, 4093, 5540, 5587,
     5634, 5681, 5728, 5775, 5822, 5869, 4140, 4187, 4234, 4281,
     4332, 4341, 4388, 4435, 4470, 4516, 5175, 5222, 5269, 5316,

     5367, 5376,   84,  102,  120,  138,  156,  174, 5915, 1507,
     2647, 5930, 5423, 5470, 3732, 5945, 3779, 5505, 5551, 5598,
     1489,12729,  190,12729,12729,12729, 3607, 1015, 5592, 1022,
     1038, 5940, 1054, 1040, 1067, 1109, 6007, 5954, 6059, 1090,
     1166, 1105, 5641, 6108,   87, 1109, 1443, 1489, 3599, 3645,
     3818, 3825, 3865, 3874, 4523, 3914, 3961, 5654, 4008, 4055,
     5696, 4102, 4149, 5737, 4196, 4243, 5783, 4290, 4340, 5796,
     4387, 4434, 5837, 4479, 5184, 5885, 5231, 5278, 6016, 5325,
     3921, 3968, 4015, 4062, 4109, 4156, 5517, 4203, 5375, 6030,
     5422, 5469, 6046, 5560, 5750, 6059, 6137, 6165, 6172, 6185,

        0,    0,    0,    0,    0,    0,    0,    0, 4250, 4297,
     4411, 5191,    0,    0, 6194, 6201, 6216, 5238, 5285, 5332,
     5446, 5567, 5728, 5869, 5878, 6223, 6232, 6242, 6255, 6264,
     6271, 6286, 6295, 6302, 6315, 6324, 6331, 6346, 6353, 6360,
     6372, 6379, 6392, 6401, 6408, 6423, 6432, 6439, 6452, 6461,
     6468, 6483, 6492, 6499, 6512, 6521, 6528, 6543, 6552, 6559,
     6572, 6581, 6588, 6603, 6612, 6619, 6632, 6641, 6648, 6663,
     6670, 6677, 6689, 6696, 6705, 6712, 6725,    0, 6734, 6741,
     6756, 6763, 6770, 6782, 6789, 6801, 6808, 6820, 6827, 6839,
     6846, 6853, 6860, 6867, 6874, 6881, 6888, 6895, 6902,    0,

        0,    0,    0,    0, 6909, 6916, 6923, 6932, 6939, 6952,
     6959, 6966, 6980,    0,    0, 6987, 6994,    0,    0, 7001,
        0,    0,    0,    0,    0,    0,    0, 7008, 7015, 7024,
     7031, 7044, 7051, 7058, 7072, 7079, 7091, 7098, 7110, 7117,
     7129, 7136, 7148, 7155, 7167, 7174, 7186, 7193, 7205, 7212,
     7224, 7231, 7243, 7250, 7262, 7269, 7281, 7288, 7300, 7307,
     7319, 7326, 7338, 7345, 7357,    0,    0,    0,    0, 7364,
        0,    0,    0,    0, 7371, 7378,    0,    0, 7385, 7392,
     7399,    0,    0,  193,    0,    0,    0,  208,    0,    0,
     7414, 7429,    0, 7444, 7451, 7458,  211,12729, 1124, 1432,

     1159, 1169, 1191, 1189, 1206, 1218, 1233, 1242, 1249, 1252,
     1259, 1254, 1406, 1252, 1365, 1410, 1423, 1430,  123,  159,
      226, 1445, 1460,  229,  230,  244,  249,  264, 1451, 1464,
     7476, 1488, 1479, 2563, 2599, 2616, 3147, 5579, 3160, 3150,
     5956, 3172, 3173, 3179, 3207, 5950, 5600, 3212, 3228, 3236,
     5782, 3237, 3260, 5925, 3278, 3280,  283,  284, 3533, 7468,
     7475, 7488, 7495, 7503, 7516, 7523, 7531, 7544, 7551, 7564,
     7572, 7592, 7599, 7613, 7620, 7640, 7647, 7661, 7668, 7688,
     7695, 7709, 7716, 7736, 7743, 7757, 7764, 7784, 7791, 7805,
     7812, 7832, 7839, 7853, 7860, 7880, 7887, 7901, 7908, 7928,

     7935, 7949, 7956, 7963, 7976, 7983, 7990, 8002, 8009, 8016,
     8023, 8036, 8043, 8056, 8064, 8084, 8091, 8105, 8112, 8132,
     8139, 8153, 8160, 8180, 8187, 8201,    0,    0,    0,    0,
        0,    0,    0,    0, 8208, 8215, 8228, 8235,    0,    0,
     8242, 8255, 8262, 8275, 8283, 8290, 8303, 8310, 8317, 8324,
     8331, 8338, 8345, 8352, 8365, 8372, 8385, 8393, 8413, 8420,
     8434, 8441, 8461, 8468, 8482, 8489, 8509, 8516, 8530, 8537,
     8544, 8557, 8570, 8577, 8590, 8598, 8618, 8625, 8639, 8646,
     8666, 8673, 8687, 8694, 8714, 8721, 8735, 8742, 8762, 8769,
     8783, 8790, 8810, 8817, 8831, 8838, 8858, 8865, 8879, 8886,

     8906, 8913, 8927, 8934, 8954, 8961, 8975, 8982, 9002, 9009,
     9023, 9030, 9037, 9050, 9057, 9064, 9077, 9084, 9097,    0,
     9105, 9125, 9132, 9146, 9153, 9165, 9173, 9185, 9192, 9204,
     9211, 9223, 9230, 9237, 9244, 9251, 9258, 9265, 9272, 9279,
     9286, 9293,    0,    0,    0,    0,    0, 9300, 9307, 9314,
     9321, 9334, 9341, 9354, 9362, 9369, 9382,    0,    0, 9389,
     9396,    0,    0, 9403,    0,    0,    0,    0,    0,    0,
        0, 9410, 9417, 9424, 9437, 9444, 9457, 9465, 9477, 9485,
     9497, 9509, 9516, 9528, 9535, 9547, 9554, 9566, 9573, 9585,
     9597, 9604, 9616, 9623, 9635, 9642, 9654, 9661, 9673, 9685,

     9692, 9704, 9711, 9723, 9730, 9742, 9749, 9761, 9773, 9780,
     9792, 9799, 9811, 9818,    0,    0,    0,    0, 9825,    0,
        0,    0,    0, 9832, 9839,    0,    0, 9846, 9853, 9860,
        0,    0,  298,    0,    0,  316,    0, 9875, 9890,    0,
     9905, 9912, 9919, 3563, 3587, 5590, 3603, 3625, 3641, 1401,
      303, 1385, 3643, 3677, 3691, 3718, 3711, 3752, 3764, 1365,
     1364, 4277, 4296,  334,  354,  370, 4353, 4361,  388,  408,
      424,  444,  460,  480,  496,  516,  532,  552, 1347, 4436,
      568,  588, 4454, 4475, 4492, 1346, 1342, 4489, 4521, 4516,
     5113, 6064, 5118, 5121, 5301, 5331, 5374, 1329, 5381, 5465,

     5507, 5606, 5649, 5642, 5640, 5671, 5667, 5656, 5654, 5665,
     1325, 5739, 5753, 5768, 6070, 5785, 5797, 5795, 5800, 1310,
     5799,  604, 5800, 9926, 9933, 9940, 9947, 9954, 9961, 9968,
     9975, 9982, 9989, 9996,10003,10010,10017,10024,10031,10038,
    10045,10052,10059,10066,10073,10080,10087,10094,10101,10108,
    10115,10122,10129,10136,10143,10150,10157,10164,10171,10178,
    10185,10192,10199,10206,10213,10220,10227,10234,10241,10248,
    10255,10262,10269,10276,10283,10290,10297,10304,10311,10318,
    10325,10332,10339,10346,10353,10360,10367,10374,10386,10393,
    10405,10412,10424,10431,10443, 5892, 5872,  622,  642, 5926,

     5937, 5935, 5940,  661,  662,10442, 5952, 5958, 5959, 5956,
     5970, 5989, 6013, 6068, 6004, 6002, 6037,  676, 6048, 6061,
      680,  681,  694,  697,  698, 6066,  712,  715, 6064, 6074,
     6081, 6081, 1339, 6109, 6100, 6113, 6119, 6101, 6118, 6124,
     6129, 6155, 6156, 6186, 6238, 6224, 6240, 6258, 6300, 6296,
     1293, 6333, 6313, 1275, 6379, 6368,  716,  733, 6376, 6391,
     6428,  748, 1274, 6437, 6452, 1195, 6482, 6497, 6528, 6541,
     6544, 6586,10457,10469,10482,10496, 1173, 6615,  752,  753,
      769,  784, 6610, 1172, 6644, 6633,  788, 6699, 6705, 6714,
     6933, 6922, 6926, 6941, 7011, 7401, 7593, 7470,10464, 7459,

     7459,10501, 1165, 1116, 7500,  789,  802,  806, 7531, 7540,
     7548, 7604,  820, 1115,  840, 1109, 7602, 7640, 7650, 7655,
     7680, 7701, 7703,  860, 7735,  874,  877, 7749, 7754, 7775,
     7805, 7800, 7822, 7871, 7858, 7903,  894,  823,  928,  897,
     7901, 7930, 7960,  948,  982, 7947, 8029, 8030, 8051, 8061,
     8073, 8107, 8100, 8138, 1108,10509,10521,10528,10540,10547,
    10559,10566,10578,10577, 8142, 1000, 1018, 8157, 8178, 8202,
     8212, 8255, 8246, 8262, 1059, 1093, 8358, 8361, 1150, 8369,
     8386, 8416, 8435, 8421, 8450, 8484, 8487, 8511, 1207, 1038,
     8567,10564,10567, 1332, 1096, 1335, 1264, 8578, 8597, 8598,

     8605, 1336, 1276, 8633, 1355, 1296, 8628, 8655, 8686, 8695,
     8718, 8739, 8741, 8766, 1368, 1300, 8772, 1372, 1389, 1552,
     1406, 8790, 8812, 8820, 8839, 8850, 8868, 8870,10576, 8901,
     1555, 1407, 1556, 8922, 1058, 8917, 1572, 8946, 8962, 8963,
     8994, 9034, 1023, 9077, 9028, 9081,10551, 9091, 9316, 1009,
    10568, 9329, 9325, 9486, 9546,10576, 9568,10581, 1575, 1588,
      979, 9641, 1592, 1606, 1614, 9653,10641, 9725, 9744,  976,
     9860,10411,10569, 1609,10588,10617,10598,10603,10589,10625,
    10620,10624, 1642, 1645, 1646, 1662, 1663,  961, 1682, 1683,
    10637, 1696,10615,10641,10623,10630,10626,10627,10628,10629,

     1699,10644, 1714, 1717,10641,  958,10646,10632,10635,  943,
    10640,10639,10636,10653, 1718, 1732,10654,10655,10707,10643,
    10673,10672,10680,  940,10678,10691,10733,  925,10676,10679,
    10694,10693,10684,10700, 1735, 1750, 1754, 1755,10680,  922,
    10694,10699, 1786, 1789, 1790, 1809,10684,10693,10706, 1822,
    10693,  918, 1826, 1840, 1844, 1876, 1896,10710, 1930, 1950,
     1843,10697,10707,10717,10724,10740,10732,  907,10748,10745,
    10749,10737,10742,10748,10745,10756,10755, 1984, 2002, 2005,
     2006, 2023,  922, 2038, 2041,10737,10746,  886,  871,10756,
     2042, 2074, 2094, 2128,10764, 2148,10751,10763,10756,10759,

    10762,10760,10771,10776,  868, 2059,10782,10778, 2182, 2202,
    10786,10784,10804,10803,10802,10796,10791,10828,10796,10812,
    10800,10801,10802,10822,10798, 2218,10806,10808,10806, 2238,
     2272, 2292, 2326, 2346, 2362, 2382, 2398, 2418, 2434, 2437,
    10827,10819,10821, 2438, 2455, 2470, 2474, 2475, 2488, 2491,
     2508, 2509,10829, 2527, 2528,10825,10835, 2542, 2547, 2562,
     2563, 2638, 2598, 2670, 2634,10838, 2690, 2651, 2709,10834,
    10852,10853,10846,10843,10881,10844,10852,10864,10867,10870,
    10868,10859,10869,10876,10882, 2710, 2724,10868, 2728, 2742,
    10882,10875,10878,10888, 2746, 2778, 2782, 2796, 2814, 2818,

     2834, 2854,10890, 2868, 2871,10878,10894,10886,10887,10909,
    10906,10903,10910,10910,10916,10907, 2872,10918,10922,10914,
    10922,10914,10914,10917,10928, 2888, 2889, 2908,10918,10924,
    10927,10939,10941,10934,10936,10934,10943, 2909, 2922,10943,
    10939,10944, 2926, 2940, 2943, 2958, 2962, 2963, 2976, 2979,
     2994, 2997,10945,10949,10957, 2998, 3012, 3015, 3030, 3033,
     3034, 3048, 3051, 3052, 3068, 3071,10953,10952, 3087, 3088,
     3102, 3105,10972, 3106,10969,  864,  852,10972,10970, 3120,
     3123,10968,10957,10981,10970,  835,10972,10971,  834,  817,
    10977,10975,10975, 3124, 3141, 3158,10995,10998,  810, 3159,

     3178, 3231, 3234,10981, 3288,10998,10981,  799,10989,10984,
    11001,11009,11004,11014,11015,11009,11022,11006,11024,  798,
      781,11010,11029,11030,11034, 3347, 3330, 3343,11018,11021,
    11027,11032,11041,11040,11044,11046,11039, 3362,11054,11051,
    11056, 3366, 3367, 3380,11042,11041,11049, 3383, 3384, 3398,
     3401, 3416,11066,11067,11061,11059,11070,11064,11076,11067,
     3419,11084,11070,11079,11069,11078,11093,11083,11082,11089,
     3420,11102, 3434, 3454, 3470, 3473,11092,11093,11102, 3474,
    11111, 3491,11125,11100, 3506, 3510,11119,11108, 3511,11118,
    11126,  780, 3544,  763,11128,11124,11117,11141,11143,11140,

     3545,11145,11147,11151,11150,11134,11143,11142, 3866,11158,
    11157,11153,11163,11162,11155,11160, 3563, 4543,11170,11178,
     4590,11169,11165, 4594,11173,11164,11176,11188, 4626,11189,
    11179,11180,11179,11181,11187,11188,11189,11190, 4630, 3564,
    11205, 4662, 3676, 3736,11191,11194,11216, 4666, 3772,11210,
     4698, 3783,11217,11222,11209, 4702, 4734, 3819, 4738, 3861,
    11209,11221, 4770, 3908,11212, 4774,11218, 4806, 3911,11227,
    11233,11228,11229,11233,11237,11232,11234,11238,11237,  759,
    11254,11252,11242,11251, 4810, 3955,  727,11263,11245, 4842,
    11251,11266, 4846, 4878, 3958,11264,  726, 4882, 4002,11257,

    11263, 4914, 4005,11314, 4918, 4950, 4954, 4986, 4049,11276,
    11265,11280,11273,11283,11280,11296,11285,11299, 4052, 4990,
     4096,11300,11301,11290, 4099,11286, 4143,  722,11299,11296,
    11312, 5022, 4146, 4190, 4193,11303,11318, 4237,11319, 5026,
     4240,11310, 4284,11307,11312,11304,11313,11357, 5058,11326,
    11323, 5062, 5094,11326,11317,11329,11330,11346, 4287,11337,
    11338,11352, 5098, 4376,11348,11360, 5130, 4381, 4430,11342,
    11351, 4452,11355,11367, 4475, 5606, 4500,11351, 5839, 4522,
     5903, 4554, 5907, 5134, 5225,11351,11363,  691,11373,11372,
    11366,  690,11367,  686,11424, 5228,11362,11363,11368,11429,

    11368,11378,11383,11397, 5272,11389,11400,11439, 5275,11397,
    11404,11413,11404,11420,11448, 5319,11412,11449, 5322,11422,
    11412,11459, 5411,11474, 5416,11430,11479,11430,11434,11449,
    11452,11445,11466, 5465,11486,11487, 5487,11494,11455,11476,
    11476, 5510,11470, 5535, 5557, 5601,11468,  673,11470,11471,
    11472,  655,11479,  619,11482, 5660,11516,11522,11492,11544,
     5661,11474,11501,11483,11498,11550,  612,11554, 5714,11510,
    11509,11503,11515,11509, 5715,11555,11565,11574, 5718,11575,
    11519, 5755, 5768,11578,11582, 5769,11585,11586,11538,11532,
    11534,11541,11595, 5789,11605, 5801,11586,11609,11610,11615,

     5802,11568,11563,11566,11581,11580,11582,11582,11589,11591,
    11587,11587,11593,11596,11637, 5856,11638, 5859,11604, 5904,
    11609,  601,11618,11610,11658, 6156,11617, 6696,11635,11629,
    11643,11641,11627,11666, 6789,11670, 6808,11678, 6827,11681,
     6846,11695,11698, 7050, 7098,11701, 7117,11702, 7136,11663,
    11708,11667,11709,  583, 7174, 7193,11668,11671,11673,11721,
     7212,11728, 7250, 7269,11693,11729,11736,11690,  580,11682,
    11701,11701,11705,11699,11712,11701,11717, 7288, 7326,11749,
    11727,11735,11723,11730, 7345,11722,11759,11724,11732,  565,
    11725, 7364, 7433, 7549, 7591,11779, 7592, 7596, 7642, 7687,

    11780,11787,11793,11794, 7690,11737,11800, 7694,11769,11751,
    11769,11773, 7735, 7738,11780,11808, 7742,11815, 7783,11775,
    11789,11780,11799,  562,  547,11786,11802,11790,11805,11828,
     7786,11836,11810,11807,11807,11810,11856, 7790,11805,11822,
    11839,11824, 7831,11860, 7834,11861, 7838,11880, 7879, 7880,
    11840, 7884,11829,11833,11852,11838,11861,11842, 7927, 7930,
    11842,11859,11849,11870,11867,11868,11872,11863,11876,11877,
    11878,11879, 8041,11908, 8042,11870,11920,11879,11881, 8083,
    11890,  529,11906,11898,11905,11940, 8086, 8090, 8131,11895,
    11903,11898,11944,11922,11922,11948,11952,11917,11920,11917,

    11972,11920,11930,11944,11928,11976,11932,11980,11935, 8134,
    11950,12000, 8138,12001,11962,12004,11953,11957,11968,11961,
    12008, 8179,11969,11966,11963,11971,12027, 8182,12028,11978,
    12031, 8186,12034, 8309,12000,12012,12011,12053, 8370,12054,
    12008,12009,12017,12059, 8371,12062,12067, 8412,12068,12026,
     8415,12079, 8419,12048,12082, 8460,12045,12038,12047,12064,
    12067, 8463,12092,12096,12103,12062,12080,12083, 8467,12107,
     8508,12120, 8511, 8515,  526,12085,  511, 8563,12124, 8564,
    12089,12087,12099, 8575,12128, 8576, 8617,12131, 8620,12135,
     8624,12110, 8665,12143,12148,12152,12111,12120,12106,12114,

    12156, 8668,12163, 8672,12169, 8713,12123,12135,12141, 8716,
    12173, 8720,12134,12140,12143, 8761,  493,  490,12155, 8764,
     8768,12180, 8809,12146,12193, 8812,12197, 8816,12200, 8857,
    12161,  475,12159,12159, 8860, 8864, 8905,12201,12175,12207,
     8908,12172,12221,12174,12182,12186,12188, 8912,12193, 8953,
     8956, 8960,12200,12201,12196,12203,12231, 9001,12194,12235,
     9004,12211,12241, 9008,12217,12206,12209,12261,12210,12205,
    12228,12232,12244, 9124,12233, 9127,12243, 9131,12245,12248,
    12249,12280, 9172,12283,12289,12286,  457,12254,12245,12257,
    12260,12266,12272, 9192,12308, 9211,12311,12314, 9230,12317,

     9339,12278,12323,12328,12261,12264,12300,12306, 9340,12336,
     9388, 9442, 9443,12340,12345,12351,12357, 9462,12360, 9504,
    12364,12365,12301,12302, 9516,12368, 9554,12374, 9592,12377,
     9642, 9680, 9730,12385, 9768,12388, 9818,12389,12394, 9894,
    10514,10566,10730,11396,12397,11766,12398,12337,12402,12408,
    12729,12418,12423,12428,12433,12438,12443,12448,12453,12458,
    12463,12468,12473,12478,12483,12488,12493,12498,12503,12508,
    12513,12518,12523,12528,12533,12538,12543,12548,12553,12558,
    12563,12568,12573,12578,12583,12588,12593,12598,12603,12608,
    12613,12618,12623,12625,12627,12629,12631,12633,12635,12637,

    12639,  497,12641,12643,12645,12647,12649,12651,12653,  482,
    12655,  464,  461,  446,  428,  425,  410,  392,  389,  374,
      371,  356,  338,  335,  320,  319,  316,  301,12657,12659,
    12661,12666,12671,12673,12675,12677,12679,12681,12683,12685,
    12687,12689,  284,12691,12693,12695,12697,12699,12701,12703,
      277,12705,  266,  265,  262,  247,  230,  211,  193,  176,
      169,  151,  140,  133,  115,  104,   97,   79,    0,12707,
    12709,12711,12716,12721,12723
    } ;

static yyconst flex_int16_t yy_def[2676] =
    {   0,
     2552, 2551, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2553, 2553, 2554, 2554,
     2555, 2555, 2556, 2556, 2557, 2557, 2558, 2558, 2559, 2559,
     2560, 2560, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2561, 2561, 2562, 2562, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,

     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2563, 2563, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2564, 2564,
     2565, 2565, 2566, 2566, 2567, 2567, 2568, 2568, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,

     2552, 2552, 2569, 2569, 2570, 2570, 2552, 2552, 2571, 2571,
     2572, 2572, 2552, 2552, 2573, 2573, 2574, 2574, 2575, 2575,
     2576, 2576, 2577, 2577, 2578, 2578, 2579, 2579, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2552, 2552, 2552, 2552, 2580, 2580,
     2581, 2581, 2582, 2582, 2583, 2583, 2552, 2552, 2584, 2584,
     2585, 2585, 2586, 2586, 2587, 2587, 2552, 2552, 2552, 2552,
     2588, 2588, 2589, 2589, 2552, 2552, 2552, 2552, 2552, 2552,

     2590, 2590, 2552, 2552, 2591, 2591, 2592, 2592, 2552,  309,
      309,  309, 2593, 2593,  309,  309,  309, 2552, 2552, 2552,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2551, 2551,
     2551, 2551, 2602, 2603, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2604, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2605,

     2606, 2607, 2608, 2609, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2610, 2611, 2551, 2551, 2612, 2613, 2551,
     2614, 2615, 2616, 2617, 2618, 2619, 2620, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2621, 2622, 2623, 2624, 2551,
     2625, 2626, 2627, 2628, 2551, 2551, 2629, 2630, 2551, 2551,
     2551, 2631, 2632, 2632, 2632, 2632, 2633, 2633, 2633, 2633,
     2551, 2551, 2634, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2635, 2636, 2637, 2638,
     2639, 2640, 2641, 2642, 2551, 2551, 2551, 2551, 2643, 2644,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2645,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2646, 2647, 2648, 2649, 2650, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2651, 2652, 2551,
     2551, 2653, 2654, 2551, 2655, 2656, 2657, 2658, 2659, 2660,
     2661, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2662, 2663, 2664, 2665, 2551, 2666,
     2667, 2668, 2669, 2551, 2551, 2670, 2671, 2551, 2551, 2551,
     2672, 2673, 2673, 2673, 2674, 2674, 2674, 2551, 2551, 2675,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
        0, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551
    } ;

static yyconst flex_int16_t yy_nxt[12804] =
    {   0,
     2551,  323,  324,  323,  923,  325,  322,  323,  324,  323,
      322,  326,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  322,  336,  337,  338,  339,
      340,  341,  342,  343,  344,  345,  322,  322,  346,  322,
      322,  322,  322,  322,  327,  328,  329,  330,  331,  332,
      333,  334,  335,  322,  336,  337,  338,  339,  340,  341,
      342,  343,  344,  345,  322,  322,  346,  322,  322,  322,
      323,  324,  323,  922,  325,  323,  324,  323,  657,  325,
      657,  347,  347,  347,  347,  347,  347,  347,  323,  324,

      323,  921,  326,  323,  324,  323,  658,  326,  920,  347,
      347,  347,  347,  347,  347,  347,  323,  324,  323,  918,
      325,  584,  324,  584,  619,  585,  619,  348,  348,  348,
      348,  348,  348,  348,  323,  324,  323,  917,  326,  584,
      324,  584,  621,  586,  916,  348,  348,  348,  348,  348,
      348,  348,  323,  324,  323,  915,  325,  323,  324,  588,
      964,  589,  964,  349,  349,  349,  349,  349,  349,  349,
      323,  324,  323,  871,  326,  323,  324,  588,  965,  590,
      870,  349,  349,  349,  349,  349,  349,  349,  323,  324,
      323,  597,  325,  597,  933,  598,  933,  869,  934,  350,

      350,  350,  350,  350,  350,  350,  323,  324,  323,  597,
      326,  936,  597,  937,  597,  868,  598,  350,  350,  350,
      350,  350,  350,  350,  323,  324,  323,  966,  325,  966,
      969,  971,  969,  971,  867,  351,  351,  351,  351,  351,
      351,  351,  323,  324,  323,  973,  326,  973,  970,  972,
      975,  866,  975,  351,  351,  351,  351,  351,  351,  351,
      323,  324,  323,  974,  325,  977,  865,  977,  976,  863,
      862,  352,  352,  352,  352,  352,  352,  352,  323,  324,
      323,  858,  326,  978,  657, 1022,  657, 1022,  739,  352,
      352,  352,  352,  352,  352,  352,  323,  324,  323,  933,

      325,  933,  658,  934, 1104,  923, 1104,  353,  353,  353,
      353,  353,  353,  353,  323,  324,  323,  597,  326,  936,
      922,  937, 1105,  921,  920,  353,  353,  353,  353,  353,
      353,  353,  323,  324,  323,  964,  325,  964,  354,  918,
      354,  355,  917,  356,  356,  356,  356,  356,  356,  356,
      323,  324,  323,  965,  326, 1118,  354, 1118,  354,  355,
      916,  356,  356,  356,  356,  356,  356,  356,  323,  324,
      323,  966,  325,  966,  357,  915,  357,  358,  871,  359,
      359,  359,  359,  359,  359,  359,  323,  324,  323,  969,
      326,  969,  357,  870,  357,  358,  869,  359,  359,  359,

      359,  359,  359,  359,  323,  324,  323,  970,  325, 1121,
      360, 1121,  360,  361,  868,  362,  362,  362,  362,  362,
      362,  362,  323,  324,  323,  971,  326,  971,  360,  867,
      360,  361,  866,  362,  362,  362,  362,  362,  362,  362,
      323,  324,  323,  972,  325, 1122,  363, 1122,  363,  364,
      865,  365,  365,  365,  365,  365,  365,  365,  323,  324,
      323,  973,  326,  973,  363,  863,  363,  364,  862,  365,
      365,  365,  365,  365,  365,  365,  323,  324,  323,  974,
      325, 1123,  366, 1123,  366,  367,  858,  368,  368,  368,
      368,  368,  368,  368,  323,  324,  323,  975,  326,  975,

      366,  739,  366,  367, 2502,  368,  368,  368,  368,  368,
      368,  368,  323,  324,  323,  976,  325, 1124,  369, 1124,
      369,  370, 2454,  371,  371,  371,  371,  371,  371,  371,
      323,  324,  323,  977,  326,  977,  369, 2446,  369,  370,
     2445,  371,  371,  371,  371,  371,  371,  371,  323,  324,
      323,  978,  325, 1125,  372, 1125,  372,  373, 2415,  374,
      374,  374,  374,  374,  374,  374,  323,  324,  323,  981,
      326,  981,  372, 2413,  372,  373, 2317,  374,  374,  374,
      374,  374,  374,  374,  323,  324,  323,  982,  325, 1128,
      375, 1128,  375,  376, 2268,  377,  377,  377,  377,  377,

      377,  377,  323,  324,  323, 1022,  326, 1022,  375, 2267,
      375,  376, 2241,  377,  377,  377,  377,  377,  377,  377,
      323,  324,  323, 1179,  325, 1179,  378, 2221,  378,  379,
     2209,  380,  380,  380,  380,  380,  380,  380,  323,  324,
      323, 1180,  326, 1181,  378, 1181,  378,  379, 2182,  380,
      380,  380,  380,  380,  380,  380,  323,  324,  323, 2127,
      325, 1182, 1104, 1187, 1104, 1187, 2113,  381,  381,  381,
      381,  381,  381,  381,  323,  324,  323, 1118,  326, 1118,
     1105, 1121, 1122, 1121, 1122,  381,  381,  381,  381,  381,
      381,  381,  323,  324,  323, 1123,  325, 1123, 1124, 1125,

     1124, 1125, 2111,  382,  382,  382,  382,  382,  382,  382,
      323,  324,  323, 1206,  326, 1206, 1128, 1237, 1128, 1237,
     2107,  382,  382,  382,  382,  382,  382,  382,  323,  324,
      323, 1207,  325, 2055, 1239, 1238, 1239, 2053, 2049,  383,
      383,  383,  383,  383,  383,  383,  323,  324,  323, 1244,
      326, 1244, 1240, 1179, 1266, 1179, 1266,  383,  383,  383,
      383,  383,  383,  383,  323,  324,  323, 1245,  325, 2001,
     1181, 1180, 1181, 1971, 1960,  384,  384,  384,  384,  384,
      384,  384,  323,  324,  323, 1267,  326, 1267, 1182, 1187,
     1206, 1187, 1206,  384,  384,  384,  384,  384,  384,  384,

      323,  324,  323, 1295,  325, 1295, 1954, 1296, 1207, 1296,
     1870,  385,  385,  385,  385,  385,  385,  385,  323,  324,
      323, 1302,  326, 1302, 1332, 1297, 1332, 1867, 1796,  385,
      385,  385,  385,  385,  385,  385,  323,  324,  323, 1303,
      325, 1305,  386, 1305,  386, 1795, 1783,  387,  387,  387,
      387,  387,  387,  387,  323,  324,  323, 1779,  326, 1306,
      386, 1315,  386, 1315, 1770,  387,  387,  387,  387,  387,
      387,  387,  323,  324,  323, 1318,  325, 1318, 1320, 1316,
     1320, 1769, 1766,  388,  388,  388,  388,  388,  388,  388,
      323,  324,  323, 1319,  326, 1237, 1321, 1237, 1333, 1758,

     1333,  388,  388,  388,  388,  388,  388,  388,  323,  324,
      323, 1757,  325, 1238,  389, 1614,  389,  390, 1593,  391,
      391,  391,  391,  391,  391,  391,  323,  324,  323, 1239,
      326, 1239,  389, 1592,  389,  390, 1588,  391,  391,  391,
      391,  391,  391,  391,  323,  324,  323, 1240,  325, 1244,
      392, 1244,  392,  393, 1576,  394,  394,  394,  394,  394,
      394,  394,  323,  324,  323, 1557,  326, 1245,  392, 1542,
      392,  393, 1525,  394,  394,  394,  394,  394,  394,  394,
      323,  324,  323, 1337,  325, 1337,  395, 1516,  395,  396,
     1501,  397,  397,  397,  397,  397,  397,  397,  323,  324,

      323, 1266,  326, 1266,  395, 1497,  395,  396, 1483,  397,
      397,  397,  397,  397,  397,  397,  323,  324,  323, 1267,
      325, 1267,  398, 1465,  398,  399, 1451,  400,  400,  400,
      400,  400,  400,  400,  323,  324,  323,  602,  326, 1374,
      398, 1374,  398,  399,  608,  400,  400,  400,  400,  400,
      400,  400,  322,  323,  324,  323, 1434,  325,  322,  322,
      322,  322,  323,  324,  323,  602,  326,  322,  322,  322,
     1425,  322,  608,  609,  614,  616,  322,  323,  324,  323,
      322,  325,  322,  322,  322,  322,  323,  324,  323,  615,
      326,  322,  322,  322, 1359,  322, 1359, 1295,  322, 1295,

      617,  609,  614,  616,  322, 1418, 1358,  322,  322,  323,
      324,  323, 1360,  325,  322,  322,  322,  615,  322,  323,
      324,  323,  322,  326,  322,  322,  322,  322,  617,  618,
      642,  322,  645,  322,  323,  324,  323,  322,  325,  322,
      322,  322,  322,  323,  324,  323,  659,  326,  322,  322,
      322, 1363,  322, 1363,  322, 1347, 1307,  618,  642,  944,
      645,  322, 1304, 1293,  322,  322,  323,  324,  323, 1364,
      325,  322,  322,  322,  659,  322,  323,  324,  323,  322,
      326,  322,  322,  322,  322,  946,  643,  944,  322,  947,
      322,  323,  324,  323,  322,  325,  322,  322,  322,  322,

      323,  324,  323,  644,  326,  322,  322,  322, 1289,  322,
     1289,  322, 1292,  946,  643,  948,  949,  947,  322, 1269,
     1264,  322,  322,  323,  324,  323, 1290,  325,  322,  322,
      322,  644,  322,  323,  324,  323,  322,  326,  322,  322,
      322,  322, 1249,  948,  949,  322,  950,  322,  323,  324,
      323,  322,  325,  322,  322,  322,  322,  323,  324,  323,
      951,  326,  322,  322,  322, 1385,  322, 1385,  322,  323,
      324,  323,  952,  325,  950,  322,  953, 1390,  322, 1390,
      409,  409,  409,  409,  409,  409,  409,  954,  951,  955,
      956,  957,  959,  322,  323,  324,  323, 1392,  326, 1392,

      952, 1401,  322, 1401,  953,  409,  409,  409,  409,  409,
      409,  409,  323,  324,  323,  954,  325,  955,  956,  957,
      959, 1246, 1234,  410,  410,  410,  410,  410,  410,  410,
      323,  324,  323, 1383,  326, 1383, 1296, 1302, 1296, 1302,
     1230,  410,  410,  410,  410,  410,  410,  410,  323,  324,
      323, 1384,  325, 1212, 1297, 1303, 1305, 1170, 1305,  411,
      411,  411,  411,  411,  411,  411,  323,  324,  323, 1315,
      326, 1315, 1159, 1318, 1306, 1318, 1146,  411,  411,  411,
      411,  411,  411,  411,  323,  324,  323, 1316,  325, 1133,
     1403, 1319, 1403, 1132, 1126,  412,  412,  412,  412,  412,

      412,  412,  323,  324,  323,  960,  326, 1404, 1332, 1404,
     1332, 1115, 1114,  412,  412,  412,  412,  412,  412,  412,
      322,  323,  324,  323,  322,  325,  322,  322,  322,  322,
      322,  322, 1106,  960,  961,  322,  323,  324,  323,  322,
      325,  322,  322,  322,  322,  323,  324,  323, 1103,  326,
      322,  322,  322,  958,  322,  660,  660,  660,  660,  660,
      660,  660,  961,  322,  962,  963,  322,  322,  323,  324,
      323,  322,  326,  322,  322,  322,  322,  322,  322,  945,
      967,  322,  968,  323,  324,  323,  322,  325, 2551,  979,
      322,  980,  962,  963,  418,  418,  418,  418,  418,  418,

      418,  661,  661,  661,  661,  661,  661,  661,  967,  986,
      968,  987,  326,  322,  323,  324,  323,  979,  325,  980,
      415, 2551,  415,  416, 2551,  417,  417,  417,  417,  417,
      417,  417,  323,  324,  323, 2551,  326,  986,  415,  987,
      415,  416, 2551,  417,  417,  417,  417,  417,  417,  417,
      323,  324,  323, 1320,  326, 1320, 1415, 1333, 1415, 1333,
     2551,  418,  418,  418,  418,  418,  418,  418,  323,  324,
      323, 1321,  325, 1337, 1416, 1337, 1359, 2551, 1359,  419,
      419,  419,  419,  419,  419,  419,  323,  324,  323, 1450,
      326, 1450, 2551, 1363, 1360, 1363, 2551,  419,  419,  419,

      419,  419,  419,  419,  323,  324,  323, 1453,  325, 1453,
     1374, 1364, 1374, 2551, 2551,  420,  420,  420,  420,  420,
      420,  420,  323,  324,  323, 2551,  326, 1454, 1455, 1456,
     1457, 2551, 2551,  420,  420,  420,  420,  420,  420,  420,
      323,  324,  323, 1383,  325, 1383, 1478, 1385, 1478, 1385,
     2551,  421,  421,  421,  421,  421,  421,  421,  323,  324,
      323, 1384,  326, 1479, 1481, 1479, 1481, 2551, 2551,  421,
      421,  421,  421,  421,  421,  421,  323,  324,  323, 2551,
      325, 1480, 1482, 1484, 1390, 1484, 1390,  422,  422,  422,
      422,  422,  422,  422,  323,  324,  323, 1392,  326, 1392,

     1401, 1485, 1401, 2551, 2551,  422,  422,  422,  422,  422,
      422,  422,  323,  324,  323, 1403,  325, 1403, 1404, 1415,
     1404, 1415, 2551,  423,  423,  423,  423,  423,  423,  423,
      323,  324,  323, 1506,  326, 1506, 1533, 1416, 1533, 2551,
     2551,  423,  423,  423,  423,  423,  423,  423,  323,  324,
      323, 1535,  325, 1535, 1534, 1537, 1539, 1537, 1539,  424,
      424,  424,  424,  424,  424,  424,  323,  324,  323, 1536,
      326, 2551, 2551, 1538, 1540, 2551, 2551,  424,  424,  424,
      424,  424,  424,  424,  323,  324,  323, 1545,  325, 1545,
     1547, 1549, 1547, 1549, 2551,  425,  425,  425,  425,  425,

      425,  425,  323,  324,  323, 1546,  326, 2551, 1548, 1550,
     1551, 2551, 1551,  425,  425,  425,  425,  425,  425,  425,
      323,  324,  323, 1450,  325, 1450, 2551, 1453, 1552, 1453,
     2551,  426,  426,  426,  426,  426,  426,  426,  323,  324,
      323, 1558,  326, 1558, 1569, 1560, 1569, 1560, 2551,  426,
      426,  426,  426,  426,  426,  426,  323,  324,  323, 1559,
      325, 2551,  427, 1561,  427,  428, 2551,  429,  429,  429,
      429,  429,  429,  429,  323,  324,  323, 1562,  326, 1562,
      427, 2551,  427,  428, 2551,  429,  429,  429,  429,  429,
      429,  429,  323,  324,  323, 1563,  325, 1564,  430, 1564,

      430,  431, 2551,  432,  432,  432,  432,  432,  432,  432,
      323,  324,  323, 2551,  326, 1565,  430, 2551,  430,  431,
     2551,  432,  432,  432,  432,  432,  432,  432,  323,  324,
      323, 1459,  325, 1459,  433, 2551,  433,  434, 2551,  435,
      435,  435,  435,  435,  435,  435,  323,  324,  323, 1461,
      326, 1567,  433, 1567,  433,  434, 2551,  435,  435,  435,
      435,  435,  435,  435,  323,  324,  323, 2551,  325, 1568,
      436, 2551,  436,  437, 2551,  438,  438,  438,  438,  438,
      438,  438,  323,  324,  323, 1478,  326, 1478,  436, 2551,
      436,  437, 2551,  438,  438,  438,  438,  438,  438,  438,

      323,  324,  323, 1479,  325, 1479, 1586, 1481, 1586, 1481,
     2551,  439,  439,  439,  439,  439,  439,  439,  323,  324,
      323, 1480,  326, 2551, 1587, 1482, 1587, 2551, 2551,  439,
      439,  439,  439,  439,  439,  439,  323,  324,  323, 1484,
      325, 1484, 1589, 1595, 1589, 1595, 2551,  440,  440,  440,
      440,  440,  440,  440,  323,  324,  323, 1485,  326, 2551,
     1506, 1596, 1506, 2551, 2551,  440,  440,  440,  440,  440,
      440,  440,  323,  324,  323, 1597,  325, 1597,  441, 2551,
      441,  442, 2551,  443,  443,  443,  443,  443,  443,  443,
      323,  324,  323, 1598,  326, 1599,  441, 1599,  441,  442,

     2551,  443,  443,  443,  443,  443,  443,  443,  323,  324,
      323, 2551,  325, 1600,  444, 2551,  444,  445, 2551,  446,
      446,  446,  446,  446,  446,  446,  323,  324,  323, 1601,
      326, 1601,  444, 2551,  444,  445, 2551,  446,  446,  446,
      446,  446,  446,  446,  323,  324,  323, 1602,  325, 1604,
      447, 1604,  447,  448, 2551,  449,  449,  449,  449,  449,
      449,  449,  323,  324,  323, 2551,  326, 1605,  447, 2551,
      447,  448, 2551,  449,  449,  449,  449,  449,  449,  449,
      323,  324,  323, 1509,  325, 1509,  450, 2551,  450,  451,
     2551,  452,  452,  452,  452,  452,  452,  452,  323,  324,

      323, 1510,  326, 1617,  450, 1617,  450,  451, 2551,  452,
      452,  452,  452,  452,  452,  452,  323,  324,  323, 1638,
      325, 1638,  453, 2551,  453,  454, 2551,  455,  455,  455,
      455,  455,  455,  455,  323,  324,  323, 1639,  326, 1643,
      453, 1643,  453,  454, 2551,  455,  455,  455,  455,  455,
      455,  455,  323,  324,  323, 2551,  325, 1644,  456, 2551,
      456,  457, 2551,  458,  458,  458,  458,  458,  458,  458,
      323,  324,  323, 1645,  326, 1645,  456, 2551,  456,  457,
     2551,  458,  458,  458,  458,  458,  458,  458,  323,  324,
      323, 1646,  325, 1647,  459, 1647,  459,  460, 2551,  461,

      461,  461,  461,  461,  461,  461,  323,  324,  323, 2551,
      326, 1648,  459, 2551,  459,  460, 2551,  461,  461,  461,
      461,  461,  461,  461,  323,  324,  323, 1533,  325, 1533,
      462, 2551,  462,  463, 2551,  464,  464,  464,  464,  464,
      464,  464,  323,  324,  323, 1534,  326, 1649,  462, 1649,
      462,  463, 2551,  464,  464,  464,  464,  464,  464,  464,
      323,  324,  323, 1535,  325, 1535,  465, 2551,  465,  466,
     2551,  467,  467,  467,  467,  467,  467,  467,  323,  324,
      323, 1536,  326, 1650,  465, 1650,  465,  466, 2551,  467,
      467,  467,  467,  467,  467,  467,  323,  324,  323, 1537,

      325, 1537,  468, 2551,  468,  469, 2551,  470,  470,  470,
      470,  470,  470,  470,  323,  324,  323, 1538,  326, 1651,
      468, 1651,  468,  469, 2551,  470,  470,  470,  470,  470,
      470,  470,  323,  324,  323, 1539,  325, 1539, 1652, 1656,
     1652, 1656, 2551,  471,  471,  471,  471,  471,  471,  471,
      323,  324,  323, 1540,  326, 2551, 1545, 1657, 1545, 2551,
     2551,  471,  471,  471,  471,  471,  471,  471,  323,  324,
      323, 1658,  325, 1658, 1546, 1547, 1659, 1547, 1659,  472,
      472,  472,  472,  472,  472,  472,  323,  324,  323, 1549,
      326, 1549, 1660, 1548, 1660, 2551, 2551,  472,  472,  472,

      472,  472,  472,  472,  323,  324,  323, 1550,  325, 1551,
     1661, 1551, 1661, 2551, 2551,  473,  473,  473,  473,  473,
      473,  473,  323,  324,  323, 2551,  326, 1552, 1663, 1665,
     1663, 1665, 2551,  473,  473,  473,  473,  473,  473,  473,
      323,  324,  323, 1558,  325, 1558, 1664, 1666, 1669, 2551,
     1669,  474,  474,  474,  474,  474,  474,  474,  323,  324,
      323, 1559,  326, 1560, 1670, 1560, 1670, 2551, 2551,  474,
      474,  474,  474,  474,  474,  474,  323,  324,  323, 2551,
      325, 1561,  475, 2551,  475,  476, 2551,  477,  477,  477,
      477,  477,  477,  477,  323,  324,  323,  988,  326, 1671,

      475, 1671,  475,  476, 2551,  477,  477,  477,  477,  477,
      477,  477,  322,  323,  324,  323, 2551,  325,  322,  322,
      322,  322,  323,  324,  323,  988,  326,  322,  322,  322,
     2551,  322,  323,  324,  323, 1672,  325, 1672,  989, 1562,
      322, 1562, 2551,  482,  482,  482,  482,  482,  482,  482,
      990,  592, 1674,  592, 1674,  592,  592, 1563,  322,  592,
      592,  592,  592,  592,  592,  592,  989,  322,  323,  324,
      323, 1564,  325, 1564,  479, 2551,  479,  480,  990,  481,
      481,  481,  481,  481,  481,  481,  323,  324,  323, 1565,
      326, 1567,  479, 1567,  479,  480, 2551,  481,  481,  481,

      481,  481,  481,  481,  323,  324,  323, 2551,  326, 1568,
     1569, 1586, 1569, 1586, 2551,  482,  482,  482,  482,  482,
      482,  482,  323,  324,  323, 1587,  325, 1587,  483, 1589,
      483, 1589, 2551,  484,  484,  484,  484,  484,  484,  484,
      323,  324,  323, 1694,  326, 1694,  483, 1595,  483, 1595,
     2551,  484,  484,  484,  484,  484,  484,  484,  323,  324,
      323, 1695,  325, 2551,  485, 1596,  485, 2551, 2551,  486,
      486,  486,  486,  486,  486,  486,  323,  324,  323, 1700,
      326, 1700,  485, 1597,  485, 1597, 2551,  486,  486,  486,
      486,  486,  486,  486,  323,  324,  323, 1701,  325, 1701,

      487, 1598,  487, 2551, 2551,  488,  488,  488,  488,  488,
      488,  488,  323,  324,  323, 1599,  326, 1599,  487, 1702,
      487, 1702, 2551,  488,  488,  488,  488,  488,  488,  488,
      323,  324,  323, 1600,  325, 1601,  489, 1601,  489, 2551,
     2551,  490,  490,  490,  490,  490,  490,  490,  323,  324,
      323, 2551,  326, 1602,  489, 1703,  489, 1703, 2551,  490,
      490,  490,  490,  490,  490,  490,  323,  324,  323, 1604,
      325, 1604, 1705, 1617, 1705, 1617, 2551,  491,  491,  491,
      491,  491,  491,  491,  323,  324,  323, 1605,  326, 1626,
     1726, 1626, 1726, 2551, 2551,  491,  491,  491,  491,  491,

      491,  491,  323,  324,  323, 2551,  325, 1628, 1727, 1728,
     1638, 1728, 1638,  492,  492,  492,  492,  492,  492,  492,
      323,  324,  323, 1738,  326, 1738, 2551, 1643, 1639, 1643,
     2551,  492,  492,  492,  492,  492,  492,  492,  323,  324,
      323, 1742,  325, 1742, 1645, 1644, 1645, 2551, 2551,  493,
      493,  493,  493,  493,  493,  493,  323,  324,  323, 1743,
      326, 1743, 1646, 1647, 1744, 1647, 1744,  493,  493,  493,
      493,  493,  493,  493,  323,  324,  323, 1649,  325, 1649,
     1650, 1648, 1650, 2551, 2551,  494,  494,  494,  494,  494,
      494,  494,  323,  324,  323, 1651,  326, 1651, 1652, 1656,

     1652, 1656, 2551,  494,  494,  494,  494,  494,  494,  494,
      323,  324,  323, 1748,  325, 1748, 1658, 1657, 1658, 2551,
     2551,  495,  495,  495,  495,  495,  495,  495,  323,  324,
      323, 1659,  326, 1659, 1660, 1661, 1660, 1661, 2551,  495,
      495,  495,  495,  495,  495,  495,  323,  324,  323, 1749,
      325, 1749, 1663, 1751, 1663, 1751, 2551,  496,  496,  496,
      496,  496,  496,  496,  323,  324,  323, 1750,  326, 1665,
     1664, 1665, 1752, 2551, 1752,  496,  496,  496,  496,  496,
      496,  496,  323,  324,  323, 2551,  325, 1666, 1669, 1670,
     1669, 1670, 2551,  497,  497,  497,  497,  497,  497,  497,

      323,  324,  323, 1671,  326, 1671, 1672, 1674, 1672, 1674,
     2551,  497,  497,  497,  497,  497,  497,  497,  323,  324,
      323, 1680,  325, 1680, 1761, 1694, 1761, 1694, 2551,  498,
      498,  498,  498,  498,  498,  498,  323,  324,  323, 1681,
      326, 2551, 1774, 1695, 1774, 2551, 2551,  498,  498,  498,
      498,  498,  498,  498,  323,  324,  323, 2551,  325, 1775,
     1700, 1775, 1700, 2551, 2551,  499,  499,  499,  499,  499,
      499,  499,  323,  324,  323,  991,  326, 1776, 2551, 1701,
      997, 1701,  998,  499,  499,  499,  499,  499,  499,  499,
      322,  323,  324,  323,  992,  325,  322,  322,  322,  322,

      323,  324,  323,  991,  326,  322,  322,  322,  997,  322,
      998, 1002, 1003, 1004,  322,  323,  324,  323,  322,  325,
      322,  322,  322,  322,  323,  324,  323, 1005,  326,  322,
      322,  322, 1702,  322, 1702, 1703,  322, 1703, 1011, 1002,
     1003, 1004,  322, 2551, 2551,  322,  322,  323,  324,  323,
     2551,  325,  322,  322,  322, 1005,  322,  323,  324,  323,
      322,  326,  322,  322,  322,  322, 1011, 1012, 1013,  322,
     1016,  322,  323,  324,  323,  322,  325,  322,  322,  322,
      322,  323,  324,  323, 1017,  326,  322,  322,  322, 1705,
      322, 1705,  322, 2551, 2551, 1012, 1013, 2551, 1016,  322,

     1020, 1021,  322,  322,  323,  324,  323, 2551,  325,  322,
      322,  322, 1017,  322,  323,  324,  323,  322,  326,  322,
      322,  322,  322,  323,  324,  323,  322,  325, 1020, 1021,
     2551, 1801,  322, 1801,  505,  505,  505,  505,  505,  505,
      505,  323,  324,  323, 1728,  326, 1728, 2551, 1726,  322,
     1726, 2551,  505,  505,  505,  505,  505,  505,  505,  322,
      323,  324,  323, 1738,  325, 1738, 1727, 1742, 1743, 1742,
     1743,  506,  506,  506,  506,  506,  506,  506,  323,  324,
      323, 1744,  326, 1744, 1748, 1749, 1748, 1749, 2551,  506,
      506,  506,  506,  506,  506,  506,  323,  324,  323, 1817,

      325, 1817, 1751, 1750, 1751, 2551, 2551,  507,  507,  507,
      507,  507,  507,  507,  323,  324,  323, 1752,  326, 1752,
     1761, 1839, 1761, 1839, 2551,  507,  507,  507,  507,  507,
      507,  507,  323,  324,  323, 1842,  325, 1842,  508, 1840,
      508,  509, 2551,  510,  510,  510,  510,  510,  510,  510,
      323,  324,  323, 1843,  326, 1774,  508, 1774,  508,  509,
     2551,  510,  510,  510,  510,  510,  510,  510,  323,  324,
      323, 1775,  325, 1775, 1844, 1848, 1844, 1848, 2551,  511,
      511,  511,  511,  511,  511,  511,  323,  324,  323, 1776,
      326, 2551, 1851, 1849, 1851, 2551, 2551,  511,  511,  511,

      511,  511,  511,  511,  323,  324,  323, 1857,  325, 1857,
     1852, 1859, 1863, 1859, 1863,  512,  512,  512,  512,  512,
      512,  512,  323,  324,  323, 1858,  326, 2551, 2551, 1860,
     1864, 2551, 2551,  512,  512,  512,  512,  512,  512,  512,
      323,  324,  323, 2551,  325, 1868, 1801, 1868, 1801, 2551,
     2551,  513,  513,  513,  513,  513,  513,  513,  323,  324,
      323, 1023,  326, 1869, 1817, 1919, 1817, 1919, 2551,  513,
      513,  513,  513,  513,  513,  513,  322,  323,  324,  323,
      322,  325,  322,  322,  322,  322,  322,  322, 2551, 1023,
     1096,  322,  323,  324,  323,  322,  325,  322,  322,  322,

      322,  323,  324,  323, 2551,  326,  322,  322,  322, 2551,
      322,  662,  662,  662,  662,  662,  662,  662, 1096,  322,
     2551, 1097,  322,  322,  323,  324,  323,  322,  326,  322,
      322,  322,  322,  322,  322, 2551, 1100,  322,  599,  323,
      324,  323,  322,  325, 2551,  600,  322, 1101,  601, 1097,
      520,  520,  520,  520,  520,  520,  520,  663,  663,  663,
      663,  663,  663,  663, 1100, 1102,  599, 1107, 2551,  322,
      323,  324,  323,  600,  325, 1101,  601, 1921,  516, 1921,
     2551,  517,  517,  517,  517,  517,  517,  517,  323,  324,
      323, 2551,  326, 1102, 2551, 1107,  516, 2551, 1108,  517,

      517,  517,  517,  517,  517,  517,  322,  323,  324,  323,
      322,  325,  322,  322,  322,  322,  322,  322,  323,  324,
      323, 2551,  326, 1109, 2551,  322, 1108, 2551, 2551,  520,
      520,  520,  520,  520,  520,  520,  594, 1844,  594, 1844,
      594,  594, 1110, 1111,  594,  594,  594,  594,  594,  594,
      594, 1109,  322,  322,  323,  324,  323,  322,  326,  322,
      322,  322,  322,  322,  322,  323,  324,  323, 2551,  325,
     1110, 1111,  322, 1925, 2551, 1925,  528,  528,  528,  528,
      528,  528,  528,  322, 1927,  322, 1927,  322,  322, 1112,
     1113,  595,  595,  595,  595,  595,  595,  595, 2551,  322,

      322,  323,  324,  323,  322,  325,  322,  322,  322,  322,
      322,  322,  323,  324,  323, 2551,  326, 1112, 1113,  322,
     1934, 2551, 1934,  528,  528,  528,  528,  528,  528,  528,
      664,  664,  664,  664,  664,  664,  664,  665,  665,  665,
      665,  665,  665,  665, 2551, 2551,  322,  322,  323,  324,
      323,  322,  326,  322,  322,  322,  322,  322,  322,  323,
      324,  323, 1935,  325, 1935, 2551,  322, 1885, 2551, 1885,
      529,  529,  529,  529,  529,  529,  529,  666,  666,  666,
      666,  666,  666,  666,  667, 1886,  668,  668,  668,  668,
      668,  668,  668,  322,  322,  323,  324,  323,  322,  325,

      322,  322,  322,  322,  322,  322,  323,  324,  323, 1938,
      326, 1938, 1943,  322, 1943, 2551, 2551,  529,  529,  529,
      529,  529,  529,  529,  667, 2551,  668,  668,  668,  668,
      668,  668,  668,  703,  703,  703,  703,  703,  703,  703,
      322,  322,  323,  324,  323,  322,  326,  322,  322,  322,
      322,  322,  322,  323,  324,  323, 1959,  325, 1959, 1969,
      322, 1969, 2551, 2551,  533,  533,  533,  533,  533,  533,
      533,  671, 2551,  672,  672,  672,  672,  672,  672,  672,
      704,  704,  704,  704,  704,  704,  704,  322,  322,  323,
      324,  323,  322,  325,  322,  322,  322,  322,  322,  322,

      323,  324,  323, 1972,  326, 1972, 1975,  322, 1975, 2551,
     2551,  533,  533,  533,  533,  533,  533,  533,  671, 2551,
      672,  672,  672,  672,  672,  672,  672,  705,  705,  705,
      705,  705,  705,  705,  322,  322,  323,  324,  323,  322,
      326,  322,  322,  322,  322,  322,  322,  323,  324,  323,
     1985,  325, 1985, 1919,  322, 1919, 2551, 2551,  570,  570,
      570,  570,  570,  570,  570,  675, 2551,  676,  676,  676,
      676,  676,  676,  676,  706,  706,  706,  706,  706,  706,
      706,  322,  322,  323,  324,  323,  322,  325,  322,  322,
      322,  322,  322,  322,  323,  324,  323, 1921,  326, 1921,

     1925,  322, 1925, 2551, 2551,  570,  570,  570,  570,  570,
      570,  570,  675, 2551,  676,  676,  676,  676,  676,  676,
      676,  707,  707,  707,  707,  707,  707,  707,  322,  322,
      323,  324,  323,  322,  326,  322,  322,  322,  322,  322,
      322,  323,  324,  323, 1927,  325, 1927, 2005,  322, 2005,
     2551, 2551,  575,  575,  575,  575,  575,  575,  575,  679,
     2551,  680,  680,  680,  680,  680,  680,  680,  708,  708,
      708,  708,  708,  708,  708,  322,  322,  323,  324,  323,
      322,  325,  322,  322,  322,  322,  322,  322,  323,  324,
      323, 1934,  326, 1934, 1935,  322, 1935, 2551, 2551,  575,

      575,  575,  575,  575,  575,  575,  679, 2551,  680,  680,
      680,  680,  680,  680,  680,  710,  710,  710,  710,  710,
      710,  710,  322,  322,  323,  324,  323,  322,  326,  322,
      322,  322,  322,  322,  322,  323,  324,  323, 1938,  325,
     1938, 2009,  322, 2009, 2551, 2551,  576,  576,  576,  576,
      576,  576,  576,  683, 2551,  684,  684,  684,  684,  684,
      684,  684,  735,  735,  735,  735,  735,  735,  735,  322,
      322,  323,  324,  323,  322,  325,  322,  322,  322,  322,
      322,  322,  323,  324,  323, 1943,  326, 1943, 1959,  322,
     1959, 2551, 2551,  576,  576,  576,  576,  576,  576,  576,

      683, 1116,  684,  684,  684,  684,  684,  684,  684,  736,
      736,  736,  736,  736,  736,  736,  322,  322,  323,  324,
      323,  322,  326,  322,  322,  322,  322,  322,  322, 1116,
     2551, 1117,  322,  323,  324,  323,  322,  325,  322,  322,
      322,  322,  323,  324,  323, 2551,  326,  322,  322,  322,
      687,  322,  688,  688,  688,  688,  688,  688,  688, 1117,
      322, 2551, 2551,  322,  322,  323,  324,  323,  322,  325,
      322,  322,  322,  322,  322,  322, 2551, 2034,  322, 2034,
     1119, 1120, 2037,  322, 2037, 2551, 2551,  322,  322,  323,
      324,  323, 2551,  325,  322,  322,  322,  687, 2551,  688,

      688,  688,  688,  688,  688,  688, 2551,  322, 1119, 1120,
      322,  322,  323,  324,  323,  322,  326,  322,  322,  322,
      322,  322,  322,  737,  737,  737,  737,  737,  737,  737,
      322, 1969, 2551, 1969,  322,  322,  323,  324,  323, 2551,
      326,  322,  322,  322,  691, 2551,  692,  692,  692,  692,
      692,  692,  692, 1972,  322, 1972, 2551,  322,  322,  323,
      324,  323,  322,  325,  322,  322,  322,  322,  322,  322,
     1127,  323,  324,  323, 1129,  325, 1975,  322, 1975, 2551,
     2551,  322,  579,  579,  579,  579,  579,  579,  579,  691,
     2551,  692,  692,  692,  692,  692,  692,  692, 1127, 1130,

     2551, 2042, 1129, 2042,  322,  322,  323,  324,  323,  322,
      326,  322,  322,  322,  322,  322,  322,  323,  324,  323,
     1131,  326, 1134, 2044,  322, 2044, 2551, 1130,  579,  579,
      579,  579,  579,  579,  579,  669,  669,  669,  669,  669,
      669,  669, 2551, 2551, 1894, 1135, 1894,  670, 1131, 1136,
     1134,  322,  323,  324,  323, 2045,  325, 2045,  530, 2551,
      530,  531, 1895,  532,  532,  532,  532,  532,  532,  532,
      323,  324,  323, 1135,  326,  670,  530, 1136,  530,  531,
     2551,  532,  532,  532,  532,  532,  532,  532,  323,  324,
      323, 1898,  325, 1898,  534, 1902,  534, 1902, 2551,  535,

      535,  535,  535,  535,  535,  535,  323,  324,  323, 1899,
      326, 2551,  534, 1903,  534, 2551, 2551,  535,  535,  535,
      535,  535,  535,  535,  323,  324,  323, 1908,  325, 1908,
      536, 1839,  536, 1839, 2551,  537,  537,  537,  537,  537,
      537,  537,  323,  324,  323, 1909,  326, 2551,  536, 1840,
      536, 2551, 2551,  537,  537,  537,  537,  537,  537,  537,
      323,  324,  323, 1842,  325, 1842,  538, 1848,  538, 1848,
     2551,  539,  539,  539,  539,  539,  539,  539,  323,  324,
      323, 1843,  326, 2551,  538, 1849,  538, 2551, 2551,  539,
      539,  539,  539,  539,  539,  539,  323,  324,  323, 1851,

      325, 1851,  540, 1932,  540, 1932, 2551,  541,  541,  541,
      541,  541,  541,  541,  323,  324,  323, 1852,  326, 2551,
      540, 1933,  540, 2551, 2551,  541,  541,  541,  541,  541,
      541,  541,  323,  324,  323, 1857,  325, 1857,  542, 1859,
      542, 1859, 2551,  543,  543,  543,  543,  543,  543,  543,
      323,  324,  323, 1858,  326, 2551,  542, 1860,  542, 2551,
     2551,  543,  543,  543,  543,  543,  543,  543,  323,  324,
      323, 1863,  325, 1863,  544, 1940,  544, 1940, 2551,  545,
      545,  545,  545,  545,  545,  545,  323,  324,  323, 1864,
      326, 2551,  544, 1941,  544, 2551, 2551,  545,  545,  545,

      545,  545,  545,  545,  323,  324,  323, 1868,  325, 1868,
      546, 1885,  546, 1885, 2551,  547,  547,  547,  547,  547,
      547,  547,  323,  324,  323, 1869,  326, 2551,  546, 1886,
      546, 2551, 2551,  547,  547,  547,  547,  547,  547,  547,
      323,  324,  323, 1963,  325, 1963,  548, 1967,  548, 1967,
     2551,  549,  549,  549,  549,  549,  549,  549,  323,  324,
      323, 1964,  326, 2551,  548, 1968,  548, 2551, 2551,  549,
      549,  549,  549,  549,  549,  549,  323,  324,  323, 1894,
      325, 1894,  550, 1898,  550, 1898, 2551,  551,  551,  551,
      551,  551,  551,  551,  323,  324,  323, 1895,  326, 2551,

      550, 1899,  550, 2551, 2551,  551,  551,  551,  551,  551,
      551,  551,  323,  324,  323, 1902,  325, 1902,  552, 1979,
      552, 1979, 2551,  553,  553,  553,  553,  553,  553,  553,
      323,  324,  323, 1903,  326, 2551,  552, 1980,  552, 2551,
     2551,  553,  553,  553,  553,  553,  553,  553,  323,  324,
      323, 1981,  325, 1981,  554, 1983,  554, 1983, 2551,  555,
      555,  555,  555,  555,  555,  555,  323,  324,  323, 1982,
      326, 2551,  554, 1984,  554, 2551, 2551,  555,  555,  555,
      555,  555,  555,  555,  323,  324,  323, 1908,  325, 1908,
      556, 1995,  556, 1995, 2551,  557,  557,  557,  557,  557,

      557,  557,  323,  324,  323, 1909,  326, 2551,  556, 1996,
      556, 2551, 2551,  557,  557,  557,  557,  557,  557,  557,
      323,  324,  323, 1932,  325, 1932,  558, 1940,  558, 1940,
     2551,  559,  559,  559,  559,  559,  559,  559,  323,  324,
      323, 1933,  326, 2551,  558, 1941,  558, 2551, 2551,  559,
      559,  559,  559,  559,  559,  559,  323,  324,  323, 2018,
      325, 2018,  560, 2022,  560, 2022, 2551,  561,  561,  561,
      561,  561,  561,  561,  323,  324,  323, 2019,  326, 2551,
      560, 2023,  560, 2551, 2551,  561,  561,  561,  561,  561,
      561,  561,  323,  324,  323, 2024,  325, 2024,  562, 1963,

      562, 1963, 2551,  563,  563,  563,  563,  563,  563,  563,
      323,  324,  323, 2025,  326, 2551,  562, 1964,  562, 2551,
     2551,  563,  563,  563,  563,  563,  563,  563,  323,  324,
      323, 1967,  325, 1967,  564, 2046,  564, 2046, 2551,  565,
      565,  565,  565,  565,  565,  565,  323,  324,  323, 1968,
      326, 1137,  564, 1141,  564, 2551, 1142,  565,  565,  565,
      565,  565,  565,  565,  322,  323,  324,  323,  322,  325,
      322,  322,  322,  322,  322,  322,  323,  324,  323, 1137,
      325, 1141, 2551,  322, 1142, 2551, 2551,  580,  580,  580,
      580,  580,  580,  580,  695, 2551,  696,  696,  696,  696,

      696,  696,  696,  738,  738,  738,  738,  738,  738,  738,
      322,  322,  323,  324,  323,  322,  326,  322,  322,  322,
      322,  322,  322,  323,  324,  323, 1985,  326, 1985, 2056,
      322, 2056, 2551, 2551,  580,  580,  580,  580,  580,  580,
      580,  695, 2551,  696,  696,  696,  696,  696,  696,  696,
      745,  745,  745,  745,  745,  745,  745,  322,  322,  323,
      324,  323,  322,  325,  322,  322,  322,  322,  322,  322,
      323,  324,  323, 2005,  325, 2005, 2009,  322, 2009, 2551,
     2551,  581,  581,  581,  581,  581,  581,  581,  699, 2551,
      700,  700,  700,  700,  700,  700,  700,  746,  746,  746,

      746,  746,  746,  746,  322,  322,  323,  324,  323,  322,
      326,  322,  322,  322,  322,  322,  322,  323,  324,  323,
     2075,  326, 2075, 2079,  322, 2079, 2551, 2551,  581,  581,
      581,  581,  581,  581,  581,  699, 1143,  700,  700,  700,
      700,  700,  700,  700,  747,  747,  747,  747,  747,  747,
      747,  322,  322,  323,  324,  323,  322,  325,  322,  322,
      322,  322,  322,  322, 1143, 2551, 1144,  322,  323,  324,
      323,  322,  325,  322,  322,  322,  322,  323,  324,  323,
     2551,  326,  322,  322,  322,  711,  322,  712,  712,  712,
      712,  712,  712,  712, 1144,  322, 2551, 2551,  322,  322,

      323,  324,  323,  322,  326,  322,  322,  322,  322,  322,
      322, 2551, 2082,  322, 2082, 1145, 1147, 2083,  322, 2083,
     2551, 2551,  322,  322,  323,  324,  323, 2551,  325,  322,
      322,  322,  711, 2551,  712,  712,  712,  712,  712,  712,
      712, 2551,  322, 1145, 1147,  322,  322,  323,  324,  323,
      322,  325,  322,  322,  322,  322,  322,  322,  748,  748,
      748,  748,  748,  748,  748,  322, 2034, 2551, 2034,  322,
      322,  323,  324,  323, 2551,  326,  322,  322,  322,  715,
     2551,  716,  716,  716,  716,  716,  716,  716, 2037,  322,
     2037, 2551,  322,  322,  323,  324,  323,  322,  326,  322,

      322,  322,  322,  322,  322, 2551,  323,  324,  323, 1148,
      326, 2042,  322, 2042, 2551, 2551,  322,  595,  595,  595,
      595,  595,  595,  595,  709, 2551,  709, 1149, 2551,  708,
      708,  708,  708,  708,  708,  708, 2044, 1148, 2044,  322,
      322,  323,  324,  323,  322,  325,  322,  322,  322,  322,
      322,  322,  323,  324,  323, 1149,  325, 2551, 2045,  322,
     2045, 2551, 2551,  596,  596,  596,  596,  596,  596,  596,
      715, 2551,  716,  716,  716,  716,  716,  716,  716,  749,
      749,  749,  749,  749,  749,  749,  322,  322,  323,  324,
      323,  322,  326,  322,  322,  322,  322,  322,  322,  323,

      324,  323, 2046,  326, 2046, 2551,  322, 1976, 2551, 1976,
      596,  596,  596,  596,  596,  596,  596, 2551,  993,  603,
     1009, 1098,  994,  995,  996, 1977,  604,  605, 1010, 1099,
      606, 1150,  607,  322,  322,  323,  324,  323,  322,  325,
      322,  322,  322,  322,  322,  322,  993,  603, 1009, 1098,
      994,  995,  996,  322,  604,  605, 1010, 1099,  606, 1150,
      607, 2056, 2120, 2056, 2120,  646,  673,  673,  673,  673,
      673,  673,  673,  647,  648,  649, 1151, 1152,  674, 1153,
      322,  322,  323,  324,  323,  322,  326,  322,  322,  322,
      322,  322,  322,  646, 1154, 1155, 1156, 1157, 1158, 2551,

      322,  647,  648,  649, 1151, 1152,  674, 1153,  677,  677,
      677,  677,  677,  677,  677, 2128, 2075, 2128, 2075, 2079,
      678, 2079, 1154, 1155, 1156, 1157, 1158,  322,  322,  323,
      324,  323,  322,  325,  322,  322,  322,  322,  322,  322,
      750,  750,  750,  750,  750,  750,  750,  322,  678,  681,
      681,  681,  681,  681,  681,  681, 2082, 2551, 2082, 1160,
      719,  682,  720,  720,  720,  720,  720,  720,  720, 2083,
     2145, 2083, 2145, 2551,  322,  322,  323,  324,  323,  322,
      326,  322,  322,  322,  322,  322,  322, 1160, 1161,  682,
     2155, 1162, 2155, 2551,  322,  685,  685,  685,  685,  685,

      685,  685, 2156, 2164, 2156, 2164, 1014,  686,  689,  689,
      689,  689,  689,  689,  689, 1166, 1161, 1167, 1015, 1162,
      690,  322,  322,  323,  324,  323,  322,  325,  322,  322,
      322,  322,  322,  322, 1014,  686, 1168, 1169, 1171, 1172,
     1979,  322, 1979, 1166, 2551, 1167, 1015, 2551,  690,  693,
      693,  693,  693,  693,  693,  693, 2551, 2178, 1980, 2178,
     2179,  694, 2179, 2551, 1168, 1169, 1171, 1172,  322,  322,
      323,  324,  323,  322,  326,  322,  322,  322,  322,  322,
      322,  751,  751,  751,  751,  751,  751,  751,  322,  694,
      752,  752,  752,  752,  752,  752,  752,  697,  697,  697,

      697,  697,  697,  697, 1981, 2120, 1981, 2120, 1983,  698,
     1983, 2551, 1177, 1178, 2551,  322,  323,  324,  323,  591,
      325,  591, 1982,  591,  591, 2551, 1984,  591,  591,  591,
      591,  591,  591,  591,  592,  326,  592,  698,  592,  592,
     1177, 1178,  592,  592,  592,  592,  592,  592,  592,  594,
      326,  594, 1183,  594,  594, 2551, 1018,  594,  594,  594,
      594,  594,  594,  594,  610, 1019,  627, 1184,  611, 2551,
     1006,  628, 1185, 2551,  612, 1186,  999, 1191, 1192,  613,
     1183, 1007, 2551, 1000, 1018, 1001,  629, 1193, 1008, 1194,
     1195,  630,  610, 1019,  631, 1184,  611,  632, 1006, 2551,

     1185,  633,  612, 1186,  999, 1191, 1192,  613,  619, 1007,
      619, 1000, 2551, 1001,  629, 1193, 1008, 1194, 1195,  630,
     2551, 1196,  631, 2551,  620,  632,  621,  622,  701,  701,
      701,  701,  701,  701,  701, 2551, 2551, 1197, 1200, 1201,
      702,  623,  713,  713,  713,  713,  713,  713,  713, 1196,
      624,  625,  626, 2551,  714,  622, 2551, 1202,  717,  717,
      717,  717,  717,  717,  717, 1197, 1200, 1201,  702,  623,
      718,  721,  721,  721,  721,  721,  721,  721,  624,  625,
      626,  634,  714,  722, 1163, 1202, 1203,  635, 1138, 2551,
      636, 1198, 1204,  637, 1205, 1139,  638,  639,  718,  640,

     2551, 1208, 1140, 1199, 2551, 1209,  641, 1210, 2551,  634,
     1164,  722, 2551, 1211, 1203,  635, 1138, 1165,  636, 1198,
     1204,  637, 1205, 1139,  638,  639, 2551,  640,  650, 1208,
     1140, 1199,  651, 1209, 1213, 1210,  652, 1214, 1164, 1215,
      653, 1211,  654, 1216, 1217,  655, 1218,  719,  656,  720,
      720,  720,  720,  720,  720,  720,  650, 2185, 2551, 2185,
      651, 2551, 1213, 1219,  652, 1214, 1220, 1215,  653, 2551,
      654, 1216, 1217,  655, 1218,  723,  656,  724,  724,  724,
      724,  724,  724,  724,  725,  725,  725,  725,  725,  725,
      725, 1219, 1221, 1222, 1220,  723,  726,  724,  724,  724,

      724,  724,  724,  724,  741, 2551,  742,  742,  742,  742,
      742,  742,  742,  743,  743,  743,  743,  743,  743,  743,
     1221, 1222, 2551, 1223,  726,  744,  741, 2551,  742,  742,
      742,  742,  742,  742,  742,  753,  753,  753,  753,  753,
      753,  753,  754, 2551,  755,  755,  755,  755,  755,  755,
      755, 1223, 2551,  744,  756,  756,  756,  756,  756,  756,
      756, 2551, 1224, 1225, 1226,  754,  757,  755,  755,  755,
      755,  755,  755,  755,  758, 2551,  759,  759,  759,  759,
      759,  759,  759,  760,  760,  760,  760,  760,  760,  760,
     1224, 1225, 1226, 1227,  757,  761,  758, 2551,  759,  759,

      759,  759,  759,  759,  759,  762, 2551,  763,  763,  763,
      763,  763,  763,  763,  764,  764,  764,  764,  764,  764,
      764, 1227, 1228,  761, 1229,  762,  765,  763,  763,  763,
      763,  763,  763,  763,  766, 2551,  767,  767,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
     1228, 1233, 1229, 1231,  765,  769,  766, 2551,  767,  767,
      767,  767,  767,  767,  767,  770,  770,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  771,  771, 1233,
     1232, 1231,  772,  769,  773,  773,  773,  773,  773,  773,
      773,  774,  774,  774,  774,  774,  774,  774, 2551, 1235,

     1236, 1241,  772,  775,  773,  773,  773,  773,  773,  773,
      773,  776, 2551,  777,  777,  777,  777,  777,  777,  777,
      778,  778,  778,  778,  778,  778,  778, 1235, 1236, 1241,
     1242,  775,  779,  776, 2551,  777,  777,  777,  777,  777,
      777,  777,  780, 2551,  781,  781,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  782,  782, 1242, 1243,
      779, 1247,  780,  783,  781,  781,  781,  781,  781,  781,
      781,  784, 2551,  785,  785,  785,  785,  785,  785,  785,
      786,  786,  786,  786,  786,  786,  786, 1243, 2551, 1247,
     1248,  783,  787,  784, 2551,  785,  785,  785,  785,  785,

      785,  785,  788, 2551,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790, 1248, 1250,
      787, 1251,  788,  791,  789,  789,  789,  789,  789,  789,
      789,  792, 2551,  793,  793,  793,  793,  793,  793,  793,
      794,  794,  794,  794,  794,  794,  794, 1250, 2551, 1251,
     1252,  791,  795,  792, 2551,  793,  793,  793,  793,  793,
      793,  793,  796, 2551,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  798, 1252, 1253,
      795, 1254,  796,  799,  797,  797,  797,  797,  797,  797,
      797,  800, 2551,  801,  801,  801,  801,  801,  801,  801,

      802,  802,  802,  802,  802,  802,  802, 1253, 2551, 1254,
     1255,  799,  803,  800, 2551,  801,  801,  801,  801,  801,
      801,  801,  804, 2551,  805,  805,  805,  805,  805,  805,
      805,  806,  806,  806,  806,  806,  806,  806, 1255, 1265,
      803, 1268,  804,  807,  805,  805,  805,  805,  805,  805,
      805,  808, 2551,  809,  809,  809,  809,  809,  809,  809,
      810,  810,  810,  810,  810,  810,  810, 1265, 1270, 1268,
     1271,  807,  811,  808, 2551,  809,  809,  809,  809,  809,
      809,  809,  812,  812,  812,  812,  812,  812,  812,  813,
      813,  813,  813,  813,  813,  813, 1270, 2128, 1271, 2128,

      811,  814,  814,  814,  814,  814,  814,  814,  815,  815,
      815,  815,  815,  815,  815,  816, 2551,  817,  817,  817,
      817,  817,  817,  817,  818,  818,  818,  818,  818,  818,
      818, 2551, 1272, 1273, 1274,  816,  819,  817,  817,  817,
      817,  817,  817,  817,  821, 2551,  822,  822,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  823,  823,
     1272, 1273, 1274, 2551,  819,  824,  821, 2551,  822,  822,
      822,  822,  822,  822,  822,  825,  825,  825,  825,  825,
      825,  825,  826,  826,  826,  826,  826,  826,  826,  827,
     2192,  827, 2192,  824,  826,  826,  826,  826,  826,  826,

      826,  828,  828,  828,  828,  828,  828,  828,  829, 2193,
      829, 2193, 2551,  828,  828,  828,  828,  828,  828,  828,
      830,  830,  830,  830,  830,  830,  830,  831, 2194,  831,
     2194, 2551,  830,  830,  830,  830,  830,  830,  830,  832,
      832,  832,  832,  832,  832,  832,  833, 2195,  833, 2195,
     2551,  832,  832,  832,  832,  832,  832,  832,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  835,
      835,  835,  836,  836,  836,  836,  836,  836,  836,  837,
      837,  837,  837,  837,  837,  837,  838,  838,  838,  838,
      838,  838,  838,  839,  839,  839,  839,  839,  839,  839,

      840,  840,  840,  840,  840,  840,  840,  841,  841,  841,
      841,  841,  841,  841,  842,  842,  842,  842,  842,  842,
      842,  848,  848,  848,  848,  848,  848,  848,  849,  849,
      849,  849,  849,  849,  849,  850,  850,  850,  850,  850,
      850,  850,  851, 2551,  852,  852,  852,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853, 1275, 1276,
     1277, 1278,  851,  854,  852,  852,  852,  852,  852,  852,
      852,  855,  855,  855,  855,  855,  855,  855,  856,  856,
      856,  856,  856,  856,  856, 2551, 1275, 1276, 1277, 1278,
     2551,  854,  857,  857,  857,  857,  857,  857,  857,  860,

      860,  860,  860,  860,  860,  860,  861,  861,  861,  861,
      861,  861,  861,  864,  864,  864,  864,  864,  864,  864,
      872,  872,  872,  872,  872,  872,  872,  873,  873,  873,
      873,  873,  873,  873,  874, 2551,  875,  875,  875,  875,
      875,  875,  875,  876,  876,  876,  876,  876,  876,  876,
     1279, 2198, 2551, 2198,  874,  877,  875,  875,  875,  875,
      875,  875,  875,  878,  878,  878,  878,  878,  878,  878,
      879,  879,  879,  879,  879,  879,  879, 2551, 1279,  880,
      881,  880, 2551,  877,  879,  879,  879,  879,  879,  879,
      879,  882,  882,  882,  882,  882,  882,  882,  883, 2145,

      883, 2145, 2551,  882,  882,  882,  882,  882,  882,  882,
      884,  884,  884,  884,  884,  884,  884,  885, 2199,  885,
     2199, 2551,  884,  884,  884,  884,  884,  884,  884,  886,
      886,  886,  886,  886,  886,  886,  887, 2200,  887, 2200,
     2551,  886,  886,  886,  886,  886,  886,  886,  888,  888,
      888,  888,  888,  888,  888,  889,  890,  889, 2551, 2551,
      888,  888,  888,  888,  888,  888,  888,  891,  891,  891,
      891,  891,  891,  891,  892, 2155,  892, 2155, 2551,  891,
      891,  891,  891,  891,  891,  891,  893,  893,  893,  893,
      893,  893,  893,  894, 2156,  894, 2156, 2551,  893,  893,

      893,  893,  893,  893,  893,  895,  895,  895,  895,  895,
      895,  895,  896, 2213,  896, 2213, 2551,  895,  895,  895,
      895,  895,  895,  895,  897,  897,  897,  897,  897,  897,
      897,  898,  899,  898, 2551, 2551,  897,  897,  897,  897,
      897,  897,  897,  900,  900,  900,  900,  900,  900,  900,
      901, 2214,  901, 2214, 2551,  900,  900,  900,  900,  900,
      900,  900,  902,  902,  902,  902,  902,  902,  902,  903,
     2164,  903, 2164, 2551,  902,  902,  902,  902,  902,  902,
      902,  904,  904,  904,  904,  904,  904,  904,  905, 2178,
      905, 2178, 2551,  904,  904,  904,  904,  904,  904,  904,

      906,  906,  906,  906,  906,  906,  906,  907,  908,  907,
     2551, 2551,  906,  906,  906,  906,  906,  906,  906,  909,
      909,  909,  909,  909,  909,  909,  910, 2179,  910, 2179,
     2551,  909,  909,  909,  909,  909,  909,  909,  911,  911,
      911,  911,  911,  911,  911,  912, 2185,  912, 2185, 2551,
      911,  911,  911,  911,  911,  911,  911,  913,  913,  913,
      913,  913,  913,  913,  914, 2192,  914, 2192, 2551,  913,
      913,  913,  913,  913,  913,  913,  919,  919,  919,  919,
      919,  919,  919,  924,  924,  924,  924,  924,  924,  924,
      925,  925,  925,  925,  925,  925,  925,  928,  928,  928,

      928,  928,  928,  928,  929,  929,  929,  929,  929,  929,
      929,  930,  930,  930,  930,  930,  930,  930,  938, 2551,
      938, 1280,  938,  938, 2551, 2551,  938,  938,  938,  938,
      938,  938,  938,  939, 2193,  939, 2193,  939,  939, 2551,
     2551,  939,  939,  939,  939,  939,  939,  939,  941, 1280,
      941, 2551,  941,  941, 2551, 2551,  941,  941,  941,  941,
      941,  941,  941,  942,  942,  942,  942,  942,  942,  942,
      943,  943,  943,  943,  943,  943,  943,  981, 2551,  981,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661, 1284,  982, 1287,  983, 1288,  984,

      662,  662,  662,  662,  662,  662,  662,  663,  663,  663,
      663,  663,  663,  663,  985,  664,  664,  664,  664,  664,
      664,  664, 1284, 1294, 1287,  983, 1288,  984,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  985,  669,  669,  669,  669,  669,  669,  669,
     2194, 1294, 2194, 2551,  667,  670,  668,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
     1298, 1024, 1299, 1024, 2551,  670, 1025, 1025, 1025, 1025,
     1025, 1025, 1025,  670,  673,  673,  673,  673,  673,  673,
      673, 1300, 2195, 2243, 2195, 2243,  674, 2198, 1298, 2198,

     1299, 2551,  671,  670,  672,  672,  672,  672,  672,  672,
      672,  673,  673,  673,  673,  673,  673,  673, 1281, 1300,
     1026, 1282, 1026,  674,  674, 1027, 1027, 1027, 1027, 1027,
     1027, 1027,  677,  677,  677,  677,  677,  677,  677, 1301,
     1283, 1308, 2551, 2199,  678, 2199, 1281, 2551, 2551, 1282,
      675,  674,  676,  676,  676,  676,  676,  676,  676,  677,
      677,  677,  677,  677,  677,  677, 1309, 1301, 1028, 1308,
     1028,  678,  678, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
      681,  681,  681,  681,  681,  681,  681, 1310, 2200, 1311,
     2200, 2250,  682, 2250, 1309, 2252, 2551, 2252,  679,  678,

      680,  680,  680,  680,  680,  680,  680,  681,  681,  681,
      681,  681,  681,  681, 1312, 1310, 1030, 1311, 1030,  682,
      682, 1031, 1031, 1031, 1031, 1031, 1031, 1031,  685,  685,
      685,  685,  685,  685,  685, 1313, 2213, 1314, 2213, 2214,
      686, 2214, 1312, 2259, 2551, 2259,  683,  682,  684,  684,
      684,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      685,  685, 1317, 1313, 1032, 1314, 1032,  686,  686, 1033,
     1033, 1033, 1033, 1033, 1033, 1033,  689,  689,  689,  689,
      689,  689,  689, 1322, 2260, 1323, 2260, 2273,  690, 2273,
     1317, 2280, 2551, 2280,  687,  686,  688,  688,  688,  688,

      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,
     1324, 1322, 1034, 1323, 1034,  690,  690, 1035, 1035, 1035,
     1035, 1035, 1035, 1035,  693,  693,  693,  693,  693,  693,
      693, 1325, 2243, 1326, 2243, 2287,  694, 2287, 1324, 2288,
     2551, 2288,  691,  690,  692,  692,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  693,  693, 1327, 1325,
     1036, 1326, 1036,  694,  694, 1037, 1037, 1037, 1037, 1037,
     1037, 1037,  697,  697,  697,  697,  697,  697,  697, 1330,
     2289, 2250, 2289, 2250,  698, 2252, 1327, 2252, 2551, 2551,
      695,  694,  696,  696,  696,  696,  696,  696,  696,  697,

      697,  697,  697,  697,  697,  697, 1328, 1330, 1038, 1329,
     1038,  698,  698, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
      701,  701,  701,  701,  701,  701,  701, 1331, 2259, 1334,
     2259, 2260,  702, 2260, 1328, 2551, 2551, 1329,  699,  698,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701, 1335, 1331, 1040, 1334, 1040,  702,
      702, 1041, 1041, 1041, 1041, 1041, 1041, 1041,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704, 1335, 2551, 1336, 1338, 2551,  702,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,

      706,  706,  707,  707,  707,  707,  707,  707,  707,  709,
     2551,  709, 1336, 1338,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  710,  710,
      710,  710,  710,  710,  710,  713,  713,  713,  713,  713,
      713,  713, 2273, 2310, 2273, 2310,  711,  714,  712,  712,
      712,  712,  712,  712,  712,  713,  713,  713,  713,  713,
      713,  713, 1339, 1042, 1340, 1042, 2551,  714, 1043, 1043,
     1043, 1043, 1043, 1043, 1043,  714,  717,  717,  717,  717,
      717,  717,  717, 1341, 2280, 1342, 2280, 2287,  718, 2287,
     1339, 2288, 1340, 2288,  715,  714,  716,  716,  716,  716,

      716,  716,  716,  717,  717,  717,  717,  717,  717,  717,
     1343, 1341, 1044, 1342, 1044,  718,  718, 1045, 1045, 1045,
     1045, 1045, 1045, 1045,  721,  721,  721,  721,  721,  721,
      721, 1344, 2289, 1345, 2289, 2310,  722, 2310, 1343, 2351,
     2551, 2351,  719,  718,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721, 1346, 1344,
     1046, 1345, 1046,  722,  722, 1047, 1047, 1047, 1047, 1047,
     1047, 1047,  725,  725,  725,  725,  725,  725,  725, 1350,
     2362, 1351, 2362, 2369,  726, 2369, 1346, 2373, 2551, 2373,
      723,  722,  724,  724,  724,  724,  724,  724,  724,  725,

      725,  725,  725,  725,  725,  725, 1352, 1350, 1048, 1351,
     1048,  726,  726, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,  736, 1352, 1353, 1354, 2551, 2551,  726,
      737,  737,  737,  737,  737,  737,  737,  738,  738,  738,
      738,  738,  738,  738,  743,  743,  743,  743,  743,  743,
      743, 2551, 2551, 1353, 1354,  741,  744,  742,  742,  742,
      742,  742,  742,  742,  743,  743,  743,  743,  743,  743,
      743, 1355, 1050, 1356, 1050, 1357,  744, 1051, 1051, 1051,
     1051, 1051, 1051, 1051,  744,  745,  745,  745,  745,  745,

      745,  745,  746,  746,  746,  746,  746,  746,  746, 1355,
     2374, 1356, 2374, 1357,  744,  747,  747,  747,  747,  747,
      747,  747,  748,  748,  748,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  751,  751,
      752,  752,  752,  752,  752,  752,  752,  753,  753,  753,
      753,  753,  753,  753,  756,  756,  756,  756,  756,  756,
      756, 2378, 2384, 2378, 2384,  754,  757,  755,  755,  755,
      755,  755,  755,  755,  756,  756,  756,  756,  756,  756,
      756, 1361, 1052, 1362, 1052, 2551,  757, 1053, 1053, 1053,

     1053, 1053, 1053, 1053,  757,  760,  760,  760,  760,  760,
      760,  760, 1365, 2387, 1366, 2387, 2351,  761, 2351, 1361,
     2391, 1362, 2391,  758,  757,  759,  759,  759,  759,  759,
      759,  759,  760,  760,  760,  760,  760,  760,  760, 1367,
     1365, 1054, 1366, 1054,  761,  761, 1055, 1055, 1055, 1055,
     1055, 1055, 1055,  764,  764,  764,  764,  764,  764,  764,
     1368, 2393, 1369, 2393, 2362,  765, 2362, 1367, 2369, 2551,
     2369,  762,  761,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764, 1370, 1368, 1056,
     1369, 1056,  765,  765, 1057, 1057, 1057, 1057, 1057, 1057,

     1057,  768,  768,  768,  768,  768,  768,  768, 1371, 2410,
     1372, 2410, 2373,  769, 2373, 1370, 2374, 2551, 2374,  766,
      765,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768, 1373, 1371, 1058, 1372, 1058,
      769,  769, 1059, 1059, 1059, 1059, 1059, 1059, 1059,  770,
      770,  770,  770,  770,  770,  770,  771,  771,  771,  771,
      771,  771,  771, 1373, 2378, 2416, 2378, 2416,  769,  774,
      774,  774,  774,  774,  774,  774, 2384, 2420, 2384, 2420,
      772,  775,  773,  773,  773,  773,  773,  773,  773,  774,
      774,  774,  774,  774,  774,  774, 1375, 1060, 1386, 1060,

     2551,  775, 1061, 1061, 1061, 1061, 1061, 1061, 1061,  775,
      778,  778,  778,  778,  778,  778,  778, 1387, 2387, 1388,
     2387, 2421,  779, 2421, 1375, 2391, 1386, 2391,  776,  775,
      777,  777,  777,  777,  777,  777,  777,  778,  778,  778,
      778,  778,  778,  778, 1389, 1387, 1062, 1388, 1062,  779,
      779, 1063, 1063, 1063, 1063, 1063, 1063, 1063,  782,  782,
      782,  782,  782,  782,  782, 1391, 2393, 1393, 2393, 2435,
      783, 2435, 1389, 2436, 2551, 2436,  780,  779,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782, 1394, 1391, 1064, 1393, 1064,  783,  783, 1065,

     1065, 1065, 1065, 1065, 1065, 1065,  786,  786,  786,  786,
      786,  786,  786, 1395, 2437, 1396, 2437, 2410,  787, 2410,
     1394, 2441, 2551, 2441,  784,  783,  785,  785,  785,  785,
      785,  785,  785,  786,  786,  786,  786,  786,  786,  786,
     1397, 1395, 1066, 1396, 1066,  787,  787, 1067, 1067, 1067,
     1067, 1067, 1067, 1067,  790,  790,  790,  790,  790,  790,
      790, 1398, 2416, 1399, 2416, 2420,  791, 2420, 1397, 2421,
     2551, 2421,  788,  787,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790, 1400, 1398,
     1068, 1399, 1068,  791,  791, 1069, 1069, 1069, 1069, 1069,

     1069, 1069,  794,  794,  794,  794,  794,  794,  794, 1402,
     2448, 1405, 2448, 2450,  795, 2450, 1400, 2451, 2551, 2451,
      792,  791,  793,  793,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  794,  794, 1406, 1402, 1070, 1405,
     1070,  795,  795, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
      798,  798,  798,  798,  798,  798,  798, 1407, 2452, 1408,
     2452, 2435,  799, 2435, 1406, 2436, 2551, 2436,  796,  795,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798, 1409, 1407, 1072, 1408, 1072,  799,
      799, 1073, 1073, 1073, 1073, 1073, 1073, 1073,  802,  802,

      802,  802,  802,  802,  802, 1410, 2437, 1411, 2437, 2441,
      803, 2441, 1409, 2448, 2551, 2448,  800,  799,  801,  801,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      802,  802, 1414, 1410, 1074, 1411, 1074,  803,  803, 1075,
     1075, 1075, 1075, 1075, 1075, 1075,  806,  806,  806,  806,
      806,  806,  806, 1417, 2450, 1419, 2450, 2451,  807, 2451,
     1414, 2452, 2551, 2452,  804,  803,  805,  805,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  806,  806,  806,
     1420, 1417, 1076, 1419, 1076,  807,  807, 1077, 1077, 1077,
     1077, 1077, 1077, 1077,  810,  810,  810,  810,  810,  810,

      810, 1421, 2474, 1422, 2474, 2476,  811, 2476, 1420, 2478,
     2551, 2478,  808,  807,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810, 1423, 1421,
     1078, 1422, 1078,  811,  811, 1079, 1079, 1079, 1079, 1079,
     1079, 1079,  812,  812,  812,  812,  812,  812,  812,  813,
      813,  813,  813,  813,  813,  813, 1423, 1424, 1428, 2551,
     2551,  811,  814,  814,  814,  814,  814,  814,  814,  815,
      815,  815,  815,  815,  815,  815,  818,  818,  818,  818,
      818,  818,  818, 2551, 2551, 1424, 1428,  816,  819,  817,
      817,  817,  817,  817,  817,  817,  818,  818,  818,  818,

      818,  818,  818, 1429, 1080, 1426, 1080, 2551,  819, 1081,
     1081, 1081, 1081, 1081, 1081, 1081,  819,  823,  823,  823,
      823,  823,  823,  823, 1427, 2474, 1432, 2474, 2476,  824,
     2476, 1429, 2478, 1426, 2478,  821,  819,  822,  822,  822,
      822,  822,  822,  822,  823,  823,  823,  823,  823,  823,
      823, 2551, 2551, 1082, 1432, 1082,  824,  824, 1083, 1083,
     1083, 1083, 1083, 1083, 1083,  825,  825,  825,  825,  825,
      825,  825,  827, 2494,  827, 2494, 2551,  826,  826,  826,
      826,  826,  826,  826,  824,  826,  826,  826,  826,  826,
      826,  826,  829, 2494,  829, 2494, 2551,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  831, 2509,  831, 2509, 2551,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      833, 2512,  833, 2512, 2551,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  834,
      834,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  835,  835,  836,  836,  836,  836,  836,  836,  836,
      837,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  839,
      839,  840,  840,  840,  840,  840,  840,  840,  841,  841,

      841,  841,  841,  841,  841,  842,  842,  842,  842,  842,
      842,  842,  848,  848,  848,  848,  848,  848,  848,  849,
      849,  849,  849,  849,  849,  849,  850,  850,  850,  850,
      850,  850,  850,  853,  853,  853,  853,  853,  853,  853,
     2513, 2509, 2513, 2509,  851,  854,  852,  852,  852,  852,
      852,  852,  852,  853,  853,  853,  853,  853,  853,  853,
     1433, 1084, 1439, 1084, 1440,  854, 1085, 1085, 1085, 1085,
     1085, 1085, 1085,  854,  855,  855,  855,  855,  855,  855,
      855,  856,  856,  856,  856,  856,  856,  856, 1433, 2525,
     1439, 2525, 1440,  854,  857,  857,  857,  857,  857,  857,

      857,  860,  860,  860,  860,  860,  860,  860,  861,  861,
      861,  861,  861,  861,  861,  864,  864,  864,  864,  864,
      864,  864,  872,  872,  872,  872,  872,  872,  872,  873,
      873,  873,  873,  873,  873,  873,  876,  876,  876,  876,
      876,  876,  876, 2512, 2513, 2512, 2513,  874,  877,  875,
      875,  875,  875,  875,  875,  875,  876,  876,  876,  876,
      876,  876,  876, 2532, 1086, 2532, 1086, 2551,  877, 1087,
     1087, 1087, 1087, 1087, 1087, 1087,  877,  878,  878,  878,
      878,  878,  878,  878,  880,  881,  880, 2551, 2551,  879,
      879,  879,  879,  879,  879,  879,  877,  879,  879,  879,

      879,  879,  879,  879, 1088, 2533, 1088, 2533, 1441, 1089,
     1089, 1089, 1089, 1089, 1089, 1089,  883, 2525,  883, 2525,
     2551,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  885, 1441,  885, 2551, 2551,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  887, 2540,  887, 2540, 2551,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  889,  890,  889, 2551, 1442,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888, 1090, 2541, 1090, 2541, 1447, 1091, 1091, 1091,

     1091, 1091, 1091, 1091,  892, 1442,  892, 2551, 2551,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  894, 1447,  894, 2551, 2551,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  896, 2542,  896, 2542, 2551,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  898,  899,  898, 2551, 1452,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
     1092, 2532, 1092, 2532, 1458, 1093, 1093, 1093, 1093, 1093,
     1093, 1093,  901, 1452,  901, 2551, 2551,  900,  900,  900,

      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  903, 1458,  903, 2551, 2551,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      905, 2533,  905, 2533, 2551,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  907,
      908,  907, 2551, 1463,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906, 1094, 2543,
     1094, 2543, 1464, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
      910, 1463,  910, 2551, 2551,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  912,

     1464,  912, 2551, 2551,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  914, 2544,
      914, 2544, 2551,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  919,  919,  919,
      919,  919,  919,  919,  924,  924,  924,  924,  924,  924,
      924,  925,  925,  925,  925,  925,  925,  925,  928,  928,
      928,  928,  928,  928,  928,  929,  929,  929,  929,  929,
      929,  929,  930,  930,  930,  930,  930,  930,  930,  938,
     2551,  938, 1466,  938,  938, 2551, 2551,  938,  938,  938,
      938,  938,  938,  938,  939, 2540,  939, 2540,  939,  939,

     2551, 2551,  939,  939,  939,  939,  939,  939,  939,  941,
     1466,  941, 2551,  941,  941, 2551, 2551,  941,  941,  941,
      941,  941,  941,  941,  942,  942,  942,  942,  942,  942,
      942,  943,  943,  943,  943,  943,  943,  943, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1033, 1033, 1033, 1033, 1033, 1033,

     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,

     1047, 1047, 1047, 1047, 1047, 1047, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,

     1061, 1061, 1061, 1061, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1088, 1173, 1088, 2551, 2551, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1090, 1174, 1090, 2551, 2551, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1092, 1175, 1092, 2551, 1467, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1094, 1176, 1094, 2551, 2551, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1188, 1467, 1256, 1189, 1256, 2551, 2551, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1258, 2551, 1258, 1190,
     2551, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1285, 1260,
     1188, 1260, 2551, 1189, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1286, 1289, 1262, 1289, 1262, 2551, 1190, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 2541, 1285, 2541, 2551, 2551,
     1290, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1256, 1286,
     1256, 2551, 2551, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1258, 1291, 1258,
     2551, 2551, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1260, 2542, 1260, 2542,
     2551, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1262, 1430, 1262, 1376, 1431,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1348, 1381, 1377,

     1412, 1378, 1379, 1380, 1349, 1382, 1468, 1435, 1469, 1448,
     1413, 1436, 1437, 1438, 1430, 1443, 1376, 1431, 1449, 1444,
     1445, 1446, 1472, 1473, 1474, 1348, 1381, 1377, 1412, 1378,
     1379, 1380, 1349, 1382, 1468, 1435, 1469, 1448, 1413, 1436,
     1437, 1438, 1459, 1443, 1459, 1470, 1449, 1444, 1445, 1446,
     1472, 1473, 1474, 1475, 1476, 1460, 1477, 1486, 1471, 1487,
     1461, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
     1498, 1499, 1500, 1470, 1502, 1503, 1504, 1505, 1507, 1508,
     2551, 1475, 1476, 1512, 1477, 1486, 1471, 1487, 1462, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1498, 1499,

     1500, 1513, 1502, 1503, 1504, 1505, 1507, 1508, 1509, 1514,
     1509, 1512, 1515, 1517, 1518, 1526, 1527, 1530, 1528, 1531,
     1532, 1541, 1543, 1544, 1553, 1554, 1510, 2551, 1529, 1513,
     1555, 2543, 1556, 2543, 1566, 1570, 2551, 1514, 1571, 1572,
     1515, 1517, 1518, 1526, 1527, 1530, 1528, 1531, 1532, 1541,
     1543, 1544, 1553, 1554, 1511, 1519, 1529, 1573, 1555, 1520,
     1556, 1521, 1566, 1570, 1522, 1523, 1571, 1572, 1574, 1575,
     1577, 1578, 1524, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
     1590, 1591, 1594, 1519, 1603, 1573, 1606, 1520, 1607, 1521,
     1608, 1609, 1522, 1523, 1610, 1611, 1574, 1575, 1577, 1578,

     1524, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1590, 1591,
     1594, 1612, 1603, 1613, 1606, 1615, 1607, 1616, 1608, 1609,
     1618, 1619, 1610, 1611, 1620, 1621, 1622, 1623, 1625, 1626,
     1630, 1626, 1631, 1632, 1624, 1633, 1634, 1637, 2551, 1612,
     1640, 1613, 1627, 1615, 1641, 1616, 1642, 1628, 1618, 1619,
     1635, 1653, 1620, 1621, 1622, 1623, 1625, 1654, 1630, 1655,
     1631, 1632, 1624, 1633, 1634, 1637, 1636, 1662, 1640, 1667,
     1668, 1673, 1641, 1675, 1642, 1629, 1676, 1677, 1635, 1653,
     1678, 1679, 1680, 1683, 1680, 1654, 1684, 1655, 1685, 1686,
     1687, 1688, 1689, 1690, 1636, 1662, 1691, 1667, 1668, 1673,

     1681, 1675, 1692, 1693, 1676, 1677, 1696, 1697, 1678, 1679,
     1698, 1683, 1699, 1704, 1684, 1706, 1685, 1686, 1687, 1688,
     1689, 1690, 1707, 1708, 1691, 1709, 1712, 1713, 1682, 1710,
     1692, 1693, 1714, 1715, 1696, 1697, 1716, 1711, 1698, 1717,
     1699, 1704, 1718, 1706, 1719, 1720, 1721, 1722, 1723, 1724,
     1707, 1708, 1725, 1709, 1712, 1713, 1729, 1710, 1730, 1731,
     1714, 1715, 1732, 1733, 1716, 1711, 1734, 1717, 1735, 1736,
     1718, 1737, 1719, 1720, 1721, 1722, 1723, 1724, 1739, 1740,
     1725, 1741, 1745, 1746, 1729, 1747, 1730, 1731, 1753, 1754,
     1732, 1733, 1755, 1756, 1734, 1759, 1735, 1736, 1760, 1737,

     1762, 1763, 1764, 1765, 1767, 1768, 1739, 1740, 1771, 1741,
     1745, 1746, 1772, 1747, 1773, 1777, 1753, 1754, 1778, 1780,
     1755, 1756, 1781, 1759, 1782, 1784, 1760, 1785, 1762, 1763,
     1764, 1765, 1767, 1768, 1786, 1787, 1771, 1788, 1789, 1790,
     1772, 1791, 1773, 1777, 1792, 1793, 1778, 1780, 1794, 1797,
     1781, 1798, 1782, 1784, 1799, 1785, 1800, 1802, 1803, 1804,
     1805, 1806, 1786, 1787, 1807, 1788, 1789, 1790, 1808, 1791,
     1809, 1810, 1792, 1793, 1811, 1812, 1794, 1797, 1813, 1798,
     1814, 1815, 1799, 1816, 1800, 1802, 1803, 1804, 1805, 1806,
     1818, 1819, 1807, 1820, 1821, 1822, 1808, 1823, 1809, 1810,

     1824, 1825, 1811, 1812, 1826, 1828, 1813, 1829, 1814, 1815,
     1830, 1816, 1827, 1831, 1833, 1834, 1832, 1835, 1818, 1819,
     1836, 1820, 1821, 1822, 1837, 1823, 1841, 1838, 1824, 1825,
     1845, 1846, 1826, 1828, 1847, 1829, 1850, 1856, 1830, 1861,
     1827, 1831, 1833, 1834, 1832, 1835, 1853, 1862, 1836, 1865,
     1866, 1854, 1837, 1871, 1841, 1838, 1873, 1874, 1845, 1846,
     1855, 1875, 1847, 1876, 1850, 1856, 1872, 1861, 1877, 1878,
     1879, 1880, 1881, 1882, 1853, 1862, 1883, 1865, 1866, 1854,
     1884, 1871, 1887, 1888, 1873, 1874, 1889, 1890, 1855, 1875,
     1891, 1876, 1892, 1893, 1872, 1896, 1877, 1878, 1879, 1880,

     1881, 1882, 1897, 1900, 1883, 1901, 1904, 1905, 1884, 1906,
     1887, 1888, 1907, 1910, 1889, 1890, 1911, 1912, 1891, 1913,
     1892, 1893, 1914, 1896, 1915, 1916, 1917, 1918, 1920, 1922,
     1897, 1900, 1923, 1901, 1904, 1905, 1924, 1906, 1926, 1928,
     1907, 1910, 1929, 1930, 1911, 1912, 1931, 1913, 1936, 1937,
     1914, 1939, 1915, 1916, 1917, 1918, 1920, 1922, 1942, 1944,
     1923, 1945, 1946, 1947, 1924, 1948, 1926, 1928, 1949, 1950,
     1929, 1930, 1951, 1952, 1931, 1953, 1936, 1937, 1955, 1939,
     1956, 1957, 1958, 1961, 1962, 1965, 1942, 1944, 1966, 1945,
     1946, 1947, 1970, 1948, 1973, 1974, 1949, 1950, 1986, 1987,

     1951, 1952, 1988, 1953, 1989, 2551, 1955, 1990, 1956, 1957,
     1958, 1961, 1962, 1965, 1991, 1976, 1966, 1976, 1992, 1993,
     1970, 1994, 1973, 1974, 1997, 1998, 1986, 1987, 1999, 2000,
     1988, 2002, 1989, 1977, 2003, 1990, 2004, 2006, 2007, 2008,
     2010, 2011, 1991, 2012, 2013, 2014, 1992, 1993, 2551, 1994,
     2020, 2021, 1997, 1998, 2026, 2027, 1999, 2000, 2015, 2002,
     2015, 1978, 2003, 2028, 2004, 2006, 2007, 2008, 2010, 2011,
     2029, 2012, 2013, 2014, 2030, 2031, 2016, 2032, 2020, 2021,
     2033, 2035, 2026, 2027, 2036, 2038, 2039, 2040, 2041, 2043,
     2047, 2028, 2048, 2050, 2051, 2052, 2054, 2544, 2029, 2544,

     2057, 2058, 2030, 2031, 2017, 2032, 2059, 2062, 2033, 2035,
     2063, 2064, 2036, 2038, 2039, 2040, 2041, 2043, 2047, 2065,
     2048, 2050, 2051, 2052, 2054, 1995, 2066, 1995, 2057, 2058,
     2060, 2067, 2060, 2070, 2059, 2062, 2071, 2072, 2063, 2064,
     2068, 2073, 2068, 1996, 2074, 2080, 2081, 2065, 2061, 2015,
     2018, 2015, 2018, 2084, 2066, 2076, 2077, 2078, 2069, 2067,
     2022, 2070, 2022, 2087, 2071, 2072, 2088, 2016, 2019, 2073,
     2551, 2089, 2074, 2080, 2081, 2024, 2090, 2024, 2023, 2091,
     2085, 2084, 2085, 2076, 2077, 2078, 2092, 2093, 2095, 2093,
     2095, 2087, 2102, 2025, 2088, 2098, 2103, 2098, 2086, 2089,

     2104, 2105, 2106, 2108, 2090, 2094, 2096, 2091, 2099, 2100,
     2109, 2110, 2112, 2101, 2092, 2114, 2119, 2115, 2121, 2115,
     2102, 2122, 2123, 2117, 2103, 2117, 2124, 2551, 2104, 2105,
     2106, 2108, 2129, 2130, 2097, 2116, 2131, 2132, 2109, 2110,
     2112, 2118, 2133, 2114, 2119, 2060, 2121, 2060, 2551, 2122,
     2123, 2125, 2142, 2125, 2124, 2068, 2134, 2068, 2134, 2551,
     2129, 2130, 2151, 2061, 2131, 2132, 2136, 2152, 2136, 2126,
     2133, 2153, 2154, 2069, 2135, 2138, 2140, 2138, 2140, 2143,
     2142, 2143, 2551, 2085, 2137, 2085, 2146, 2148, 2146, 2148,
     2151, 2551, 2165, 2139, 2141, 2152, 2093, 2144, 2093, 2153,

     2154, 2086, 2166, 2167, 2147, 2149, 2095, 2157, 2095, 2158,
     2098, 2160, 2098, 2160, 2094, 2168, 2162, 2169, 2162, 2159,
     2165, 2170, 2171, 2172, 2096, 2173, 2174, 2175, 2101, 2161,
     2166, 2167, 2176, 2150, 2163, 2157, 2177, 2158, 2115, 2117,
     2115, 2117, 2180, 2168, 2181, 2169, 2183, 2159, 2184, 2170,
     2171, 2172, 2186, 2173, 2174, 2175, 2116, 2118, 2187, 2125,
     2176, 2125, 2188, 2189, 2177, 2190, 2191, 2134, 2551, 2134,
     2180, 2136, 2181, 2136, 2183, 2551, 2184, 2126, 2551, 2138,
     2186, 2138, 2140, 2551, 2140, 2135, 2187, 2206, 2210, 2137,
     2188, 2189, 2551, 2190, 2191, 2211, 2196, 2139, 2196, 2143,

     2141, 2143, 2146, 2148, 2146, 2148, 2201, 2202, 2203, 2204,
     2207, 2204, 2207, 2212, 2197, 2206, 2210, 2144, 2215, 2551,
     2147, 2149, 2160, 2211, 2160, 2220, 2222, 2205, 2208, 2162,
     2216, 2162, 2216, 2223, 2201, 2202, 2203, 2218, 2224, 2218,
     2161, 2212, 2225, 2226, 2227, 2228, 2215, 2163, 2217, 2229,
     2230, 2232, 2230, 2220, 2222, 2219, 2233, 2234, 2235, 2236,
     2237, 2223, 2237, 2239, 2240, 2242, 2224, 2549, 2231, 2549,
     2225, 2226, 2227, 2228, 2251, 2551, 2551, 2229, 2238, 2232,
     2196, 2244, 2196, 2244, 2233, 2234, 2235, 2236, 2246, 2255,
     2246, 2239, 2240, 2242, 2248, 2204, 2248, 2204, 2197, 2245,

     2256, 2207, 2251, 2207, 2253, 2257, 2247, 2254, 2258, 2216,
     2261, 2216, 2249, 2205, 2262, 2265, 2218, 2255, 2218, 2208,
     2266, 2269, 2263, 2270, 2264, 2271, 2272, 2217, 2256, 2230,
     2276, 2230, 2253, 2257, 2219, 2254, 2258, 2274, 2261, 2274,
     2277, 2278, 2262, 2265, 2279, 2281, 2282, 2231, 2266, 2269,
     2263, 2270, 2264, 2271, 2272, 2275, 2286, 2237, 2276, 2237,
     2290, 2244, 2246, 2244, 2246, 2283, 2291, 2292, 2277, 2278,
     2284, 2551, 2279, 2281, 2282, 2238, 2293, 2294, 2285, 2245,
     2247, 2248, 2295, 2248, 2286, 2296, 2297, 2298, 2290, 2299,
     2300, 2301, 2302, 2283, 2291, 2292, 2305, 2303, 2284, 2249,

     2306, 2307, 2308, 2309, 2293, 2294, 2285, 2304, 2311, 2274,
     2295, 2274, 2314, 2296, 2297, 2298, 2315, 2299, 2300, 2301,
     2302, 2312, 2316, 2312, 2305, 2303, 2318, 2275, 2306, 2307,
     2308, 2309, 2319, 2320, 2324, 2304, 2311, 2325, 2326, 2313,
     2314, 2321, 2329, 2321, 2315, 2327, 2330, 2327, 2335, 2331,
     2316, 2331, 2336, 2333, 2318, 2333, 2337, 2340, 2341, 2322,
     2319, 2320, 2324, 2328, 2342, 2325, 2326, 2332, 2343, 2346,
     2329, 2334, 2349, 2338, 2330, 2338, 2335, 2344, 2350, 2344,
     2336, 2347, 2354, 2347, 2337, 2340, 2341, 2323, 2358, 2359,
     2360, 2339, 2342, 2361, 2366, 2345, 2343, 2346, 2367, 2348,

     2349, 2312, 2352, 2312, 2352, 2355, 2350, 2355, 2368, 2321,
     2354, 2321, 2363, 2364, 2365, 2372, 2358, 2359, 2360, 2313,
     2353, 2361, 2366, 2356, 2375, 2551, 2367, 2322, 2327, 2370,
     2327, 2370, 2331, 2376, 2331, 2333, 2368, 2333, 2377, 2381,
     2363, 2364, 2365, 2372, 2551, 2551, 2328, 2371, 2382, 2383,
     2332, 2357, 2375, 2334, 2338, 2379, 2338, 2379, 2551, 2551,
     2344, 2376, 2344, 2385, 2390, 2385, 2377, 2381, 2347, 2388,
     2347, 2388, 2339, 2380, 2392, 2397, 2382, 2383, 2345, 2398,
     2352, 2386, 2352, 2355, 2399, 2355, 2348, 2389, 2394, 2395,
     2396, 2400, 2390, 2401, 2551, 2401, 2407, 2403, 2353, 2403,

     2408, 2356, 2392, 2397, 2405, 2409, 2405, 2398, 2370, 2414,
     2370, 2402, 2399, 2417, 2418, 2404, 2394, 2395, 2396, 2400,
     2419, 2411, 2406, 2411, 2407, 2379, 2371, 2379, 2408, 2385,
     2424, 2385, 2388, 2409, 2388, 2431, 2422, 2414, 2422, 2412,
     2432, 2417, 2418, 2380, 2425, 2433, 2425, 2386, 2419, 2427,
     2389, 2427, 2434, 2429, 2423, 2429, 2438, 2401, 2424, 2401,
     2551, 2439, 2426, 2431, 2403, 2440, 2403, 2428, 2432, 2442,
     2405, 2430, 2405, 2433, 2411, 2402, 2411, 2443, 2444, 2447,
     2434, 2422, 2404, 2422, 2438, 2449, 2453, 2455, 2406, 2439,
     2456, 2551, 2412, 2440, 2425, 2459, 2425, 2442, 2427, 2423,

     2427, 2429, 2457, 2429, 2457, 2443, 2444, 2447, 2460, 2462,
     2460, 2465, 2426, 2449, 2453, 2455, 2428, 2466, 2456, 2430,
     2458, 2467, 2463, 2459, 2463, 2468, 2461, 2469, 2470, 2471,
     2472, 2473, 2457, 2475, 2457, 2477, 2460, 2462, 2460, 2465,
     2464, 2479, 2463, 2480, 2463, 2466, 2481, 2484, 2485, 2467,
     2458, 2486, 2551, 2468, 2461, 2469, 2470, 2471, 2472, 2473,
     2464, 2475, 2482, 2477, 2482, 2487, 2488, 2489, 2490, 2479,
     2491, 2480, 2492, 2493, 2481, 2484, 2485, 2551, 2503, 2486,
     2483, 2482, 2504, 2482, 2495, 2505, 2495, 2500, 2506, 2500,
     2497, 2507, 2497, 2487, 2488, 2489, 2490, 2508, 2491, 2483,

     2492, 2493, 2496, 2498, 2521, 2501, 2503, 2522, 2499, 2495,
     2504, 2495, 2497, 2505, 2497, 2510, 2506, 2510, 2500, 2507,
     2500, 2514, 2515, 2516, 2517, 2508, 2517, 2496, 2523, 2519,
     2499, 2519, 2521, 2511, 2524, 2522, 2501, 2510, 2550, 2510,
     2550, 2526, 2518, 2526, 2538, 2539, 2528, 2520, 2528, 2514,
     2515, 2516, 2530, 2551, 2530, 2511, 2523, 2551, 2517, 2527,
     2517, 2519, 2524, 2519, 2529, 2534, 2536, 2534, 2536, 2526,
     2531, 2526, 2538, 2539, 2551, 2528, 2518, 2528, 2530, 2520,
     2530, 2551, 2551, 2535, 2537, 2551, 2534, 2527, 2534, 2536,
     2545, 2536, 2545, 2529, 2551, 2547, 2531, 2547, 2545, 2547,

     2545, 2547, 2551, 2549, 2535, 2549, 2551, 2537, 2546, 2550,
     2551, 2550, 2551, 2548, 2551, 2551, 2546, 2548,  322,  322,
      322,  322,  322,  401,  401,  401,  401,  401,  402,  402,
      402,  402,  402,  403,  403,  403,  403,  403,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  406,  406,
      406,  406,  406,  407,  407,  407,  407,  407,  408,  408,
      408,  408,  408,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  478,  478,  478,  478,  478,  500,  500,
      500,  500,  500,  501,  501,  501,  501,  501,  502,  502,
      502,  502,  502,  503,  503,  503,  503,  503,  504,  504,

      504,  504,  504,  514,  514,  514,  514,  514,  515,  515,
      515,  515,  515,  518,  518,  518,  518,  518,  519,  519,
      519,  519,  519,  521,  521,  521,  521,  521,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  524,  524,
      524,  524,  524,  525,  525,  525,  525,  525,  526,  526,
      526,  526,  526,  527,  527,  527,  527,  527,  566,  566,
      566,  566,  566,  567,  567,  567,  567,  567,  568,  568,
      568,  568,  568,  569,  569,  569,  569,  569,  571,  571,
      571,  571,  571,  572,  572,  572,  572,  572,  573,  573,
      573,  573,  573,  574,  574,  574,  574,  574,  577,  577,

      577,  577,  577,  578,  578,  578,  578,  578,  582,  582,
      582,  582,  582,  583,  583,  583,  583,  583,  587,  587,
      587,  587,  587,  593,  593,  593,  593,  593,  727,  727,
      728,  728,  729,  729,  730,  730,  731,  731,  732,  732,
      733,  733,  734,  734,  740,  740,  820,  820,  843,  843,
      844,  844,  845,  845,  846,  846,  847,  847,  859,  859,
      926,  926,  927,  927,  931,  931,  932,  932, 2551,  932,
      932,  935, 2551, 2551,  935,  935,  940,  940,  727,  727,
      728,  728,  729,  729,  730,  730,  731,  731,  732,  732,
      733,  733,  734,  734,  740,  740,  820,  820,  843,  843,

      844,  844,  845,  845,  846,  846,  847,  847,  859,  859,
      926,  926,  927,  927,  931,  931,  932,  932, 2551,  932,
      932,  935, 2551, 2551,  935,  935,  940,  940,  321, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551
    } ;

static yyconst flex_int16_t yy_chk[12804] =
    {   0,
        0,    1,    1,    1, 2669,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3, 2668,    3,  303,  303,  303,  345,  303,
      345,    3,    3,    3,    3,    3,    3,    3,    4,    4,

        4, 2667,    4,  304,  304,  304,  345,  304, 2666,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5, 2665,
        5,  305,  305,  305,  619,  305,  619,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6, 2664,    6,  306,
      306,  306,  619,  306, 2663,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7, 2662,    7,  307,  307,  307,
      620,  307,  620,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8, 2661,    8,  308,  308,  308,  620,  308,
     2660,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,  323,    9,  323,  584,  323,  584, 2659,  584,    9,

        9,    9,    9,    9,    9,    9,   10,   10,   10,  588,
       10,  588,  597,  588,  597, 2658,  597,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,  621,   11,  621,
      624,  625,  624,  625, 2657,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  626,   12,  626,  624,  625,
      627, 2656,  627,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,  626,   13,  628, 2655,  628,  627, 2654,
     2653,   13,   13,   13,   13,   13,   13,   13,   14,   14,
       14, 2651,   14,  628,  657,  658,  657,  658, 2643,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  933,

       15,  933,  657,  933,  951, 2628,  951,   15,   15,   15,
       15,   15,   15,   15,   16,   16,   16,  936,   16,  936,
     2627,  936,  951, 2626, 2625,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,  964,   17,  964,   17, 2624,
       17,   17, 2623,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,  964,   18,  965,   18,  965,   18,   18,
     2622,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,  966,   19,  966,   19, 2621,   19,   19, 2620,   19,
       19,   19,   19,   19,   19,   19,   20,   20,   20,  969,
       20,  969,   20, 2619,   20,   20, 2618,   20,   20,   20,

       20,   20,   20,   20,   21,   21,   21,  969,   21,  970,
       21,  970,   21,   21, 2617,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22,  971,   22,  971,   22, 2616,
       22,   22, 2615,   22,   22,   22,   22,   22,   22,   22,
       23,   23,   23,  971,   23,  972,   23,  972,   23,   23,
     2614,   23,   23,   23,   23,   23,   23,   23,   24,   24,
       24,  973,   24,  973,   24, 2613,   24,   24, 2612,   24,
       24,   24,   24,   24,   24,   24,   25,   25,   25,  973,
       25,  974,   25,  974,   25,   25, 2610,   25,   25,   25,
       25,   25,   25,   25,   26,   26,   26,  975,   26,  975,

       26, 2602,   26,   26, 2487,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27,  975,   27,  976,   27,  976,
       27,   27, 2432,   27,   27,   27,   27,   27,   27,   27,
       28,   28,   28,  977,   28,  977,   28, 2418,   28,   28,
     2417,   28,   28,   28,   28,   28,   28,   28,   29,   29,
       29,  977,   29,  978,   29,  978,   29,   29, 2377,   29,
       29,   29,   29,   29,   29,   29,   30,   30,   30,  981,
       30,  981,   30, 2375,   30,   30, 2282,   30,   30,   30,
       30,   30,   30,   30,   31,   31,   31,  981,   31,  982,
       31,  982,   31,   31, 2225,   31,   31,   31,   31,   31,

       31,   31,   32,   32,   32, 1022,   32, 1022,   32, 2224,
       32,   32, 2190,   32,   32,   32,   32,   32,   32,   32,
       33,   33,   33, 1098,   33, 1098,   33, 2169,   33,   33,
     2154,   33,   33,   33,   33,   33,   33,   33,   34,   34,
       34, 1098,   34, 1099,   34, 1099,   34,   34, 2122,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35, 2067,
       35, 1099, 1104, 1105, 1104, 1105, 2054,   35,   35,   35,
       35,   35,   35,   35,   36,   36,   36, 1118,   36, 1118,
     1104, 1121, 1122, 1121, 1122,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37, 1123,   37, 1123, 1124, 1125,

     1124, 1125, 2052,   37,   37,   37,   37,   37,   37,   37,
       38,   38,   38, 1127,   38, 1127, 1128, 1157, 1128, 1157,
     2048,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39, 1127,   39, 1994, 1158, 1157, 1158, 1992, 1988,   39,
       39,   39,   39,   39,   39,   39,   40,   40,   40, 1162,
       40, 1162, 1158, 1179, 1180, 1179, 1180,   40,   40,   40,
       40,   40,   40,   40,   41,   41,   41, 1162,   41, 1928,
     1181, 1179, 1181, 1897, 1887,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1182,   42, 1182, 1181, 1187,
     1206, 1187, 1206,   42,   42,   42,   42,   42,   42,   42,

       43,   43,   43, 1207,   43, 1207, 1880, 1208, 1206, 1208,
     1794,   43,   43,   43,   43,   43,   43,   43,   44,   44,
       44, 1213,   44, 1213, 1238, 1208, 1238, 1792, 1721,   44,
       44,   44,   44,   44,   44,   44,   45,   45,   45, 1213,
       45, 1215,   45, 1215,   45, 1720, 1708,   45,   45,   45,
       45,   45,   45,   45,   46,   46,   46, 1699,   46, 1215,
       46, 1224,   46, 1224, 1690,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47, 1226,   47, 1226, 1227, 1224,
     1227, 1689, 1686,   47,   47,   47,   47,   47,   47,   47,
       48,   48,   48, 1226,   48, 1237, 1227, 1237, 1240, 1677,

     1240,   48,   48,   48,   48,   48,   48,   48,   49,   49,
       49, 1676,   49, 1237,   49, 1505,   49,   49, 1489,   49,
       49,   49,   49,   49,   49,   49,   50,   50,   50, 1239,
       50, 1239,   50, 1488,   50,   50, 1483,   50,   50,   50,
       50,   50,   50,   50,   51,   51,   51, 1239,   51, 1244,
       51, 1244,   51,   51, 1468,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1452,   52, 1244,   52, 1440,
       52,   52, 1428,   52,   52,   52,   52,   52,   52,   52,
       53,   53,   53, 1245,   53, 1245,   53, 1424,   53,   53,
     1410,   53,   53,   53,   53,   53,   53,   53,   54,   54,

       54, 1266,   54, 1266,   54, 1406,   54,   54, 1388,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55, 1267,
       55, 1267,   55, 1370,   55,   55, 1361,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,  328,   56, 1290,
       56, 1290,   56,   56,  330,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1350,   57,   57,   57,
       57,   58,   58,   58,   58,  328,   58,   58,   58,   58,
     1343,   57,  330,  331,  333,  334,   59,   59,   59,   59,
       58,   59,   59,   59,   59,   60,   60,   60,   60,  333,
       60,   60,   60,   60, 1276,   59, 1276, 1295,   57, 1295,

      335,  331,  333,  334,   60, 1335, 1275,   58,   61,   61,
       61,   61, 1276,   61,   61,   61,   61,  333,   62,   62,
       62,   62,   59,   62,   62,   62,   62,   61,  335,  336,
      340,   60,  342,   63,   63,   63,   63,   62,   63,   63,
       63,   63,   64,   64,   64,   64,  346,   64,   64,   64,
       64, 1279,   63, 1279,   61, 1255, 1216,  336,  340,  599,
      342,   64, 1214, 1204,   62,   65,   65,   65,   65, 1279,
       65,   65,   65,   65,  346,   66,   66,   66,   66,   63,
       66,   66,   66,   66,   65,  601,  341,  599,   64,  602,
       67,   67,   67,   67,   66,   67,   67,   67,   67,   68,

       68,   68,   68,  341,   68,   68,   68,   68, 1289,   67,
     1289,   65, 1203,  601,  341,  603,  604,  602,   68, 1184,
     1177,   66,   69,   69,   69,   69, 1289,   69,   69,   69,
       69,  341,   70,   70,   70,   70,   67,   70,   70,   70,
       70,   69, 1166,  603,  604,   68,  605,   71,   71,   71,
       71,   70,   71,   71,   71,   71,   72,   72,   72,   72,
      606,   72,   72,   72,   72, 1297,   71, 1297,   69,   73,
       73,   73,  607,   73,  605,   72,  608, 1303,   70, 1303,
       73,   73,   73,   73,   73,   73,   73,  609,  606,  610,
      611,  612,  614,   71,   74,   74,   74, 1306,   74, 1306,

      607, 1316,   72, 1316,  608,   74,   74,   74,   74,   74,
       74,   74,   75,   75,   75,  609,   75,  610,  611,  612,
      614, 1163, 1154,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76, 1294,   76, 1294, 1296, 1302, 1296, 1302,
     1151,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77, 1294,   77, 1133, 1296, 1302, 1305, 1020, 1305,   77,
       77,   77,   77,   77,   77,   77,   78,   78,   78, 1315,
       78, 1315, 1011, 1318, 1305, 1318,  998,   78,   78,   78,
       78,   78,   78,   78,   79,   79,   79, 1315,   79,  987,
     1319, 1318, 1319,  986,  979,   79,   79,   79,   79,   79,

       79,   79,   80,   80,   80,  615,   80, 1321, 1332, 1321,
     1332,  961,  960,   80,   80,   80,   80,   80,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  952,  615,  616,   83,   83,   83,   83,   81,
       83,   83,   83,   83,   84,   84,   84,   84,  950,   84,
       84,   84,   84,  613,   83,  347,  347,  347,  347,  347,
      347,  347,  616,   84,  617,  618,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  600,
      622,   83,  623,   87,   87,   87,   82,   87,  321,  629,
       84,  630,  617,  618,   87,   87,   87,   87,   87,   87,

       87,  348,  348,  348,  348,  348,  348,  348,  622,  632,
      623,  633,  310,   82,   85,   85,   85,  629,   85,  630,
       85,    0,   85,   85,    0,   85,   85,   85,   85,   85,
       85,   85,   86,   86,   86,    0,   86,  632,   86,  633,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       88,   88,   88, 1320,   88, 1320, 1331, 1333, 1331, 1333,
        0,   88,   88,   88,   88,   88,   88,   88,   89,   89,
       89, 1320,   89, 1337, 1331, 1337, 1359,    0, 1359,   89,
       89,   89,   89,   89,   89,   89,   90,   90,   90, 1360,
       90, 1360,    0, 1363, 1359, 1363,    0,   90,   90,   90,

       90,   90,   90,   90,   91,   91,   91, 1364,   91, 1364,
     1374, 1363, 1374,    0,    0,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,    0,   92, 1365, 1365, 1365,
     1365,    0,    0,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93, 1383,   93, 1383, 1384, 1385, 1384, 1385,
        0,   93,   93,   93,   93,   93,   93,   93,   94,   94,
       94, 1383,   94, 1386, 1387, 1386, 1387,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,    0,
       95, 1386, 1387, 1389, 1390, 1389, 1390,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96, 1392,   96, 1392,

     1401, 1389, 1401,    0,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97, 1403,   97, 1403, 1404, 1415,
     1404, 1415,    0,   97,   97,   97,   97,   97,   97,   97,
       98,   98,   98, 1416,   98, 1416, 1435, 1415, 1435,    0,
        0,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99, 1436,   99, 1436, 1435, 1437, 1438, 1437, 1438,   99,
       99,   99,   99,   99,   99,   99,  100,  100,  100, 1436,
      100,    0,    0, 1437, 1438,    0,    0,  100,  100,  100,
      100,  100,  100,  100,  101,  101,  101, 1443,  101, 1443,
     1444, 1445, 1444, 1445,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102, 1443,  102,    0, 1444, 1445,
     1446,    0, 1446,  102,  102,  102,  102,  102,  102,  102,
      103,  103,  103, 1450,  103, 1450,    0, 1453, 1446, 1453,
        0,  103,  103,  103,  103,  103,  103,  103,  104,  104,
      104, 1454,  104, 1454, 1461, 1455, 1461, 1455,    0,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105, 1454,
      105,    0,  105, 1455,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  106, 1456,  106, 1456,
      106,    0,  106,  106,    0,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107, 1456,  107, 1457,  107, 1457,

      107,  107,    0,  107,  107,  107,  107,  107,  107,  107,
      108,  108,  108,    0,  108, 1457,  108,    0,  108,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109, 1459,  109, 1459,  109,    0,  109,  109,    0,  109,
      109,  109,  109,  109,  109,  109,  110,  110,  110, 1459,
      110, 1460,  110, 1460,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  111,  111,  111,    0,  111, 1460,
      111,    0,  111,  111,    0,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1478,  112, 1478,  112,    0,
      112,  112,    0,  112,  112,  112,  112,  112,  112,  112,

      113,  113,  113, 1479,  113, 1479, 1480, 1481, 1480, 1481,
        0,  113,  113,  113,  113,  113,  113,  113,  114,  114,
      114, 1479,  114,    0, 1482, 1481, 1482,    0,    0,  114,
      114,  114,  114,  114,  114,  114,  115,  115,  115, 1484,
      115, 1484, 1485, 1491, 1485, 1491,    0,  115,  115,  115,
      115,  115,  115,  115,  116,  116,  116, 1484,  116,    0,
     1506, 1491, 1506,    0,    0,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117, 1492,  117, 1492,  117,    0,
      117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  118, 1492,  118, 1493,  118, 1493,  118,  118,

        0,  118,  118,  118,  118,  118,  118,  118,  119,  119,
      119,    0,  119, 1493,  119,    0,  119,  119,    0,  119,
      119,  119,  119,  119,  119,  119,  120,  120,  120, 1494,
      120, 1494,  120,    0,  120,  120,    0,  120,  120,  120,
      120,  120,  120,  120,  121,  121,  121, 1494,  121, 1496,
      121, 1496,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,    0,  122, 1496,  122,    0,
      122,  122,    0,  122,  122,  122,  122,  122,  122,  122,
      123,  123,  123, 1509,  123, 1509,  123,    0,  123,  123,
        0,  123,  123,  123,  123,  123,  123,  123,  124,  124,

      124, 1509,  124, 1510,  124, 1510,  124,  124,    0,  124,
      124,  124,  124,  124,  124,  124,  125,  125,  125, 1526,
      125, 1526,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  126,  126,  126, 1526,  126, 1530,
      126, 1530,  126,  126,    0,  126,  126,  126,  126,  126,
      126,  126,  127,  127,  127,    0,  127, 1530,  127,    0,
      127,  127,    0,  127,  127,  127,  127,  127,  127,  127,
      128,  128,  128, 1531,  128, 1531,  128,    0,  128,  128,
        0,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129, 1531,  129, 1532,  129, 1532,  129,  129,    0,  129,

      129,  129,  129,  129,  129,  129,  130,  130,  130,    0,
      130, 1532,  130,    0,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  131,  131,  131, 1533,  131, 1533,
      131,    0,  131,  131,    0,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132, 1533,  132, 1534,  132, 1534,
      132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
      133,  133,  133, 1535,  133, 1535,  133,    0,  133,  133,
        0,  133,  133,  133,  133,  133,  133,  133,  134,  134,
      134, 1535,  134, 1536,  134, 1536,  134,  134,    0,  134,
      134,  134,  134,  134,  134,  134,  135,  135,  135, 1537,

      135, 1537,  135,    0,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136, 1537,  136, 1538,
      136, 1538,  136,  136,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137, 1539,  137, 1539, 1540, 1544,
     1540, 1544,    0,  137,  137,  137,  137,  137,  137,  137,
      138,  138,  138, 1539,  138,    0, 1545, 1544, 1545,    0,
        0,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139, 1546,  139, 1546, 1545, 1547, 1548, 1547, 1548,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140, 1549,
      140, 1549, 1550, 1547, 1550,    0,    0,  140,  140,  140,

      140,  140,  140,  140,  141,  141,  141, 1549,  141, 1551,
     1552, 1551, 1552,    0,    0,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142,    0,  142, 1551, 1554, 1555,
     1554, 1555,    0,  142,  142,  142,  142,  142,  142,  142,
      143,  143,  143, 1558,  143, 1558, 1554, 1555, 1559,    0,
     1559,  143,  143,  143,  143,  143,  143,  143,  144,  144,
      144, 1558,  144, 1560, 1561, 1560, 1561,    0,    0,  144,
      144,  144,  144,  144,  144,  144,  145,  145,  145,    0,
      145, 1560,  145,    0,  145,  145,    0,  145,  145,  145,
      145,  145,  145,  145,  146,  146,  146,  634,  146, 1563,

      146, 1563,  146,  146,    0,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  147,  147,    0,  147,  147,  147,
      147,  148,  148,  148,  148,  634,  148,  148,  148,  148,
        0,  147,  151,  151,  151, 1565,  151, 1565,  635, 1562,
      148, 1562,    0,  151,  151,  151,  151,  151,  151,  151,
      636,  311, 1568,  311, 1568,  311,  311, 1562,  147,  311,
      311,  311,  311,  311,  311,  311,  635,  148,  149,  149,
      149, 1564,  149, 1564,  149,    0,  149,  149,  636,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1564,
      150, 1567,  150, 1567,  150,  150,    0,  150,  150,  150,

      150,  150,  150,  150,  152,  152,  152,    0,  152, 1567,
     1569, 1586, 1569, 1586,    0,  152,  152,  152,  152,  152,
      152,  152,  153,  153,  153, 1587,  153, 1587,  153, 1589,
      153, 1589,    0,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154, 1590,  154, 1590,  154, 1595,  154, 1595,
        0,  154,  154,  154,  154,  154,  154,  154,  155,  155,
      155, 1590,  155,    0,  155, 1595,  155,    0,    0,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156, 1596,
      156, 1596,  156, 1597,  156, 1597,    0,  156,  156,  156,
      156,  156,  156,  156,  157,  157,  157, 1598,  157, 1598,

      157, 1597,  157,    0,    0,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  158, 1599,  158, 1599,  158, 1600,
      158, 1600,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159, 1599,  159, 1601,  159, 1601,  159,    0,
        0,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160,    0,  160, 1601,  160, 1602,  160, 1602,    0,  160,
      160,  160,  160,  160,  160,  160,  161,  161,  161, 1604,
      161, 1604, 1605, 1617, 1605, 1617,    0,  161,  161,  161,
      161,  161,  161,  161,  162,  162,  162, 1604,  162, 1626,
     1627, 1626, 1627,    0,    0,  162,  162,  162,  162,  162,

      162,  162,  163,  163,  163,    0,  163, 1626, 1627, 1628,
     1638, 1628, 1638,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164, 1639,  164, 1639,    0, 1643, 1638, 1643,
        0,  164,  164,  164,  164,  164,  164,  164,  165,  165,
      165, 1644,  165, 1644, 1645, 1643, 1645,    0,    0,  165,
      165,  165,  165,  165,  165,  165,  166,  166,  166, 1646,
      166, 1646, 1645, 1647, 1648, 1647, 1648,  166,  166,  166,
      166,  166,  166,  166,  167,  167,  167, 1649,  167, 1649,
     1650, 1647, 1650,    0,    0,  167,  167,  167,  167,  167,
      167,  167,  168,  168,  168, 1651,  168, 1651, 1652, 1656,

     1652, 1656,    0,  168,  168,  168,  168,  168,  168,  168,
      169,  169,  169, 1657,  169, 1657, 1658, 1656, 1658,    0,
        0,  169,  169,  169,  169,  169,  169,  169,  170,  170,
      170, 1659,  170, 1659, 1660, 1661, 1660, 1661,    0,  170,
      170,  170,  170,  170,  170,  170,  171,  171,  171, 1662,
      171, 1662, 1663, 1664, 1663, 1664,    0,  171,  171,  171,
      171,  171,  171,  171,  172,  172,  172, 1662,  172, 1665,
     1663, 1665, 1666,    0, 1666,  172,  172,  172,  172,  172,
      172,  172,  173,  173,  173,    0,  173, 1665, 1669, 1670,
     1669, 1670,    0,  173,  173,  173,  173,  173,  173,  173,

      174,  174,  174, 1671,  174, 1671, 1672, 1674, 1672, 1674,
        0,  174,  174,  174,  174,  174,  174,  174,  175,  175,
      175, 1680,  175, 1680, 1681, 1694, 1681, 1694,    0,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176, 1680,
      176,    0, 1695, 1694, 1695,    0,    0,  176,  176,  176,
      176,  176,  176,  176,  177,  177,  177,    0,  177, 1696,
     1700, 1696, 1700,    0,    0,  177,  177,  177,  177,  177,
      177,  177,  178,  178,  178,  637,  178, 1696,    0, 1701,
      639, 1701,  640,  178,  178,  178,  178,  178,  178,  178,
      179,  179,  179,  179,  637,  179,  179,  179,  179,  180,

      180,  180,  180,  637,  180,  180,  180,  180,  639,  179,
      640,  642,  643,  644,  181,  181,  181,  181,  180,  181,
      181,  181,  181,  182,  182,  182,  182,  645,  182,  182,
      182,  182, 1702,  181, 1702, 1703,  179, 1703,  648,  642,
      643,  644,  182,    0,    0,  180,  183,  183,  183,  183,
        0,  183,  183,  183,  183,  645,  184,  184,  184,  184,
      181,  184,  184,  184,  184,  183,  648,  649,  650,  182,
      652,  185,  185,  185,  185,  184,  185,  185,  185,  185,
      186,  186,  186,  186,  653,  186,  186,  186,  186, 1705,
      185, 1705,  183,    0,    0,  649,  650,    0,  652,  186,

      655,  656,  184,  187,  187,  187,  187,    0,  187,  187,
      187,  187,  653,  188,  188,  188,  188,  185,  188,  188,
      188,  188,  187,  189,  189,  189,  186,  189,  655,  656,
        0, 1727,  188, 1727,  189,  189,  189,  189,  189,  189,
      189,  190,  190,  190, 1728,  190, 1728,    0, 1726,  187,
     1726,    0,  190,  190,  190,  190,  190,  190,  190,  188,
      191,  191,  191, 1738,  191, 1738, 1726, 1742, 1743, 1742,
     1743,  191,  191,  191,  191,  191,  191,  191,  192,  192,
      192, 1744,  192, 1744, 1748, 1749, 1748, 1749,    0,  192,
      192,  192,  192,  192,  192,  192,  193,  193,  193, 1750,

      193, 1750, 1751, 1749, 1751,    0,    0,  193,  193,  193,
      193,  193,  193,  193,  194,  194,  194, 1752,  194, 1752,
     1761, 1771, 1761, 1771,    0,  194,  194,  194,  194,  194,
      194,  194,  195,  195,  195, 1773,  195, 1773,  195, 1771,
      195,  195,    0,  195,  195,  195,  195,  195,  195,  195,
      196,  196,  196, 1773,  196, 1774,  196, 1774,  196,  196,
        0,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197, 1775,  197, 1775, 1776, 1780, 1776, 1780,    0,  197,
      197,  197,  197,  197,  197,  197,  198,  198,  198, 1775,
      198,    0, 1782, 1780, 1782,    0,    0,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199, 1785,  199, 1785,
     1782, 1786, 1789, 1786, 1789,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200, 1785,  200,    0,    0, 1786,
     1789,    0,    0,  200,  200,  200,  200,  200,  200,  200,
      201,  201,  201,    0,  201, 1793, 1801, 1793, 1801,    0,
        0,  201,  201,  201,  201,  201,  201,  201,  202,  202,
      202,  659,  202, 1793, 1817, 1840, 1817, 1840,    0,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,    0,  659,
      944,  205,  205,  205,  205,  203,  205,  205,  205,  205,

      206,  206,  206,  206,    0,  206,  206,  206,  206,    0,
      205,  349,  349,  349,  349,  349,  349,  349,  944,  206,
        0,  945,  203,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,    0,  947,  205,  327,  213,
      213,  213,  204,  213,    0,  327,  206,  948,  327,  945,
      213,  213,  213,  213,  213,  213,  213,  350,  350,  350,
      350,  350,  350,  350,  947,  949,  327,  953,    0,  204,
      207,  207,  207,  327,  207,  948,  327, 1843,  207, 1843,
        0,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208,    0,  208,  949,    0,  953,  208,    0,  954,  208,

      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  214,  214,
      214,    0,  214,  955,    0,  209,  954,    0,    0,  214,
      214,  214,  214,  214,  214,  214,  315, 1844,  315, 1844,
      315,  315,  956,  957,  315,  315,  315,  315,  315,  315,
      315,  955,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  229,  229,  229,    0,  229,
      956,  957,  210, 1849,    0, 1849,  229,  229,  229,  229,
      229,  229,  229,  317, 1852,  317, 1852,  317,  317,  958,
      959,  317,  317,  317,  317,  317,  317,  317,    0,  210,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  230,  230,  230,    0,  230,  958,  959,  211,
     1858,    0, 1858,  230,  230,  230,  230,  230,  230,  230,
      351,  351,  351,  351,  351,  351,  351,  352,  352,  352,
      352,  352,  352,  352,    0,    0,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  231,
      231,  231, 1860,  231, 1860,    0,  212, 1809,    0, 1809,
      231,  231,  231,  231,  231,  231,  231,  353,  353,  353,
      353,  353,  353,  353,  354, 1809,  354,  354,  354,  354,
      354,  354,  354,  212,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  232,  232,  232, 1864,
      232, 1864, 1869,  215, 1869,    0,    0,  232,  232,  232,
      232,  232,  232,  232,  356,    0,  356,  356,  356,  356,
      356,  356,  356,  381,  381,  381,  381,  381,  381,  381,
      215,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  235,  235,  235, 1886,  235, 1886, 1895,
      216, 1895,    0,    0,  235,  235,  235,  235,  235,  235,
      235,  357,    0,  357,  357,  357,  357,  357,  357,  357,
      382,  382,  382,  382,  382,  382,  382,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      236,  236,  236, 1899,  236, 1899, 1903,  217, 1903,    0,
        0,  236,  236,  236,  236,  236,  236,  236,  359,    0,
      359,  359,  359,  359,  359,  359,  359,  383,  383,  383,
      383,  383,  383,  383,  217,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  277,  277,  277,
     1909,  277, 1909, 1919,  218, 1919,    0,    0,  277,  277,
      277,  277,  277,  277,  277,  360,    0,  360,  360,  360,
      360,  360,  360,  360,  384,  384,  384,  384,  384,  384,
      384,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  278,  278,  278, 1921,  278, 1921,

     1925,  219, 1925,    0,    0,  278,  278,  278,  278,  278,
      278,  278,  362,    0,  362,  362,  362,  362,  362,  362,
      362,  385,  385,  385,  385,  385,  385,  385,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  287,  287,  287, 1927,  287, 1927, 1933,  220, 1933,
        0,    0,  287,  287,  287,  287,  287,  287,  287,  363,
        0,  363,  363,  363,  363,  363,  363,  363,  386,  386,
      386,  386,  386,  386,  386,  220,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  288,  288,
      288, 1934,  288, 1934, 1935,  221, 1935,    0,    0,  288,

      288,  288,  288,  288,  288,  288,  365,    0,  365,  365,
      365,  365,  365,  365,  365,  388,  388,  388,  388,  388,
      388,  388,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  289,  289,  289, 1938,  289,
     1938, 1941,  222, 1941,    0,    0,  289,  289,  289,  289,
      289,  289,  289,  366,    0,  366,  366,  366,  366,  366,
      366,  366,  409,  409,  409,  409,  409,  409,  409,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  290,  290,  290, 1943,  290, 1943, 1959,  223,
     1959,    0,    0,  290,  290,  290,  290,  290,  290,  290,

      368,  962,  368,  368,  368,  368,  368,  368,  368,  410,
      410,  410,  410,  410,  410,  410,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  962,
        0,  963,  291,  291,  291,  291,  224,  291,  291,  291,
      291,  292,  292,  292,  292,    0,  292,  292,  292,  292,
      369,  291,  369,  369,  369,  369,  369,  369,  369,  963,
      292,    0,    0,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,    0, 1964,  291, 1964,
      967,  968, 1968,  225, 1968,    0,    0,  292,  293,  293,
      293,  293,    0,  293,  293,  293,  293,  371,    0,  371,

      371,  371,  371,  371,  371,  371,    0,  293,  967,  968,
      225,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  411,  411,  411,  411,  411,  411,  411,
      226, 1969,    0, 1969,  293,  294,  294,  294,  294,    0,
      294,  294,  294,  294,  372,    0,  372,  372,  372,  372,
      372,  372,  372, 1972,  294, 1972,    0,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      980,  295,  295,  295,  983,  295, 1975,  227, 1975,    0,
        0,  294,  295,  295,  295,  295,  295,  295,  295,  374,
        0,  374,  374,  374,  374,  374,  374,  374,  980,  984,

        0, 1977,  983, 1977,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  296,  296,  296,
      985,  296,  988, 1980,  228, 1980,    0,  984,  296,  296,
      296,  296,  296,  296,  296,  355,  355,  355,  355,  355,
      355,  355,    0,    0, 1818,  989, 1818,  355,  985,  990,
      988,  228,  233,  233,  233, 1982,  233, 1982,  233,    0,
      233,  233, 1818,  233,  233,  233,  233,  233,  233,  233,
      234,  234,  234,  989,  234,  355,  234,  990,  234,  234,
        0,  234,  234,  234,  234,  234,  234,  234,  237,  237,
      237, 1821,  237, 1821,  237, 1824,  237, 1824,    0,  237,

      237,  237,  237,  237,  237,  237,  238,  238,  238, 1821,
      238,    0,  238, 1824,  238,    0,    0,  238,  238,  238,
      238,  238,  238,  238,  239,  239,  239, 1829,  239, 1829,
      239, 1839,  239, 1839,    0,  239,  239,  239,  239,  239,
      239,  239,  240,  240,  240, 1829,  240,    0,  240, 1839,
      240,    0,    0,  240,  240,  240,  240,  240,  240,  240,
      241,  241,  241, 1842,  241, 1842,  241, 1848,  241, 1848,
        0,  241,  241,  241,  241,  241,  241,  241,  242,  242,
      242, 1842,  242,    0,  242, 1848,  242,    0,    0,  242,
      242,  242,  242,  242,  242,  242,  243,  243,  243, 1851,

      243, 1851,  243, 1856,  243, 1856,    0,  243,  243,  243,
      243,  243,  243,  243,  244,  244,  244, 1851,  244,    0,
      244, 1856,  244,    0,    0,  244,  244,  244,  244,  244,
      244,  244,  245,  245,  245, 1857,  245, 1857,  245, 1859,
      245, 1859,    0,  245,  245,  245,  245,  245,  245,  245,
      246,  246,  246, 1857,  246,    0,  246, 1859,  246,    0,
        0,  246,  246,  246,  246,  246,  246,  246,  247,  247,
      247, 1863,  247, 1863,  247, 1866,  247, 1866,    0,  247,
      247,  247,  247,  247,  247,  247,  248,  248,  248, 1863,
      248,    0,  248, 1866,  248,    0,    0,  248,  248,  248,

      248,  248,  248,  248,  249,  249,  249, 1868,  249, 1868,
      249, 1885,  249, 1885,    0,  249,  249,  249,  249,  249,
      249,  249,  250,  250,  250, 1868,  250,    0,  250, 1885,
      250,    0,    0,  250,  250,  250,  250,  250,  250,  250,
      251,  251,  251, 1890,  251, 1890,  251, 1893,  251, 1893,
        0,  251,  251,  251,  251,  251,  251,  251,  252,  252,
      252, 1890,  252,    0,  252, 1893,  252,    0,    0,  252,
      252,  252,  252,  252,  252,  252,  253,  253,  253, 1894,
      253, 1894,  253, 1898,  253, 1898,    0,  253,  253,  253,
      253,  253,  253,  253,  254,  254,  254, 1894,  254,    0,

      254, 1898,  254,    0,    0,  254,  254,  254,  254,  254,
      254,  254,  255,  255,  255, 1902,  255, 1902,  255, 1905,
      255, 1905,    0,  255,  255,  255,  255,  255,  255,  255,
      256,  256,  256, 1902,  256,    0,  256, 1905,  256,    0,
        0,  256,  256,  256,  256,  256,  256,  256,  257,  257,
      257, 1906,  257, 1906,  257, 1907,  257, 1907,    0,  257,
      257,  257,  257,  257,  257,  257,  258,  258,  258, 1906,
      258,    0,  258, 1907,  258,    0,    0,  258,  258,  258,
      258,  258,  258,  258,  259,  259,  259, 1908,  259, 1908,
      259, 1920,  259, 1920,    0,  259,  259,  259,  259,  259,

      259,  259,  260,  260,  260, 1908,  260,    0,  260, 1920,
      260,    0,    0,  260,  260,  260,  260,  260,  260,  260,
      261,  261,  261, 1932,  261, 1932,  261, 1940,  261, 1940,
        0,  261,  261,  261,  261,  261,  261,  261,  262,  262,
      262, 1932,  262,    0,  262, 1940,  262,    0,    0,  262,
      262,  262,  262,  262,  262,  262,  263,  263,  263, 1949,
      263, 1949,  263, 1952,  263, 1952,    0,  263,  263,  263,
      263,  263,  263,  263,  264,  264,  264, 1949,  264,    0,
      264, 1952,  264,    0,    0,  264,  264,  264,  264,  264,
      264,  264,  265,  265,  265, 1953,  265, 1953,  265, 1963,

      265, 1963,    0,  265,  265,  265,  265,  265,  265,  265,
      266,  266,  266, 1953,  266,    0,  266, 1963,  266,    0,
        0,  266,  266,  266,  266,  266,  266,  266,  267,  267,
      267, 1967,  267, 1967,  267, 1984,  267, 1984,    0,  267,
      267,  267,  267,  267,  267,  267,  268,  268,  268, 1967,
      268,  991,  268,  993,  268,    0,  994,  268,  268,  268,
      268,  268,  268,  268,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  297,  297,  297,  991,
      297,  993,    0,  269,  994,    0,    0,  297,  297,  297,
      297,  297,  297,  297,  375,    0,  375,  375,  375,  375,

      375,  375,  375,  412,  412,  412,  412,  412,  412,  412,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  298,  298,  298, 1985,  298, 1985, 1996,
      270, 1996,    0,    0,  298,  298,  298,  298,  298,  298,
      298,  377,    0,  377,  377,  377,  377,  377,  377,  377,
      418,  418,  418,  418,  418,  418,  418,  270,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      299,  299,  299, 2005,  299, 2005, 2009,  271, 2009,    0,
        0,  299,  299,  299,  299,  299,  299,  299,  378,    0,
      378,  378,  378,  378,  378,  378,  378,  419,  419,  419,

      419,  419,  419,  419,  271,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  300,  300,  300,
     2016,  300, 2016, 2019,  272, 2019,    0,    0,  300,  300,
      300,  300,  300,  300,  300,  380,  995,  380,  380,  380,
      380,  380,  380,  380,  420,  420,  420,  420,  420,  420,
      420,  272,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  995,    0,  996,  301,  301,  301,
      301,  273,  301,  301,  301,  301,  302,  302,  302,  302,
        0,  302,  302,  302,  302,  389,  301,  389,  389,  389,
      389,  389,  389,  389,  996,  302,    0,    0,  273,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,    0, 2023,  301, 2023,  997,  999, 2025,  274, 2025,
        0,    0,  302,  313,  313,  313,  313,    0,  313,  313,
      313,  313,  391,    0,  391,  391,  391,  391,  391,  391,
      391,    0,  313,  997,  999,  274,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  421,  421,
      421,  421,  421,  421,  421,  275, 2034,    0, 2034,  313,
      314,  314,  314,  314,    0,  314,  314,  314,  314,  392,
        0,  392,  392,  392,  392,  392,  392,  392, 2037,  314,
     2037,    0,  275,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,    0,  318,  318,  318, 1000,
      318, 2042,  276, 2042,    0,    0,  314,  318,  318,  318,
      318,  318,  318,  318,  387,    0,  387, 1001,    0,  387,
      387,  387,  387,  387,  387,  387, 2044, 1000, 2044,  276,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  319,  319,  319, 1001,  319,    0, 2045,  279,
     2045,    0,    0,  319,  319,  319,  319,  319,  319,  319,
      394,    0,  394,  394,  394,  394,  394,  394,  394,  422,
      422,  422,  422,  422,  422,  422,  279,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  320,

      320,  320, 2046,  320, 2046,    0,  280, 1976,    0, 1976,
      320,  320,  320,  320,  320,  320,  320,    0,  638,  329,
      647,  946,  638,  638,  638, 1976,  329,  329,  647,  946,
      329, 1002,  329,  280,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  638,  329,  647,  946,
      638,  638,  638,  281,  329,  329,  647,  946,  329, 1002,
      329, 2056, 2061, 2056, 2061,  343,  358,  358,  358,  358,
      358,  358,  358,  343,  343,  343, 1003, 1004,  358, 1005,
      281,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  343, 1006, 1007, 1008, 1009, 1010,    0,

      282,  343,  343,  343, 1003, 1004,  358, 1005,  361,  361,
      361,  361,  361,  361,  361, 2069, 2075, 2069, 2075, 2079,
      361, 2079, 1006, 1007, 1008, 1009, 1010,  282,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      423,  423,  423,  423,  423,  423,  423,  283,  361,  364,
      364,  364,  364,  364,  364,  364, 2082,    0, 2082, 1012,
      395,  364,  395,  395,  395,  395,  395,  395,  395, 2083,
     2086, 2083, 2086,    0,  283,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284, 1012, 1013,  364,
     2094, 1014, 2094,    0,  284,  367,  367,  367,  367,  367,

      367,  367, 2096, 2101, 2096, 2101,  651,  367,  370,  370,
      370,  370,  370,  370,  370, 1016, 1013, 1017,  651, 1014,
      370,  284,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  651,  367, 1018, 1019, 1021, 1023,
     1979,  285, 1979, 1016,    0, 1017,  651,    0,  370,  373,
      373,  373,  373,  373,  373,  373,    0, 2116, 1979, 2116,
     2118,  373, 2118,    0, 1018, 1019, 1021, 1023,  285,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  424,  424,  424,  424,  424,  424,  424,  286,  373,
      425,  425,  425,  425,  425,  425,  425,  376,  376,  376,

      376,  376,  376,  376, 1981, 2120, 1981, 2120, 1983,  376,
     1983,    0, 1096, 1097,    0,  286,  309,  309,  309,  309,
      309,  309, 1981,  309,  309,    0, 1983,  309,  309,  309,
      309,  309,  309,  309,  312,  312,  312,  376,  312,  312,
     1096, 1097,  312,  312,  312,  312,  312,  312,  312,  316,
      316,  316, 1100,  316,  316,    0,  654,  316,  316,  316,
      316,  316,  316,  316,  332,  654,  338, 1101,  332,    0,
      646,  338, 1102,    0,  332, 1103,  641, 1107, 1108,  332,
     1100,  646,    0,  641,  654,  641,  338, 1109,  646, 1110,
     1111,  338,  332,  654,  338, 1101,  332,  338,  646,    0,

     1102,  338,  332, 1103,  641, 1107, 1108,  332,  337,  646,
      337,  641,    0,  641,  338, 1109,  646, 1110, 1111,  338,
        0, 1112,  338,    0,  337,  338,  337,  337,  379,  379,
      379,  379,  379,  379,  379,    0,    0, 1113, 1115, 1116,
      379,  337,  390,  390,  390,  390,  390,  390,  390, 1112,
      337,  337,  337,    0,  390,  337,    0, 1117,  393,  393,
      393,  393,  393,  393,  393, 1113, 1115, 1116,  379,  337,
      393,  396,  396,  396,  396,  396,  396,  396,  337,  337,
      337,  339,  390,  396, 1015, 1117, 1119,  339,  992,    0,
      339, 1114, 1120,  339, 1126,  992,  339,  339,  393,  339,

        0, 1129,  992, 1114,    0, 1130,  339, 1131,    0,  339,
     1015,  396,    0, 1132, 1119,  339,  992, 1015,  339, 1114,
     1120,  339, 1126,  992,  339,  339,    0,  339,  344, 1129,
      992, 1114,  344, 1130, 1134, 1131,  344, 1135, 1015, 1136,
      344, 1132,  344, 1137, 1138,  344, 1139,  397,  344,  397,
      397,  397,  397,  397,  397,  397,  344, 2126,    0, 2126,
      344,    0, 1134, 1140,  344, 1135, 1141, 1136,  344,    0,
      344, 1137, 1138,  344, 1139,  398,  344,  398,  398,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      399, 1140, 1142, 1143, 1141,  400,  399,  400,  400,  400,

      400,  400,  400,  400,  415,    0,  415,  415,  415,  415,
      415,  415,  415,  416,  416,  416,  416,  416,  416,  416,
     1142, 1143,    0, 1144,  399,  416,  417,    0,  417,  417,
      417,  417,  417,  417,  417,  426,  426,  426,  426,  426,
      426,  426,  427,    0,  427,  427,  427,  427,  427,  427,
      427, 1144,    0,  416,  428,  428,  428,  428,  428,  428,
      428,    0, 1145, 1146, 1147,  429,  428,  429,  429,  429,
      429,  429,  429,  429,  430,    0,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
     1145, 1146, 1147, 1148,  428,  431,  432,    0,  432,  432,

      432,  432,  432,  432,  432,  433,    0,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434, 1148, 1149,  431, 1150,  435,  434,  435,  435,  435,
      435,  435,  435,  435,  436,    0,  436,  436,  436,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  437,  437,
     1149, 1153, 1150, 1152,  434,  437,  438,    0,  438,  438,
      438,  438,  438,  438,  438,  439,  439,  439,  439,  439,
      439,  439,  440,  440,  440,  440,  440,  440,  440, 1153,
     1152, 1152,  441,  437,  441,  441,  441,  441,  441,  441,
      441,  442,  442,  442,  442,  442,  442,  442,    0, 1155,

     1156, 1159,  443,  442,  443,  443,  443,  443,  443,  443,
      443,  444,    0,  444,  444,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  445,  445,  445, 1155, 1156, 1159,
     1160,  442,  445,  446,    0,  446,  446,  446,  446,  446,
      446,  446,  447,    0,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  448,  448,  448, 1160, 1161,
      445, 1164,  449,  448,  449,  449,  449,  449,  449,  449,
      449,  450,    0,  450,  450,  450,  450,  450,  450,  450,
      451,  451,  451,  451,  451,  451,  451, 1161,    0, 1164,
     1165,  448,  451,  452,    0,  452,  452,  452,  452,  452,

      452,  452,  453,    0,  453,  453,  453,  453,  453,  453,
      453,  454,  454,  454,  454,  454,  454,  454, 1165, 1167,
      451, 1168,  455,  454,  455,  455,  455,  455,  455,  455,
      455,  456,    0,  456,  456,  456,  456,  456,  456,  456,
      457,  457,  457,  457,  457,  457,  457, 1167,    0, 1168,
     1169,  454,  457,  458,    0,  458,  458,  458,  458,  458,
      458,  458,  459,    0,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460, 1169, 1170,
      457, 1171,  461,  460,  461,  461,  461,  461,  461,  461,
      461,  462,    0,  462,  462,  462,  462,  462,  462,  462,

      463,  463,  463,  463,  463,  463,  463, 1170,    0, 1171,
     1172,  460,  463,  464,    0,  464,  464,  464,  464,  464,
      464,  464,  465,    0,  465,  465,  465,  465,  465,  465,
      465,  466,  466,  466,  466,  466,  466,  466, 1172, 1178,
      463, 1183,  467,  466,  467,  467,  467,  467,  467,  467,
      467,  468,    0,  468,  468,  468,  468,  468,  468,  468,
      469,  469,  469,  469,  469,  469,  469, 1178, 1185, 1183,
     1186,  466,  469,  470,    0,  470,  470,  470,  470,  470,
      470,  470,  471,  471,  471,  471,  471,  471,  471,  472,
      472,  472,  472,  472,  472,  472, 1185, 2128, 1186, 2128,

      469,  473,  473,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  474,  474,  475,    0,  475,  475,  475,
      475,  475,  475,  475,  476,  476,  476,  476,  476,  476,
      476,    0, 1188, 1189, 1190,  477,  476,  477,  477,  477,
      477,  477,  477,  477,  479,    0,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
     1188, 1189, 1190,    0,  476,  480,  481,    0,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,
      482,  482,  483,  483,  483,  483,  483,  483,  483,  484,
     2135,  484, 2135,  480,  484,  484,  484,  484,  484,  484,

      484,  485,  485,  485,  485,  485,  485,  485,  486, 2137,
      486, 2137,    0,  486,  486,  486,  486,  486,  486,  486,
      487,  487,  487,  487,  487,  487,  487,  488, 2139,  488,
     2139,    0,  488,  488,  488,  488,  488,  488,  488,  489,
      489,  489,  489,  489,  489,  489,  490, 2141,  490, 2141,
        0,  490,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,
      492,  492,  493,  493,  493,  493,  493,  493,  493,  494,
      494,  494,  494,  494,  494,  494,  495,  495,  495,  495,
      495,  495,  495,  496,  496,  496,  496,  496,  496,  496,

      497,  497,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  498,  498,  499,  499,  499,  499,  499,  499,
      499,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  507,  507,  507,  507,  507,
      507,  507,  508,    0,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509, 1191, 1192,
     1193, 1194,  510,  509,  510,  510,  510,  510,  510,  510,
      510,  511,  511,  511,  511,  511,  511,  511,  512,  512,
      512,  512,  512,  512,  512,    0, 1191, 1192, 1193, 1194,
        0,  509,  513,  513,  513,  513,  513,  513,  513,  516,

      516,  516,  516,  516,  516,  516,  517,  517,  517,  517,
      517,  517,  517,  520,  520,  520,  520,  520,  520,  520,
      528,  528,  528,  528,  528,  528,  528,  529,  529,  529,
      529,  529,  529,  529,  530,    0,  530,  530,  530,  530,
      530,  530,  530,  531,  531,  531,  531,  531,  531,  531,
     1195, 2144,    0, 2144,  532,  531,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  533,  533,  533,  533,  533,
      534,  534,  534,  534,  534,  534,  534,    0, 1195,  535,
      535,  535,    0,  531,  535,  535,  535,  535,  535,  535,
      535,  536,  536,  536,  536,  536,  536,  536,  537, 2145,

      537, 2145,    0,  537,  537,  537,  537,  537,  537,  537,
      538,  538,  538,  538,  538,  538,  538,  539, 2147,  539,
     2147,    0,  539,  539,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  540,  540,  541, 2149,  541, 2149,
        0,  541,  541,  541,  541,  541,  541,  541,  542,  542,
      542,  542,  542,  542,  542,  543,  543,  543,    0,    0,
      543,  543,  543,  543,  543,  543,  543,  544,  544,  544,
      544,  544,  544,  544,  545, 2155,  545, 2155,    0,  545,
      545,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  546,  546,  547, 2156,  547, 2156,    0,  547,  547,

      547,  547,  547,  547,  547,  548,  548,  548,  548,  548,
      548,  548,  549, 2161,  549, 2161,    0,  549,  549,  549,
      549,  549,  549,  549,  550,  550,  550,  550,  550,  550,
      550,  551,  551,  551,    0,    0,  551,  551,  551,  551,
      551,  551,  551,  552,  552,  552,  552,  552,  552,  552,
      553, 2163,  553, 2163,    0,  553,  553,  553,  553,  553,
      553,  553,  554,  554,  554,  554,  554,  554,  554,  555,
     2164,  555, 2164,    0,  555,  555,  555,  555,  555,  555,
      555,  556,  556,  556,  556,  556,  556,  556,  557, 2178,
      557, 2178,    0,  557,  557,  557,  557,  557,  557,  557,

      558,  558,  558,  558,  558,  558,  558,  559,  559,  559,
        0,    0,  559,  559,  559,  559,  559,  559,  559,  560,
      560,  560,  560,  560,  560,  560,  561, 2179,  561, 2179,
        0,  561,  561,  561,  561,  561,  561,  561,  562,  562,
      562,  562,  562,  562,  562,  563, 2185,  563, 2185,    0,
      563,  563,  563,  563,  563,  563,  563,  564,  564,  564,
      564,  564,  564,  564,  565, 2192,  565, 2192,    0,  565,
      565,  565,  565,  565,  565,  565,  570,  570,  570,  570,
      570,  570,  570,  575,  575,  575,  575,  575,  575,  575,
      576,  576,  576,  576,  576,  576,  576,  579,  579,  579,

      579,  579,  579,  579,  580,  580,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  581,  581,  591,    0,
      591, 1196,  591,  591,    0,    0,  591,  591,  591,  591,
      591,  591,  591,  592, 2193,  592, 2193,  592,  592,    0,
        0,  592,  592,  592,  592,  592,  592,  592,  594, 1196,
      594,    0,  594,  594,    0,    0,  594,  594,  594,  594,
      594,  594,  594,  595,  595,  595,  595,  595,  595,  595,
      596,  596,  596,  596,  596,  596,  596,  631,    0,  631,
      660,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  661, 1198,  631, 1200,  631, 1201,  631,

      662,  662,  662,  662,  662,  662,  662,  663,  663,  663,
      663,  663,  663,  663,  631,  664,  664,  664,  664,  664,
      664,  664, 1198, 1205, 1200,  631, 1201,  631,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  631,  667,  667,  667,  667,  667,  667,  667,
     2194, 1205, 2194,    0,  668,  667,  668,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  669,
     1209,  670, 1210,  670,    0,  669,  670,  670,  670,  670,
      670,  670,  670,  667,  671,  671,  671,  671,  671,  671,
      671, 1211, 2195, 2197, 2195, 2197,  671, 2198, 1209, 2198,

     1210,    0,  672,  669,  672,  672,  672,  672,  672,  672,
      672,  673,  673,  673,  673,  673,  673,  673, 1197, 1211,
      674, 1197,  674,  673,  671,  674,  674,  674,  674,  674,
      674,  674,  675,  675,  675,  675,  675,  675,  675, 1212,
     1197, 1217,    0, 2199,  675, 2199, 1197,    0,    0, 1197,
      676,  673,  676,  676,  676,  676,  676,  676,  676,  677,
      677,  677,  677,  677,  677,  677, 1218, 1212,  678, 1217,
      678,  677,  675,  678,  678,  678,  678,  678,  678,  678,
      679,  679,  679,  679,  679,  679,  679, 1219, 2200, 1220,
     2200, 2205,  679, 2205, 1218, 2208,    0, 2208,  680,  677,

      680,  680,  680,  680,  680,  680,  680,  681,  681,  681,
      681,  681,  681,  681, 1221, 1219,  682, 1220,  682,  681,
      679,  682,  682,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  683,  683, 1222, 2213, 1223, 2213, 2214,
      683, 2214, 1221, 2217,    0, 2217,  684,  681,  684,  684,
      684,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      685,  685, 1225, 1222,  686, 1223,  686,  685,  683,  686,
      686,  686,  686,  686,  686,  686,  687,  687,  687,  687,
      687,  687,  687, 1228, 2219, 1229, 2219, 2231,  687, 2231,
     1225, 2238,    0, 2238,  688,  685,  688,  688,  688,  688,

      688,  688,  688,  689,  689,  689,  689,  689,  689,  689,
     1230, 1228,  690, 1229,  690,  689,  687,  690,  690,  690,
      690,  690,  690,  690,  691,  691,  691,  691,  691,  691,
      691, 1231, 2243, 1232, 2243, 2245,  691, 2245, 1230, 2247,
        0, 2247,  692,  689,  692,  692,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  693,  693, 1233, 1231,
      694, 1232,  694,  693,  691,  694,  694,  694,  694,  694,
      694,  694,  695,  695,  695,  695,  695,  695,  695, 1235,
     2249, 2250, 2249, 2250,  695, 2252, 1233, 2252,    0,    0,
      696,  693,  696,  696,  696,  696,  696,  696,  696,  697,

      697,  697,  697,  697,  697,  697, 1234, 1235,  698, 1234,
      698,  697,  695,  698,  698,  698,  698,  698,  698,  698,
      699,  699,  699,  699,  699,  699,  699, 1236, 2259, 1241,
     2259, 2260,  699, 2260, 1234,    0,    0, 1234,  700,  697,
      700,  700,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701, 1242, 1236,  702, 1241,  702,  701,
      699,  702,  702,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704, 1242,    0, 1243, 1246,    0,  701,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,

      706,  706,  707,  707,  707,  707,  707,  707,  707,  708,
        0,  708, 1243, 1246,  708,  708,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711, 2273, 2275, 2273, 2275,  712,  711,  712,  712,
      712,  712,  712,  712,  712,  713,  713,  713,  713,  713,
      713,  713, 1247,  714, 1248,  714,    0,  713,  714,  714,
      714,  714,  714,  714,  714,  711,  715,  715,  715,  715,
      715,  715,  715, 1249, 2280, 1250, 2280, 2287,  715, 2287,
     1247, 2288, 1248, 2288,  716,  713,  716,  716,  716,  716,

      716,  716,  716,  717,  717,  717,  717,  717,  717,  717,
     1251, 1249,  718, 1250,  718,  717,  715,  718,  718,  718,
      718,  718,  718,  718,  719,  719,  719,  719,  719,  719,
      719, 1252, 2289, 1253, 2289, 2310,  719, 2310, 1251, 2313,
        0, 2313,  720,  717,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721, 1254, 1252,
      722, 1253,  722,  721,  719,  722,  722,  722,  722,  722,
      722,  722,  723,  723,  723,  723,  723,  723,  723, 1265,
     2322, 1268, 2322, 2328,  723, 2328, 1254, 2332,    0, 2332,
      724,  721,  724,  724,  724,  724,  724,  724,  724,  725,

      725,  725,  725,  725,  725,  725, 1269, 1265,  726, 1268,
      726,  725,  723,  726,  726,  726,  726,  726,  726,  726,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,  736, 1269, 1270, 1271,    0,    0,  725,
      737,  737,  737,  737,  737,  737,  737,  738,  738,  738,
      738,  738,  738,  738,  741,  741,  741,  741,  741,  741,
      741,    0,    0, 1270, 1271,  742,  741,  742,  742,  742,
      742,  742,  742,  742,  743,  743,  743,  743,  743,  743,
      743, 1272,  744, 1273,  744, 1274,  743,  744,  744,  744,
      744,  744,  744,  744,  741,  745,  745,  745,  745,  745,

      745,  745,  746,  746,  746,  746,  746,  746,  746, 1272,
     2334, 1273, 2334, 1274,  743,  747,  747,  747,  747,  747,
      747,  747,  748,  748,  748,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  751,  751,
      752,  752,  752,  752,  752,  752,  752,  753,  753,  753,
      753,  753,  753,  753,  754,  754,  754,  754,  754,  754,
      754, 2339, 2345, 2339, 2345,  755,  754,  755,  755,  755,
      755,  755,  755,  755,  756,  756,  756,  756,  756,  756,
      756, 1277,  757, 1278,  757,    0,  756,  757,  757,  757,

      757,  757,  757,  757,  754,  758,  758,  758,  758,  758,
      758,  758, 1280, 2348, 1281, 2348, 2351,  758, 2351, 1277,
     2353, 1278, 2353,  759,  756,  759,  759,  759,  759,  759,
      759,  759,  760,  760,  760,  760,  760,  760,  760, 1282,
     1280,  761, 1281,  761,  760,  758,  761,  761,  761,  761,
      761,  761,  761,  762,  762,  762,  762,  762,  762,  762,
     1283, 2356, 1284, 2356, 2362,  762, 2362, 1282, 2369,    0,
     2369,  763,  760,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764, 1285, 1283,  765,
     1284,  765,  764,  762,  765,  765,  765,  765,  765,  765,

      765,  766,  766,  766,  766,  766,  766,  766, 1286, 2371,
     1287, 2371, 2373,  766, 2373, 1285, 2374,    0, 2374,  767,
      764,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768, 1288, 1286,  769, 1287,  769,
      768,  766,  769,  769,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  770,  770,  770,  771,  771,  771,  771,
      771,  771,  771, 1288, 2378, 2380, 2378, 2380,  768,  772,
      772,  772,  772,  772,  772,  772, 2384, 2386, 2384, 2386,
      773,  772,  773,  773,  773,  773,  773,  773,  773,  774,
      774,  774,  774,  774,  774,  774, 1291,  775, 1298,  775,

        0,  774,  775,  775,  775,  775,  775,  775,  775,  772,
      776,  776,  776,  776,  776,  776,  776, 1299, 2387, 1300,
     2387, 2389,  776, 2389, 1291, 2391, 1298, 2391,  777,  774,
      777,  777,  777,  777,  777,  777,  777,  778,  778,  778,
      778,  778,  778,  778, 1301, 1299,  779, 1300,  779,  778,
      776,  779,  779,  779,  779,  779,  779,  779,  780,  780,
      780,  780,  780,  780,  780, 1304, 2393, 1307, 2393, 2402,
      780, 2402, 1301, 2404,    0, 2404,  781,  778,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782, 1308, 1304,  783, 1307,  783,  782,  780,  783,

      783,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  784, 1309, 2406, 1310, 2406, 2410,  784, 2410,
     1308, 2412,    0, 2412,  785,  782,  785,  785,  785,  785,
      785,  785,  785,  786,  786,  786,  786,  786,  786,  786,
     1311, 1309,  787, 1310,  787,  786,  784,  787,  787,  787,
      787,  787,  787,  787,  788,  788,  788,  788,  788,  788,
      788, 1312, 2416, 1313, 2416, 2420,  788, 2420, 1311, 2421,
        0, 2421,  789,  786,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790, 1314, 1312,
      791, 1313,  791,  790,  788,  791,  791,  791,  791,  791,

      791,  791,  792,  792,  792,  792,  792,  792,  792, 1317,
     2423, 1322, 2423, 2426,  792, 2426, 1314, 2428,    0, 2428,
      793,  790,  793,  793,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  794,  794, 1323, 1317,  795, 1322,
      795,  794,  792,  795,  795,  795,  795,  795,  795,  795,
      796,  796,  796,  796,  796,  796,  796, 1324, 2430, 1325,
     2430, 2435,  796, 2435, 1323, 2436,    0, 2436,  797,  794,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798, 1326, 1324,  799, 1325,  799,  798,
      796,  799,  799,  799,  799,  799,  799,  799,  800,  800,

      800,  800,  800,  800,  800, 1327, 2437, 1328, 2437, 2441,
      800, 2441, 1326, 2448,    0, 2448,  801,  798,  801,  801,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      802,  802, 1330, 1327,  803, 1328,  803,  802,  800,  803,
      803,  803,  803,  803,  803,  803,  804,  804,  804,  804,
      804,  804,  804, 1334, 2450, 1336, 2450, 2451,  804, 2451,
     1330, 2452,    0, 2452,  805,  802,  805,  805,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  806,  806,  806,
     1338, 1334,  807, 1336,  807,  806,  804,  807,  807,  807,
      807,  807,  807,  807,  808,  808,  808,  808,  808,  808,

      808, 1339, 2458, 1340, 2458, 2461,  808, 2461, 1338, 2464,
        0, 2464,  809,  806,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810, 1341, 1339,
      811, 1340,  811,  810,  808,  811,  811,  811,  811,  811,
      811,  811,  812,  812,  812,  812,  812,  812,  812,  813,
      813,  813,  813,  813,  813,  813, 1341, 1342, 1345,    0,
        0,  810,  814,  814,  814,  814,  814,  814,  814,  815,
      815,  815,  815,  815,  815,  815,  816,  816,  816,  816,
      816,  816,  816,    0,    0, 1342, 1345,  817,  816,  817,
      817,  817,  817,  817,  817,  817,  818,  818,  818,  818,

      818,  818,  818, 1346,  819, 1344,  819,    0,  818,  819,
      819,  819,  819,  819,  819,  819,  816,  821,  821,  821,
      821,  821,  821,  821, 1344, 2474, 1348, 2474, 2476,  821,
     2476, 1346, 2478, 1344, 2478,  822,  818,  822,  822,  822,
      822,  822,  822,  822,  823,  823,  823,  823,  823,  823,
      823,    0,    0,  824, 1348,  824,  823,  821,  824,  824,
      824,  824,  824,  824,  824,  825,  825,  825,  825,  825,
      825,  825,  826, 2483,  826, 2483,    0,  826,  826,  826,
      826,  826,  826,  826,  823,  827,  827,  827,  827,  827,
      827,  827,  828, 2494,  828, 2494,    0,  828,  828,  828,

      828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
      829,  830, 2496,  830, 2496,    0,  830,  830,  830,  830,
      830,  830,  830,  831,  831,  831,  831,  831,  831,  831,
      832, 2499,  832, 2499,    0,  832,  832,  832,  832,  832,
      832,  832,  833,  833,  833,  833,  833,  833,  833,  834,
      834,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  835,  835,  836,  836,  836,  836,  836,  836,  836,
      837,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  839,
      839,  840,  840,  840,  840,  840,  840,  840,  841,  841,

      841,  841,  841,  841,  841,  842,  842,  842,  842,  842,
      842,  842,  848,  848,  848,  848,  848,  848,  848,  849,
      849,  849,  849,  849,  849,  849,  850,  850,  850,  850,
      850,  850,  850,  851,  851,  851,  851,  851,  851,  851,
     2501, 2509, 2501, 2509,  852,  851,  852,  852,  852,  852,
      852,  852,  852,  853,  853,  853,  853,  853,  853,  853,
     1349,  854, 1352,  854, 1353,  853,  854,  854,  854,  854,
      854,  854,  854,  851,  855,  855,  855,  855,  855,  855,
      855,  856,  856,  856,  856,  856,  856,  856, 1349, 2511,
     1352, 2511, 1353,  853,  857,  857,  857,  857,  857,  857,

      857,  860,  860,  860,  860,  860,  860,  860,  861,  861,
      861,  861,  861,  861,  861,  864,  864,  864,  864,  864,
      864,  864,  872,  872,  872,  872,  872,  872,  872,  873,
      873,  873,  873,  873,  873,  873,  874,  874,  874,  874,
      874,  874,  874, 2512, 2513, 2512, 2513,  875,  874,  875,
      875,  875,  875,  875,  875,  875,  876,  876,  876,  876,
      876,  876,  876, 2518,  877, 2518,  877,    0,  876,  877,
      877,  877,  877,  877,  877,  877,  874,  878,  878,  878,
      878,  878,  878,  878,  879,  879,  879,    0,    0,  879,
      879,  879,  879,  879,  879,  879,  876,  880,  880,  880,

      880,  880,  880,  880,  881, 2520,  881, 2520, 1354,  881,
      881,  881,  881,  881,  881,  881,  882, 2525,  882, 2525,
        0,  882,  882,  882,  882,  882,  882,  882,  883,  883,
      883,  883,  883,  883,  883,  884, 1354,  884,    0,    0,
      884,  884,  884,  884,  884,  884,  884,  885,  885,  885,
      885,  885,  885,  885,  886, 2527,  886, 2527,    0,  886,
      886,  886,  886,  886,  886,  886,  887,  887,  887,  887,
      887,  887,  887,  888,  888,  888,    0, 1355,  888,  888,
      888,  888,  888,  888,  888,  889,  889,  889,  889,  889,
      889,  889,  890, 2529,  890, 2529, 1357,  890,  890,  890,

      890,  890,  890,  890,  891, 1355,  891,    0,    0,  891,
      891,  891,  891,  891,  891,  891,  892,  892,  892,  892,
      892,  892,  892,  893, 1357,  893,    0,    0,  893,  893,
      893,  893,  893,  893,  893,  894,  894,  894,  894,  894,
      894,  894,  895, 2531,  895, 2531,    0,  895,  895,  895,
      895,  895,  895,  895,  896,  896,  896,  896,  896,  896,
      896,  897,  897,  897,    0, 1362,  897,  897,  897,  897,
      897,  897,  897,  898,  898,  898,  898,  898,  898,  898,
      899, 2532,  899, 2532, 1366,  899,  899,  899,  899,  899,
      899,  899,  900, 1362,  900,    0,    0,  900,  900,  900,

      900,  900,  900,  900,  901,  901,  901,  901,  901,  901,
      901,  902, 1366,  902,    0,    0,  902,  902,  902,  902,
      902,  902,  902,  903,  903,  903,  903,  903,  903,  903,
      904, 2533,  904, 2533,    0,  904,  904,  904,  904,  904,
      904,  904,  905,  905,  905,  905,  905,  905,  905,  906,
      906,  906,    0, 1368,  906,  906,  906,  906,  906,  906,
      906,  907,  907,  907,  907,  907,  907,  907,  908, 2535,
      908, 2535, 1369,  908,  908,  908,  908,  908,  908,  908,
      909, 1368,  909,    0,    0,  909,  909,  909,  909,  909,
      909,  909,  910,  910,  910,  910,  910,  910,  910,  911,

     1369,  911,    0,    0,  911,  911,  911,  911,  911,  911,
      911,  912,  912,  912,  912,  912,  912,  912,  913, 2537,
      913, 2537,    0,  913,  913,  913,  913,  913,  913,  913,
      914,  914,  914,  914,  914,  914,  914,  919,  919,  919,
      919,  919,  919,  919,  924,  924,  924,  924,  924,  924,
      924,  925,  925,  925,  925,  925,  925,  925,  928,  928,
      928,  928,  928,  928,  928,  929,  929,  929,  929,  929,
      929,  929,  930,  930,  930,  930,  930,  930,  930,  938,
        0,  938, 1371,  938,  938,    0,    0,  938,  938,  938,
      938,  938,  938,  938,  939, 2540,  939, 2540,  939,  939,

        0,    0,  939,  939,  939,  939,  939,  939,  939,  941,
     1371,  941,    0,  941,  941,    0,    0,  941,  941,  941,
      941,  941,  941,  941,  942,  942,  942,  942,  942,  942,
      942,  943,  943,  943,  943,  943,  943,  943, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,

     1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1047,

     1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061, 1061,

     1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1089, 1089, 1089,    0,    0, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1091, 1091, 1091,    0,    0, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1093, 1093, 1093,    0, 1372, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1095, 1095, 1095,    0,    0, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1106, 1372, 1173, 1106, 1173,    0,    0, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1174,    0, 1174, 1106,
        0, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1199, 1175,
     1106, 1175,    0, 1106, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1199, 1202, 1176, 1202, 1176,    0, 1106, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 2541, 1199, 2541,    0,    0,
     1202, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1199,
     1257,    0,    0, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259, 1202, 1259,
        0,    0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1261, 2542, 1261, 2542,
        0, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1263, 1347, 1263, 1292, 1347,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1264, 1293, 1292,

     1329, 1292, 1292, 1292, 1264, 1293, 1373, 1351, 1375, 1358,
     1329, 1351, 1351, 1351, 1347, 1356, 1292, 1347, 1358, 1356,
     1356, 1356, 1377, 1378, 1379, 1264, 1293, 1292, 1329, 1292,
     1292, 1292, 1264, 1293, 1373, 1351, 1375, 1358, 1329, 1351,
     1351, 1351, 1367, 1356, 1367, 1376, 1358, 1356, 1356, 1356,
     1377, 1378, 1379, 1380, 1381, 1367, 1382, 1391, 1376, 1393,
     1367, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1402, 1405,
     1407, 1408, 1409, 1376, 1411, 1412, 1413, 1414, 1417, 1418,
        0, 1380, 1381, 1420, 1382, 1391, 1376, 1393, 1367, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1402, 1405, 1407, 1408,

     1409, 1421, 1411, 1412, 1413, 1414, 1417, 1418, 1419, 1422,
     1419, 1420, 1423, 1425, 1426, 1429, 1430, 1432, 1431, 1433,
     1434, 1439, 1441, 1442, 1447, 1448, 1419,    0, 1431, 1421,
     1449, 2543, 1451, 2543, 1458, 1462,    0, 1422, 1463, 1464,
     1423, 1425, 1426, 1429, 1430, 1432, 1431, 1433, 1434, 1439,
     1441, 1442, 1447, 1448, 1419, 1427, 1431, 1465, 1449, 1427,
     1451, 1427, 1458, 1462, 1427, 1427, 1463, 1464, 1466, 1467,
     1469, 1470, 1427, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
     1486, 1487, 1490, 1427, 1495, 1465, 1497, 1427, 1498, 1427,
     1499, 1500, 1427, 1427, 1501, 1502, 1466, 1467, 1469, 1470,

     1427, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1486, 1487,
     1490, 1503, 1495, 1504, 1497, 1507, 1498, 1508, 1499, 1500,
     1511, 1512, 1501, 1502, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1518, 1520, 1521, 1516, 1522, 1523, 1525,    0, 1503,
     1527, 1504, 1518, 1507, 1528, 1508, 1529, 1518, 1511, 1512,
     1524, 1541, 1513, 1514, 1515, 1516, 1517, 1542, 1519, 1543,
     1520, 1521, 1516, 1522, 1523, 1525, 1524, 1553, 1527, 1556,
     1557, 1566, 1528, 1570, 1529, 1518, 1571, 1572, 1524, 1541,
     1573, 1574, 1575, 1576, 1575, 1542, 1577, 1543, 1578, 1579,
     1580, 1581, 1582, 1583, 1524, 1553, 1584, 1556, 1557, 1566,

     1575, 1570, 1585, 1588, 1571, 1572, 1591, 1592, 1573, 1574,
     1593, 1576, 1594, 1603, 1577, 1606, 1578, 1579, 1580, 1581,
     1582, 1583, 1607, 1608, 1584, 1609, 1611, 1612, 1575, 1610,
     1585, 1588, 1613, 1614, 1591, 1592, 1615, 1610, 1593, 1616,
     1594, 1603, 1618, 1606, 1619, 1620, 1621, 1622, 1623, 1624,
     1607, 1608, 1625, 1609, 1611, 1612, 1629, 1610, 1630, 1631,
     1613, 1614, 1632, 1633, 1615, 1610, 1634, 1616, 1635, 1636,
     1618, 1637, 1619, 1620, 1621, 1622, 1623, 1624, 1640, 1641,
     1625, 1642, 1653, 1654, 1629, 1655, 1630, 1631, 1667, 1668,
     1632, 1633, 1673, 1675, 1634, 1678, 1635, 1636, 1679, 1637,

     1682, 1683, 1684, 1685, 1687, 1688, 1640, 1641, 1691, 1642,
     1653, 1654, 1692, 1655, 1693, 1697, 1667, 1668, 1698, 1704,
     1673, 1675, 1706, 1678, 1707, 1709, 1679, 1710, 1682, 1683,
     1684, 1685, 1687, 1688, 1711, 1712, 1691, 1713, 1714, 1715,
     1692, 1716, 1693, 1697, 1717, 1718, 1698, 1704, 1719, 1722,
     1706, 1723, 1707, 1709, 1724, 1710, 1725, 1729, 1730, 1731,
     1732, 1733, 1711, 1712, 1734, 1713, 1714, 1715, 1735, 1716,
     1736, 1737, 1717, 1718, 1739, 1740, 1719, 1722, 1741, 1723,
     1745, 1746, 1724, 1747, 1725, 1729, 1730, 1731, 1732, 1733,
     1753, 1754, 1734, 1755, 1756, 1757, 1735, 1758, 1736, 1737,

     1759, 1760, 1739, 1740, 1762, 1763, 1741, 1764, 1745, 1746,
     1765, 1747, 1762, 1766, 1767, 1768, 1766, 1769, 1753, 1754,
     1769, 1755, 1756, 1757, 1770, 1758, 1772, 1770, 1759, 1760,
     1777, 1778, 1762, 1763, 1779, 1764, 1781, 1784, 1765, 1787,
     1762, 1766, 1767, 1768, 1766, 1769, 1783, 1788, 1769, 1790,
     1791, 1783, 1770, 1795, 1772, 1770, 1796, 1797, 1777, 1778,
     1783, 1798, 1779, 1799, 1781, 1784, 1795, 1787, 1800, 1802,
     1803, 1804, 1805, 1806, 1783, 1788, 1807, 1790, 1791, 1783,
     1808, 1795, 1810, 1811, 1796, 1797, 1812, 1813, 1783, 1798,
     1814, 1799, 1815, 1816, 1795, 1819, 1800, 1802, 1803, 1804,

     1805, 1806, 1820, 1822, 1807, 1823, 1825, 1826, 1808, 1827,
     1810, 1811, 1828, 1830, 1812, 1813, 1831, 1832, 1814, 1833,
     1815, 1816, 1834, 1819, 1835, 1836, 1837, 1838, 1841, 1845,
     1820, 1822, 1846, 1823, 1825, 1826, 1847, 1827, 1850, 1853,
     1828, 1830, 1854, 1855, 1831, 1832, 1855, 1833, 1861, 1862,
     1834, 1865, 1835, 1836, 1837, 1838, 1841, 1845, 1867, 1870,
     1846, 1871, 1872, 1873, 1847, 1874, 1850, 1853, 1875, 1876,
     1854, 1855, 1877, 1878, 1855, 1879, 1861, 1862, 1881, 1865,
     1882, 1883, 1884, 1888, 1889, 1891, 1867, 1870, 1892, 1871,
     1872, 1873, 1896, 1874, 1900, 1901, 1875, 1876, 1910, 1911,

     1877, 1878, 1912, 1879, 1913,    0, 1881, 1914, 1882, 1883,
     1884, 1888, 1889, 1891, 1915, 1904, 1892, 1904, 1916, 1917,
     1896, 1918, 1900, 1901, 1922, 1923, 1910, 1911, 1924, 1926,
     1912, 1929, 1913, 1904, 1930, 1914, 1931, 1936, 1937, 1939,
     1942, 1944, 1915, 1945, 1946, 1947, 1916, 1917,    0, 1918,
     1950, 1951, 1922, 1923, 1954, 1955, 1924, 1926, 1948, 1929,
     1948, 1904, 1930, 1956, 1931, 1936, 1937, 1939, 1942, 1944,
     1957, 1945, 1946, 1947, 1958, 1960, 1948, 1961, 1950, 1951,
     1962, 1965, 1954, 1955, 1966, 1970, 1971, 1973, 1974, 1978,
     1986, 1956, 1987, 1989, 1990, 1991, 1993, 2544, 1957, 2544,

     1997, 1998, 1958, 1960, 1948, 1961, 1999, 2001, 1962, 1965,
     2002, 2003, 1966, 1970, 1971, 1973, 1974, 1978, 1986, 2004,
     1987, 1989, 1990, 1991, 1993, 1995, 2006, 1995, 1997, 1998,
     2000, 2007, 2000, 2010, 1999, 2001, 2011, 2012, 2002, 2003,
     2008, 2013, 2008, 1995, 2014, 2020, 2021, 2004, 2000, 2015,
     2018, 2015, 2018, 2026, 2006, 2017, 2017, 2017, 2008, 2007,
     2022, 2010, 2022, 2028, 2011, 2012, 2029, 2015, 2018, 2013,
        0, 2030, 2014, 2020, 2021, 2024, 2031, 2024, 2022, 2032,
     2027, 2026, 2027, 2017, 2017, 2017, 2033, 2035, 2036, 2035,
     2036, 2028, 2039, 2024, 2029, 2038, 2040, 2038, 2027, 2030,

     2041, 2043, 2047, 2049, 2031, 2035, 2036, 2032, 2038, 2038,
     2050, 2051, 2053, 2038, 2033, 2055, 2059, 2057, 2062, 2057,
     2039, 2063, 2064, 2058, 2040, 2058, 2065,    0, 2041, 2043,
     2047, 2049, 2070, 2071, 2036, 2057, 2072, 2073, 2050, 2051,
     2053, 2058, 2074, 2055, 2059, 2060, 2062, 2060,    0, 2063,
     2064, 2066, 2081, 2066, 2065, 2068, 2076, 2068, 2076,    0,
     2070, 2071, 2089, 2060, 2072, 2073, 2077, 2090, 2077, 2066,
     2074, 2091, 2092, 2068, 2076, 2078, 2080, 2078, 2080, 2084,
     2081, 2084,    0, 2085, 2077, 2085, 2087, 2088, 2087, 2088,
     2089,    0, 2102, 2078, 2080, 2090, 2093, 2084, 2093, 2091,

     2092, 2085, 2103, 2104, 2087, 2088, 2095, 2097, 2095, 2097,
     2098, 2099, 2098, 2099, 2093, 2105, 2100, 2106, 2100, 2097,
     2102, 2107, 2108, 2109, 2095, 2110, 2111, 2112, 2098, 2099,
     2103, 2104, 2113, 2088, 2100, 2097, 2114, 2097, 2115, 2117,
     2115, 2117, 2119, 2105, 2121, 2106, 2123, 2097, 2124, 2107,
     2108, 2109, 2127, 2110, 2111, 2112, 2115, 2117, 2129, 2125,
     2113, 2125, 2130, 2131, 2114, 2132, 2133, 2134,    0, 2134,
     2119, 2136, 2121, 2136, 2123,    0, 2124, 2125,    0, 2138,
     2127, 2138, 2140,    0, 2140, 2134, 2129, 2152, 2157, 2136,
     2130, 2131,    0, 2132, 2133, 2158, 2142, 2138, 2142, 2143,

     2140, 2143, 2146, 2148, 2146, 2148, 2150, 2150, 2150, 2151,
     2153, 2151, 2153, 2159, 2142, 2152, 2157, 2143, 2165,    0,
     2146, 2148, 2160, 2158, 2160, 2168, 2170, 2151, 2153, 2162,
     2166, 2162, 2166, 2171, 2150, 2150, 2150, 2167, 2172, 2167,
     2160, 2159, 2173, 2174, 2175, 2176, 2165, 2162, 2166, 2177,
     2180, 2181, 2180, 2168, 2170, 2167, 2182, 2183, 2184, 2186,
     2187, 2171, 2187, 2188, 2189, 2191, 2172, 2546, 2180, 2546,
     2173, 2174, 2175, 2176, 2206,    0,    0, 2177, 2187, 2181,
     2196, 2201, 2196, 2201, 2182, 2183, 2184, 2186, 2202, 2210,
     2202, 2188, 2189, 2191, 2203, 2204, 2203, 2204, 2196, 2201,

     2211, 2207, 2206, 2207, 2209, 2212, 2202, 2209, 2215, 2216,
     2220, 2216, 2203, 2204, 2221, 2222, 2218, 2210, 2218, 2207,
     2223, 2226, 2221, 2227, 2221, 2228, 2229, 2216, 2211, 2230,
     2233, 2230, 2209, 2212, 2218, 2209, 2215, 2232, 2220, 2232,
     2234, 2235, 2221, 2222, 2236, 2239, 2240, 2230, 2223, 2226,
     2221, 2227, 2221, 2228, 2229, 2232, 2242, 2237, 2233, 2237,
     2251, 2244, 2246, 2244, 2246, 2241, 2253, 2254, 2234, 2235,
     2241,    0, 2236, 2239, 2240, 2237, 2255, 2256, 2241, 2244,
     2246, 2248, 2257, 2248, 2242, 2258, 2261, 2262, 2251, 2263,
     2264, 2265, 2266, 2241, 2253, 2254, 2268, 2267, 2241, 2248,

     2269, 2270, 2271, 2272, 2255, 2256, 2241, 2267, 2276, 2274,
     2257, 2274, 2278, 2258, 2261, 2262, 2279, 2263, 2264, 2265,
     2266, 2277, 2281, 2277, 2268, 2267, 2283, 2274, 2269, 2270,
     2271, 2272, 2284, 2285, 2290, 2267, 2276, 2291, 2292, 2277,
     2278, 2286, 2294, 2286, 2279, 2293, 2295, 2293, 2298, 2296,
     2281, 2296, 2299, 2297, 2283, 2297, 2300, 2302, 2303, 2286,
     2284, 2285, 2290, 2293, 2304, 2291, 2292, 2296, 2305, 2307,
     2294, 2297, 2309, 2301, 2295, 2301, 2298, 2306, 2311, 2306,
     2299, 2308, 2315, 2308, 2300, 2302, 2303, 2286, 2317, 2318,
     2319, 2301, 2304, 2320, 2324, 2306, 2305, 2307, 2325, 2308,

     2309, 2312, 2314, 2312, 2314, 2316, 2311, 2316, 2326, 2321,
     2315, 2321, 2323, 2323, 2323, 2330, 2317, 2318, 2319, 2312,
     2314, 2320, 2324, 2316, 2335,    0, 2325, 2321, 2327, 2329,
     2327, 2329, 2331, 2336, 2331, 2333, 2326, 2333, 2337, 2341,
     2323, 2323, 2323, 2330,    0,    0, 2327, 2329, 2342, 2343,
     2331, 2316, 2335, 2333, 2338, 2340, 2338, 2340,    0,    0,
     2344, 2336, 2344, 2346, 2350, 2346, 2337, 2341, 2347, 2349,
     2347, 2349, 2338, 2340, 2354, 2358, 2342, 2343, 2344, 2359,
     2352, 2346, 2352, 2355, 2360, 2355, 2347, 2349, 2357, 2357,
     2357, 2361, 2350, 2363,    0, 2363, 2366, 2364, 2352, 2364,

     2367, 2355, 2354, 2358, 2365, 2368, 2365, 2359, 2370, 2376,
     2370, 2363, 2360, 2381, 2382, 2364, 2357, 2357, 2357, 2361,
     2383, 2372, 2365, 2372, 2366, 2379, 2370, 2379, 2367, 2385,
     2392, 2385, 2388, 2368, 2388, 2397, 2390, 2376, 2390, 2372,
     2398, 2381, 2382, 2379, 2394, 2399, 2394, 2385, 2383, 2395,
     2388, 2395, 2400, 2396, 2390, 2396, 2407, 2401, 2392, 2401,
        0, 2408, 2394, 2397, 2403, 2409, 2403, 2395, 2398, 2413,
     2405, 2396, 2405, 2399, 2411, 2401, 2411, 2414, 2415, 2419,
     2400, 2422, 2403, 2422, 2407, 2424, 2431, 2433, 2405, 2408,
     2434,    0, 2411, 2409, 2425, 2439, 2425, 2413, 2427, 2422,

     2427, 2429, 2438, 2429, 2438, 2414, 2415, 2419, 2440, 2442,
     2440, 2444, 2425, 2424, 2431, 2433, 2427, 2445, 2434, 2429,
     2438, 2446, 2443, 2439, 2443, 2447, 2440, 2449, 2453, 2454,
     2455, 2456, 2457, 2459, 2457, 2462, 2460, 2442, 2460, 2444,
     2443, 2465, 2463, 2466, 2463, 2445, 2467, 2469, 2470, 2446,
     2457, 2471,    0, 2447, 2460, 2449, 2453, 2454, 2455, 2456,
     2463, 2459, 2468, 2462, 2468, 2472, 2473, 2475, 2477, 2465,
     2479, 2466, 2480, 2481, 2467, 2469, 2470,    0, 2488, 2471,
     2468, 2482, 2489, 2482, 2484, 2490, 2484, 2486, 2491, 2486,
     2485, 2492, 2485, 2472, 2473, 2475, 2477, 2493, 2479, 2482,

     2480, 2481, 2484, 2485, 2505, 2486, 2488, 2506, 2485, 2495,
     2489, 2495, 2497, 2490, 2497, 2498, 2491, 2498, 2500, 2492,
     2500, 2502, 2502, 2502, 2503, 2493, 2503, 2495, 2507, 2504,
     2497, 2504, 2505, 2498, 2508, 2506, 2500, 2510, 2548, 2510,
     2548, 2514, 2503, 2514, 2523, 2524, 2515, 2504, 2515, 2502,
     2502, 2502, 2516,    0, 2516, 2510, 2507,    0, 2517, 2514,
     2517, 2519, 2508, 2519, 2515, 2521, 2522, 2521, 2522, 2526,
     2516, 2526, 2523, 2524,    0, 2528, 2517, 2528, 2530, 2519,
     2530,    0,    0, 2521, 2522,    0, 2534, 2526, 2534, 2536,
     2538, 2536, 2538, 2528,    0, 2539, 2530, 2539, 2545, 2547,

     2545, 2547,    0, 2549, 2534, 2549,    0, 2536, 2538, 2550,
        0, 2550,    0, 2539,    0,    0, 2545, 2547, 2552, 2552,
     2552, 2552, 2552, 2553, 2553, 2553, 2553, 2553, 2554, 2554,
     2554, 2554, 2554, 2555, 2555, 2555, 2555, 2555, 2556, 2556,
     2556, 2556, 2556, 2557, 2557, 2557, 2557, 2557, 2558, 2558,
     2558, 2558, 2558, 2559, 2559, 2559, 2559, 2559, 2560, 2560,
     2560, 2560, 2560, 2561, 2561, 2561, 2561, 2561, 2562, 2562,
     2562, 2562, 2562, 2563, 2563, 2563, 2563, 2563, 2564, 2564,
     2564, 2564, 2564, 2565, 2565, 2565, 2565, 2565, 2566, 2566,
     2566, 2566, 2566, 2567, 2567, 2567, 2567, 2567, 2568, 2568,

     2568, 2568, 2568, 2569, 2569, 2569, 2569, 2569, 2570, 2570,
     2570, 2570, 2570, 2571, 2571, 2571, 2571, 2571, 2572, 2572,
     2572, 2572, 2572, 2573, 2573, 2573, 2573, 2573, 2574, 2574,
     2574, 2574, 2574, 2575, 2575, 2575, 2575, 2575, 2576, 2576,
     2576, 2576, 2576, 2577, 2577, 2577, 2577, 2577, 2578, 2578,
     2578, 2578, 2578, 2579, 2579, 2579, 2579, 2579, 2580, 2580,
     2580, 2580, 2580, 2581, 2581, 2581, 2581, 2581, 2582, 2582,
     2582, 2582, 2582, 2583, 2583, 2583, 2583, 2583, 2584, 2584,
     2584, 2584, 2584, 2585, 2585, 2585, 2585, 2585, 2586, 2586,
     2586, 2586, 2586, 2587, 2587, 2587, 2587, 2587, 2588, 2588,

     2588, 2588, 2588, 2589, 2589, 2589, 2589, 2589, 2590, 2590,
     2590, 2590, 2590, 2591, 2591, 2591, 2591, 2591, 2592, 2592,
     2592, 2592, 2592, 2593, 2593, 2593, 2593, 2593, 2594, 2594,
     2595, 2595, 2596, 2596, 2597, 2597, 2598, 2598, 2599, 2599,
     2600, 2600, 2601, 2601, 2603, 2603, 2604, 2604, 2605, 2605,
     2606, 2606, 2607, 2607, 2608, 2608, 2609, 2609, 2611, 2611,
     2629, 2629, 2630, 2630, 2631, 2631, 2632, 2632,    0, 2632,
     2632, 2633,    0,    0, 2633, 2633, 2634, 2634, 2635, 2635,
     2636, 2636, 2637, 2637, 2638, 2638, 2639, 2639, 2640, 2640,
     2641, 2641, 2642, 2642, 2644, 2644, 2645, 2645, 2646, 2646,

     2647, 2647, 2648, 2648, 2649, 2649, 2650, 2650, 2652, 2652,
     2670, 2670, 2671, 2671, 2672, 2672, 2673, 2673,    0, 2673,
     2673, 2674,    0,    0, 2674, 2674, 2675, 2675, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551, 2551,

     2551, 2551, 2551
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 23 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}































































































































































#line 4363 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define NSAMPLEOET 115
#define ASOVERA 116
#define NUMTHREADS 117
#define SRCMOM 118
#define SRCMOMX 119
#define SRCMOMY 120
#define SRCMOMZ 121
#define SNKMOM 122
#define SNKMOMX 123
#define SNKMOMY 124
#define SNKMOMZ 125
#define SEQSRCMOM 126
#define SEQSRCMOMX 127
#define SEQSRCMOMY 128
#define SEQSRCMOMZ 129
#define SEQ2SRCMOM 130
#define SEQ2SRCMOMX 131
#define SEQ2SRCMOMY 132
#define SEQ2SRCMOMZ 133
#define CPUPREC 134
#define GPUPREC 135
#define GPUPRECSLOPPY 136
#define INVERTERTYPE 137
#define MMSID 138
#define CHKINVERSION 139
#define LAPHSTIMEPROJTYPE 140
#define LAPHSSPINPROJTYPE 141
#define LAPHSEVECPROJTYPE 142
#define LAPHSEVECNUMBER 143
#define LAPHSRNDVECNUMBER 144
#define LAPHSEVECPATHPRFX 145
#define LAPHSEVECFILEPRFX 146
#define LAPHS_TIME_SRC_NUMBER 147
#define LAPHS_SPIN_SRC_NUMBER 148
#define LAPHS_EVEC_SRC_NUMBER 149
#define LAPHS_PERAMBULATOR_PATH_PREFIX 150
#define LAPHS_PERAMBULATOR_FILE_PREFIX 151
#define COMMENT 152
#define ERROR 153
#define M_M_TWOPT 154
#define MXB_MXB_TWOPT 155
#define FERMION_TYPE 156
#define SOURCECOORDS 157
#define SRCSNKTIMESEP 158
#define COHERENTSOURCENUMBER 159

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, (yy_size_t) max_size, cvc_in)) == 0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 218 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"

#line 4741 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2552 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2551 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 219 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 220 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 221 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 222 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 223 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 224 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 225 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 226 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 227 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 228 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 229 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 230 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 231 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 232 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 233 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 234 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 235 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 236 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 237 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 238 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 239 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 240 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 241 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 242 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 243 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 244 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 245 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 246 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 247 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 248 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 249 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 250 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 251 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 252 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 253 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 254 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 255 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 256 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 257 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCECOORDS);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 258 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 259 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 260 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 261 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 262 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 263 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 264 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 265 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 266 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 267 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 268 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 269 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 270 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 271 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 272 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 273 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 274 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 275 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 276 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 277 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 278 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 279 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 280 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 281 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 282 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 283 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 284 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 285 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 286 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 287 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 288 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 289 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 290 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 291 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 292 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 293 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 294 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 295 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 297 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 298 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 299 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 300 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 302 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 303 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 306 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 307 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 308 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 309 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 310 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 311 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 312 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 313 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 314 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 315 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 316 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 317 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 318 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 319 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 320 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 321 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 322 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 323 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 324 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 325 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 326 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 327 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 328 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 329 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 330 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 331 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 333 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 334 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 336 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 337 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 338 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 340 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 341 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NSAMPLEOET);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 343 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 344 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 345 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 346 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 347 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 348 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 349 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOM);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 350 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 351 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 352 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 353 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 354 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 355 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 356 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 357 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMX);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 358 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMY);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 359 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMZ);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 360 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOM);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 361 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 362 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 363 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 364 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 365 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 366 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 368 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 369 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 370 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 371 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 372 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 373 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 374 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 375 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 376 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 377 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 379 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 380 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 382 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M_M_TWOPT);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 383 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MXB_MXB_TWOPT);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 384 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FERMION_TYPE);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 385 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCSNKTIMESEP);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 387 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHERENTSOURCENUMBER);
	YY_BREAK
/* start namespace inclusion here */
case 158:
YY_RULE_SETUP
#line 391 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 395 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 399 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 403 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 407 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 411 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 415 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 419 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 423 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 427 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 431 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 435 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 439 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 443 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 448 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 453 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 457 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 461 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 465 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 469 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 473 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 477 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 481 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 485 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 489 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 493 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 497 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 501 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 505 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 509 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 514 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 519 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 524 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 528 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 532 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 536 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 540 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 544 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 548 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 552 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 556 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 564 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 582 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 586 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 590 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 594 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 598 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 602 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 606 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 610 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 614 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 618 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 622 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 626 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 630 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 634 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 638 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 642 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 646 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 650 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 654 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 658 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 662 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 666 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 670 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 674 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 678 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 682 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 686 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 690 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 694 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 698 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 702 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 706 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 711 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 715 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 719 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 728 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 732 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 736 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 741 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 750 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 760 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 764 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 768 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 772 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 776 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 780 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 784 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 789 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 795 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 801 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 807 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 813 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 819 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 824 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 828 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 833 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 838 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 843 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 847 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 855 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 860 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 865 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 869 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 879 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 887 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 895 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 903 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 911 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 920 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 929 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 938 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 946 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 951 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 956 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nsample_oet = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of oet samples to %d\n", cvc::g_nsample_oet);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 961 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 965 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 970 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 975 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 980 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 986 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 993 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 998 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1003 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1008 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_sink_momentum_list[cvc::g_sink_momentum_number],
      cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+1, cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+2);
  cvc::g_sink_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sink momentum %s to list; total number is now %d\n", cvc_text, cvc::g_sink_momentum_number);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1015 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1020 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1025 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1031 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1038 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[0]);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1043 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[1]);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1048 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[2]);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1054 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number],
      cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+1, cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+2);
  cvc::g_seq2_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential^2 source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq2_source_momentum_number);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1061 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1071 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1081 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1091 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1095 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1099 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1108 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1113 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1118 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1124 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1129 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1134 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1139 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1144 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1149 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1154 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1160 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1165 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_m_m_2pt_num == MAX_M_M_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many m_m_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting m_m_2pt number %d\n", cvc::g_m_m_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gi),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+2,
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gf),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+2
  );

  cvc::g_m_m_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] m_m_2pt no. %d set to %s\n", cvc::g_m_m_2pt_num, cvc_text);
}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1189 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_source_location_number == MAX_SOURCE_LOCATION_NUMBER ) {
    fprintf(stderr, "[read_input_parser] Error, too many source locations\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting source coords %d\n", cvc::g_source_location_number);
  }

  sscanf(cvc_text, "%d,%d,%d,%d",
    cvc::g_source_coords_list[cvc::g_source_location_number],
    cvc::g_source_coords_list[cvc::g_source_location_number]+1,
    cvc::g_source_coords_list[cvc::g_source_location_number]+2,
    cvc::g_source_coords_list[cvc::g_source_location_number]+3);

  cvc::g_source_location_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] source coords no. %d set to %s\n", cvc::g_source_location_number, cvc_text);
}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1208 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_mxb_mxb_2pt_num == MAX_MXB_MXB_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many mxb_mxb_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting mxb_mxb_2pt number %d\n", cvc::g_mxb_mxb_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+2
  );

  cvc::g_mxb_mxb_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] mxb_mxb_2pt no. %d set to %s\n", cvc::g_mxb_mxb_2pt_num, cvc_text);
}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1240 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "TwistedMass")==0) {
    cvc::g_fermion_type = _TM_FERMION;
  } else if (strcmp(cvc_text, "Wilson")==0 ) {
    cvc::g_fermion_type = _WILSON_FERMION;
  } else if (strcmp(cvc_text, "DomainWall")==0 ) {
    cvc::g_fermion_type = _DW_WILSON_FERMION;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] fermion type set to %d\n", cvc::g_fermion_type);
}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1251 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_src_snk_time_separation = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_src_snk_time_separation = %s\n", cvc_text);
}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1256 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] coherent source number set to =%d\n", cvc::g_coherent_source_number);
}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1262 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 1266 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1270 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 1274 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 1279 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 1282 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 321:
YY_RULE_SETUP
#line 1289 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 7083 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(NSAMPLEOET):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOM):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(SEQ2SRCMOM):
case YY_STATE_EOF(SEQ2SRCMOMX):
case YY_STATE_EOF(SEQ2SRCMOMY):
case YY_STATE_EOF(SEQ2SRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
case YY_STATE_EOF(M_M_TWOPT):
case YY_STATE_EOF(MXB_MXB_TWOPT):
case YY_STATE_EOF(FERMION_TYPE):
case YY_STATE_EOF(SOURCECOORDS):
case YY_STATE_EOF(SRCSNKTIMESEP):
case YY_STATE_EOF(COHERENTSOURCENUMBER):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2552 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2552 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2551);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1288 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

