
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 317
#define YY_END_OF_BUFFER 318
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2528] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  313,  313,  316,  316,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  318,  315,  315,  314,
      312,  311,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  156,  159,  160,  161,  157,  158,  172,  315,
      162,  315,  315,  163,  315,  315,  165,  315,  315,  166,
      315,  315,  167,  315,  315,  164,  315,  315,  168,  315,
      315,  169,  315,  315,  170,  315,  177,  178,  180,  181,
      182,  315,  171,  194,  315,  173,  315,  315,  174,  315,
      315,  175,  315,  315,  176,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  191,  192,  193,  195,  196,  315,
      315,  198,  315,  200,  179,  201,  202,  203,  206,  207,
      208,  209,  315,  204,  315,  315,  205,  315,  315,  210,
      315,  315,  211,  315,  212,  213,  315,  214,  315,  315,
      215,  315,  315,  216,  315,  315,  217,  315,  315,  218,
      315,  315,  219,  315,  315,  220,  315,  315,  221,  315,
      315,  222,  315,  315,  223,  315,  224,  225,  227,  226,
      315,  228,  315,  315,  315,  230,  315,  231,  315,  232,
      315,  233,  315,  234,  315,  235,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  315,  315,  315,  315,  315,

      250,  251,  252,  315,  199,  315,  253,  254,  255,  256,
      315,  315,  258,  260,  268,  269,  261,  262,  263,  264,
      265,  266,  267,  270,  315,  271,  315,  272,  315,  315,
      315,  273,  315,  274,  315,  275,  315,  315,  315,  277,
      315,  278,  315,  279,  315,  315,  315,  281,  315,  282,
      315,  283,  315,  315,  315,  285,  315,  286,  315,  287,
      289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
      299,  315,  315,  302,  303,  304,  315,  313,  313,  312,
      311,  315,  315,  312,  311,  315,  315,  315,  315,  310,
        0,  312,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    0,  156,  159,  160,  161,  157,  158,  172,
      162,    0,  162,    0,  163,    0,  163,    0,  165,    0,
      165,    0,  166,    0,  166,    0,  167,    0,  167,    0,
      164,    0,  164,    0,  168,    0,  168,    0,  169,    0,
      169,    0,  170,    0,  170,    0,  177,  178,  180,  181,

      182,  171,    0,  194,  173,    0,  173,    0,  174,    0,
      174,    0,  175,    0,  175,    0,  176,    0,  176,    0,
      183,  184,  185,  186,  187,  188,  189,  190,  191,  192,
      193,  195,  196,  197,  198,    0,  198,    0,  200,  179,
      201,  202,  203,  206,  207,  208,  209,  204,    0,  204,
        0,  205,    0,  205,    0,  210,    0,  210,    0,  211,
        0,  211,    0,  212,  213,  214,    0,  214,    0,  215,
        0,  215,    0,  216,    0,  216,    0,  217,    0,  217,
        0,  218,    0,  218,    0,  219,    0,  219,    0,  220,
        0,  220,    0,  221,    0,  221,    0,  222,    0,  222,

        0,  223,    0,  223,    0,  224,  225,  227,  226,  228,
        0,  228,    0,  229,  230,    0,  230,    0,  231,  232,
        0,  233,    0,  234,    0,  235,    0,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  199,    0,  199,    0,  253,  254,
      255,  256,  257,  259,  258,  260,  268,  269,  261,  262,
      263,  264,  265,  266,  267,  270,  271,    0,  271,    0,
      272,    0,    0,    0,  273,    0,  274,    0,  275,    0,
        0,    0,    0,  277,    0,  278,    0,  279,    0,    0,
        0,    0,  281,    0,  282,    0,  283,    0,    0,    0,

        0,  285,    0,  286,    0,  287,    0,  289,  290,  291,
      292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  304,  305,  313,  313,  312,  316,  316,  312,
      306,  308,  309,  307,  310,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    3,    2,    0,    0,
        0,    4,    0,    5,    0,    6,    0,   12,    0,   11,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,    0,  162,    0,  163,    0,
      165,    0,  166,    0,  167,    0,  164,    0,  168,    0,
      169,    0,  170,    0,  173,    0,  174,    0,  175,    0,
      176,    0,  198,    0,  204,    0,  205,    0,  210,    0,
      211,    0,  214,    0,  215,    0,  216,    0,  217,    0,
      218,    0,  219,    0,  220,    0,  221,    0,  222,    0,
      223,    0,  228,    0,  230,    0,  199,    0,  271,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    4,    5,    6,   12,   11,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   59,    0,   58,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,   56,    0,    0,    0,    0,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  276,    0,
      280,    0,  284,    0,  288,    0,    0,   59,   58,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,    0,    0,    0,   62,    0,   10,    0,
        0,    0,    0,    0,   15,    0,    0,   70,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   22,    0,    0,
       71,    0,   74,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,   56,    0,    0,    0,   40,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,    0,    0,   23,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  138,   10,    0,    0,    0,
        0,   15,    0,   70,    0,    0,    0,    0,    0,    0,
        0,    0,   22,    0,   71,   74,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  138,
        0,    9,    0,    8,    0,    0,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,

        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,   25,    0,   26,    0,
       27,    0,    0,    0,    0,    0,   52,    0,   53,    0,
       54,    0,   55,    0,    0,    0,    0,    0,    0,   63,
        0,   64,    0,   65,    0,   66,    0,    0,   20,   19,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    8,    0,  152,
        0,    0,    0,    0,    0,    0,   87,    0,   88,    0,
       89,    0,   90,    0,    0,   72,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,    0,   73,    0,   75,    0,  116,   24,   25,
       26,   27,    0,    0,    0,    0,   50,   52,   53,   54,
       55,    0,    0,   61,    0,   60,    0,    0,   63,   64,
       65,   66,    0,   20,    0,    0,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   45,    0,    0,    0,    0,   87,
       88,   89,   90,    0,   72,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   18,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
       73,   75,  116,    0,    0,    0,   50,    0,   51,   61,
       60,    0,    0,    0,    0,    0,    0,    0,    0,   49,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   45,    0,   41,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
      153,   41,    0,    0,    0,    0,  117,    0,    0,   35,
        0,    0,    0,    0,    0,   69,    0,   68,    0,    0,
        0,  109,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,   21,    0,    0,    0,   98,    0,
        0,    0,    0,    0,   76,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   91,    0,  153,    0,    0,    0,
      117,    0,   35,    0,    0,    0,    0,    0,   67,   69,
       68,    0,    0,  109,    0,    0,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,    0,  108,    0,
        0,    0,  134,  154,    0,    0,   21,    0,    0,   98,
        0,  135,    0,    0,   48,    0,   47,    0,  137,   76,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,   67,
        0,    0,    0,  103,    0,    0,    0,    0,    0,    0,

      122,    0,    0,   93,    0,    0,    0,   46,    0,   39,
        0,    0,    0,    0,    0,    0,    0,    0,  108,    0,
        0,  134,    0,    0,    0,    0,  135,    0,   48,   47,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,    0,   34,    0,    0,    0,    0,
        0,    0,    0,   44,    0,    0,    0,    0,    0,  122,
        0,    0,    0,   93,    0,    0,   46,   39,    0,    0,
      104,    0,    0,    0,    0,    0,    0,    0,  139,    0,
       99,    0,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       84,    0,   85,    0,   34,    0,    0,    0,    0,    0,
      111,    0,   44,    0,    0,    0,    0,    0,    0,  123,
        0,  124,    0,  125,    0,   94,    0,    0,   83,  104,
        0,   38,    0,  118,    0,    0,    0,    0,    0,  139,
       99,    0,    0,    0,   29,    0,   30,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   84,   85,    0,    0,    0,    0,    0,  111,    0,
        0,    0,    0,    0,    0,  123,  124,  125,   94,    0,
       43,   83,   38,  118,    0,    0,    0,    0,   77,    0,
        0,  110,    0,    0,    0,   29,   30,    0,    0,  102,

        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   86,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,   43,    0,  119,    0,  120,
        0,  121,   77,    0,  110,    0,    0,    0,    0,    0,
      102,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   86,    0,  105,    0,    0,    0,
        0,   95,    0,    0,    0,    0,    0,    0,  119,  120,
      121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,    0,    0,   96,    0,    0,    0,    0,    0,    0,

        0,    0,  129,    0,    0,    0,    0,    0,  100,    0,
        0,   33,    0,  136,    0,    0,    0,    0,  142,    0,
        0,    0,    0,    0,  141,    0,    0,  140,    0,    0,
       96,    0,  107,    0,    0,  133,    0,    0,    0,    0,
        0,  129,    0,    0,    0,    0,    0,    0,  100,    0,
      101,   33,  136,    0,    0,    0,  142,    0,  149,    0,
        0,    0,  141,    0,  148,  140,    0,  147,    0,  107,
        0,  133,    0,    0,    0,    0,    0,    0,    0,    0,
      126,    0,  127,    0,  128,    0,    0,    0,  101,    0,
        0,    0,  149,    0,    0,    0,  148,  147,    0,  106,

        0,    0,  130,    0,  131,    0,  132,    0,    0,    0,
        0,  126,  127,  128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  106,    0,  130,  131,  132,    0,    0,
        0,    0,    0,  155,    0,    0,  113,    0,    0,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
        0,  113,    0,  143,    0,    0,    0,    0,  144,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
        0,  112,    0,    0,   31,    0,   82,    0,    0,    0,
        0,    0,    0,    0,  112,    0,   32,   31,   82,    0,
        0,    0,    0,   78,    0,  114,    0,    0,    0,    0,

       32,    0,   79,    0,   80,    0,   81,   78,  114,    0,
      146,    0,  145,    0,    0,   79,   80,   81,  146,  145,
        0,  151,    0,  150,  151,  150,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    7,
        7,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,    1,    7,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   47,   47,   47,   48,   47,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[2652] =
    {   0,
        0,    6,   79,   97,  115,  133,  151,  169,  187,  205,
      223,  241,  259,  277,  295,  313,  331,  349,  367,  385,
      403,  421,  439,  457,  475,  493,  511,  529,  547,  565,
      583,  601,  619,  637,  655,  673,  691,  709,  727,  745,
      763,  781,  799,  817,  835,  853,  871,  889,  907,  925,
      943,  961,  979,  997, 1015, 1033, 1052, 1061, 1076, 1085,
     1108, 1118, 1133, 1142, 1165, 1175, 1190, 1199, 1222, 1232,
     1247, 1256, 1268, 1293, 1311, 1329, 1347, 1365, 1383, 1401,
     1420, 1467, 1435, 1444, 1513, 1531, 1482, 1549, 1567, 1585,
     1603, 1621, 1639, 1657, 1675, 1693, 1711, 1729, 1747, 1765,

     1783, 1801, 1819, 1837, 1855, 1873, 1891, 1909, 1927, 1945,
     1963, 1981, 1999, 2017, 2035, 2053, 2071, 2089, 2107, 2125,
     2143, 2161, 2179, 2197, 2215, 2233, 2251, 2269, 2287, 2305,
     2323, 2341, 2359, 2377, 2395, 2413, 2431, 2449, 2467, 2485,
     2503, 2521, 2539, 2557, 2575, 2593, 2612, 2621, 2667, 2685,
     2631, 2703, 2721, 2739, 2757, 2775, 2793, 2811, 2829, 2847,
     2865, 2883, 2901, 2919, 2937, 2955, 2973, 2991, 3009, 3027,
     3045, 3063, 3081, 3099, 3117, 3135, 3153, 3171, 3190, 3199,
     3214, 3223, 3246, 3256, 3271, 3280, 3303, 3313, 3322, 3340,
     3359, 3377, 3395, 3413, 3431, 3449, 3467, 3485, 3503, 3521,

     3539, 3557, 3576, 3623, 3591, 3600, 3669, 3687, 3706, 3753,
     3800, 3847, 3638, 3717, 3894, 3941, 3988, 4035, 4082, 4129,
     4176, 4223, 4270, 4317, 4364, 4411, 4458, 4505, 3764, 3811,
     4551, 4569, 3858, 3905, 4587, 4605, 4623, 4641, 4659, 4677,
     4695, 4713, 4731, 4749, 4767, 4785, 4803, 4821, 4839, 4857,
     4875, 4893, 4911, 4929, 4947, 4965, 4983, 5001, 5019, 5037,
     5055, 5073, 5091, 5109, 5127, 5145, 5164, 5211, 5258, 5305,
     5352, 5399, 5446, 5493, 3952, 3999, 5540, 5587, 5634, 5681,
     5728, 5775, 5822, 5869, 4046, 4093, 4140, 4187, 4238, 4247,
     4294, 4341, 4376, 4422, 4469, 4516, 5175, 5222, 5273, 5282,

       84,  102,  120,  138,  156,  174, 5915, 1507, 2647, 5930,
     5329, 5376, 3732, 5945, 3779, 5411, 1489,12608,  190,12608,
    12608,12608, 3607, 1015, 5404, 1022, 1038, 5940, 1054, 1040,
     1067, 1109, 6007, 5954, 6059, 1090, 1166, 1105, 5453, 6108,
       87, 1109, 1443, 1489, 3599, 3645, 3818, 3825, 3865, 3874,
     4523, 3914, 3961, 5466, 4008, 4055, 5508, 4102, 4149, 5549,
     4196, 4246, 5595, 4293, 4340, 5608, 4385, 4431, 5649, 4478,
     5184, 5690, 5231, 5281, 5736, 5328, 3921, 3968, 4015, 4062,
     4109, 4156, 5562, 4203, 5375, 5749, 5703, 5790, 5830, 5799,
     5843, 5885, 5877, 6018, 6030, 6046,    0,    0,    0,    0,

        0,    0,    0,    0, 4317, 4438, 4485, 5191,    0,    0,
     6058, 6137, 6165, 5238, 5352, 5540, 5681, 5822, 6178, 6185,
     6192, 6199, 6208, 6215, 6228, 6237, 6244, 6259, 6268, 6275,
     6288, 6297, 6304, 6319, 6326, 6333, 6345, 6352, 6365, 6374,
     6381, 6396, 6405, 6412, 6425, 6434, 6441, 6456, 6465, 6472,
     6485, 6494, 6501, 6516, 6525, 6532, 6545, 6554, 6561, 6576,
     6585, 6592, 6605, 6614, 6621, 6636, 6643, 6650, 6662, 6669,
     6678, 6685, 6698,    0, 6707, 6714, 6729, 6736, 6743, 6755,
     6762, 6774, 6781, 6793, 6800, 6812, 6819, 6826, 6833, 6840,
     6847, 6854, 6861, 6868, 6875,    0,    0,    0,    0,    0,

     6882, 6889, 6896, 6905, 6912, 6925, 6932, 6939, 6953,    0,
        0, 6960, 6967,    0,    0, 6974,    0,    0,    0,    0,
        0,    0,    0, 6981, 6990, 6997, 7010, 7017, 7024, 7038,
     7045, 7057, 7064, 7076, 7083, 7095, 7102, 7114, 7121, 7133,
     7140, 7152, 7159, 7171, 7178, 7190, 7197, 7209, 7216, 7228,
     7235, 7247, 7254, 7266, 7273, 7285, 7292, 7304, 7311, 7323,
        0,    0,    0,    0, 7330,    0,    0,    0,    0, 7337,
     7344,    0,    0, 7351, 7358, 7365,    0,    0,  193,    0,
        0,    0,  208,    0,    0, 7380, 7395,    0, 7410, 7417,
      211,12608, 1124, 1432, 1159, 1169, 1191, 1189, 1206, 1218,

     1233, 1242, 1249, 1252, 1259, 1254, 1406, 1252, 1365, 1410,
     1423, 1430,  123,  159,  226, 1445, 1460,  229,  230,  244,
      249,  264, 1451, 1464, 7435, 1488, 1479, 2563, 2599, 2616,
     3147, 5391, 3160, 3150, 5956, 3172, 3173, 3179, 3207, 5950,
     5412, 3212, 3228, 3236, 5594, 3237, 3260, 5728, 3278, 3280,
      283,  284, 3533, 7427, 7434, 7447, 7454, 7462, 7475, 7482,
     7490, 7503, 7510, 7523, 7531, 7551, 7558, 7572, 7579, 7599,
     7606, 7620, 7627, 7647, 7654, 7668, 7675, 7695, 7702, 7716,
     7723, 7743, 7750, 7764, 7771, 7791, 7798, 7812, 7819, 7839,
     7846, 7860, 7867, 7887, 7894, 7908, 7915, 7922, 7935, 7942,

     7949, 7961, 7968, 7975, 7982, 7995, 8002, 8015, 8023, 8043,
     8050, 8064, 8071, 8091, 8098, 8112, 8119, 8139, 8146, 8160,
        0,    0,    0,    0,    0,    0,    0,    0, 8167, 8174,
     8187, 8194,    0,    0, 8201, 8214, 8221, 8234, 8242, 8249,
     8262, 8269, 8276, 8283, 8290, 8297, 8304, 8311, 8324, 8331,
     8344, 8352, 8372, 8379, 8393, 8400, 8420, 8427, 8441, 8448,
     8468, 8475, 8489, 8496, 8503, 8516, 8529, 8536, 8549, 8557,
     8577, 8584, 8598, 8605, 8625, 8632, 8646, 8653, 8673, 8680,
     8694, 8701, 8721, 8728, 8742, 8749, 8769, 8776, 8790, 8797,
     8817, 8824, 8838, 8845, 8865, 8872, 8886, 8893, 8913, 8920,

     8934, 8941, 8961, 8968, 8982, 8989, 8996, 9009, 9016, 9023,
     9036, 9043, 9056,    0, 9064, 9084, 9091, 9105, 9112, 9124,
     9132, 9144, 9151, 9163, 9170, 9182, 9189, 9196, 9203, 9210,
     9217, 9224, 9231, 9238, 9245, 9252,    0,    0,    0,    0,
        0, 9259, 9266, 9273, 9280, 9293, 9300, 9313, 9321, 9328,
     9341,    0,    0, 9348, 9355,    0,    0, 9362,    0,    0,
        0,    0,    0,    0,    0, 9369, 9376, 9389, 9396, 9409,
     9417, 9429, 9437, 9449, 9461, 9468, 9480, 9487, 9499, 9506,
     9518, 9525, 9537, 9549, 9556, 9568, 9575, 9587, 9594, 9606,
     9613, 9625, 9637, 9644, 9656, 9663, 9675, 9682, 9694, 9701,

     9713, 9725, 9732, 9744, 9751, 9763, 9770,    0,    0,    0,
        0, 9777,    0,    0,    0,    0, 9784, 9791,    0,    0,
     9798, 9805, 9812,    0,    0,  298,    0,    0,  316,    0,
     9827, 9842,    0, 9857, 9864, 3563, 3587, 5402, 3603, 3625,
     3641, 1401,  303, 1385, 3643, 3677, 3691, 3718, 3711, 3752,
     3764, 1365, 1364, 4183, 4202,  334,  354,  370, 4259, 4267,
      388,  408,  424,  444,  460,  480,  496,  516,  532,  552,
     1347, 4342,  568,  588, 4360, 4381, 4492, 1346, 1342, 4489,
     4503, 4512, 4511, 6053, 5116, 5118, 5121, 5207, 5231, 1329,
     5286, 5278, 5395, 5463, 5462, 5456, 5467, 5484, 5480, 5469,

     5467, 5539, 1325, 5579, 5568, 5605, 5953, 5599, 5628, 5608,
     5613, 1310, 5612,  604, 5673, 9871, 9878, 9885, 9892, 9899,
     9906, 9913, 9920, 9927, 9934, 9941, 9948, 9955, 9962, 9969,
     9976, 9983, 9990, 9997,10004,10011,10018,10025,10032,10039,
    10046,10053,10060,10067,10074,10081,10088,10095,10102,10109,
    10116,10123,10130,10137,10144,10151,10158,10165,10172,10179,
    10186,10193,10200,10207,10214,10221,10228,10235,10242,10249,
    10256,10263,10270,10277,10284,10291,10298,10305,10312,10319,
    10331,10338,10350,10357,10369,10376,10388, 5721, 5702,  622,
      642, 5718, 5740, 5753, 5756,  661,  662, 6065, 5767, 5863,

     5856, 5852, 5866, 5909, 5928, 5952, 5922, 5940, 5958,  676,
     5951, 5959,  680,  681,  694,  697,  698, 5967,  712,  715,
     5975, 5998, 6011, 6006, 1339, 6014, 6046, 6060, 6065, 6049,
     6066, 6056, 6061, 6064, 6066, 6070, 6086, 6095, 6113, 6104,
     6119, 6115, 1293, 6137, 6106, 1275, 6126, 6126,  716,  733,
     6134, 6196, 6205,  748, 1274, 6213, 6228, 1195, 6258, 6273,
     6302, 6288, 6335, 6349,10400,10412,10424,10436, 1173, 6350,
      752,  753,  769,  784, 6372, 1172, 6408, 6397,  788, 6430,
     6464, 6474, 6498, 6515, 6520, 6563, 6573, 6594, 7552, 6617,
    10410, 6606, 6666,10454, 1165, 1116, 6683,  789,  802,  806,

     6668, 6899, 6889, 6898,  820, 1115,  840, 1109, 6895, 6990,
     7350, 7419, 7421, 7423, 7448,  860, 7502,  874,  877, 7497,
     7519, 7563, 7574, 7592, 7610, 7638, 7673, 7672,  894,  823,
      928,  897, 7693, 7718, 7720,  948,  982, 7731, 7757, 7758,
     7785, 7814, 7803, 7841, 7853, 7868, 1108,10451,10465,10472,
    10490,10497,10509,10516,10528,10527, 7876, 1000, 1018, 7919,
     7916, 7988, 7999, 8016, 8007, 8046, 1059, 1093, 8057, 8060,
     1150, 8074, 8110, 8117, 8140, 8153, 8158, 8216, 8219, 8220,
     1207, 1038, 8321,10514,10517, 1332, 1096, 1335, 1264, 8332,
     8351, 8352, 8359, 1336, 1276, 8387, 1355, 1296, 8382, 8409,

     8440, 8449, 8472, 8533, 8535, 8554, 1368, 1300, 8541, 1372,
     1389, 1552, 1406, 8582, 8600, 8589, 8631, 8638, 8637, 8662,
    10526, 8689, 1555, 1407, 1556, 8691, 1058, 8709, 1572, 8734,
     8731, 8755, 8782, 8795, 1023, 8866, 8813, 8842, 8904, 8856,
     8868, 1009,10518, 8927, 8923, 8965, 8985,10525, 8989,10528,
     1575, 1588,  979, 9038, 1592, 1606, 1614, 9033,10598, 9055,
     9057,  976, 9297, 9297, 9286, 1609, 9440,10531, 9505, 9528,
     9582, 9608, 9671, 9692, 1642, 1645, 1646, 1662, 1663,  961,
     1682, 1683, 9814, 1696,10336,10412,10431,10458,10454,10501,
    10520,10536, 1699,10570, 1714, 1717,10567,  958,10579,10565,

    10568,  943,10572,10571,10568,10585, 1718, 1732,10586,10587,
     1735,10573,10586,10578,10584,  940,10583,10596,10626,  925,
    10582,10588,10616,10603,10593,10631, 1750, 1754, 1755, 1786,
    10618,  922,10632,10637, 1789, 1790, 1809, 1822,10622,10631,
    10640, 1826,10627,  918, 1842, 1858, 1878, 1912, 1932,10643,
     1966, 1986, 1843,10631,10639,10649,10639,10645,10637,  907,
    10653,10651,10657,10646,10651,10668,10672,10684,10683, 2005,
     2006, 2020, 2023, 2038,  922, 2042, 2043,10665,10675,  886,
      871,10687, 2056, 2076, 2110, 2130,10694, 2164,10680,10691,
    10683,10686,10687,10685,10681,10685,  868, 2059,10690,10686,

     2184, 2218,10689,10707,10706,10705,10699,10694,10759,10699,
    10719,10707,10718,10729,10738,10725, 2236,10735,10734,10731,
     2256, 2290, 2310, 2344, 2364, 2380, 2400, 2416, 2436, 2437,
     2452,10748,10736,10737, 2456, 2457, 2470, 2488, 2491, 2492,
     2509, 2524, 2527,10738, 2528, 2545,10733,10744, 2560, 2564,
     2580, 2565, 2638, 2634, 2670, 2651,10748, 2690, 2709, 2710,
    10744,10760,10761,10752,10749,10815,10750,10759,10771,10774,
    10781,10785,10786,10796,10802,10805, 2724, 2728,10791, 2742,
     2746,10803,10796,10798,10807, 2760, 2780, 2796, 2800, 2816,
     2836, 2850, 2854,10809, 2870, 2871,10796,10807,10800,10800,

    10821,10819,10816,10820,10820,10824,10813, 2889,10824,10820,
    10828,10824,10830,10843,10852, 2890, 2904, 2907,10840,10847,
    10850,10860,10862,10854,10855,10853,10861, 2924, 2925,10855,
    10851,10856, 2943, 2944, 2958, 2962, 2963, 2978, 2994, 2997,
     2998, 3012,10857,10861,10868, 3015, 3016, 3030, 3034, 3035,
     3048, 3051, 3052, 3066, 3071, 3084,10862,10861, 3088, 3102,
     3105, 3106,10879, 3120,10876,  864,  852,10878,10874, 3123,
     3124,10873,10863,10887,10880,  835,10888,10897,  834,  817,
    10901,10897,10898, 3138, 3142, 3143,10918,10919,  810, 3158,
     3176, 3231, 3234,10902, 3288,10918,10900,  799,10908,10902,

    10913,10921,10916,10926,10927,10920,10931,10930,  798,  781,
    10916,10934,10933,10936, 3347, 3330, 3343,10922,10926,10932,
    10941,10956,10963,10964,10966,10961, 3362,10974,10971,10974,
     3366, 3367, 3380,10960,10959,10966, 3383, 3384, 3398, 3401,
     3416,10977,10978,10971,10970,10981,10974,10984,10975, 3419,
    10991,10975,10984,10972,10979,10999,10993,11008,11014, 3420,
    11008, 3434, 3454, 3470, 3473,11006,11012,11019, 3474,11029,
     3491,11035,11018, 3506, 3510,11037,11019, 3511,11028,11038,
      780,  763,11038,11032,11025,11046,11047,11040, 3542,11045,
    11050,11055,11059,11049,11066,11062, 3545,11078,11079,11073,

    11083,11080,11073,11078, 3546, 3866,11087,11089, 4543,11080,
    11075, 4590,11084,11075,11086,11096, 4594,11097,11085,11086,
    11084,11084,11089,11092,11094,11095, 4626, 3562,11114, 4630,
     3565, 3676,11106,11117,11136, 4662, 3736,11130, 4666, 3772,
    11139,11142,11129, 4698, 4702, 3783, 4734, 3819,11125,11139,
     4738, 3861,11129, 4770,11129,11138,11143,11139,11140,11143,
    11145,11140,11140,11144,11142,  759,11157,11154,11146,11156,
     4774, 3908,  727,11168,11154, 4806,11166,11189, 4810, 4842,
     3911,11184,  726, 4846, 3955,11177,11185, 4878, 3958,11217,
     4882, 4914, 4918, 4950, 4002,11197,11188,11201,11193,11201,

    11192,11205,11195,11208, 4005, 4954, 4049,11207,11208,11195,
     4052,11191, 4096,  722,11203,11199,11214, 4986, 4099, 4143,
     4146,11207,11223, 4190,11224, 4990, 4193,11216,11214,11218,
    11216,11235,11267, 5022,11249,11247, 5026, 5058,11250,11241,
    11246,11241,11254, 4282,11245,11246,11259, 5062, 4287,11255,
    11265, 5094, 4336, 4358,11247,11256, 4381,11260,11272, 4406,
     5098, 4425,11256, 5130, 4428, 5418, 4472, 5651, 4475, 4522,
    11257,11268,  691,11278,11277,11271,  690,11273,  686, 5848,
     4556,11266,11267,11274, 5862,11284,11297,11303,11312, 5134,
    11298,11305, 5903, 5225,11301,11306,11315,11304,11318, 5907,

     5228,11300,11349, 5317,11323,11313,11357, 5322,11376, 5371,
    11330,11377,11321,11323,11334,11337,11351,11366, 5393,11387,
    11390, 5470,11396,11355,11374,11374, 5473,11369, 5526, 5527,
     5530,11367,  673,11369,11364,11365,  655,11372,  619,11374,
     5567,11415,11420,11384,11424, 5580,11368,11397,11380,11396,
    11441,  612,11445, 5581,11416,11417,11416,11428,11418, 5601,
    11452,11453,11456, 5613,11462,11425, 5614, 5668,11473,11479,
     5671,11482,11486,11438,11432,11431,11453,11490, 5708,11496,
     5721,11479,11503,11507,11510, 5722,11464,11464,11470,11480,
    11480,11479,11479,11486,11487,11484,11484,11486,11487,11531,

     5754,11535, 5755,11499, 5792,11504,  601,11512,11503,11555,
     5796,11508, 5849,11521,11524,11539,11536,11522,11561, 5861,
    11572, 5904,11575, 6669,11576, 6762,11580,11581, 6781, 6800,
    11589, 6819,11595, 7016,11558,11603,11573,11604,  583, 7064,
     7083,11577,11585,11609, 7102,11614, 7140, 7159,11586,11615,
    11623,11578,  580,11575,11588,11590,11595,11591,11604,11594,
    11608, 7178, 7216,11642,11620,11625,11615,11622, 7235,11614,
    11651,11614,11624,  565,11617, 7254, 7292, 7311, 7330,11664,
     7399, 7508, 7550, 7551,11668,11672,11679,11685, 7555,11625,
    11691, 7601,11658,11651,11664, 7646, 7647,11669,11699, 7651,

    11700, 7694,11664,11680,11671,11686,  562,  547,11673,11688,
    11676,11691,11713, 7697,11719,11706,11695,11695,11696,11741,
     7742,11691,11721,11722,11714, 7745,11746, 7749,11749, 7790,
    11761, 7793, 7797,11731, 7838,11718,11729,11742,11728,11726,
     7841, 7845,11726,11743,11732,11755,11753,11754,11757,11751,
    11761,11762,11763,11764, 7886,11806, 7889,11752,11816,11760,
    11761, 7893,11769,  529,11782,11770,11780,11825, 8000, 8001,
     8042,11772,11788,11783,11830,11807,11837,11840,11803,11805,
    11803,11844,11809,11820,11832,11813,11863,11820,11868,11821,
     8045,11832,11872, 8049,11876,11841,11889,11833,11846,11861,

    11852,11896, 8090,11857,11865,11859,11861,11904, 8093,11913,
    11916, 8097,11924, 8138,11879,11888,11883,11938, 8141,11939,
    11887,11881,11892,11944, 8145,11948,11952, 8268,11953,11895,
     8329,11959, 8330,11933,11963, 8371,11925,11928,11941,11954,
    11951, 8374,11976,11980,11985,11946,11964,11963, 8378,11988,
     8419, 8422, 8426,  526,11966,  511, 8467,11991, 8470,11976,
    11978,11985, 8474,12008, 8522, 8523,12013, 8534,12016, 8535,
    11995, 8576,12019,12020,12023,12001,12009,11991,11993,12043,
     8579,12044, 8583,12047, 8624,12003,12011,12016, 8627,12006,
    12012,12016, 8631,  493,  490,12028, 8672, 8675,12053, 8679,

    12016,12070, 8720,12073, 8723,12081, 8727,12035,  475,12039,
    12039, 8768, 8771, 8775,12084,12058,12090,12049,12093,12053,
    12062,12064,12064, 8816,12068, 8819, 8823, 8864,12076,12077,
    12073,12080,12112, 8865,12071,12118, 8869,12087,12121, 8913,
    12092,12080,12083,12140,12086,12083,12105,12101,12120, 8917,
    12112, 8960,12122, 8963,12124,12126,12128,12152, 9083,12157,
    12165,12162,  457,12133,12124,12136,12139,12144,12147, 9086,
    12185, 9090,12190,12193, 9131,12198, 9151,12162,12207,12210,
    12144,12147,12174,12175, 9170,12213, 9189, 9298, 9299,12218,
    12219,12222,12239, 9347,12242, 9394,12243,12246,12181,12184,

     9395,12247, 9414,12250, 9456,12253, 9468, 9506, 9544,12256,
     9594,12267, 9632,12270,12273, 9682, 9720, 9770, 9846,10419,
    12276,10443,12277,10455,10458,10492,12608,12297,12302,12307,
    12312,12317,12322,12327,12332,12337,12342,12347,12352,12357,
    12362,12367,12372,12377,12382,12387,12392,12397,12402,12407,
    12412,12417,12422,12427,12432,12437,12442,12447,12452,12457,
    12462,12467,12472,12477,12482,12487,12492,12497,12502,12504,
    12506,12508,12510,12512,12514,12516,12518,  497,12520,12522,
    12524,12526,12528,12530,12532,  482,12534,  464,  461,  446,
      428,  425,  410,  392,  389,  374,  371,  356,  338,  335,

      320,  319,  316,  301,12536,12538,12540,12545,12550,12552,
    12554,12556,12558,12560,12562,12564,12566,12568,  284,12570,
    12572,12574,12576,12578,12580,12582,  277,12584,  266,  265,
      262,  247,  230,  211,  193,  176,  169,  151,  140,  133,
      115,  104,   97,   79,    0,12586,12588,12590,12595,12600,
    12602
    } ;

static yyconst flex_int16_t yy_def[2652] =
    {   0,
     2528, 2527, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2529, 2529, 2530, 2530,
     2531, 2531, 2532, 2532, 2533, 2533, 2534, 2534, 2535, 2535,
     2536, 2536, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2537, 2537, 2538, 2538, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,

     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2539, 2539, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2540, 2540,
     2541, 2541, 2542, 2542, 2543, 2543, 2544, 2544, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,

     2528, 2528, 2545, 2545, 2546, 2546, 2528, 2528, 2547, 2547,
     2548, 2548, 2528, 2528, 2549, 2549, 2550, 2550, 2551, 2551,
     2552, 2552, 2553, 2553, 2554, 2554, 2555, 2555, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2556, 2556, 2557, 2557,
     2558, 2558, 2559, 2559, 2528, 2528, 2560, 2560, 2561, 2561,
     2562, 2562, 2563, 2563, 2528, 2528, 2528, 2528, 2564, 2564,
     2565, 2565, 2528, 2528, 2528, 2528, 2528, 2528, 2566, 2566,

     2528, 2528, 2567, 2567, 2568, 2568, 2528,  307,  307,  307,
     2569, 2569,  307,  307,  307, 2528, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2570, 2571, 2572, 2573,

     2574, 2575, 2576, 2577, 2527, 2527, 2527, 2527, 2578, 2579,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2580, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2581, 2582, 2583, 2584, 2585,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2586,
     2587, 2527, 2527, 2588, 2589, 2527, 2590, 2591, 2592, 2593,
     2594, 2595, 2596, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2597, 2598, 2599, 2600, 2527, 2601, 2602, 2603, 2604, 2527,
     2527, 2605, 2606, 2527, 2527, 2527, 2607, 2608, 2608, 2608,
     2608, 2609, 2609, 2609, 2609, 2527, 2527, 2610, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2527, 2527,
     2527, 2527, 2619, 2620, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2621, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2622, 2623, 2624, 2625,
     2626, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2627, 2628, 2527, 2527, 2629, 2630, 2527, 2631, 2632,
     2633, 2634, 2635, 2636, 2637, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2638, 2639, 2640,
     2641, 2527, 2642, 2643, 2644, 2645, 2527, 2527, 2646, 2647,
     2527, 2527, 2527, 2648, 2649, 2649, 2649, 2650, 2650, 2650,
     2527, 2527, 2651, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527,    0, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,

     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527
    } ;

static yyconst flex_int16_t yy_nxt[12683] =
    {   0,
     2527,  319,  320,  319,  916,  321,  318,  319,  320,  319,
      318,  322,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  318,  332,  333,  334,  335,
      336,  337,  338,  339,  340,  341,  318,  318,  342,  318,
      318,  318,  318,  318,  323,  324,  325,  326,  327,  328,
      329,  330,  331,  318,  332,  333,  334,  335,  336,  337,
      338,  339,  340,  341,  318,  318,  342,  318,  318,  318,
      319,  320,  319,  915,  321,  319,  320,  319,  651,  321,
      651,  343,  343,  343,  343,  343,  343,  343,  319,  320,

      319,  914,  322,  319,  320,  319,  652,  322,  913,  343,
      343,  343,  343,  343,  343,  343,  319,  320,  319,  911,
      321,  579,  320,  579,  613,  580,  613,  344,  344,  344,
      344,  344,  344,  344,  319,  320,  319,  910,  322,  579,
      320,  579,  615,  581,  909,  344,  344,  344,  344,  344,
      344,  344,  319,  320,  319,  908,  321,  319,  320,  583,
      956,  584,  956,  345,  345,  345,  345,  345,  345,  345,
      319,  320,  319,  865,  322,  319,  320,  583,  957,  585,
      864,  345,  345,  345,  345,  345,  345,  345,  319,  320,
      319,  591,  321,  591,  926,  592,  926,  863,  927,  346,

      346,  346,  346,  346,  346,  346,  319,  320,  319,  591,
      322,  929,  591,  930,  591,  862,  592,  346,  346,  346,
      346,  346,  346,  346,  319,  320,  319,  958,  321,  958,
      961,  963,  961,  963,  861,  347,  347,  347,  347,  347,
      347,  347,  319,  320,  319,  965,  322,  965,  962,  964,
      967,  860,  967,  347,  347,  347,  347,  347,  347,  347,
      319,  320,  319,  966,  321,  969,  859,  969,  968,  857,
      856,  348,  348,  348,  348,  348,  348,  348,  319,  320,
      319,  852,  322,  970,  651, 1014,  651, 1014,  733,  348,
      348,  348,  348,  348,  348,  348,  319,  320,  319,  926,

      321,  926,  652,  927, 1096,  916, 1096,  349,  349,  349,
      349,  349,  349,  349,  319,  320,  319,  591,  322,  929,
      915,  930, 1097,  914,  913,  349,  349,  349,  349,  349,
      349,  349,  319,  320,  319,  956,  321,  956,  350,  911,
      350,  351,  910,  352,  352,  352,  352,  352,  352,  352,
      319,  320,  319,  957,  322, 1110,  350, 1110,  350,  351,
      909,  352,  352,  352,  352,  352,  352,  352,  319,  320,
      319,  958,  321,  958,  353,  908,  353,  354,  865,  355,
      355,  355,  355,  355,  355,  355,  319,  320,  319,  961,
      322,  961,  353,  864,  353,  354,  863,  355,  355,  355,

      355,  355,  355,  355,  319,  320,  319,  962,  321, 1113,
      356, 1113,  356,  357,  862,  358,  358,  358,  358,  358,
      358,  358,  319,  320,  319,  963,  322,  963,  356,  861,
      356,  357,  860,  358,  358,  358,  358,  358,  358,  358,
      319,  320,  319,  964,  321, 1114,  359, 1114,  359,  360,
      859,  361,  361,  361,  361,  361,  361,  361,  319,  320,
      319,  965,  322,  965,  359,  857,  359,  360,  856,  361,
      361,  361,  361,  361,  361,  361,  319,  320,  319,  966,
      321, 1115,  362, 1115,  362,  363,  852,  364,  364,  364,
      364,  364,  364,  364,  319,  320,  319,  967,  322,  967,

      362,  733,  362,  363, 2478,  364,  364,  364,  364,  364,
      364,  364,  319,  320,  319,  968,  321, 1116,  365, 1116,
      365,  366, 2430,  367,  367,  367,  367,  367,  367,  367,
      319,  320,  319,  969,  322,  969,  365, 2422,  365,  366,
     2421,  367,  367,  367,  367,  367,  367,  367,  319,  320,
      319,  970,  321, 1117,  368, 1117,  368,  369, 2392,  370,
      370,  370,  370,  370,  370,  370,  319,  320,  319,  973,
      322,  973,  368, 2390,  368,  369, 2298,  370,  370,  370,
      370,  370,  370,  370,  319,  320,  319,  974,  321, 1120,
      371, 1120,  371,  372, 2250,  373,  373,  373,  373,  373,

      373,  373,  319,  320,  319, 1014,  322, 1014,  371, 2249,
      371,  372, 2224,  373,  373,  373,  373,  373,  373,  373,
      319,  320,  319, 1171,  321, 1171,  374, 2204,  374,  375,
     2193,  376,  376,  376,  376,  376,  376,  376,  319,  320,
      319, 1172,  322, 1173,  374, 1173,  374,  375, 2166,  376,
      376,  376,  376,  376,  376,  376,  319,  320,  319, 2112,
      321, 1174, 1096, 1179, 1096, 1179, 2098,  377,  377,  377,
      377,  377,  377,  377,  319,  320,  319, 1110,  322, 1110,
     1097, 1113, 1114, 1113, 1114,  377,  377,  377,  377,  377,
      377,  377,  319,  320,  319, 1115,  321, 1115, 1116, 1117,

     1116, 1117, 2096,  378,  378,  378,  378,  378,  378,  378,
      319,  320,  319, 1198,  322, 1198, 1120, 1229, 1120, 1229,
     2092,  378,  378,  378,  378,  378,  378,  378,  319,  320,
      319, 1199,  321, 2040, 1231, 1230, 1231, 2038, 2034,  379,
      379,  379,  379,  379,  379,  379,  319,  320,  319, 1236,
      322, 1236, 1232, 1171, 1258, 1171, 1258,  379,  379,  379,
      379,  379,  379,  379,  319,  320,  319, 1237,  321, 1986,
     1173, 1172, 1173, 1956, 1945,  380,  380,  380,  380,  380,
      380,  380,  319,  320,  319, 1259,  322, 1259, 1174, 1179,
     1198, 1179, 1198,  380,  380,  380,  380,  380,  380,  380,

      319,  320,  319, 1287,  321, 1287, 1939, 1288, 1199, 1288,
     1856,  381,  381,  381,  381,  381,  381,  381,  319,  320,
      319, 1294,  322, 1294, 1324, 1289, 1324, 1855, 1784,  381,
      381,  381,  381,  381,  381,  381,  319,  320,  319, 1295,
      321, 1297,  382, 1297,  382, 1783, 1772,  383,  383,  383,
      383,  383,  383,  383,  319,  320,  319, 1768,  322, 1298,
      382, 1307,  382, 1307, 1759,  383,  383,  383,  383,  383,
      383,  383,  319,  320,  319, 1310,  321, 1310, 1312, 1308,
     1312, 1758, 1755,  384,  384,  384,  384,  384,  384,  384,
      319,  320,  319, 1311,  322, 1229, 1313, 1229, 1325, 1747,

     1325,  384,  384,  384,  384,  384,  384,  384,  319,  320,
      319, 1746,  321, 1230,  385, 1605,  385,  386, 1584,  387,
      387,  387,  387,  387,  387,  387,  319,  320,  319, 1231,
      322, 1231,  385, 1583,  385,  386, 1579,  387,  387,  387,
      387,  387,  387,  387,  319,  320,  319, 1232,  321, 1236,
      388, 1236,  388,  389, 1567,  390,  390,  390,  390,  390,
      390,  390,  319,  320,  319, 1548,  322, 1237,  388, 1533,
      388,  389, 1516,  390,  390,  390,  390,  390,  390,  390,
      319,  320,  319, 1329,  321, 1329,  391, 1507,  391,  392,
     1493,  393,  393,  393,  393,  393,  393,  393,  319,  320,

      319, 1258,  322, 1258,  391, 1489,  391,  392, 1475,  393,
      393,  393,  393,  393,  393,  393,  319,  320,  319, 1259,
      321, 1259,  394, 1457,  394,  395, 1443,  396,  396,  396,
      396,  396,  396,  396,  319,  320,  319,  596,  322, 1366,
      394, 1366,  394,  395,  602,  396,  396,  396,  396,  396,
      396,  396,  318,  319,  320,  319, 1426,  321,  318,  318,
      318,  318,  319,  320,  319,  596,  322,  318,  318,  318,
     1417,  318,  602,  603,  608,  610,  318,  319,  320,  319,
      318,  321,  318,  318,  318,  318,  319,  320,  319,  609,
      322,  318,  318,  318, 1351,  318, 1351, 1287,  318, 1287,

      611,  603,  608,  610,  318, 1410, 1350,  318,  318,  319,
      320,  319, 1352,  321,  318,  318,  318,  609,  318,  319,
      320,  319,  318,  322,  318,  318,  318,  318,  611,  612,
      636,  318,  639,  318,  319,  320,  319,  318,  321,  318,
      318,  318,  318,  319,  320,  319,  653,  322,  318,  318,
      318, 1355,  318, 1355,  318, 1339, 1299,  612,  636,  936,
      639,  318, 1296, 1285,  318,  318,  319,  320,  319, 1356,
      321,  318,  318,  318,  653,  318,  319,  320,  319,  318,
      322,  318,  318,  318,  318,  938,  637,  936,  318,  939,
      318,  319,  320,  319,  318,  321,  318,  318,  318,  318,

      319,  320,  319,  638,  322,  318,  318,  318, 1281,  318,
     1281,  318, 1284,  938,  637,  940,  941,  939,  318, 1261,
     1256,  318,  318,  319,  320,  319, 1282,  321,  318,  318,
      318,  638,  318,  319,  320,  319,  318,  322,  318,  318,
      318,  318, 1241,  940,  941,  318,  942,  318,  319,  320,
      319,  318,  321,  318,  318,  318,  318,  319,  320,  319,
      943,  322,  318,  318,  318, 1377,  318, 1377,  318,  319,
      320,  319,  944,  321,  942,  318,  945, 1382,  318, 1382,
      405,  405,  405,  405,  405,  405,  405,  946,  943,  947,
      948,  949,  951,  318,  319,  320,  319, 1384,  322, 1384,

      944, 1393,  318, 1393,  945,  405,  405,  405,  405,  405,
      405,  405,  319,  320,  319,  946,  321,  947,  948,  949,
      951, 1238, 1226,  406,  406,  406,  406,  406,  406,  406,
      319,  320,  319, 1375,  322, 1375, 1288, 1294, 1288, 1294,
     1222,  406,  406,  406,  406,  406,  406,  406,  319,  320,
      319, 1376,  321, 1204, 1289, 1295, 1297, 1162, 1297,  407,
      407,  407,  407,  407,  407,  407,  319,  320,  319, 1307,
      322, 1307, 1151, 1310, 1298, 1310, 1138,  407,  407,  407,
      407,  407,  407,  407,  319,  320,  319, 1308,  321, 1125,
     1395, 1311, 1395, 1124, 1118,  408,  408,  408,  408,  408,

      408,  408,  319,  320,  319,  952,  322, 1396, 1324, 1396,
     1324, 1107, 1106,  408,  408,  408,  408,  408,  408,  408,
      318,  319,  320,  319,  318,  321,  318,  318,  318,  318,
      318,  318, 1098,  952,  953,  318,  319,  320,  319,  318,
      321,  318,  318,  318,  318,  319,  320,  319, 1095,  322,
      318,  318,  318,  950,  318,  654,  654,  654,  654,  654,
      654,  654,  953,  318,  954,  955,  318,  318,  319,  320,
      319,  318,  322,  318,  318,  318,  318,  318,  318,  937,
      959,  318,  960,  319,  320,  319,  318,  321, 2527,  971,
      318,  972,  954,  955,  414,  414,  414,  414,  414,  414,

      414,  655,  655,  655,  655,  655,  655,  655,  959,  978,
      960,  979,  322,  318,  319,  320,  319,  971,  321,  972,
      411, 2527,  411,  412, 2527,  413,  413,  413,  413,  413,
      413,  413,  319,  320,  319, 2527,  322,  978,  411,  979,
      411,  412, 2527,  413,  413,  413,  413,  413,  413,  413,
      319,  320,  319, 1312,  322, 1312, 1407, 1325, 1407, 1325,
     2527,  414,  414,  414,  414,  414,  414,  414,  319,  320,
      319, 1313,  321, 1329, 1408, 1329, 1351, 2527, 1351,  415,
      415,  415,  415,  415,  415,  415,  319,  320,  319, 1442,
      322, 1442, 2527, 1355, 1352, 1355, 2527,  415,  415,  415,

      415,  415,  415,  415,  319,  320,  319, 1445,  321, 1445,
     1366, 1356, 1366, 2527, 2527,  416,  416,  416,  416,  416,
      416,  416,  319,  320,  319, 2527,  322, 1446, 1447, 1448,
     1449, 2527, 2527,  416,  416,  416,  416,  416,  416,  416,
      319,  320,  319, 1375,  321, 1375, 1470, 1377, 1470, 1377,
     2527,  417,  417,  417,  417,  417,  417,  417,  319,  320,
      319, 1376,  322, 1471, 1473, 1471, 1473, 2527, 2527,  417,
      417,  417,  417,  417,  417,  417,  319,  320,  319, 2527,
      321, 1472, 1474, 1476, 1382, 1476, 1382,  418,  418,  418,
      418,  418,  418,  418,  319,  320,  319, 1384,  322, 1384,

     1393, 1477, 1393, 2527, 2527,  418,  418,  418,  418,  418,
      418,  418,  319,  320,  319, 1395,  321, 1395, 1396, 1407,
     1396, 1407, 2527,  419,  419,  419,  419,  419,  419,  419,
      319,  320,  319, 1498,  322, 1498, 1501, 1408, 1501, 2527,
     2527,  419,  419,  419,  419,  419,  419,  419,  319,  320,
      319, 1524,  321, 1524, 1502, 1526, 1528, 1526, 1528,  420,
      420,  420,  420,  420,  420,  420,  319,  320,  319, 1525,
      322, 2527, 2527, 1527, 1529, 2527, 2527,  420,  420,  420,
      420,  420,  420,  420,  319,  320,  319, 1530,  321, 1530,
     1536, 1538, 1536, 1538, 2527,  421,  421,  421,  421,  421,

      421,  421,  319,  320,  319, 1531,  322, 2527, 1537, 1539,
     1540, 2527, 1540,  421,  421,  421,  421,  421,  421,  421,
      319,  320,  319, 1542,  321, 1542, 2527, 1442, 1541, 1442,
     2527,  422,  422,  422,  422,  422,  422,  422,  319,  320,
      319, 1543,  322, 1445, 1560, 1445, 1560, 2527, 2527,  422,
      422,  422,  422,  422,  422,  422,  319,  320,  319, 1549,
      321, 1549,  423, 2527,  423,  424, 2527,  425,  425,  425,
      425,  425,  425,  425,  319,  320,  319, 1550,  322, 1551,
      423, 1551,  423,  424, 2527,  425,  425,  425,  425,  425,
      425,  425,  319,  320,  319, 2527,  321, 1552,  426, 2527,

      426,  427, 2527,  428,  428,  428,  428,  428,  428,  428,
      319,  320,  319, 1553,  322, 1553,  426, 2527,  426,  427,
     2527,  428,  428,  428,  428,  428,  428,  428,  319,  320,
      319, 1554,  321, 1555,  429, 1555,  429,  430, 2527,  431,
      431,  431,  431,  431,  431,  431,  319,  320,  319, 2527,
      322, 1556,  429, 2527,  429,  430, 2527,  431,  431,  431,
      431,  431,  431,  431,  319,  320,  319, 1451,  321, 1451,
      432, 2527,  432,  433, 2527,  434,  434,  434,  434,  434,
      434,  434,  319,  320,  319, 1453,  322, 1558,  432, 1558,
      432,  433, 2527,  434,  434,  434,  434,  434,  434,  434,

      319,  320,  319, 2527,  321, 1559, 1470, 1471, 1470, 1471,
     2527,  435,  435,  435,  435,  435,  435,  435,  319,  320,
      319, 1577,  322, 1577, 1473, 1472, 1473, 2527, 2527,  435,
      435,  435,  435,  435,  435,  435,  319,  320,  319, 1578,
      321, 1578, 1474, 1476, 1580, 1476, 1580,  436,  436,  436,
      436,  436,  436,  436,  319,  320,  319, 1586,  322, 1586,
     1498, 1477, 1498, 2527, 2527,  436,  436,  436,  436,  436,
      436,  436,  319,  320,  319, 1587,  321, 1588,  437, 1588,
      437,  438, 2527,  439,  439,  439,  439,  439,  439,  439,
      319,  320,  319, 2527,  322, 1589,  437, 2527,  437,  438,

     2527,  439,  439,  439,  439,  439,  439,  439,  319,  320,
      319, 1590,  321, 1590,  440, 2527,  440,  441, 2527,  442,
      442,  442,  442,  442,  442,  442,  319,  320,  319, 1591,
      322, 1592,  440, 1592,  440,  441, 2527,  442,  442,  442,
      442,  442,  442,  442,  319,  320,  319, 2527,  321, 1593,
      443, 2527,  443,  444, 2527,  445,  445,  445,  445,  445,
      445,  445,  319,  320,  319, 1595,  322, 1595,  443, 2527,
      443,  444, 2527,  445,  445,  445,  445,  445,  445,  445,
      319,  320,  319, 1596,  321, 1501,  446, 1501,  446,  447,
     2527,  448,  448,  448,  448,  448,  448,  448,  319,  320,

      319, 2527,  322, 1502,  446, 2527,  446,  447, 2527,  448,
      448,  448,  448,  448,  448,  448,  319,  320,  319, 1608,
      321, 1608,  449, 2527,  449,  450, 2527,  451,  451,  451,
      451,  451,  451,  451,  319,  320,  319, 1628,  322, 1628,
      449, 2527,  449,  450, 2527,  451,  451,  451,  451,  451,
      451,  451,  319,  320,  319, 1629,  321, 1633,  452, 1633,
      452,  453, 2527,  454,  454,  454,  454,  454,  454,  454,
      319,  320,  319, 2527,  322, 1634,  452, 2527,  452,  453,
     2527,  454,  454,  454,  454,  454,  454,  454,  319,  320,
      319, 1635,  321, 1635,  455, 2527,  455,  456, 2527,  457,

      457,  457,  457,  457,  457,  457,  319,  320,  319, 1636,
      322, 1637,  455, 1637,  455,  456, 2527,  457,  457,  457,
      457,  457,  457,  457,  319,  320,  319, 2527,  321, 1638,
      458, 2527,  458,  459, 2527,  460,  460,  460,  460,  460,
      460,  460,  319,  320,  319, 1524,  322, 1524,  458, 2527,
      458,  459, 2527,  460,  460,  460,  460,  460,  460,  460,
      319,  320,  319, 1525,  321, 1639,  461, 1639,  461,  462,
     2527,  463,  463,  463,  463,  463,  463,  463,  319,  320,
      319, 1526,  322, 1526,  461, 2527,  461,  462, 2527,  463,
      463,  463,  463,  463,  463,  463,  319,  320,  319, 1527,

      321, 1640,  464, 1640,  464,  465, 2527,  466,  466,  466,
      466,  466,  466,  466,  319,  320,  319, 1528,  322, 1528,
      464, 2527,  464,  465, 2527,  466,  466,  466,  466,  466,
      466,  466,  319,  320,  319, 1529,  321, 1641, 1530, 1641,
     1530, 2527, 2527,  467,  467,  467,  467,  467,  467,  467,
      319,  320,  319, 1642,  322, 1642, 1531, 1646, 1536, 1646,
     1536,  467,  467,  467,  467,  467,  467,  467,  319,  320,
      319, 1648,  321, 1648, 2527, 1647, 1537, 2527, 2527,  468,
      468,  468,  468,  468,  468,  468,  319,  320,  319, 1538,
      322, 1538, 1649, 1540, 1649, 1540, 2527,  468,  468,  468,

      468,  468,  468,  468,  319,  320,  319, 1539,  321, 2527,
     1650, 1541, 1650, 2527, 2527,  469,  469,  469,  469,  469,
      469,  469,  319,  320,  319, 1542,  322, 1542, 1651, 1653,
     1651, 1653, 2527,  469,  469,  469,  469,  469,  469,  469,
      319,  320,  319, 1543,  321, 2527, 1655, 1654, 1655, 2527,
     2527,  470,  470,  470,  470,  470,  470,  470,  319,  320,
      319, 1549,  322, 1549, 1656, 1659, 1660, 1659, 1660,  470,
      470,  470,  470,  470,  470,  470,  319,  320,  319, 1550,
      321, 1551,  471, 1551,  471,  472, 2527,  473,  473,  473,
      473,  473,  473,  473,  319,  320,  319,  980,  322, 1552,

      471, 2527,  471,  472, 2527,  473,  473,  473,  473,  473,
      473,  473,  318,  319,  320,  319, 2527,  321,  318,  318,
      318,  318,  319,  320,  319,  980,  322,  318,  318,  318,
     2527,  318,  319,  320,  319, 1661,  321, 1661,  981, 1553,
      318, 1553, 2527,  478,  478,  478,  478,  478,  478,  478,
      982,  587, 1662,  587, 1662,  587,  587, 1554,  318,  587,
      587,  587,  587,  587,  587,  587,  981,  318,  319,  320,
      319, 1555,  321, 1555,  475, 2527,  475,  476,  982,  477,
      477,  477,  477,  477,  477,  477,  319,  320,  319, 1556,
      322, 1558,  475, 1558,  475,  476, 2527,  477,  477,  477,

      477,  477,  477,  477,  319,  320,  319, 2527,  322, 1559,
     1664, 1560, 1664, 1560, 2527,  478,  478,  478,  478,  478,
      478,  478,  319,  320,  319, 1577,  321, 1577,  479, 1578,
      479, 1578, 2527,  480,  480,  480,  480,  480,  480,  480,
      319,  320,  319, 1580,  322, 1580,  479, 1684,  479, 1684,
     2527,  480,  480,  480,  480,  480,  480,  480,  319,  320,
      319, 1586,  321, 1586,  481, 1685,  481, 2527, 2527,  482,
      482,  482,  482,  482,  482,  482,  319,  320,  319, 1587,
      322, 1690,  481, 1690,  481, 2527, 2527,  482,  482,  482,
      482,  482,  482,  482,  319,  320,  319, 1588,  321, 1588,

      483, 1691,  483, 1691, 2527,  484,  484,  484,  484,  484,
      484,  484,  319,  320,  319, 1589,  322, 1590,  483, 1590,
      483, 2527, 2527,  484,  484,  484,  484,  484,  484,  484,
      319,  320,  319, 2527,  321, 1591,  485, 1692,  485, 1692,
     2527,  486,  486,  486,  486,  486,  486,  486,  319,  320,
      319, 1592,  322, 1592,  485, 1693,  485, 1693, 2527,  486,
      486,  486,  486,  486,  486,  486,  319,  320,  319, 1593,
      321, 1595, 1695, 1595, 1695, 2527, 2527,  487,  487,  487,
      487,  487,  487,  487,  319,  320,  319, 2527,  322, 1596,
     1608, 1616, 1608, 1616, 2527,  487,  487,  487,  487,  487,

      487,  487,  319,  320,  319, 1715,  321, 1715, 1717, 1618,
     1717, 2527, 2527,  488,  488,  488,  488,  488,  488,  488,
      319,  320,  319, 1716,  322, 1628, 1727, 1628, 1727, 2527,
     2527,  488,  488,  488,  488,  488,  488,  488,  319,  320,
      319, 2527,  321, 1629, 1633, 1731, 1633, 1731, 2527,  489,
      489,  489,  489,  489,  489,  489,  319,  320,  319, 1635,
      322, 1635, 1634, 1732, 1637, 1732, 1637,  489,  489,  489,
      489,  489,  489,  489,  319,  320,  319, 1636,  321, 1733,
     2527, 1733, 1638, 2527, 2527,  490,  490,  490,  490,  490,
      490,  490,  319,  320,  319, 1639,  322, 1639, 1640, 1641,

     1640, 1641, 2527,  490,  490,  490,  490,  490,  490,  490,
      319,  320,  319, 1642,  321, 1642, 1646, 1737, 1646, 1737,
     2527,  491,  491,  491,  491,  491,  491,  491,  319,  320,
      319, 1648,  322, 1648, 1647, 1649, 1650, 1649, 1650,  491,
      491,  491,  491,  491,  491,  491,  319,  320,  319, 1651,
      321, 1651, 1738, 1653, 1738, 1653, 2527,  492,  492,  492,
      492,  492,  492,  492,  319,  320,  319, 1740,  322, 1740,
     1739, 1654, 1655, 2527, 1655,  492,  492,  492,  492,  492,
      492,  492,  319,  320,  319, 1741,  321, 1741, 2527, 1659,
     1656, 1659, 2527,  493,  493,  493,  493,  493,  493,  493,

      319,  320,  319, 1660,  322, 1660, 1661, 1662, 1661, 1662,
     2527,  493,  493,  493,  493,  493,  493,  493,  319,  320,
      319, 1664,  321, 1664, 1670, 1750, 1670, 1750, 2527,  494,
      494,  494,  494,  494,  494,  494,  319,  320,  319, 1684,
      322, 1684, 1671, 1763, 1764, 1763, 1764,  494,  494,  494,
      494,  494,  494,  494,  319,  320,  319, 1685,  321, 1690,
     2527, 1690, 1765, 2527, 2527,  495,  495,  495,  495,  495,
      495,  495,  319,  320,  319,  983,  322, 1691, 2527, 1691,
      989, 2527,  990,  495,  495,  495,  495,  495,  495,  495,
      318,  319,  320,  319,  984,  321,  318,  318,  318,  318,

      319,  320,  319,  983,  322,  318,  318,  318,  989,  318,
      990,  994,  995,  996,  318,  319,  320,  319,  318,  321,
      318,  318,  318,  318,  319,  320,  319,  997,  322,  318,
      318,  318, 1692,  318, 1692, 1693,  318, 1693, 1003,  994,
      995,  996,  318, 2527, 2527,  318,  318,  319,  320,  319,
     2527,  321,  318,  318,  318,  997,  318,  319,  320,  319,
      318,  322,  318,  318,  318,  318, 1003, 1004, 1005,  318,
     1008,  318,  319,  320,  319,  318,  321,  318,  318,  318,
      318,  319,  320,  319, 1009,  322,  318,  318,  318, 1695,
      318, 1695,  318, 2527, 2527, 1004, 1005, 2527, 1008,  318,

     1012, 1013,  318,  318,  319,  320,  319, 2527,  321,  318,
      318,  318, 1009,  318,  319,  320,  319,  318,  322,  318,
      318,  318,  318,  319,  320,  319,  318,  321, 1012, 1013,
     2527, 1789,  318, 1789,  501,  501,  501,  501,  501,  501,
      501,  319,  320,  319, 1717,  322, 1717, 2527, 1715,  318,
     1715, 2527,  501,  501,  501,  501,  501,  501,  501,  318,
      319,  320,  319, 1727,  321, 1727, 1716, 1731, 1732, 1731,
     1732,  502,  502,  502,  502,  502,  502,  502,  319,  320,
      319, 1733,  322, 1733, 1737, 1738, 1737, 1738, 2527,  502,
      502,  502,  502,  502,  502,  502,  319,  320,  319, 1805,

      321, 1805, 1740, 1739, 1740, 2527, 2527,  503,  503,  503,
      503,  503,  503,  503,  319,  320,  319, 1741,  322, 1741,
     1750, 1827, 1750, 1827, 2527,  503,  503,  503,  503,  503,
      503,  503,  319,  320,  319, 1830,  321, 1830,  504, 1828,
      504,  505, 2527,  506,  506,  506,  506,  506,  506,  506,
      319,  320,  319, 1831,  322, 1763,  504, 1763,  504,  505,
     2527,  506,  506,  506,  506,  506,  506,  506,  319,  320,
      319, 1764,  321, 1764, 1832, 1836, 1832, 1836, 2527,  507,
      507,  507,  507,  507,  507,  507,  319,  320,  319, 1765,
      322, 2527, 1839, 1837, 1839, 2527, 2527,  507,  507,  507,

      507,  507,  507,  507,  319,  320,  319, 1845,  321, 1845,
     1840, 1847, 1851, 1847, 1851,  508,  508,  508,  508,  508,
      508,  508,  319,  320,  319, 1846,  322, 2527, 2527, 1848,
     1852, 2527, 2527,  508,  508,  508,  508,  508,  508,  508,
      319,  320,  319, 1789,  321, 1789, 1871, 1805, 1871, 1805,
     2527,  509,  509,  509,  509,  509,  509,  509,  319,  320,
      319, 1015,  322, 1905, 1872, 1905, 1907, 2527, 1907,  509,
      509,  509,  509,  509,  509,  509,  318,  319,  320,  319,
      318,  321,  318,  318,  318,  318,  318,  318, 2527, 1015,
     1088,  318,  319,  320,  319,  318,  321,  318,  318,  318,

      318,  319,  320,  319, 2527,  322,  318,  318,  318, 2527,
      318,  656,  656,  656,  656,  656,  656,  656, 1088,  318,
     2527, 1089,  318,  318,  319,  320,  319,  318,  322,  318,
      318,  318,  318,  318,  318, 2527, 1092,  318,  593,  319,
      320,  319,  318,  321, 2527,  594,  318, 1093,  595, 1089,
      516,  516,  516,  516,  516,  516,  516,  657,  657,  657,
      657,  657,  657,  657, 1092, 1094,  593, 1099, 2527,  318,
      319,  320,  319,  594,  321, 1093,  595, 1832,  512, 1832,
     2527,  513,  513,  513,  513,  513,  513,  513,  319,  320,
      319, 2527,  322, 1094, 2527, 1099,  512, 2527, 1100,  513,

      513,  513,  513,  513,  513,  513,  318,  319,  320,  319,
      318,  321,  318,  318,  318,  318,  318,  318,  319,  320,
      319, 2527,  322, 1101, 2527,  318, 1100, 2527, 2527,  516,
      516,  516,  516,  516,  516,  516,  589, 1911,  589, 1911,
      589,  589, 1102, 1103,  589,  589,  589,  589,  589,  589,
      589, 1101,  318,  318,  319,  320,  319,  318,  322,  318,
      318,  318,  318,  318,  318,  319,  320,  319, 2527,  321,
     1102, 1103,  318, 1913, 2527, 1913,  524,  524,  524,  524,
      524,  524,  524,  318, 1920,  318, 1920,  318,  318, 1104,
     1105,  590,  590,  590,  590,  590,  590,  590, 2527,  318,

      318,  319,  320,  319,  318,  321,  318,  318,  318,  318,
      318,  318,  319,  320,  319, 2527,  322, 1104, 1105,  318,
     1921, 2527, 1921,  524,  524,  524,  524,  524,  524,  524,
      658,  658,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  659,  659, 2527, 2527,  318,  318,  319,  320,
      319,  318,  322,  318,  318,  318,  318,  318,  318,  319,
      320,  319, 1924,  321, 1924, 2527,  318, 1880, 2527, 1880,
      528,  528,  528,  528,  528,  528,  528,  660,  660,  660,
      660,  660,  660,  660,  661, 1881,  662,  662,  662,  662,
      662,  662,  662,  318,  318,  319,  320,  319,  318,  321,

      318,  318,  318,  318,  318,  318,  319,  320,  319, 1944,
      322, 1944, 1954,  318, 1954, 2527, 2527,  528,  528,  528,
      528,  528,  528,  528,  661, 2527,  662,  662,  662,  662,
      662,  662,  662,  697,  697,  697,  697,  697,  697,  697,
      318,  318,  319,  320,  319,  318,  322,  318,  318,  318,
      318,  318,  318,  319,  320,  319, 1957,  321, 1957, 1960,
      318, 1960, 2527, 2527,  565,  565,  565,  565,  565,  565,
      565,  665, 2527,  666,  666,  666,  666,  666,  666,  666,
      698,  698,  698,  698,  698,  698,  698,  318,  318,  319,
      320,  319,  318,  321,  318,  318,  318,  318,  318,  318,

      319,  320,  319, 1970,  322, 1970, 1905,  318, 1905, 2527,
     2527,  565,  565,  565,  565,  565,  565,  565,  665, 2527,
      666,  666,  666,  666,  666,  666,  666,  699,  699,  699,
      699,  699,  699,  699,  318,  318,  319,  320,  319,  318,
      322,  318,  318,  318,  318,  318,  318,  319,  320,  319,
     1907,  321, 1907, 1911,  318, 1911, 2527, 2527,  570,  570,
      570,  570,  570,  570,  570,  669, 2527,  670,  670,  670,
      670,  670,  670,  670,  700,  700,  700,  700,  700,  700,
      700,  318,  318,  319,  320,  319,  318,  321,  318,  318,
      318,  318,  318,  318,  319,  320,  319, 1913,  322, 1913,

     1990,  318, 1990, 2527, 2527,  570,  570,  570,  570,  570,
      570,  570,  669, 2527,  670,  670,  670,  670,  670,  670,
      670,  701,  701,  701,  701,  701,  701,  701,  318,  318,
      319,  320,  319,  318,  322,  318,  318,  318,  318,  318,
      318,  319,  320,  319, 1920,  321, 1920, 1921,  318, 1921,
     2527, 2527,  571,  571,  571,  571,  571,  571,  571,  673,
     2527,  674,  674,  674,  674,  674,  674,  674,  702,  702,
      702,  702,  702,  702,  702,  318,  318,  319,  320,  319,
      318,  321,  318,  318,  318,  318,  318,  318,  319,  320,
      319, 1924,  322, 1924, 1994,  318, 1994, 2527, 2527,  571,

      571,  571,  571,  571,  571,  571,  673, 1108,  674,  674,
      674,  674,  674,  674,  674,  704,  704,  704,  704,  704,
      704,  704,  318,  318,  319,  320,  319,  318,  322,  318,
      318,  318,  318,  318,  318, 1108, 2527, 1109,  318,  319,
      320,  319,  318,  321,  318,  318,  318,  318,  319,  320,
      319, 2527,  322,  318,  318,  318,  677,  318,  678,  678,
      678,  678,  678,  678,  678, 1109,  318, 2527, 2527,  318,
      318,  319,  320,  319,  318,  321,  318,  318,  318,  318,
      318,  318, 2527, 1944,  318, 1944, 1111, 1112, 2019,  318,
     2019, 2527, 2527,  318,  318,  319,  320,  319, 2527,  321,

      318,  318,  318,  677, 2527,  678,  678,  678,  678,  678,
      678,  678, 2527,  318, 1111, 1112,  318,  318,  319,  320,
      319,  318,  322,  318,  318,  318,  318,  318,  318,  729,
      729,  729,  729,  729,  729,  729,  318, 2022, 2527, 2022,
      318,  318,  319,  320,  319, 2527,  322,  318,  318,  318,
      681, 2527,  682,  682,  682,  682,  682,  682,  682, 1954,
      318, 1954, 2527,  318,  318,  319,  320,  319,  318,  321,
      318,  318,  318,  318,  318,  318, 1119,  319,  320,  319,
     1121,  321, 1957,  318, 1957, 2527, 2527,  318,  574,  574,
      574,  574,  574,  574,  574,  681, 2527,  682,  682,  682,

      682,  682,  682,  682, 1119, 1122, 2527, 1960, 1121, 1960,
      318,  318,  319,  320,  319,  318,  322,  318,  318,  318,
      318,  318,  318,  319,  320,  319, 2027,  322, 2027, 2029,
      318, 2029, 2527, 1122,  574,  574,  574,  574,  574,  574,
      574,  685, 2527,  686,  686,  686,  686,  686,  686,  686,
      730,  730,  730,  730,  730,  730,  730,  318,  318,  319,
      320,  319,  318,  321,  318,  318,  318,  318,  318,  318,
      319,  320,  319, 2030,  321, 2030, 2031,  318, 2031, 2527,
     2527,  575,  575,  575,  575,  575,  575,  575,  685, 2527,
      686,  686,  686,  686,  686,  686,  686,  731,  731,  731,

      731,  731,  731,  731,  318,  318,  319,  320,  319,  318,
      322,  318,  318,  318,  318,  318,  318,  319,  320,  319,
     1123,  322, 1126, 1970,  318, 1970, 2527, 1127,  575,  575,
      575,  575,  575,  575,  575,  663,  663,  663,  663,  663,
      663,  663, 2527, 2527, 1884, 1128, 1884,  664, 1123, 1129,
     1126,  318,  319,  320,  319, 1127,  321, 2041,  525, 2041,
      525,  526, 1885,  527,  527,  527,  527,  527,  527,  527,
      319,  320,  319, 1128,  322,  664,  525, 1129,  525,  526,
     2527,  527,  527,  527,  527,  527,  527,  527,  319,  320,
      319, 1888,  321, 1888,  529, 1894,  529, 1894, 2527,  530,

      530,  530,  530,  530,  530,  530,  319,  320,  319, 1889,
      322, 2527,  529, 1895,  529, 2527, 2527,  530,  530,  530,
      530,  530,  530,  530,  319,  320,  319, 1827,  321, 1827,
      531, 1830,  531, 1830, 2527,  532,  532,  532,  532,  532,
      532,  532,  319,  320,  319, 1828,  322, 2527,  531, 1831,
      531, 2527, 2527,  532,  532,  532,  532,  532,  532,  532,
      319,  320,  319, 1836,  321, 1836,  533, 1839,  533, 1839,
     2527,  534,  534,  534,  534,  534,  534,  534,  319,  320,
      319, 1837,  322, 2527,  533, 1840,  533, 2527, 2527,  534,
      534,  534,  534,  534,  534,  534,  319,  320,  319, 1918,

      321, 1918,  535, 1845,  535, 1845, 2527,  536,  536,  536,
      536,  536,  536,  536,  319,  320,  319, 1919,  322, 2527,
      535, 1846,  535, 2527, 2527,  536,  536,  536,  536,  536,
      536,  536,  319,  320,  319, 1847,  321, 1847,  537, 1851,
      537, 1851, 2527,  538,  538,  538,  538,  538,  538,  538,
      319,  320,  319, 1848,  322, 2527,  537, 1852,  537, 2527,
     2527,  538,  538,  538,  538,  538,  538,  538,  319,  320,
      319, 1926,  321, 1926,  539, 1871,  539, 1871, 2527,  540,
      540,  540,  540,  540,  540,  540,  319,  320,  319, 1927,
      322, 2527,  539, 1872,  539, 2527, 2527,  540,  540,  540,

      540,  540,  540,  540,  319,  320,  319, 1948,  321, 1948,
      541, 1952,  541, 1952, 2527,  542,  542,  542,  542,  542,
      542,  542,  319,  320,  319, 1949,  322, 2527,  541, 1953,
      541, 2527, 2527,  542,  542,  542,  542,  542,  542,  542,
      319,  320,  319, 1880,  321, 1880,  543, 1884,  543, 1884,
     2527,  544,  544,  544,  544,  544,  544,  544,  319,  320,
      319, 1881,  322, 2527,  543, 1885,  543, 2527, 2527,  544,
      544,  544,  544,  544,  544,  544,  319,  320,  319, 1888,
      321, 1888,  545, 1964,  545, 1964, 2527,  546,  546,  546,
      546,  546,  546,  546,  319,  320,  319, 1889,  322, 2527,

      545, 1965,  545, 2527, 2527,  546,  546,  546,  546,  546,
      546,  546,  319,  320,  319, 1966,  321, 1966,  547, 1968,
      547, 1968, 2527,  548,  548,  548,  548,  548,  548,  548,
      319,  320,  319, 1967,  322, 2527,  547, 1969,  547, 2527,
     2527,  548,  548,  548,  548,  548,  548,  548,  319,  320,
      319, 1894,  321, 1894,  549, 1980,  549, 1980, 2527,  550,
      550,  550,  550,  550,  550,  550,  319,  320,  319, 1895,
      322, 2527,  549, 1981,  549, 2527, 2527,  550,  550,  550,
      550,  550,  550,  550,  319,  320,  319, 1918,  321, 1918,
      551, 1926,  551, 1926, 2527,  552,  552,  552,  552,  552,

      552,  552,  319,  320,  319, 1919,  322, 2527,  551, 1927,
      551, 2527, 2527,  552,  552,  552,  552,  552,  552,  552,
      319,  320,  319, 2003,  321, 2003,  553, 2007,  553, 2007,
     2527,  554,  554,  554,  554,  554,  554,  554,  319,  320,
      319, 2004,  322, 2527,  553, 2008,  553, 2527, 2527,  554,
      554,  554,  554,  554,  554,  554,  319,  320,  319, 2009,
      321, 2009,  555, 1948,  555, 1948, 2527,  556,  556,  556,
      556,  556,  556,  556,  319,  320,  319, 2010,  322, 2527,
      555, 1949,  555, 2527, 2527,  556,  556,  556,  556,  556,
      556,  556,  319,  320,  319, 1952,  321, 1952,  557, 1961,

      557, 1961, 2527,  558,  558,  558,  558,  558,  558,  558,
      319,  320,  319, 1953,  322, 2527,  557, 1962,  557, 2527,
     2527,  558,  558,  558,  558,  558,  558,  558,  319,  320,
      319, 1964,  321, 1964,  559, 1990,  559, 1990, 2527,  560,
      560,  560,  560,  560,  560,  560,  319,  320,  319, 1965,
      322, 1133,  559, 1134,  559, 2527, 1135,  560,  560,  560,
      560,  560,  560,  560,  318,  319,  320,  319,  318,  321,
      318,  318,  318,  318,  318,  318,  319,  320,  319, 1133,
      321, 1134, 2527,  318, 1135, 2527, 2527,  576,  576,  576,
      576,  576,  576,  576,  689, 2527,  690,  690,  690,  690,

      690,  690,  690,  732,  732,  732,  732,  732,  732,  732,
      318,  318,  319,  320,  319,  318,  322,  318,  318,  318,
      318,  318,  318,  319,  320,  319, 1994,  322, 1994, 2060,
      318, 2060, 2527, 2527,  576,  576,  576,  576,  576,  576,
      576,  689, 1136,  690,  690,  690,  690,  690,  690,  690,
      739,  739,  739,  739,  739,  739,  739,  318,  318,  319,
      320,  319,  318,  321,  318,  318,  318,  318,  318,  318,
     1136, 2527, 1137,  318,  319,  320,  319,  318,  321,  318,
      318,  318,  318,  319,  320,  319, 2527,  322,  318,  318,
      318,  693,  318,  694,  694,  694,  694,  694,  694,  694,

     1137,  318, 2527, 2527,  318,  318,  319,  320,  319,  318,
      322,  318,  318,  318,  318,  318,  318, 2527, 2064,  318,
     2064, 1139, 1140, 2067,  318, 2067, 2527, 2527,  318,  318,
      319,  320,  319, 2527,  321,  318,  318,  318,  693, 2527,
      694,  694,  694,  694,  694,  694,  694, 2527,  318, 1139,
     1140,  318,  318,  319,  320,  319,  318,  321,  318,  318,
      318,  318,  318,  318,  740,  740,  740,  740,  740,  740,
      740,  318, 2068, 2527, 2068,  318,  318,  319,  320,  319,
     2527,  322,  318,  318,  318,  705, 2527,  706,  706,  706,
      706,  706,  706,  706, 2019,  318, 2019, 2527,  318,  318,

      319,  320,  319,  318,  322,  318,  318,  318,  318,  318,
      318, 2527,  319,  320,  319, 1141,  322, 2527,  318, 1966,
     2527, 1966,  318,  590,  590,  590,  590,  590,  590,  590,
      985,  597, 1001, 1090,  986,  987,  988, 1967,  598,  599,
     1002, 1091,  600, 1141,  601,  318,  318,  319,  320,  319,
      318,  321,  318,  318,  318,  318,  318,  318,  985,  597,
     1001, 1090,  986,  987,  988,  318,  598,  599, 1002, 1091,
      600, 2022,  601, 2022, 2027, 2527, 2027,  640,  667,  667,
      667,  667,  667,  667,  667,  641,  642,  643, 1142, 1143,
      668, 1144,  318,  318,  319,  320,  319,  318,  322,  318,

      318,  318,  318,  318,  318,  640, 1145, 1146, 1147, 1148,
     1149, 2527,  318,  641,  642,  643, 1142, 1143,  668, 1144,
      671,  671,  671,  671,  671,  671,  671, 2029, 2030, 2029,
     2030, 2031,  672, 2031, 1145, 1146, 1147, 1148, 1149,  318,
      318,  319,  320,  319,  318,  321,  318,  318,  318,  318,
      318,  318,  741,  741,  741,  741,  741,  741,  741,  318,
      672,  675,  675,  675,  675,  675,  675,  675, 2041,  703,
     2041,  703, 1150,  676,  702,  702,  702,  702,  702,  702,
      702, 2105, 2113, 2105, 2113, 2527,  318,  318,  319,  320,
      319,  318,  322,  318,  318,  318,  318,  318,  318, 1152,

     1150,  676, 2060, 1153, 2060, 2527,  318,  679,  679,  679,
      679,  679,  679,  679, 2064, 2067, 2064, 2067, 1006,  680,
      683,  683,  683,  683,  683,  683,  683, 1152, 1154, 1158,
     1007, 1153,  684,  318,  318,  319,  320,  319,  318,  321,
      318,  318,  318,  318,  318,  318, 1006,  680, 1159, 1160,
     1161, 1163, 1968,  318, 1968, 2527, 1154, 1158, 1007, 2527,
      684,  687,  687,  687,  687,  687,  687,  687, 2527, 2068,
     1969, 2068, 2130,  688, 2130, 2527, 1159, 1160, 1161, 1163,
      318,  318,  319,  320,  319,  318,  322,  318,  318,  318,
      318,  318,  318,  742,  742,  742,  742,  742,  742,  742,

      318,  688,  691,  691,  691,  691,  691,  691,  691, 2140,
     2527, 2140, 1164,  705,  692,  706,  706,  706,  706,  706,
      706,  706, 2141, 2148, 2141, 2148, 2527,  318,  318,  319,
      320,  319,  318,  321,  318,  318,  318,  318,  318,  318,
     1164, 1169,  692, 1170, 1175, 2527, 2527,  318,  695,  695,
      695,  695,  695,  695,  695, 2162, 2163, 2162, 2163, 1010,
      696,  707,  707,  707,  707,  707,  707,  707, 1011, 1169,
     1176, 1170, 1175,  708,  318,  318,  319,  320,  319,  318,
      322,  318,  318,  318,  318,  318,  318, 1010,  696, 2527,
     1177, 1178, 1183, 2105,  318, 2105, 1011, 2169, 1176, 2169,

      709,  708,  710,  710,  710,  710,  710,  710,  710,  709,
     2527,  710,  710,  710,  710,  710,  710,  710, 1177, 1178,
     1183,  318,  318,  319,  320,  319,  318,  321,  318,  318,
      318,  318,  318,  318,  743,  743,  743,  743,  743,  743,
      743,  318,  711,  711,  711,  711,  711,  711,  711, 1980,
     2113, 1980, 2113,  713,  712,  714,  714,  714,  714,  714,
      714,  714, 2176, 2045, 2176, 2045, 2527, 1981,  318,  318,
      319,  320,  319,  318,  322,  318,  318,  318,  318,  318,
      318, 2046,  712, 1184, 1185, 1186, 1187,  713,  318,  714,
      714,  714,  714,  714,  714,  714, 2527,  715,  715,  715,

      715,  715,  715,  715, 2053, 2177, 2053, 2177, 2000,  716,
     2000, 1184, 1185, 1186, 1187,  318,  319,  320,  319,  586,
      321,  586, 2054,  586,  586, 2527, 2001,  586,  586,  586,
      586,  586,  586,  586,  587,  322,  587,  716,  587,  587,
     2527, 1188,  587,  587,  587,  587,  587,  587,  587,  589,
      322,  589, 1189,  589,  589, 2527, 1192,  589,  589,  589,
      589,  589,  589,  589,  604, 2527,  621, 1155,  605, 1188,
      998,  622, 2527, 2527,  606, 1190,  991, 1193, 1194,  607,
     1189,  999, 2527,  992, 1192,  993,  623, 1191, 1000, 1195,
     1196,  624,  604, 1156,  625, 1197,  605,  626,  998, 2527,

     1157,  627,  606, 1190,  991, 1193, 1194,  607,  613,  999,
      613,  992, 1200,  993,  623, 1191, 1000, 1195, 1196,  624,
     2527, 1156,  625, 1197,  614,  626,  615,  616,  717, 1201,
      718,  718,  718,  718,  718,  718,  718, 1202, 1203, 1205,
     1200,  617,  719,  719,  719,  719,  719,  719,  719, 2527,
      618,  619,  620, 2527,  720,  616,  717, 1201,  718,  718,
      718,  718,  718,  718,  718, 1202, 1203, 1205,  735,  617,
      736,  736,  736,  736,  736,  736,  736, 1130,  618,  619,
      620,  628,  720, 1206, 1131, 1180, 1207,  629, 1181, 1208,
      630, 1132, 1209,  631, 1210, 1211,  632,  633, 1212,  634,

     2527, 1213, 1182, 1214, 2527, 1130,  635, 1215, 2527,  628,
     1216, 1206, 1131, 1180, 1207,  629, 1181, 1208,  630, 1132,
     1209,  631, 1210, 1211,  632,  633, 1212,  634,  644, 1213,
     1182, 1214,  645, 2527, 1217, 1215,  646, 1218, 1216, 1219,
      647, 1220,  648, 1221, 1225,  649, 1227, 2527,  650,  737,
      737,  737,  737,  737,  737,  737,  644, 1223, 1228, 1233,
      645,  738, 1217, 2527,  646, 1218, 2527, 1219,  647, 1220,
      648, 1221, 1225,  649, 1227,  735,  650,  736,  736,  736,
      736,  736,  736,  736, 1224, 1223, 1228, 1233, 2527,  738,
      744,  744,  744,  744,  744,  744,  744,  745,  745,  745,

      745,  745,  745,  745,  746,  746,  746,  746,  746,  746,
      746,  747,  747,  747,  747,  747,  747,  747,  748, 2527,
      749,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  750,  750, 2527, 1234, 1235, 1239,  748,  751,
      749,  749,  749,  749,  749,  749,  749,  752, 2527,  753,
      753,  753,  753,  753,  753,  753,  754,  754,  754,  754,
      754,  754,  754, 1234, 1235, 1239, 1240,  751,  755,  752,
     2527,  753,  753,  753,  753,  753,  753,  753,  756, 2527,
      757,  757,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  758,  758, 1240, 1242,  755, 1243,  756,  759,

      757,  757,  757,  757,  757,  757,  757,  760, 2527,  761,
      761,  761,  761,  761,  761,  761,  762,  762,  762,  762,
      762,  762,  762, 1242, 1244, 1243, 1245,  759,  763,  760,
     2527,  761,  761,  761,  761,  761,  761,  761,  764,  764,
      764,  764,  764,  764,  764,  765,  765,  765,  765,  765,
      765,  765, 1244, 2527, 1245,  766,  763,  767,  767,  767,
      767,  767,  767,  767,  768,  768,  768,  768,  768,  768,
      768, 2527, 1246, 1247, 1257,  766,  769,  767,  767,  767,
      767,  767,  767,  767,  770, 2527,  771,  771,  771,  771,
      771,  771,  771,  772,  772,  772,  772,  772,  772,  772,

     1246, 1247, 1257, 1260,  769,  773,  770, 2527,  771,  771,
      771,  771,  771,  771,  771,  774, 2527,  775,  775,  775,
      775,  775,  775,  775,  776,  776,  776,  776,  776,  776,
      776, 1260, 1262,  773, 1263,  774,  777,  775,  775,  775,
      775,  775,  775,  775,  778, 2527,  779,  779,  779,  779,
      779,  779,  779,  780,  780,  780,  780,  780,  780,  780,
     1262, 2527, 1263, 1264,  777,  781,  778, 2527,  779,  779,
      779,  779,  779,  779,  779,  782, 2527,  783,  783,  783,
      783,  783,  783,  783,  784,  784,  784,  784,  784,  784,
      784, 1264, 1265,  781, 1266,  782,  785,  783,  783,  783,

      783,  783,  783,  783,  786, 2527,  787,  787,  787,  787,
      787,  787,  787,  788,  788,  788,  788,  788,  788,  788,
     1265, 2527, 1266, 1267,  785,  789,  786, 2527,  787,  787,
      787,  787,  787,  787,  787,  790, 2527,  791,  791,  791,
      791,  791,  791,  791,  792,  792,  792,  792,  792,  792,
      792, 1267, 1268,  789, 1269,  790,  793,  791,  791,  791,
      791,  791,  791,  791,  794, 2527,  795,  795,  795,  795,
      795,  795,  795,  796,  796,  796,  796,  796,  796,  796,
     1268, 2527, 1269, 1270,  793,  797,  794, 2527,  795,  795,
      795,  795,  795,  795,  795,  798, 2527,  799,  799,  799,

      799,  799,  799,  799,  800,  800,  800,  800,  800,  800,
      800, 1270, 1271,  797, 1272,  798,  801,  799,  799,  799,
      799,  799,  799,  799,  802, 2527,  803,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
     1271, 1276, 1272, 1279,  801,  805,  802, 2527,  803,  803,
      803,  803,  803,  803,  803,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807, 1276,
     2178, 1279, 2178,  805,  808,  808,  808,  808,  808,  808,
      808,  809,  809,  809,  809,  809,  809,  809,  810, 2527,
      811,  811,  811,  811,  811,  811,  811,  812,  812,  812,

      812,  812,  812,  812, 2527, 1280, 1286, 1290,  810,  813,
      811,  811,  811,  811,  811,  811,  811,  815, 2527,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817, 1280, 1286, 1290, 2527,  813,  818,  815,
     2527,  816,  816,  816,  816,  816,  816,  816,  819,  819,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      820,  820,  821, 2179,  821, 2179,  818,  820,  820,  820,
      820,  820,  820,  820,  822,  822,  822,  822,  822,  822,
      822,  823, 2182,  823, 2182, 2527,  822,  822,  822,  822,
      822,  822,  822,  824,  824,  824,  824,  824,  824,  824,

      825, 2130,  825, 2130, 2527,  824,  824,  824,  824,  824,
      824,  824,  826,  826,  826,  826,  826,  826,  826,  827,
     2183,  827, 2183, 2527,  826,  826,  826,  826,  826,  826,
      826,  828,  828,  828,  828,  828,  828,  828,  829,  829,
      829,  829,  829,  829,  829,  830,  830,  830,  830,  830,
      830,  830,  831,  831,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  832,  832,  832,  833,  833,  833,  833,
      833,  833,  833,  834,  834,  834,  834,  834,  834,  834,
      835,  835,  835,  835,  835,  835,  835,  836,  836,  836,
      836,  836,  836,  836,  842,  842,  842,  842,  842,  842,

      842,  843,  843,  843,  843,  843,  843,  843,  844,  844,
      844,  844,  844,  844,  844,  845, 2527,  846,  846,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847, 1291, 1292, 1293, 1300,  845,  848,  846,  846,  846,
      846,  846,  846,  846,  849,  849,  849,  849,  849,  849,
      849,  850,  850,  850,  850,  850,  850,  850, 2527, 1291,
     1292, 1293, 1300, 2527,  848,  851,  851,  851,  851,  851,
      851,  851,  854,  854,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  855,  855,  858,  858,  858,  858,
      858,  858,  858,  866,  866,  866,  866,  866,  866,  866,

      867, 2527,  868,  868,  868,  868,  868,  868,  868,  869,
      869,  869,  869,  869,  869,  869, 1301, 2184, 2527, 2184,
      867,  870,  868,  868,  868,  868,  868,  868,  868,  871,
      871,  871,  871,  871,  871,  871,  872,  872,  872,  872,
      872,  872,  872, 2527, 1301,  873,  874,  873, 2527,  870,
      872,  872,  872,  872,  872,  872,  872,  875,  875,  875,
      875,  875,  875,  875,  876, 2140,  876, 2140, 2527,  875,
      875,  875,  875,  875,  875,  875,  877,  877,  877,  877,
      877,  877,  877,  878, 2141,  878, 2141, 2527,  877,  877,
      877,  877,  877,  877,  877,  879,  879,  879,  879,  879,

      879,  879,  880, 2196,  880, 2196, 2527,  879,  879,  879,
      879,  879,  879,  879,  881,  881,  881,  881,  881,  881,
      881,  882,  883,  882, 2527, 2527,  881,  881,  881,  881,
      881,  881,  881,  884,  884,  884,  884,  884,  884,  884,
      885, 2197,  885, 2197, 2527,  884,  884,  884,  884,  884,
      884,  884,  886,  886,  886,  886,  886,  886,  886,  887,
     2148,  887, 2148, 2527,  886,  886,  886,  886,  886,  886,
      886,  888,  888,  888,  888,  888,  888,  888,  889, 2162,
      889, 2162, 2527,  888,  888,  888,  888,  888,  888,  888,
      890,  890,  890,  890,  890,  890,  890,  891,  892,  891,

     2527, 2527,  890,  890,  890,  890,  890,  890,  890,  893,
      893,  893,  893,  893,  893,  893,  894, 2163,  894, 2163,
     2527,  893,  893,  893,  893,  893,  893,  893,  895,  895,
      895,  895,  895,  895,  895,  896, 2169,  896, 2169, 2527,
      895,  895,  895,  895,  895,  895,  895,  897,  897,  897,
      897,  897,  897,  897,  898, 2176,  898, 2176, 2527,  897,
      897,  897,  897,  897,  897,  897,  899,  899,  899,  899,
      899,  899,  899,  900,  901,  900, 2527, 2527,  899,  899,
      899,  899,  899,  899,  899,  902,  902,  902,  902,  902,
      902,  902,  903, 2177,  903, 2177, 2527,  902,  902,  902,

      902,  902,  902,  902,  904,  904,  904,  904,  904,  904,
      904,  905, 2178,  905, 2178, 2527,  904,  904,  904,  904,
      904,  904,  904,  906,  906,  906,  906,  906,  906,  906,
      907, 2179,  907, 2179, 2527,  906,  906,  906,  906,  906,
      906,  906,  912,  912,  912,  912,  912,  912,  912,  917,
      917,  917,  917,  917,  917,  917,  918,  918,  918,  918,
      918,  918,  918,  921,  921,  921,  921,  921,  921,  921,
      922,  922,  922,  922,  922,  922,  922,  923,  923,  923,
      923,  923,  923,  923,  931, 2527,  931, 1302,  931,  931,
     2527, 2527,  931,  931,  931,  931,  931,  931,  931,  932,

     2226,  932, 2226,  932,  932, 2527, 2527,  932,  932,  932,
      932,  932,  932,  932,  934, 1302,  934, 2527,  934,  934,
     2527, 2527,  934,  934,  934,  934,  934,  934,  934,  935,
      935,  935,  935,  935,  935,  935,  973, 2527,  973,  654,
      654,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,  655, 1303,  974, 1304,  975, 1305,  976,  656,
      656,  656,  656,  656,  656,  656,  657,  657,  657,  657,
      657,  657,  657,  977,  658,  658,  658,  658,  658,  658,
      658, 1303, 1306, 1304,  975, 1305,  976,  659,  659,  659,
      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,

      660,  977,  663,  663,  663,  663,  663,  663,  663, 2182,
     1306, 2182, 2527,  661,  664,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663, 1309,
     1016, 1314, 1016, 2527,  664, 1017, 1017, 1017, 1017, 1017,
     1017, 1017,  664,  667,  667,  667,  667,  667,  667,  667,
     1315, 2183, 2184, 2183, 2184,  668, 2233, 1309, 2233, 1314,
     2527,  665,  664,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667, 1273, 1315, 1018,
     1274, 1018,  668,  668, 1019, 1019, 1019, 1019, 1019, 1019,
     1019,  671,  671,  671,  671,  671,  671,  671, 1316, 1275,

     1317, 2527, 2235,  672, 2235, 1273, 2527, 2527, 1274,  669,
      668,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671, 1318, 1316, 1020, 1317, 1020,
      672,  672, 1021, 1021, 1021, 1021, 1021, 1021, 1021,  675,
      675,  675,  675,  675,  675,  675, 1319, 2196, 2197, 2196,
     2197,  676, 2241, 1318, 2241, 2527, 2527,  673,  672,  674,
      674,  674,  674,  674,  674,  674,  675,  675,  675,  675,
      675,  675,  675, 1320, 1319, 1022, 1321, 1022,  676,  676,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  679,  679,  679,
      679,  679,  679,  679, 1322, 2242, 1323, 2242, 2255,  680,

     2255, 1320, 2527, 2527, 1321,  677,  676,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      679, 1326, 1322, 1024, 1323, 1024,  680,  680, 1025, 1025,
     1025, 1025, 1025, 1025, 1025,  683,  683,  683,  683,  683,
      683,  683, 1327, 2262, 1328, 2262, 2226,  684, 2226, 1326,
     2269, 2527, 2269,  681,  680,  682,  682,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  683,  683, 1330,
     1327, 1026, 1328, 1026,  684,  684, 1027, 1027, 1027, 1027,
     1027, 1027, 1027,  687,  687,  687,  687,  687,  687,  687,
     1331, 2270, 1332, 2270, 2271,  688, 2271, 1330, 2233, 2527,

     2233,  685,  684,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  687,  687, 1333, 1331, 1028,
     1332, 1028,  688,  688, 1029, 1029, 1029, 1029, 1029, 1029,
     1029,  691,  691,  691,  691,  691,  691,  691, 1334, 2235,
     1335, 2235, 2241,  692, 2241, 1333, 2242, 2527, 2242,  689,
      688,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  691,  691, 1336, 1334, 1030, 1335, 1030,
      692,  692, 1031, 1031, 1031, 1031, 1031, 1031, 1031,  695,
      695,  695,  695,  695,  695,  695, 1337, 2255, 1338, 2255,
     2291,  696, 2291, 1336, 2262, 2527, 2262,  693,  692,  694,

      694,  694,  694,  694,  694,  694,  695,  695,  695,  695,
      695,  695,  695, 1342, 1337, 1032, 1338, 1032,  696,  696,
     1033, 1033, 1033, 1033, 1033, 1033, 1033,  697,  697,  697,
      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      698, 1342, 2527, 1343, 1344, 2527,  696,  699,  699,  699,
      699,  699,  699,  699,  700,  700,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  701,  701,  703, 2527,
      703, 1343, 1344,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  704,  704,  704,
      704,  704,  704,  704,  707,  707,  707,  707,  707,  707,

      707, 2269, 2270, 2269, 2270,  705,  708,  706,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,
      707, 1345, 1034, 1346, 1034, 2527,  708, 1035, 1035, 1035,
     1035, 1035, 1035, 1035,  708,  711,  711,  711,  711,  711,
      711,  711, 1347, 2271, 1348, 2271, 2291,  712, 2291, 1345,
     2331, 1346, 2331,  709,  708,  710,  710,  710,  710,  710,
      710,  710,  711,  711,  711,  711,  711,  711,  711, 1349,
     1347, 1036, 1348, 1036,  712,  712, 1037, 1037, 1037, 1037,
     1037, 1037, 1037,  715,  715,  715,  715,  715,  715,  715,
     1353, 2342, 1354, 2342, 2349,  716, 2349, 1349, 2352, 2527,

     2352,  713,  712,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  715, 1357, 1353, 1038,
     1354, 1038,  716,  716, 1039, 1039, 1039, 1039, 1039, 1039,
     1039,  719,  719,  719,  719,  719,  719,  719, 1358, 2353,
     1359, 2353, 2357,  720, 2357, 1357, 2363, 2527, 2363,  717,
      716,  718,  718,  718,  718,  718,  718,  718,  719,  719,
      719,  719,  719,  719,  719, 1360, 1358, 1040, 1359, 1040,
      720,  720, 1041, 1041, 1041, 1041, 1041, 1041, 1041,  729,
      729,  729,  729,  729,  729,  729,  730,  730,  730,  730,
      730,  730,  730, 1360, 1361, 1362, 2527, 2527,  720,  731,

      731,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  732,  732,  737,  737,  737,  737,  737,  737,  737,
     2527, 2527, 1361, 1362,  735,  738,  736,  736,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  737,  737,
     1363, 1042, 1364, 1042, 1365,  738, 1043, 1043, 1043, 1043,
     1043, 1043, 1043,  738,  739,  739,  739,  739,  739,  739,
      739,  740,  740,  740,  740,  740,  740,  740, 1363, 2366,
     1364, 2366, 1365,  738,  741,  741,  741,  741,  741,  741,
      741,  742,  742,  742,  742,  742,  742,  742,  743,  743,
      743,  743,  743,  743,  743,  744,  744,  744,  744,  744,

      744,  744,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  750,  750,  750,  750,  750,  750,  750,
     2331, 2370, 2331, 2370,  748,  751,  749,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  750,
     1367, 1044, 1378, 1044, 2527,  751, 1045, 1045, 1045, 1045,
     1045, 1045, 1045,  751,  754,  754,  754,  754,  754,  754,
      754, 1379, 2372, 1380, 2372, 2342,  755, 2342, 1367, 2349,
     1378, 2349,  752,  751,  753,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754, 1381, 1379,

     1046, 1380, 1046,  755,  755, 1047, 1047, 1047, 1047, 1047,
     1047, 1047,  758,  758,  758,  758,  758,  758,  758, 1383,
     2389, 1385, 2389, 2352,  759, 2352, 1381, 2353, 2527, 2353,
      756,  755,  757,  757,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  758,  758, 1386, 1383, 1048, 1385,
     1048,  759,  759, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
      762,  762,  762,  762,  762,  762,  762, 1387, 2357, 1388,
     2357, 2393,  763, 2393, 1386, 2363, 2527, 2363,  760,  759,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762, 1389, 1387, 1050, 1388, 1050,  763,

      763, 1051, 1051, 1051, 1051, 1051, 1051, 1051,  764,  764,
      764,  764,  764,  764,  764,  765,  765,  765,  765,  765,
      765,  765, 1389, 2397, 2366, 2397, 2366,  763,  768,  768,
      768,  768,  768,  768,  768, 2398, 2370, 2398, 2370,  766,
      769,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768, 1390, 1052, 1391, 1052, 2527,
      769, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  769,  772,
      772,  772,  772,  772,  772,  772, 1392, 2372, 1394, 2372,
     2412,  773, 2412, 1390, 2413, 1391, 2413,  770,  769,  771,
      771,  771,  771,  771,  771,  771,  772,  772,  772,  772,

      772,  772,  772, 1397, 1392, 1054, 1394, 1054,  773,  773,
     1055, 1055, 1055, 1055, 1055, 1055, 1055,  776,  776,  776,
      776,  776,  776,  776, 1398, 2414, 1399, 2414, 2389,  777,
     2389, 1397, 2393, 2527, 2393,  774,  773,  775,  775,  775,
      775,  775,  775,  775,  776,  776,  776,  776,  776,  776,
      776, 1400, 1398, 1056, 1399, 1056,  777,  777, 1057, 1057,
     1057, 1057, 1057, 1057, 1057,  780,  780,  780,  780,  780,
      780,  780, 1401, 2397, 1402, 2397, 2398,  781, 2398, 1400,
     2424, 2527, 2424,  778,  777,  779,  779,  779,  779,  779,
      779,  779,  780,  780,  780,  780,  780,  780,  780, 1403,

     1401, 1058, 1402, 1058,  781,  781, 1059, 1059, 1059, 1059,
     1059, 1059, 1059,  784,  784,  784,  784,  784,  784,  784,
     1406, 2426, 1409, 2426, 2427,  785, 2427, 1403, 2428, 2527,
     2428,  782,  781,  783,  783,  783,  783,  783,  783,  783,
      784,  784,  784,  784,  784,  784,  784, 1411, 1406, 1060,
     1409, 1060,  785,  785, 1061, 1061, 1061, 1061, 1061, 1061,
     1061,  788,  788,  788,  788,  788,  788,  788, 1412, 2412,
     1413, 2412, 2413,  789, 2413, 1411, 2414, 2527, 2414,  786,
      785,  787,  787,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  788, 1414, 1412, 1062, 1413, 1062,

      789,  789, 1063, 1063, 1063, 1063, 1063, 1063, 1063,  792,
      792,  792,  792,  792,  792,  792, 1415, 2424, 1416, 2424,
     2426,  793, 2426, 1414, 2427, 2527, 2427,  790,  789,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792, 1420, 1415, 1064, 1416, 1064,  793,  793,
     1065, 1065, 1065, 1065, 1065, 1065, 1065,  796,  796,  796,
      796,  796,  796,  796, 1421, 2428, 2450, 2428, 2450,  797,
     2452, 1420, 2452, 2527, 2527,  794,  793,  795,  795,  795,
      795,  795,  795,  795,  796,  796,  796,  796,  796,  796,
      796, 1424, 1421, 1066, 1418, 1066,  797,  797, 1067, 1067,

     1067, 1067, 1067, 1067, 1067,  800,  800,  800,  800,  800,
      800,  800, 1425, 1419, 2454, 2527, 2454,  801, 2450, 1424,
     2450, 2527, 1418,  798,  797,  799,  799,  799,  799,  799,
      799,  799,  800,  800,  800,  800,  800,  800,  800, 1422,
     1425, 1068, 1423, 1068,  801,  801, 1069, 1069, 1069, 1069,
     1069, 1069, 1069,  804,  804,  804,  804,  804,  804,  804,
     1431, 2452, 1432, 2452, 2454,  805, 2454, 1422, 2527, 2527,
     1423,  802,  801,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  804,  804, 1433, 1431, 1070,
     1432, 1070,  805,  805, 1071, 1071, 1071, 1071, 1071, 1071,

     1071,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      807,  807,  807,  807,  807, 1433, 1434, 1439, 2527, 2527,
      805,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  812,  812,  812,  812,  812,
      812,  812, 2527, 2527, 1434, 1439,  810,  813,  811,  811,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812, 1444, 1072, 1450, 1072, 2527,  813, 1073, 1073,
     1073, 1073, 1073, 1073, 1073,  813,  817,  817,  817,  817,
      817,  817,  817, 1455, 2470, 1456, 2470, 2470,  818, 2470,
     1444, 2485, 1450, 2485,  815,  813,  816,  816,  816,  816,

      816,  816,  816,  817,  817,  817,  817,  817,  817,  817,
     2527, 1455, 1074, 1456, 1074,  818,  818, 1075, 1075, 1075,
     1075, 1075, 1075, 1075,  819,  819,  819,  819,  819,  819,
      819,  821, 2488,  821, 2488, 2527,  820,  820,  820,  820,
      820,  820,  820,  818,  820,  820,  820,  820,  820,  820,
      820,  823, 2489,  823, 2489, 2527,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      825, 2485,  825, 2485, 2527,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  827,
     2501,  827, 2501, 2527,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  826,  826,  826,  826,  828,  828,
      828,  828,  828,  828,  828,  829,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  831,
      831,  831,  831,  831,  831,  831,  832,  832,  832,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  834,  834,  834,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  842,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  844,
      844,  844,  847,  847,  847,  847,  847,  847,  847, 2488,

     2489, 2488, 2489,  845,  848,  846,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  847, 1458,
     1076, 1459, 1076, 1460,  848, 1077, 1077, 1077, 1077, 1077,
     1077, 1077,  848,  849,  849,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  850,  850, 1458, 2508, 1459,
     2508, 1460,  848,  851,  851,  851,  851,  851,  851,  851,
      854,  854,  854,  854,  854,  854,  854,  855,  855,  855,
      855,  855,  855,  855,  858,  858,  858,  858,  858,  858,
      858,  866,  866,  866,  866,  866,  866,  866,  869,  869,
      869,  869,  869,  869,  869, 2509, 2501, 2509, 2501,  867,

      870,  868,  868,  868,  868,  868,  868,  868,  869,  869,
      869,  869,  869,  869,  869, 2516, 1078, 2516, 1078, 2527,
      870, 1079, 1079, 1079, 1079, 1079, 1079, 1079,  870,  871,
      871,  871,  871,  871,  871,  871,  873,  874,  873, 2527,
     2527,  872,  872,  872,  872,  872,  872,  872,  870,  872,
      872,  872,  872,  872,  872,  872, 1080, 2517, 1080, 2517,
     1461, 1081, 1081, 1081, 1081, 1081, 1081, 1081,  876, 2518,
      876, 2518, 2527,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  878, 1461,  878,
     2527, 2527,  877,  877,  877,  877,  877,  877,  877,  877,

      877,  877,  877,  877,  877,  877,  880, 2508,  880, 2508,
     2527,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  882,  883,  882, 2527, 1464,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881, 1082, 2509, 1082, 2509, 1465, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,  885, 1464,  885, 2527,
     2527,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  887, 1465,  887, 2527, 2527,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  889, 2519,  889, 2519, 2527,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  891,  892,  891, 2527, 1466,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890, 1084, 2520, 1084, 2520, 1467, 1085, 1085, 1085,
     1085, 1085, 1085, 1085,  894, 1466,  894, 2527, 2527,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  896, 1467,  896, 2527, 2527,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  898, 2516,  898, 2516, 2527,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,

      897,  900,  901,  900, 2527, 1468,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
     1086, 2517, 1086, 2517, 1469, 1087, 1087, 1087, 1087, 1087,
     1087, 1087,  903, 1468,  903, 2527, 2527,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  905, 1469,  905, 2527, 2527,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      907, 2518,  907, 2518, 2527,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  912,
      912,  912,  912,  912,  912,  912,  917,  917,  917,  917,

      917,  917,  917,  918,  918,  918,  918,  918,  918,  918,
      921,  921,  921,  921,  921,  921,  921,  922,  922,  922,
      922,  922,  922,  922,  923,  923,  923,  923,  923,  923,
      923,  931, 2527,  931, 1478,  931,  931, 2527, 2527,  931,
      931,  931,  931,  931,  931,  931,  932, 2519,  932, 2519,
      932,  932, 2527, 2527,  932,  932,  932,  932,  932,  932,
      932,  934, 1478,  934, 2527,  934,  934, 2527, 2527,  934,
      934,  934,  934,  934,  934,  934,  935,  935,  935,  935,
      935,  935,  935, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1033, 1033, 1033, 1033, 1033,

     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1047, 1047, 1047, 1047, 1047, 1047, 1047,

     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,

     1061, 1061, 1061, 1061, 1061, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1080, 1165,
     1080, 2527, 2527, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1082, 1166, 1082,
     2527, 2527, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1084, 1167, 1084, 2527,
     1479, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1086, 1168, 1086, 2527, 2527,

     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1248, 1479, 1248,
     2527, 2527, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250,
     2520, 1250, 2520, 2527, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1252, 1480, 1252, 1277, 2527, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1254, 2525, 1254, 2525, 1278, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1281, 2526, 1281, 2526, 2525,
     1480, 2525, 1277, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1481, 2527, 1248, 1282, 1248, 1278, 2527, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1482, 1483, 2526, 2527, 2526, 2527, 1250, 1481, 1250,

     2527, 1283, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1252, 2527, 1252, 1482,
     1483, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1254, 2527, 1254, 1368, 1484,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1340, 1373, 1369,
     1404, 1370, 1371, 1372, 1341, 1374, 1440, 1427, 1485, 1462,
     1405, 1428, 1429, 1430, 1435, 1441, 1368, 1484, 1436, 1437,
     1438, 2527, 1463, 2527, 1486, 1340, 1373, 1369, 1404, 1370,
     1371, 1372, 1341, 1374, 1440, 1427, 1485, 1462, 1405, 1428,
     1429, 1430, 1435, 1441, 1487, 1488, 1436, 1437, 1438, 1451,

     1463, 1451, 1486, 1490, 1491, 1492, 1494, 1495, 1496, 1497,
     1499, 1500, 1452, 1503, 1504, 1505, 1506, 1453, 1508, 1509,
     2527, 1517, 1487, 1488, 2527, 1518, 2527, 1521, 1522, 2527,
     2527, 1490, 1491, 1492, 1494, 1495, 1496, 1497, 1499, 1500,
     1519, 1503, 1504, 1505, 1506, 1454, 1508, 1509, 1510, 1517,
     1520, 1523, 1511, 1518, 1512, 1521, 1522, 1513, 1514, 1532,
     1534, 1535, 1544, 1545, 1546, 1515, 1547, 1557, 1519, 1561,
     1562, 1563, 1564, 1565, 1566, 1568, 1510, 1569, 1520, 1523,
     1511, 1570, 1512, 1571, 1572, 1513, 1514, 1532, 1534, 1535,
     1544, 1545, 1546, 1515, 1547, 1557, 1573, 1561, 1562, 1563,

     1564, 1565, 1566, 1568, 1574, 1569, 1575, 1576, 1581, 1570,
     1582, 1571, 1572, 1585, 1594, 1597, 1598, 1599, 1600, 1601,
     1602, 1603, 1604, 1606, 1573, 1607, 1609, 1610, 1611, 1612,
     1613, 1615, 1574, 1620, 1575, 1576, 1581, 1614, 1582, 1621,
     1622, 1585, 1594, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1606, 1623, 1607, 1609, 1610, 1611, 1612, 1613, 1615,
     1616, 1620, 1616, 1624, 1627, 1614, 1625, 1621, 1622, 1630,
     1631, 1632, 1643, 1617, 1644, 1645, 1652, 1657, 1618, 1658,
     1623, 1663, 1626, 1665, 1666, 1667, 1668, 1669, 2527, 1673,
     2527, 1624, 1627, 1674, 1625, 1675, 1676, 1630, 1631, 1632,

     1643, 1677, 1644, 1645, 1652, 1657, 1619, 1658, 1678, 1663,
     1626, 1665, 1666, 1667, 1668, 1669, 1670, 1673, 1670, 1679,
     1680, 1674, 1681, 1675, 1676, 1682, 1683, 1686, 1687, 1677,
     1688, 1689, 1694, 1696, 1671, 1697, 1678, 1698, 1699, 1702,
     1703, 1700, 1704, 1705, 1706, 1707, 1708, 1679, 1680, 1701,
     1681, 1709, 1710, 1682, 1683, 1686, 1687, 1711, 1688, 1689,
     1694, 1696, 1672, 1697, 1712, 1698, 1699, 1702, 1703, 1700,
     1704, 1705, 1706, 1707, 1708, 1713, 1714, 1701, 1718, 1709,
     1710, 1719, 1720, 1721, 1722, 1711, 1723, 1724, 1725, 1726,
     1728, 1729, 1712, 1730, 1734, 1735, 1736, 1742, 1743, 1744,

     1745, 1748, 1749, 1713, 1714, 1751, 1718, 1752, 1753, 1719,
     1720, 1721, 1722, 1754, 1723, 1724, 1725, 1726, 1728, 1729,
     1756, 1730, 1734, 1735, 1736, 1742, 1743, 1744, 1745, 1748,
     1749, 1757, 1760, 1751, 1761, 1752, 1753, 1762, 1766, 1767,
     1769, 1754, 1770, 1771, 1773, 1774, 1775, 1776, 1756, 1777,
     1778, 1779, 1780, 1781, 1782, 1785, 1786, 1787, 1788, 1757,
     1760, 1790, 1761, 1791, 1792, 1762, 1766, 1767, 1769, 1793,
     1770, 1771, 1773, 1774, 1775, 1776, 1794, 1777, 1778, 1779,
     1780, 1781, 1782, 1785, 1786, 1787, 1788, 1795, 1796, 1790,
     1797, 1791, 1792, 1798, 1799, 1800, 1801, 1793, 1802, 1803,

     1804, 1806, 1807, 1808, 1794, 1809, 1810, 1811, 1812, 1813,
     1816, 1814, 1817, 1818, 1819, 1795, 1796, 1820, 1797, 1815,
     1821, 1798, 1799, 1800, 1801, 1822, 1802, 1803, 1804, 1806,
     1807, 1808, 1829, 1809, 1810, 1811, 1812, 1813, 1816, 1814,
     1817, 1818, 1819, 1823, 1833, 1820, 1824, 1815, 1821, 1825,
     1834, 1835, 1826, 1822, 1838, 1844, 1841, 1849, 1850, 1853,
     1829, 1842, 1854, 1857, 1859, 1860, 1861, 1862, 1863, 1864,
     1843, 1823, 1833, 1865, 1824, 1866, 1858, 1825, 1834, 1835,
     1826, 1867, 1838, 1844, 1841, 1849, 1850, 1853, 1868, 1842,
     1854, 1857, 1859, 1860, 1861, 1862, 1863, 1864, 1843, 1869,

     1870, 1865, 1873, 1866, 1858, 1874, 1875, 1876, 1877, 1867,
     1878, 1879, 1882, 1883, 1886, 1887, 1868, 1890, 1891, 1892,
     1893, 1896, 1897, 1898, 1899, 1900, 1901, 1869, 1870, 1902,
     1873, 1903, 1904, 1874, 1875, 1876, 1877, 1906, 1878, 1879,
     1882, 1883, 1886, 1887, 1908, 1890, 1891, 1892, 1893, 1896,
     1897, 1898, 1899, 1900, 1901, 1909, 1910, 1902, 1912, 1903,
     1904, 1914, 1915, 1916, 1922, 1906, 1917, 1923, 1925, 1928,
     1929, 1930, 1908, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
     1938, 1940, 1941, 1909, 1910, 1942, 1912, 1943, 1946, 1914,
     1915, 1916, 1922, 1947, 1917, 1923, 1925, 1928, 1929, 1930,

     1950, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1940,
     1941, 1951, 1955, 1942, 1958, 1943, 1946, 1959, 1961, 1971,
     1961, 1947, 1972, 1973, 1974, 1975, 1976, 1977, 1950, 1978,
     1979, 1982, 1983, 1984, 1985, 1987, 1962, 1988, 1989, 1951,
     1955, 1991, 1958, 1992, 1993, 1959, 1995, 1971, 1996, 1997,
     1972, 1973, 1974, 1975, 1976, 1977, 1998, 1978, 1979, 1982,
     1983, 1984, 1985, 1987, 1963, 1988, 1989, 1999, 2000, 1991,
     2000, 1992, 1993, 2005, 1995, 2006, 1996, 1997, 2011, 2012,
     2013, 2014, 2015, 2016, 1998, 2017, 2001, 2018, 2020, 2021,
     2023, 2024, 2025, 2026, 2028, 1999, 2032, 2033, 2035, 2036,

     2037, 2005, 2039, 2006, 2042, 2043, 2011, 2012, 2013, 2014,
     2015, 2016, 2044, 2017, 2002, 2018, 2020, 2021, 2023, 2024,
     2025, 2026, 2028, 2047, 2032, 2033, 2035, 2036, 2037, 2048,
     2039, 2049, 2042, 2043, 2050, 2051, 2052, 2055, 2056, 2057,
     2044, 2058, 2059, 2061, 2062, 2063, 2065, 2066, 2527, 2527,
     2003, 2047, 2003, 2069, 2072, 2073, 2074, 2048, 2007, 2049,
     2007, 2075, 2050, 2051, 2052, 2055, 2056, 2057, 2004, 2058,
     2059, 2061, 2062, 2063, 2065, 2066, 2008, 2009, 2070, 2009,
     2070, 2069, 2072, 2073, 2074, 2076, 2077, 2527, 2078, 2075,
     2078, 2080, 2087, 2080, 2088, 2010, 2071, 2083, 2089, 2083,

     2090, 2091, 2093, 2094, 2095, 2097, 2079, 2099, 2104, 2081,
     2084, 2085, 2106, 2076, 2077, 2086, 2100, 2107, 2100, 2108,
     2087, 2102, 2088, 2102, 2109, 2045, 2089, 2045, 2090, 2091,
     2093, 2094, 2095, 2097, 2101, 2099, 2104, 2082, 2114, 2103,
     2106, 2115, 2110, 2046, 2110, 2107, 2053, 2108, 2053, 2116,
     2117, 2118, 2109, 2119, 2121, 2119, 2121, 2123, 2127, 2123,
     2111, 2527, 2136, 2125, 2054, 2125, 2114, 2137, 2138, 2115,
     2527, 2120, 2122, 2527, 2128, 2124, 2128, 2116, 2117, 2118,
     2070, 2126, 2070, 2131, 2139, 2131, 2127, 2133, 2149, 2133,
     2136, 2078, 2129, 2078, 2527, 2137, 2138, 2080, 2071, 2080,

     2142, 2132, 2143, 2150, 2083, 2134, 2083, 2151, 2144, 2079,
     2144, 2146, 2139, 2146, 2152, 2081, 2149, 2153, 2154, 2155,
     2156, 2157, 2086, 2158, 2159, 2160, 2145, 2161, 2142, 2147,
     2143, 2150, 2100, 2135, 2100, 2151, 2102, 2164, 2102, 2165,
     2167, 2168, 2152, 2170, 2171, 2153, 2154, 2155, 2156, 2157,
     2101, 2158, 2159, 2160, 2103, 2161, 2110, 2172, 2110, 2173,
     2174, 2175, 2119, 2527, 2119, 2164, 2527, 2165, 2167, 2168,
     2527, 2170, 2171, 2121, 2111, 2121, 2123, 2125, 2123, 2125,
     2120, 2180, 2128, 2180, 2128, 2172, 2527, 2173, 2174, 2175,
     2131, 2122, 2131, 2190, 2124, 2126, 2133, 2194, 2133, 2181,

     2129, 2185, 2186, 2187, 2188, 2191, 2188, 2191, 2132, 2195,
     2144, 2198, 2144, 2203, 2134, 2146, 2199, 2146, 2199, 2205,
     2206, 2190, 2189, 2192, 2201, 2194, 2201, 2207, 2145, 2185,
     2186, 2187, 2208, 2147, 2200, 2209, 2210, 2195, 2211, 2198,
     2212, 2203, 2202, 2213, 2215, 2213, 2216, 2205, 2206, 2217,
     2218, 2219, 2220, 2222, 2220, 2207, 2223, 2225, 2527, 2527,
     2208, 2214, 2234, 2209, 2210, 2180, 2211, 2180, 2212, 2227,
     2221, 2227, 2215, 2229, 2216, 2229, 2527, 2217, 2218, 2219,
     2231, 2222, 2231, 2181, 2223, 2225, 2188, 2228, 2188, 2238,
     2234, 2230, 2191, 2236, 2191, 2239, 2237, 2240, 2232, 2243,

     2199, 2201, 2199, 2201, 2189, 2244, 2247, 2248, 2251, 2252,
     2192, 2253, 2254, 2245, 2213, 2246, 2213, 2238, 2200, 2202,
     2256, 2236, 2256, 2239, 2237, 2240, 2258, 2243, 2259, 2260,
     2261, 2263, 2214, 2244, 2247, 2248, 2251, 2252, 2257, 2253,
     2254, 2245, 2220, 2246, 2220, 2264, 2268, 2227, 2265, 2227,
     2229, 2272, 2229, 2266, 2258, 2273, 2259, 2260, 2261, 2263,
     2221, 2267, 2231, 2274, 2231, 2228, 2275, 2276, 2230, 2277,
     2278, 2279, 2280, 2264, 2268, 2281, 2265, 2282, 2283, 2272,
     2232, 2266, 2284, 2273, 2286, 2287, 2288, 2289, 2290, 2267,
     2292, 2274, 2285, 2295, 2275, 2276, 2296, 2277, 2278, 2279,

     2280, 2297, 2299, 2281, 2300, 2282, 2283, 2256, 2301, 2256,
     2284, 2305, 2286, 2287, 2288, 2289, 2290, 2293, 2292, 2293,
     2285, 2295, 2306, 2307, 2296, 2257, 2302, 2310, 2302, 2297,
     2299, 2308, 2300, 2308, 2315, 2294, 2301, 2316, 2311, 2305,
     2311, 2313, 2317, 2313, 2303, 2318, 2320, 2318, 2321, 2309,
     2306, 2307, 2322, 2323, 2527, 2310, 2312, 2326, 2329, 2314,
     2330, 2334, 2315, 2319, 2324, 2316, 2324, 2527, 2338, 2327,
     2317, 2327, 2304, 2293, 2320, 2293, 2321, 2332, 2339, 2332,
     2322, 2323, 2325, 2340, 2341, 2326, 2329, 2328, 2330, 2334,
     2335, 2294, 2335, 2346, 2347, 2333, 2338, 2302, 2348, 2302,

     2343, 2344, 2345, 2354, 2527, 2308, 2339, 2308, 2336, 2355,
     2356, 2340, 2341, 2527, 2350, 2303, 2350, 2311, 2360, 2311,
     2361, 2346, 2347, 2309, 2362, 2313, 2348, 2313, 2343, 2344,
     2345, 2354, 2351, 2369, 2527, 2312, 2337, 2355, 2356, 2318,
     2358, 2318, 2358, 2314, 2527, 2324, 2360, 2324, 2361, 2364,
     2527, 2364, 2362, 2327, 2367, 2327, 2367, 2319, 2359, 2371,
     2332, 2369, 2332, 2325, 2335, 2376, 2335, 2365, 2373, 2374,
     2375, 2328, 2368, 2377, 2378, 2379, 2527, 2380, 2333, 2380,
     2386, 2382, 2336, 2382, 2387, 2388, 2384, 2371, 2384, 2350,
     2391, 2350, 2358, 2376, 2358, 2381, 2373, 2374, 2375, 2383,

     2394, 2377, 2378, 2379, 2385, 2395, 2396, 2351, 2386, 2364,
     2359, 2364, 2387, 2388, 2367, 2401, 2367, 2399, 2391, 2399,
     2402, 2404, 2402, 2404, 2406, 2408, 2406, 2365, 2394, 2409,
     2410, 2411, 2368, 2395, 2396, 2400, 2415, 2416, 2403, 2405,
     2417, 2418, 2407, 2401, 2380, 2382, 2380, 2382, 2384, 2419,
     2384, 2420, 2423, 2408, 2399, 2425, 2399, 2409, 2410, 2411,
     2429, 2527, 2381, 2383, 2415, 2416, 2385, 2431, 2417, 2418,
     2432, 2402, 2400, 2402, 2404, 2527, 2404, 2419, 2435, 2420,
     2423, 2527, 2406, 2425, 2406, 2433, 2438, 2433, 2429, 2403,
     2441, 2436, 2405, 2436, 2439, 2431, 2439, 2442, 2432, 2443,

     2407, 2444, 2445, 2434, 2446, 2447, 2435, 2448, 2449, 2437,
     2451, 2453, 2440, 2433, 2438, 2433, 2455, 2456, 2441, 2436,
     2457, 2436, 2439, 2460, 2439, 2442, 2461, 2443, 2462, 2444,
     2445, 2434, 2446, 2447, 2463, 2448, 2449, 2437, 2451, 2453,
     2440, 2458, 2464, 2458, 2455, 2456, 2465, 2466, 2457, 2467,
     2468, 2460, 2469, 2458, 2461, 2458, 2462, 2479, 2471, 2459,
     2471, 2480, 2463, 2476, 2481, 2476, 2473, 2482, 2473, 2483,
     2464, 2459, 2484, 2527, 2465, 2466, 2472, 2467, 2468, 2474,
     2469, 2477, 2527, 2527, 2475, 2479, 2471, 2497, 2471, 2480,
     2498, 2473, 2481, 2473, 2486, 2482, 2486, 2483, 2527, 2476,

     2484, 2476, 2499, 2500, 2472, 2490, 2491, 2492, 2493, 2475,
     2493, 2495, 2487, 2495, 2486, 2497, 2486, 2477, 2498, 2502,
     2504, 2502, 2504, 2506, 2514, 2506, 2494, 2515, 2527, 2496,
     2499, 2500, 2487, 2490, 2491, 2492, 2527, 2503, 2505, 2527,
     2493, 2507, 2493, 2495, 2510, 2495, 2510, 2512, 2502, 2512,
     2502, 2504, 2514, 2504, 2506, 2515, 2506, 2510, 2494, 2510,
     2527, 2496, 2511, 2527, 2527, 2513, 2503, 2527, 2512, 2505,
     2512, 2521, 2507, 2521, 2523, 2511, 2523, 2521, 2523, 2521,
     2523, 2527, 2527, 2527, 2527, 2527, 2513, 2527, 2527, 2522,
     2527, 2527, 2524, 2527, 2527, 2522, 2524,  318,  318,  318,

      318,  318,  397,  397,  397,  397,  397,  398,  398,  398,
      398,  398,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  402,  402,  402,
      402,  402,  403,  403,  403,  403,  403,  404,  404,  404,
      404,  404,  409,  409,  409,  409,  409,  410,  410,  410,
      410,  410,  474,  474,  474,  474,  474,  496,  496,  496,
      496,  496,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  499,  499,  499,  499,  499,  500,  500,  500,
      500,  500,  510,  510,  510,  510,  510,  511,  511,  511,
      511,  511,  514,  514,  514,  514,  514,  515,  515,  515,

      515,  515,  517,  517,  517,  517,  517,  518,  518,  518,
      518,  518,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  521,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  523,  523,  523,  523,  523,  561,  561,  561,
      561,  561,  562,  562,  562,  562,  562,  563,  563,  563,
      563,  563,  564,  564,  564,  564,  564,  566,  566,  566,
      566,  566,  567,  567,  567,  567,  567,  568,  568,  568,
      568,  568,  569,  569,  569,  569,  569,  572,  572,  572,
      572,  572,  573,  573,  573,  573,  573,  577,  577,  577,
      577,  577,  578,  578,  578,  578,  578,  582,  582,  582,

      582,  582,  588,  588,  588,  588,  588,  721,  721,  722,
      722,  723,  723,  724,  724,  725,  725,  726,  726,  727,
      727,  728,  728,  734,  734,  814,  814,  837,  837,  838,
      838,  839,  839,  840,  840,  841,  841,  853,  853,  919,
      919,  920,  920,  924,  924,  925,  925, 2527,  925,  925,
      928, 2527, 2527,  928,  928,  933,  933,  721,  721,  722,
      722,  723,  723,  724,  724,  725,  725,  726,  726,  727,
      727,  728,  728,  734,  734,  814,  814,  837,  837,  838,
      838,  839,  839,  840,  840,  841,  841,  853,  853,  919,
      919,  920,  920,  924,  924,  925,  925, 2527,  925,  925,

      928, 2527, 2527,  928,  928,  933,  933,  317, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527
    } ;

static yyconst flex_int16_t yy_chk[12683] =
    {   0,
        0,    1,    1,    1, 2645,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3, 2644,    3,  301,  301,  301,  341,  301,
      341,    3,    3,    3,    3,    3,    3,    3,    4,    4,

        4, 2643,    4,  302,  302,  302,  341,  302, 2642,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5, 2641,
        5,  303,  303,  303,  613,  303,  613,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6, 2640,    6,  304,
      304,  304,  613,  304, 2639,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7, 2638,    7,  305,  305,  305,
      614,  305,  614,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8, 2637,    8,  306,  306,  306,  614,  306,
     2636,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,  319,    9,  319,  579,  319,  579, 2635,  579,    9,

        9,    9,    9,    9,    9,    9,   10,   10,   10,  583,
       10,  583,  591,  583,  591, 2634,  591,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,  615,   11,  615,
      618,  619,  618,  619, 2633,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  620,   12,  620,  618,  619,
      621, 2632,  621,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,  620,   13,  622, 2631,  622,  621, 2630,
     2629,   13,   13,   13,   13,   13,   13,   13,   14,   14,
       14, 2627,   14,  622,  651,  652,  651,  652, 2619,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  926,

       15,  926,  651,  926,  943, 2604,  943,   15,   15,   15,
       15,   15,   15,   15,   16,   16,   16,  929,   16,  929,
     2603,  929,  943, 2602, 2601,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,  956,   17,  956,   17, 2600,
       17,   17, 2599,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,  956,   18,  957,   18,  957,   18,   18,
     2598,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,  958,   19,  958,   19, 2597,   19,   19, 2596,   19,
       19,   19,   19,   19,   19,   19,   20,   20,   20,  961,
       20,  961,   20, 2595,   20,   20, 2594,   20,   20,   20,

       20,   20,   20,   20,   21,   21,   21,  961,   21,  962,
       21,  962,   21,   21, 2593,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22,  963,   22,  963,   22, 2592,
       22,   22, 2591,   22,   22,   22,   22,   22,   22,   22,
       23,   23,   23,  963,   23,  964,   23,  964,   23,   23,
     2590,   23,   23,   23,   23,   23,   23,   23,   24,   24,
       24,  965,   24,  965,   24, 2589,   24,   24, 2588,   24,
       24,   24,   24,   24,   24,   24,   25,   25,   25,  965,
       25,  966,   25,  966,   25,   25, 2586,   25,   25,   25,
       25,   25,   25,   25,   26,   26,   26,  967,   26,  967,

       26, 2578,   26,   26, 2463,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27,  967,   27,  968,   27,  968,
       27,   27, 2409,   27,   27,   27,   27,   27,   27,   27,
       28,   28,   28,  969,   28,  969,   28, 2395,   28,   28,
     2394,   28,   28,   28,   28,   28,   28,   28,   29,   29,
       29,  969,   29,  970,   29,  970,   29,   29, 2356,   29,
       29,   29,   29,   29,   29,   29,   30,   30,   30,  973,
       30,  973,   30, 2354,   30,   30, 2264,   30,   30,   30,
       30,   30,   30,   30,   31,   31,   31,  973,   31,  974,
       31,  974,   31,   31, 2208,   31,   31,   31,   31,   31,

       31,   31,   32,   32,   32, 1014,   32, 1014,   32, 2207,
       32,   32, 2174,   32,   32,   32,   32,   32,   32,   32,
       33,   33,   33, 1090,   33, 1090,   33, 2153,   33,   33,
     2139,   33,   33,   33,   33,   33,   33,   33,   34,   34,
       34, 1090,   34, 1091,   34, 1091,   34,   34, 2107,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35, 2052,
       35, 1091, 1096, 1097, 1096, 1097, 2039,   35,   35,   35,
       35,   35,   35,   35,   36,   36,   36, 1110,   36, 1110,
     1096, 1113, 1114, 1113, 1114,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37, 1115,   37, 1115, 1116, 1117,

     1116, 1117, 2037,   37,   37,   37,   37,   37,   37,   37,
       38,   38,   38, 1119,   38, 1119, 1120, 1149, 1120, 1149,
     2033,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39, 1119,   39, 1979, 1150, 1149, 1150, 1977, 1973,   39,
       39,   39,   39,   39,   39,   39,   40,   40,   40, 1154,
       40, 1154, 1150, 1171, 1172, 1171, 1172,   40,   40,   40,
       40,   40,   40,   40,   41,   41,   41, 1154,   41, 1914,
     1173, 1171, 1173, 1883, 1873,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1174,   42, 1174, 1173, 1179,
     1198, 1179, 1198,   42,   42,   42,   42,   42,   42,   42,

       43,   43,   43, 1199,   43, 1199, 1866, 1200, 1198, 1200,
     1782,   43,   43,   43,   43,   43,   43,   43,   44,   44,
       44, 1205,   44, 1205, 1230, 1200, 1230, 1781, 1710,   44,
       44,   44,   44,   44,   44,   44,   45,   45,   45, 1205,
       45, 1207,   45, 1207,   45, 1709, 1698,   45,   45,   45,
       45,   45,   45,   45,   46,   46,   46, 1689,   46, 1207,
       46, 1216,   46, 1216, 1680,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47, 1218,   47, 1218, 1219, 1216,
     1219, 1679, 1676,   47,   47,   47,   47,   47,   47,   47,
       48,   48,   48, 1218,   48, 1229, 1219, 1229, 1232, 1667,

     1232,   48,   48,   48,   48,   48,   48,   48,   49,   49,
       49, 1666,   49, 1229,   49, 1497,   49,   49, 1481,   49,
       49,   49,   49,   49,   49,   49,   50,   50,   50, 1231,
       50, 1231,   50, 1480,   50,   50, 1475,   50,   50,   50,
       50,   50,   50,   50,   51,   51,   51, 1231,   51, 1236,
       51, 1236,   51,   51, 1460,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1444,   52, 1236,   52, 1432,
       52,   52, 1420,   52,   52,   52,   52,   52,   52,   52,
       53,   53,   53, 1237,   53, 1237,   53, 1416,   53,   53,
     1402,   53,   53,   53,   53,   53,   53,   53,   54,   54,

       54, 1258,   54, 1258,   54, 1398,   54,   54, 1380,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55, 1259,
       55, 1259,   55, 1362,   55,   55, 1353,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,  324,   56, 1282,
       56, 1282,   56,   56,  326,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1342,   57,   57,   57,
       57,   58,   58,   58,   58,  324,   58,   58,   58,   58,
     1335,   57,  326,  327,  329,  330,   59,   59,   59,   59,
       58,   59,   59,   59,   59,   60,   60,   60,   60,  329,
       60,   60,   60,   60, 1268,   59, 1268, 1287,   57, 1287,

      331,  327,  329,  330,   60, 1327, 1267,   58,   61,   61,
       61,   61, 1268,   61,   61,   61,   61,  329,   62,   62,
       62,   62,   59,   62,   62,   62,   62,   61,  331,  332,
      336,   60,  338,   63,   63,   63,   63,   62,   63,   63,
       63,   63,   64,   64,   64,   64,  342,   64,   64,   64,
       64, 1271,   63, 1271,   61, 1247, 1208,  332,  336,  593,
      338,   64, 1206, 1196,   62,   65,   65,   65,   65, 1271,
       65,   65,   65,   65,  342,   66,   66,   66,   66,   63,
       66,   66,   66,   66,   65,  595,  337,  593,   64,  596,
       67,   67,   67,   67,   66,   67,   67,   67,   67,   68,

       68,   68,   68,  337,   68,   68,   68,   68, 1281,   67,
     1281,   65, 1195,  595,  337,  597,  598,  596,   68, 1176,
     1169,   66,   69,   69,   69,   69, 1281,   69,   69,   69,
       69,  337,   70,   70,   70,   70,   67,   70,   70,   70,
       70,   69, 1158,  597,  598,   68,  599,   71,   71,   71,
       71,   70,   71,   71,   71,   71,   72,   72,   72,   72,
      600,   72,   72,   72,   72, 1289,   71, 1289,   69,   73,
       73,   73,  601,   73,  599,   72,  602, 1295,   70, 1295,
       73,   73,   73,   73,   73,   73,   73,  603,  600,  604,
      605,  606,  608,   71,   74,   74,   74, 1298,   74, 1298,

      601, 1308,   72, 1308,  602,   74,   74,   74,   74,   74,
       74,   74,   75,   75,   75,  603,   75,  604,  605,  606,
      608, 1155, 1146,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76, 1286,   76, 1286, 1288, 1294, 1288, 1294,
     1143,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77, 1286,   77, 1125, 1288, 1294, 1297, 1012, 1297,   77,
       77,   77,   77,   77,   77,   77,   78,   78,   78, 1307,
       78, 1307, 1003, 1310, 1297, 1310,  990,   78,   78,   78,
       78,   78,   78,   78,   79,   79,   79, 1307,   79,  979,
     1311, 1310, 1311,  978,  971,   79,   79,   79,   79,   79,

       79,   79,   80,   80,   80,  609,   80, 1313, 1324, 1313,
     1324,  953,  952,   80,   80,   80,   80,   80,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  944,  609,  610,   83,   83,   83,   83,   81,
       83,   83,   83,   83,   84,   84,   84,   84,  942,   84,
       84,   84,   84,  607,   83,  343,  343,  343,  343,  343,
      343,  343,  610,   84,  611,  612,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  594,
      616,   83,  617,   87,   87,   87,   82,   87,  317,  623,
       84,  624,  611,  612,   87,   87,   87,   87,   87,   87,

       87,  344,  344,  344,  344,  344,  344,  344,  616,  626,
      617,  627,  308,   82,   85,   85,   85,  623,   85,  624,
       85,    0,   85,   85,    0,   85,   85,   85,   85,   85,
       85,   85,   86,   86,   86,    0,   86,  626,   86,  627,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       88,   88,   88, 1312,   88, 1312, 1323, 1325, 1323, 1325,
        0,   88,   88,   88,   88,   88,   88,   88,   89,   89,
       89, 1312,   89, 1329, 1323, 1329, 1351,    0, 1351,   89,
       89,   89,   89,   89,   89,   89,   90,   90,   90, 1352,
       90, 1352,    0, 1355, 1351, 1355,    0,   90,   90,   90,

       90,   90,   90,   90,   91,   91,   91, 1356,   91, 1356,
     1366, 1355, 1366,    0,    0,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,    0,   92, 1357, 1357, 1357,
     1357,    0,    0,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93, 1375,   93, 1375, 1376, 1377, 1376, 1377,
        0,   93,   93,   93,   93,   93,   93,   93,   94,   94,
       94, 1375,   94, 1378, 1379, 1378, 1379,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,    0,
       95, 1378, 1379, 1381, 1382, 1381, 1382,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96, 1384,   96, 1384,

     1393, 1381, 1393,    0,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97, 1395,   97, 1395, 1396, 1407,
     1396, 1407,    0,   97,   97,   97,   97,   97,   97,   97,
       98,   98,   98, 1408,   98, 1408, 1411, 1407, 1411,    0,
        0,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99, 1427,   99, 1427, 1411, 1428, 1429, 1428, 1429,   99,
       99,   99,   99,   99,   99,   99,  100,  100,  100, 1427,
      100,    0,    0, 1428, 1429,    0,    0,  100,  100,  100,
      100,  100,  100,  100,  101,  101,  101, 1430,  101, 1430,
     1435, 1436, 1435, 1436,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102, 1430,  102,    0, 1435, 1436,
     1437,    0, 1437,  102,  102,  102,  102,  102,  102,  102,
      103,  103,  103, 1438,  103, 1438,    0, 1442, 1437, 1442,
        0,  103,  103,  103,  103,  103,  103,  103,  104,  104,
      104, 1438,  104, 1445, 1453, 1445, 1453,    0,    0,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105, 1446,
      105, 1446,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  106, 1446,  106, 1447,
      106, 1447,  106,  106,    0,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107, 1447,  107,    0,

      107,  107,    0,  107,  107,  107,  107,  107,  107,  107,
      108,  108,  108, 1448,  108, 1448,  108,    0,  108,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109, 1448,  109, 1449,  109, 1449,  109,  109,    0,  109,
      109,  109,  109,  109,  109,  109,  110,  110,  110,    0,
      110, 1449,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  111,  111,  111, 1451,  111, 1451,
      111,    0,  111,  111,    0,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1451,  112, 1452,  112, 1452,
      112,  112,    0,  112,  112,  112,  112,  112,  112,  112,

      113,  113,  113,    0,  113, 1452, 1470, 1471, 1470, 1471,
        0,  113,  113,  113,  113,  113,  113,  113,  114,  114,
      114, 1472,  114, 1472, 1473, 1471, 1473,    0,    0,  114,
      114,  114,  114,  114,  114,  114,  115,  115,  115, 1474,
      115, 1474, 1473, 1476, 1477, 1476, 1477,  115,  115,  115,
      115,  115,  115,  115,  116,  116,  116, 1483,  116, 1483,
     1498, 1476, 1498,    0,    0,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117, 1483,  117, 1484,  117, 1484,
      117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  118,    0,  118, 1484,  118,    0,  118,  118,

        0,  118,  118,  118,  118,  118,  118,  118,  119,  119,
      119, 1485,  119, 1485,  119,    0,  119,  119,    0,  119,
      119,  119,  119,  119,  119,  119,  120,  120,  120, 1485,
      120, 1486,  120, 1486,  120,  120,    0,  120,  120,  120,
      120,  120,  120,  120,  121,  121,  121,    0,  121, 1486,
      121,    0,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122, 1488,  122, 1488,  122,    0,
      122,  122,    0,  122,  122,  122,  122,  122,  122,  122,
      123,  123,  123, 1488,  123, 1501,  123, 1501,  123,  123,
        0,  123,  123,  123,  123,  123,  123,  123,  124,  124,

      124,    0,  124, 1501,  124,    0,  124,  124,    0,  124,
      124,  124,  124,  124,  124,  124,  125,  125,  125, 1502,
      125, 1502,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  126,  126,  126, 1517,  126, 1517,
      126,    0,  126,  126,    0,  126,  126,  126,  126,  126,
      126,  126,  127,  127,  127, 1517,  127, 1521,  127, 1521,
      127,  127,    0,  127,  127,  127,  127,  127,  127,  127,
      128,  128,  128,    0,  128, 1521,  128,    0,  128,  128,
        0,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129, 1522,  129, 1522,  129,    0,  129,  129,    0,  129,

      129,  129,  129,  129,  129,  129,  130,  130,  130, 1522,
      130, 1523,  130, 1523,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  131,  131,  131,    0,  131, 1523,
      131,    0,  131,  131,    0,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132, 1524,  132, 1524,  132,    0,
      132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
      133,  133,  133, 1524,  133, 1525,  133, 1525,  133,  133,
        0,  133,  133,  133,  133,  133,  133,  133,  134,  134,
      134, 1526,  134, 1526,  134,    0,  134,  134,    0,  134,
      134,  134,  134,  134,  134,  134,  135,  135,  135, 1526,

      135, 1527,  135, 1527,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136, 1528,  136, 1528,
      136,    0,  136,  136,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137, 1528,  137, 1529, 1530, 1529,
     1530,    0,    0,  137,  137,  137,  137,  137,  137,  137,
      138,  138,  138, 1531,  138, 1531, 1530, 1535, 1536, 1535,
     1536,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139, 1537,  139, 1537,    0, 1535, 1536,    0,    0,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140, 1538,
      140, 1538, 1539, 1540, 1539, 1540,    0,  140,  140,  140,

      140,  140,  140,  140,  141,  141,  141, 1538,  141,    0,
     1541, 1540, 1541,    0,    0,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142, 1542,  142, 1542, 1543, 1545,
     1543, 1545,    0,  142,  142,  142,  142,  142,  142,  142,
      143,  143,  143, 1542,  143,    0, 1546, 1545, 1546,    0,
        0,  143,  143,  143,  143,  143,  143,  143,  144,  144,
      144, 1549,  144, 1549, 1546, 1550, 1552, 1550, 1552,  144,
      144,  144,  144,  144,  144,  144,  145,  145,  145, 1549,
      145, 1551,  145, 1551,  145,  145,    0,  145,  145,  145,
      145,  145,  145,  145,  146,  146,  146,  628,  146, 1551,

      146,    0,  146,  146,    0,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  147,  147,    0,  147,  147,  147,
      147,  148,  148,  148,  148,  628,  148,  148,  148,  148,
        0,  147,  151,  151,  151, 1554,  151, 1554,  629, 1553,
      148, 1553,    0,  151,  151,  151,  151,  151,  151,  151,
      630,  309, 1556,  309, 1556,  309,  309, 1553,  147,  309,
      309,  309,  309,  309,  309,  309,  629,  148,  149,  149,
      149, 1555,  149, 1555,  149,    0,  149,  149,  630,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1555,
      150, 1558,  150, 1558,  150,  150,    0,  150,  150,  150,

      150,  150,  150,  150,  152,  152,  152,    0,  152, 1558,
     1559, 1560, 1559, 1560,    0,  152,  152,  152,  152,  152,
      152,  152,  153,  153,  153, 1577,  153, 1577,  153, 1578,
      153, 1578,    0,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154, 1580,  154, 1580,  154, 1581,  154, 1581,
        0,  154,  154,  154,  154,  154,  154,  154,  155,  155,
      155, 1586,  155, 1586,  155, 1581,  155,    0,    0,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156, 1586,
      156, 1587,  156, 1587,  156,    0,    0,  156,  156,  156,
      156,  156,  156,  156,  157,  157,  157, 1588,  157, 1588,

      157, 1589,  157, 1589,    0,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  158, 1588,  158, 1590,  158, 1590,
      158,    0,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159,    0,  159, 1590,  159, 1591,  159, 1591,
        0,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160, 1592,  160, 1592,  160, 1593,  160, 1593,    0,  160,
      160,  160,  160,  160,  160,  160,  161,  161,  161, 1592,
      161, 1595, 1596, 1595, 1596,    0,    0,  161,  161,  161,
      161,  161,  161,  161,  162,  162,  162,    0,  162, 1595,
     1608, 1616, 1608, 1616,    0,  162,  162,  162,  162,  162,

      162,  162,  163,  163,  163, 1617,  163, 1617, 1618, 1616,
     1618,    0,    0,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164, 1617,  164, 1628, 1629, 1628, 1629,    0,
        0,  164,  164,  164,  164,  164,  164,  164,  165,  165,
      165,    0,  165, 1628, 1633, 1634, 1633, 1634,    0,  165,
      165,  165,  165,  165,  165,  165,  166,  166,  166, 1635,
      166, 1635, 1633, 1636, 1637, 1636, 1637,  166,  166,  166,
      166,  166,  166,  166,  167,  167,  167, 1635,  167, 1638,
        0, 1638, 1637,    0,    0,  167,  167,  167,  167,  167,
      167,  167,  168,  168,  168, 1639,  168, 1639, 1640, 1641,

     1640, 1641,    0,  168,  168,  168,  168,  168,  168,  168,
      169,  169,  169, 1642,  169, 1642, 1646, 1647, 1646, 1647,
        0,  169,  169,  169,  169,  169,  169,  169,  170,  170,
      170, 1648,  170, 1648, 1646, 1649, 1650, 1649, 1650,  170,
      170,  170,  170,  170,  170,  170,  171,  171,  171, 1651,
      171, 1651, 1652, 1653, 1652, 1653,    0,  171,  171,  171,
      171,  171,  171,  171,  172,  172,  172, 1654,  172, 1654,
     1652, 1653, 1655,    0, 1655,  172,  172,  172,  172,  172,
      172,  172,  173,  173,  173, 1656,  173, 1656,    0, 1659,
     1655, 1659,    0,  173,  173,  173,  173,  173,  173,  173,

      174,  174,  174, 1660,  174, 1660, 1661, 1662, 1661, 1662,
        0,  174,  174,  174,  174,  174,  174,  174,  175,  175,
      175, 1664,  175, 1664, 1670, 1671, 1670, 1671,    0,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176, 1684,
      176, 1684, 1670, 1685, 1686, 1685, 1686,  176,  176,  176,
      176,  176,  176,  176,  177,  177,  177, 1684,  177, 1690,
        0, 1690, 1686,    0,    0,  177,  177,  177,  177,  177,
      177,  177,  178,  178,  178,  631,  178, 1691,    0, 1691,
      633,    0,  634,  178,  178,  178,  178,  178,  178,  178,
      179,  179,  179,  179,  631,  179,  179,  179,  179,  180,

      180,  180,  180,  631,  180,  180,  180,  180,  633,  179,
      634,  636,  637,  638,  181,  181,  181,  181,  180,  181,
      181,  181,  181,  182,  182,  182,  182,  639,  182,  182,
      182,  182, 1692,  181, 1692, 1693,  179, 1693,  642,  636,
      637,  638,  182,    0,    0,  180,  183,  183,  183,  183,
        0,  183,  183,  183,  183,  639,  184,  184,  184,  184,
      181,  184,  184,  184,  184,  183,  642,  643,  644,  182,
      646,  185,  185,  185,  185,  184,  185,  185,  185,  185,
      186,  186,  186,  186,  647,  186,  186,  186,  186, 1695,
      185, 1695,  183,    0,    0,  643,  644,    0,  646,  186,

      649,  650,  184,  187,  187,  187,  187,    0,  187,  187,
      187,  187,  647,  188,  188,  188,  188,  185,  188,  188,
      188,  188,  187,  189,  189,  189,  186,  189,  649,  650,
        0, 1716,  188, 1716,  189,  189,  189,  189,  189,  189,
      189,  190,  190,  190, 1717,  190, 1717,    0, 1715,  187,
     1715,    0,  190,  190,  190,  190,  190,  190,  190,  188,
      191,  191,  191, 1727,  191, 1727, 1715, 1731, 1732, 1731,
     1732,  191,  191,  191,  191,  191,  191,  191,  192,  192,
      192, 1733,  192, 1733, 1737, 1738, 1737, 1738,    0,  192,
      192,  192,  192,  192,  192,  192,  193,  193,  193, 1739,

      193, 1739, 1740, 1738, 1740,    0,    0,  193,  193,  193,
      193,  193,  193,  193,  194,  194,  194, 1741,  194, 1741,
     1750, 1760, 1750, 1760,    0,  194,  194,  194,  194,  194,
      194,  194,  195,  195,  195, 1762,  195, 1762,  195, 1760,
      195,  195,    0,  195,  195,  195,  195,  195,  195,  195,
      196,  196,  196, 1762,  196, 1763,  196, 1763,  196,  196,
        0,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197, 1764,  197, 1764, 1765, 1769, 1765, 1769,    0,  197,
      197,  197,  197,  197,  197,  197,  198,  198,  198, 1764,
      198,    0, 1771, 1769, 1771,    0,    0,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199, 1774,  199, 1774,
     1771, 1775, 1778, 1775, 1778,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200, 1774,  200,    0,    0, 1775,
     1778,    0,    0,  200,  200,  200,  200,  200,  200,  200,
      201,  201,  201, 1789,  201, 1789, 1797, 1805, 1797, 1805,
        0,  201,  201,  201,  201,  201,  201,  201,  202,  202,
      202,  653,  202, 1828, 1797, 1828, 1831,    0, 1831,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,    0,  653,
      936,  205,  205,  205,  205,  203,  205,  205,  205,  205,

      206,  206,  206,  206,    0,  206,  206,  206,  206,    0,
      205,  345,  345,  345,  345,  345,  345,  345,  936,  206,
        0,  937,  203,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,    0,  939,  205,  323,  213,
      213,  213,  204,  213,    0,  323,  206,  940,  323,  937,
      213,  213,  213,  213,  213,  213,  213,  346,  346,  346,
      346,  346,  346,  346,  939,  941,  323,  945,    0,  204,
      207,  207,  207,  323,  207,  940,  323, 1832,  207, 1832,
        0,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208,    0,  208,  941,    0,  945,  208,    0,  946,  208,

      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  214,  214,
      214,    0,  214,  947,    0,  209,  946,    0,    0,  214,
      214,  214,  214,  214,  214,  214,  313, 1837,  313, 1837,
      313,  313,  948,  949,  313,  313,  313,  313,  313,  313,
      313,  947,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  229,  229,  229,    0,  229,
      948,  949,  210, 1840,    0, 1840,  229,  229,  229,  229,
      229,  229,  229,  315, 1846,  315, 1846,  315,  315,  950,
      951,  315,  315,  315,  315,  315,  315,  315,    0,  210,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  230,  230,  230,    0,  230,  950,  951,  211,
     1848,    0, 1848,  230,  230,  230,  230,  230,  230,  230,
      347,  347,  347,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,    0,    0,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  233,
      233,  233, 1852,  233, 1852,    0,  212, 1806,    0, 1806,
      233,  233,  233,  233,  233,  233,  233,  349,  349,  349,
      349,  349,  349,  349,  350, 1806,  350,  350,  350,  350,
      350,  350,  350,  212,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  234,  234,  234, 1872,
      234, 1872, 1881,  215, 1881,    0,    0,  234,  234,  234,
      234,  234,  234,  234,  352,    0,  352,  352,  352,  352,
      352,  352,  352,  377,  377,  377,  377,  377,  377,  377,
      215,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  275,  275,  275, 1885,  275, 1885, 1889,
      216, 1889,    0,    0,  275,  275,  275,  275,  275,  275,
      275,  353,    0,  353,  353,  353,  353,  353,  353,  353,
      378,  378,  378,  378,  378,  378,  378,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      276,  276,  276, 1895,  276, 1895, 1905,  217, 1905,    0,
        0,  276,  276,  276,  276,  276,  276,  276,  355,    0,
      355,  355,  355,  355,  355,  355,  355,  379,  379,  379,
      379,  379,  379,  379,  217,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  285,  285,  285,
     1907,  285, 1907, 1911,  218, 1911,    0,    0,  285,  285,
      285,  285,  285,  285,  285,  356,    0,  356,  356,  356,
      356,  356,  356,  356,  380,  380,  380,  380,  380,  380,
      380,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  286,  286,  286, 1913,  286, 1913,

     1919,  219, 1919,    0,    0,  286,  286,  286,  286,  286,
      286,  286,  358,    0,  358,  358,  358,  358,  358,  358,
      358,  381,  381,  381,  381,  381,  381,  381,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  287,  287,  287, 1920,  287, 1920, 1921,  220, 1921,
        0,    0,  287,  287,  287,  287,  287,  287,  287,  359,
        0,  359,  359,  359,  359,  359,  359,  359,  382,  382,
      382,  382,  382,  382,  382,  220,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  288,  288,
      288, 1924,  288, 1924, 1927,  221, 1927,    0,    0,  288,

      288,  288,  288,  288,  288,  288,  361,  954,  361,  361,
      361,  361,  361,  361,  361,  384,  384,  384,  384,  384,
      384,  384,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  954,    0,  955,  289,  289,
      289,  289,  222,  289,  289,  289,  289,  290,  290,  290,
      290,    0,  290,  290,  290,  290,  362,  289,  362,  362,
      362,  362,  362,  362,  362,  955,  290,    0,    0,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,    0, 1944,  289, 1944,  959,  960, 1949,  223,
     1949,    0,    0,  290,  291,  291,  291,  291,    0,  291,

      291,  291,  291,  364,    0,  364,  364,  364,  364,  364,
      364,  364,    0,  291,  959,  960,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  405,
      405,  405,  405,  405,  405,  405,  224, 1953,    0, 1953,
      291,  292,  292,  292,  292,    0,  292,  292,  292,  292,
      365,    0,  365,  365,  365,  365,  365,  365,  365, 1954,
      292, 1954,    0,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  972,  293,  293,  293,
      975,  293, 1957,  225, 1957,    0,    0,  292,  293,  293,
      293,  293,  293,  293,  293,  367,    0,  367,  367,  367,

      367,  367,  367,  367,  972,  976,    0, 1960,  975, 1960,
      225,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  294,  294,  294, 1962,  294, 1962, 1965,
      226, 1965,    0,  976,  294,  294,  294,  294,  294,  294,
      294,  368,    0,  368,  368,  368,  368,  368,  368,  368,
      406,  406,  406,  406,  406,  406,  406,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      295,  295,  295, 1967,  295, 1967, 1969,  227, 1969,    0,
        0,  295,  295,  295,  295,  295,  295,  295,  370,    0,
      370,  370,  370,  370,  370,  370,  370,  407,  407,  407,

      407,  407,  407,  407,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  296,  296,  296,
      977,  296,  980, 1970,  228, 1970,    0,  981,  296,  296,
      296,  296,  296,  296,  296,  351,  351,  351,  351,  351,
      351,  351,    0,    0, 1809,  982, 1809,  351,  977,  983,
      980,  228,  231,  231,  231,  981,  231, 1981,  231, 1981,
      231,  231, 1809,  231,  231,  231,  231,  231,  231,  231,
      232,  232,  232,  982,  232,  351,  232,  983,  232,  232,
        0,  232,  232,  232,  232,  232,  232,  232,  235,  235,
      235, 1812,  235, 1812,  235, 1817,  235, 1817,    0,  235,

      235,  235,  235,  235,  235,  235,  236,  236,  236, 1812,
      236,    0,  236, 1817,  236,    0,    0,  236,  236,  236,
      236,  236,  236,  236,  237,  237,  237, 1827,  237, 1827,
      237, 1830,  237, 1830,    0,  237,  237,  237,  237,  237,
      237,  237,  238,  238,  238, 1827,  238,    0,  238, 1830,
      238,    0,    0,  238,  238,  238,  238,  238,  238,  238,
      239,  239,  239, 1836,  239, 1836,  239, 1839,  239, 1839,
        0,  239,  239,  239,  239,  239,  239,  239,  240,  240,
      240, 1836,  240,    0,  240, 1839,  240,    0,    0,  240,
      240,  240,  240,  240,  240,  240,  241,  241,  241, 1844,

      241, 1844,  241, 1845,  241, 1845,    0,  241,  241,  241,
      241,  241,  241,  241,  242,  242,  242, 1844,  242,    0,
      242, 1845,  242,    0,    0,  242,  242,  242,  242,  242,
      242,  242,  243,  243,  243, 1847,  243, 1847,  243, 1851,
      243, 1851,    0,  243,  243,  243,  243,  243,  243,  243,
      244,  244,  244, 1847,  244,    0,  244, 1851,  244,    0,
        0,  244,  244,  244,  244,  244,  244,  244,  245,  245,
      245, 1854,  245, 1854,  245, 1871,  245, 1871,    0,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246, 1854,
      246,    0,  246, 1871,  246,    0,    0,  246,  246,  246,

      246,  246,  246,  246,  247,  247,  247, 1876,  247, 1876,
      247, 1879,  247, 1879,    0,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248, 1876,  248,    0,  248, 1879,
      248,    0,    0,  248,  248,  248,  248,  248,  248,  248,
      249,  249,  249, 1880,  249, 1880,  249, 1884,  249, 1884,
        0,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250, 1880,  250,    0,  250, 1884,  250,    0,    0,  250,
      250,  250,  250,  250,  250,  250,  251,  251,  251, 1888,
      251, 1888,  251, 1891,  251, 1891,    0,  251,  251,  251,
      251,  251,  251,  251,  252,  252,  252, 1888,  252,    0,

      252, 1891,  252,    0,    0,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253, 1892,  253, 1892,  253, 1893,
      253, 1893,    0,  253,  253,  253,  253,  253,  253,  253,
      254,  254,  254, 1892,  254,    0,  254, 1893,  254,    0,
        0,  254,  254,  254,  254,  254,  254,  254,  255,  255,
      255, 1894,  255, 1894,  255, 1906,  255, 1906,    0,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256, 1894,
      256,    0,  256, 1906,  256,    0,    0,  256,  256,  256,
      256,  256,  256,  256,  257,  257,  257, 1918,  257, 1918,
      257, 1926,  257, 1926,    0,  257,  257,  257,  257,  257,

      257,  257,  258,  258,  258, 1918,  258,    0,  258, 1926,
      258,    0,    0,  258,  258,  258,  258,  258,  258,  258,
      259,  259,  259, 1934,  259, 1934,  259, 1937,  259, 1937,
        0,  259,  259,  259,  259,  259,  259,  259,  260,  260,
      260, 1934,  260,    0,  260, 1937,  260,    0,    0,  260,
      260,  260,  260,  260,  260,  260,  261,  261,  261, 1938,
      261, 1938,  261, 1948,  261, 1948,    0,  261,  261,  261,
      261,  261,  261,  261,  262,  262,  262, 1938,  262,    0,
      262, 1948,  262,    0,    0,  262,  262,  262,  262,  262,
      262,  262,  263,  263,  263, 1952,  263, 1952,  263, 1961,

      263, 1961,    0,  263,  263,  263,  263,  263,  263,  263,
      264,  264,  264, 1952,  264,    0,  264, 1961,  264,    0,
        0,  264,  264,  264,  264,  264,  264,  264,  265,  265,
      265, 1964,  265, 1964,  265, 1990,  265, 1990,    0,  265,
      265,  265,  265,  265,  265,  265,  266,  266,  266, 1964,
      266,  985,  266,  986,  266,    0,  987,  266,  266,  266,
      266,  266,  266,  266,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  297,  297,  297,  985,
      297,  986,    0,  267,  987,    0,    0,  297,  297,  297,
      297,  297,  297,  297,  371,    0,  371,  371,  371,  371,

      371,  371,  371,  408,  408,  408,  408,  408,  408,  408,
      267,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  298,  298,  298, 1994,  298, 1994, 2001,
      268, 2001,    0,    0,  298,  298,  298,  298,  298,  298,
      298,  373,  988,  373,  373,  373,  373,  373,  373,  373,
      414,  414,  414,  414,  414,  414,  414,  268,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      988,    0,  989,  299,  299,  299,  299,  269,  299,  299,
      299,  299,  300,  300,  300,  300,    0,  300,  300,  300,
      300,  374,  299,  374,  374,  374,  374,  374,  374,  374,

      989,  300,    0,    0,  269,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,    0, 2004,  299,
     2004,  991,  992, 2008,  270, 2008,    0,    0,  300,  311,
      311,  311,  311,    0,  311,  311,  311,  311,  376,    0,
      376,  376,  376,  376,  376,  376,  376,    0,  311,  991,
      992,  270,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  415,  415,  415,  415,  415,  415,
      415,  271, 2010,    0, 2010,  311,  312,  312,  312,  312,
        0,  312,  312,  312,  312,  385,    0,  385,  385,  385,
      385,  385,  385,  385, 2019,  312, 2019,    0,  271,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,    0,  316,  316,  316,  993,  316,    0,  272, 1966,
        0, 1966,  312,  316,  316,  316,  316,  316,  316,  316,
      632,  325,  641,  938,  632,  632,  632, 1966,  325,  325,
      641,  938,  325,  993,  325,  272,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  632,  325,
      641,  938,  632,  632,  632,  273,  325,  325,  641,  938,
      325, 2022,  325, 2022, 2027,    0, 2027,  339,  354,  354,
      354,  354,  354,  354,  354,  339,  339,  339,  994,  995,
      354,  996,  273,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  339,  997,  998,  999, 1000,
     1001,    0,  274,  339,  339,  339,  994,  995,  354,  996,
      357,  357,  357,  357,  357,  357,  357, 2029, 2030, 2029,
     2030, 2031,  357, 2031,  997,  998,  999, 1000, 1001,  274,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  416,  416,  416,  416,  416,  416,  416,  277,
      357,  360,  360,  360,  360,  360,  360,  360, 2041,  383,
     2041,  383, 1002,  360,  383,  383,  383,  383,  383,  383,
      383, 2046, 2054, 2046, 2054,    0,  277,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278, 1004,

     1002,  360, 2060, 1005, 2060,    0,  278,  363,  363,  363,
      363,  363,  363,  363, 2064, 2067, 2064, 2067,  645,  363,
      366,  366,  366,  366,  366,  366,  366, 1004, 1006, 1008,
      645, 1005,  366,  278,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  645,  363, 1009, 1010,
     1011, 1013, 1968,  279, 1968,    0, 1006, 1008,  645,    0,
      366,  369,  369,  369,  369,  369,  369,  369,    0, 2068,
     1968, 2068, 2071,  369, 2071,    0, 1009, 1010, 1011, 1013,
      279,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  417,  417,  417,  417,  417,  417,  417,

      280,  369,  372,  372,  372,  372,  372,  372,  372, 2079,
        0, 2079, 1015,  387,  372,  387,  387,  387,  387,  387,
      387,  387, 2081, 2086, 2081, 2086,    0,  280,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
     1015, 1088,  372, 1089, 1092,    0,    0,  281,  375,  375,
      375,  375,  375,  375,  375, 2101, 2103, 2101, 2103,  648,
      375,  386,  386,  386,  386,  386,  386,  386,  648, 1088,
     1093, 1089, 1092,  386,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  648,  375,    0,
     1094, 1095, 1099, 2105,  282, 2105,  648, 2111, 1093, 2111,

      388,  386,  388,  388,  388,  388,  388,  388,  388,  390,
        0,  390,  390,  390,  390,  390,  390,  390, 1094, 1095,
     1099,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  418,  418,  418,  418,  418,  418,
      418,  283,  389,  389,  389,  389,  389,  389,  389, 1980,
     2113, 1980, 2113,  391,  389,  391,  391,  391,  391,  391,
      391,  391, 2120, 1985, 2120, 1985,    0, 1980,  283,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284, 1985,  389, 1100, 1101, 1102, 1103,  393,  284,  393,
      393,  393,  393,  393,  393,  393,    0,  392,  392,  392,

      392,  392,  392,  392, 1993, 2122, 1993, 2122, 2000,  392,
     2000, 1100, 1101, 1102, 1103,  284,  307,  307,  307,  307,
      307,  307, 1993,  307,  307,    0, 2000,  307,  307,  307,
      307,  307,  307,  307,  310,  310,  310,  392,  310,  310,
        0, 1104,  310,  310,  310,  310,  310,  310,  310,  314,
      314,  314, 1105,  314,  314,    0, 1107,  314,  314,  314,
      314,  314,  314,  314,  328,    0,  334, 1007,  328, 1104,
      640,  334,    0,    0,  328, 1106,  635, 1108, 1109,  328,
     1105,  640,    0,  635, 1107,  635,  334, 1106,  640, 1111,
     1112,  334,  328, 1007,  334, 1118,  328,  334,  640,    0,

     1007,  334,  328, 1106,  635, 1108, 1109,  328,  333,  640,
      333,  635, 1121,  635,  334, 1106,  640, 1111, 1112,  334,
        0, 1007,  334, 1118,  333,  334,  333,  333,  394, 1122,
      394,  394,  394,  394,  394,  394,  394, 1123, 1124, 1126,
     1121,  333,  395,  395,  395,  395,  395,  395,  395,    0,
      333,  333,  333,    0,  395,  333,  396, 1122,  396,  396,
      396,  396,  396,  396,  396, 1123, 1124, 1126,  411,  333,
      411,  411,  411,  411,  411,  411,  411,  984,  333,  333,
      333,  335,  395, 1127,  984, 1098, 1128,  335, 1098, 1129,
      335,  984, 1130,  335, 1131, 1132,  335,  335, 1133,  335,

        0, 1134, 1098, 1135,    0,  984,  335, 1136,    0,  335,
     1137, 1127,  984, 1098, 1128,  335, 1098, 1129,  335,  984,
     1130,  335, 1131, 1132,  335,  335, 1133,  335,  340, 1134,
     1098, 1135,  340,    0, 1138, 1136,  340, 1139, 1137, 1140,
      340, 1141,  340, 1142, 1145,  340, 1147,    0,  340,  412,
      412,  412,  412,  412,  412,  412,  340, 1144, 1148, 1151,
      340,  412, 1138,    0,  340, 1139,    0, 1140,  340, 1141,
      340, 1142, 1145,  340, 1147,  413,  340,  413,  413,  413,
      413,  413,  413,  413, 1144, 1144, 1148, 1151,    0,  412,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,

      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  422,  422,  422,  422,  422,  422,  422,  423,    0,
      423,  423,  423,  423,  423,  423,  423,  424,  424,  424,
      424,  424,  424,  424,    0, 1152, 1153, 1156,  425,  424,
      425,  425,  425,  425,  425,  425,  425,  426,    0,  426,
      426,  426,  426,  426,  426,  426,  427,  427,  427,  427,
      427,  427,  427, 1152, 1153, 1156, 1157,  424,  427,  428,
        0,  428,  428,  428,  428,  428,  428,  428,  429,    0,
      429,  429,  429,  429,  429,  429,  429,  430,  430,  430,
      430,  430,  430,  430, 1157, 1159,  427, 1160,  431,  430,

      431,  431,  431,  431,  431,  431,  431,  432,    0,  432,
      432,  432,  432,  432,  432,  432,  433,  433,  433,  433,
      433,  433,  433, 1159, 1161, 1160, 1162,  430,  433,  434,
        0,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  436,  436,  436,  436,  436,
      436,  436, 1161,    0, 1162,  437,  433,  437,  437,  437,
      437,  437,  437,  437,  438,  438,  438,  438,  438,  438,
      438,    0, 1163, 1164, 1170,  439,  438,  439,  439,  439,
      439,  439,  439,  439,  440,    0,  440,  440,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,

     1163, 1164, 1170, 1175,  438,  441,  442,    0,  442,  442,
      442,  442,  442,  442,  442,  443,    0,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444, 1175, 1177,  441, 1178,  445,  444,  445,  445,  445,
      445,  445,  445,  445,  446,    0,  446,  446,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  447,  447,
     1177,    0, 1178, 1180,  444,  447,  448,    0,  448,  448,
      448,  448,  448,  448,  448,  449,    0,  449,  449,  449,
      449,  449,  449,  449,  450,  450,  450,  450,  450,  450,
      450, 1180, 1181,  447, 1182,  451,  450,  451,  451,  451,

      451,  451,  451,  451,  452,    0,  452,  452,  452,  452,
      452,  452,  452,  453,  453,  453,  453,  453,  453,  453,
     1181,    0, 1182, 1183,  450,  453,  454,    0,  454,  454,
      454,  454,  454,  454,  454,  455,    0,  455,  455,  455,
      455,  455,  455,  455,  456,  456,  456,  456,  456,  456,
      456, 1183, 1184,  453, 1185,  457,  456,  457,  457,  457,
      457,  457,  457,  457,  458,    0,  458,  458,  458,  458,
      458,  458,  458,  459,  459,  459,  459,  459,  459,  459,
     1184,    0, 1185, 1186,  456,  459,  460,    0,  460,  460,
      460,  460,  460,  460,  460,  461,    0,  461,  461,  461,

      461,  461,  461,  461,  462,  462,  462,  462,  462,  462,
      462, 1186, 1187,  459, 1188,  463,  462,  463,  463,  463,
      463,  463,  463,  463,  464,    0,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
     1187, 1190, 1188, 1192,  462,  465,  466,    0,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  468,  468, 1190,
     2124, 1192, 2124,  465,  469,  469,  469,  469,  469,  469,
      469,  470,  470,  470,  470,  470,  470,  470,  471,    0,
      471,  471,  471,  471,  471,  471,  471,  472,  472,  472,

      472,  472,  472,  472,    0, 1193, 1197, 1201,  473,  472,
      473,  473,  473,  473,  473,  473,  473,  475,    0,  475,
      475,  475,  475,  475,  475,  475,  476,  476,  476,  476,
      476,  476,  476, 1193, 1197, 1201,    0,  472,  476,  477,
        0,  477,  477,  477,  477,  477,  477,  477,  478,  478,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      479,  479,  480, 2126,  480, 2126,  476,  480,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  482, 2129,  482, 2129,    0,  482,  482,  482,  482,
      482,  482,  482,  483,  483,  483,  483,  483,  483,  483,

      484, 2130,  484, 2130,    0,  484,  484,  484,  484,  484,
      484,  484,  485,  485,  485,  485,  485,  485,  485,  486,
     2132,  486, 2132,    0,  486,  486,  486,  486,  486,  486,
      486,  487,  487,  487,  487,  487,  487,  487,  488,  488,
      488,  488,  488,  488,  488,  489,  489,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  490,  490,  491,
      491,  491,  491,  491,  491,  491,  492,  492,  492,  492,
      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,
      494,  494,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  495,  495,  501,  501,  501,  501,  501,  501,

      501,  502,  502,  502,  502,  502,  502,  502,  503,  503,
      503,  503,  503,  503,  503,  504,    0,  504,  504,  504,
      504,  504,  504,  504,  505,  505,  505,  505,  505,  505,
      505, 1202, 1203, 1204, 1209,  506,  505,  506,  506,  506,
      506,  506,  506,  506,  507,  507,  507,  507,  507,  507,
      507,  508,  508,  508,  508,  508,  508,  508,    0, 1202,
     1203, 1204, 1209,    0,  505,  509,  509,  509,  509,  509,
      509,  509,  512,  512,  512,  512,  512,  512,  512,  513,
      513,  513,  513,  513,  513,  513,  516,  516,  516,  516,
      516,  516,  516,  524,  524,  524,  524,  524,  524,  524,

      525,    0,  525,  525,  525,  525,  525,  525,  525,  526,
      526,  526,  526,  526,  526,  526, 1210, 2134,    0, 2134,
      527,  526,  527,  527,  527,  527,  527,  527,  527,  528,
      528,  528,  528,  528,  528,  528,  529,  529,  529,  529,
      529,  529,  529,    0, 1210,  530,  530,  530,    0,  526,
      530,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,  531,  531,  531,  532, 2140,  532, 2140,    0,  532,
      532,  532,  532,  532,  532,  532,  533,  533,  533,  533,
      533,  533,  533,  534, 2141,  534, 2141,    0,  534,  534,
      534,  534,  534,  534,  534,  535,  535,  535,  535,  535,

      535,  535,  536, 2145,  536, 2145,    0,  536,  536,  536,
      536,  536,  536,  536,  537,  537,  537,  537,  537,  537,
      537,  538,  538,  538,    0,    0,  538,  538,  538,  538,
      538,  538,  538,  539,  539,  539,  539,  539,  539,  539,
      540, 2147,  540, 2147,    0,  540,  540,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  541,  541,  542,
     2148,  542, 2148,    0,  542,  542,  542,  542,  542,  542,
      542,  543,  543,  543,  543,  543,  543,  543,  544, 2162,
      544, 2162,    0,  544,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  545,  545,  546,  546,  546,

        0,    0,  546,  546,  546,  546,  546,  546,  546,  547,
      547,  547,  547,  547,  547,  547,  548, 2163,  548, 2163,
        0,  548,  548,  548,  548,  548,  548,  548,  549,  549,
      549,  549,  549,  549,  549,  550, 2169,  550, 2169,    0,
      550,  550,  550,  550,  550,  550,  550,  551,  551,  551,
      551,  551,  551,  551,  552, 2176,  552, 2176,    0,  552,
      552,  552,  552,  552,  552,  552,  553,  553,  553,  553,
      553,  553,  553,  554,  554,  554,    0,    0,  554,  554,
      554,  554,  554,  554,  554,  555,  555,  555,  555,  555,
      555,  555,  556, 2177,  556, 2177,    0,  556,  556,  556,

      556,  556,  556,  556,  557,  557,  557,  557,  557,  557,
      557,  558, 2178,  558, 2178,    0,  558,  558,  558,  558,
      558,  558,  558,  559,  559,  559,  559,  559,  559,  559,
      560, 2179,  560, 2179,    0,  560,  560,  560,  560,  560,
      560,  560,  565,  565,  565,  565,  565,  565,  565,  570,
      570,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  571,  571,  574,  574,  574,  574,  574,  574,  574,
      575,  575,  575,  575,  575,  575,  575,  576,  576,  576,
      576,  576,  576,  576,  586,    0,  586, 1211,  586,  586,
        0,    0,  586,  586,  586,  586,  586,  586,  586,  587,

     2181,  587, 2181,  587,  587,    0,    0,  587,  587,  587,
      587,  587,  587,  587,  589, 1211,  589,    0,  589,  589,
        0,    0,  589,  589,  589,  589,  589,  589,  589,  590,
      590,  590,  590,  590,  590,  590,  625,    0,  625,  654,
      654,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,  655, 1212,  625, 1213,  625, 1214,  625,  656,
      656,  656,  656,  656,  656,  656,  657,  657,  657,  657,
      657,  657,  657,  625,  658,  658,  658,  658,  658,  658,
      658, 1212, 1215, 1213,  625, 1214,  625,  659,  659,  659,
      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,

      660,  625,  661,  661,  661,  661,  661,  661,  661, 2182,
     1215, 2182,    0,  662,  661,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663, 1217,
      664, 1220,  664,    0,  663,  664,  664,  664,  664,  664,
      664,  664,  661,  665,  665,  665,  665,  665,  665,  665,
     1221, 2183, 2184, 2183, 2184,  665, 2189, 1217, 2189, 1220,
        0,  666,  663,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667, 1189, 1221,  668,
     1189,  668,  667,  665,  668,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669, 1222, 1189,

     1223,    0, 2192,  669, 2192, 1189,    0,    0, 1189,  670,
      667,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671, 1224, 1222,  672, 1223,  672,
      671,  669,  672,  672,  672,  672,  672,  672,  672,  673,
      673,  673,  673,  673,  673,  673, 1225, 2196, 2197, 2196,
     2197,  673, 2200, 1224, 2200,    0,    0,  674,  671,  674,
      674,  674,  674,  674,  674,  674,  675,  675,  675,  675,
      675,  675,  675, 1226, 1225,  676, 1226,  676,  675,  673,
      676,  676,  676,  676,  676,  676,  676,  677,  677,  677,
      677,  677,  677,  677, 1227, 2202, 1228, 2202, 2214,  677,

     2214, 1226,    0,    0, 1226,  678,  675,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      679, 1233, 1227,  680, 1228,  680,  679,  677,  680,  680,
      680,  680,  680,  680,  680,  681,  681,  681,  681,  681,
      681,  681, 1234, 2221, 1235, 2221, 2226,  681, 2226, 1233,
     2228,    0, 2228,  682,  679,  682,  682,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  683,  683, 1238,
     1234,  684, 1235,  684,  683,  681,  684,  684,  684,  684,
      684,  684,  684,  685,  685,  685,  685,  685,  685,  685,
     1239, 2230, 1240, 2230, 2232,  685, 2232, 1238, 2233,    0,

     2233,  686,  683,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  687,  687, 1241, 1239,  688,
     1240,  688,  687,  685,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689, 1242, 2235,
     1243, 2235, 2241,  689, 2241, 1241, 2242,    0, 2242,  690,
      687,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  691,  691, 1244, 1242,  692, 1243,  692,
      691,  689,  692,  692,  692,  692,  692,  692,  692,  693,
      693,  693,  693,  693,  693,  693, 1245, 2255, 1246, 2255,
     2257,  693, 2257, 1244, 2262,    0, 2262,  694,  691,  694,

      694,  694,  694,  694,  694,  694,  695,  695,  695,  695,
      695,  695,  695, 1257, 1245,  696, 1246,  696,  695,  693,
      696,  696,  696,  696,  696,  696,  696,  697,  697,  697,
      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      698, 1257,    0, 1260, 1261,    0,  695,  699,  699,  699,
      699,  699,  699,  699,  700,  700,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  701,  701,  702,    0,
      702, 1260, 1261,  702,  702,  702,  702,  702,  702,  702,
      703,  703,  703,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704,  705,  705,  705,  705,  705,  705,

      705, 2269, 2270, 2269, 2270,  706,  705,  706,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,
      707, 1262,  708, 1263,  708,    0,  707,  708,  708,  708,
      708,  708,  708,  708,  705,  709,  709,  709,  709,  709,
      709,  709, 1264, 2271, 1265, 2271, 2291,  709, 2291, 1262,
     2294, 1263, 2294,  710,  707,  710,  710,  710,  710,  710,
      710,  710,  711,  711,  711,  711,  711,  711,  711, 1266,
     1264,  712, 1265,  712,  711,  709,  712,  712,  712,  712,
      712,  712,  712,  713,  713,  713,  713,  713,  713,  713,
     1269, 2303, 1270, 2303, 2309,  713, 2309, 1266, 2312,    0,

     2312,  714,  711,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  715, 1272, 1269,  716,
     1270,  716,  715,  713,  716,  716,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  717,  717, 1273, 2314,
     1274, 2314, 2319,  717, 2319, 1272, 2325,    0, 2325,  718,
      715,  718,  718,  718,  718,  718,  718,  718,  719,  719,
      719,  719,  719,  719,  719, 1275, 1273,  720, 1274,  720,
      719,  717,  720,  720,  720,  720,  720,  720,  720,  729,
      729,  729,  729,  729,  729,  729,  730,  730,  730,  730,
      730,  730,  730, 1275, 1276, 1277,    0,    0,  719,  731,

      731,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  732,  732,  735,  735,  735,  735,  735,  735,  735,
        0,    0, 1276, 1277,  736,  735,  736,  736,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  737,  737,
     1278,  738, 1279,  738, 1280,  737,  738,  738,  738,  738,
      738,  738,  738,  735,  739,  739,  739,  739,  739,  739,
      739,  740,  740,  740,  740,  740,  740,  740, 1278, 2328,
     1279, 2328, 1280,  737,  741,  741,  741,  741,  741,  741,
      741,  742,  742,  742,  742,  742,  742,  742,  743,  743,
      743,  743,  743,  743,  743,  744,  744,  744,  744,  744,

      744,  744,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
     2331, 2333, 2331, 2333,  749,  748,  749,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  750,
     1283,  751, 1290,  751,    0,  750,  751,  751,  751,  751,
      751,  751,  751,  748,  752,  752,  752,  752,  752,  752,
      752, 1291, 2336, 1292, 2336, 2342,  752, 2342, 1283, 2349,
     1290, 2349,  753,  750,  753,  753,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754, 1293, 1291,

      755, 1292,  755,  754,  752,  755,  755,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  756,  756,  756, 1296,
     2351, 1299, 2351, 2352,  756, 2352, 1293, 2353,    0, 2353,
      757,  754,  757,  757,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  758,  758, 1300, 1296,  759, 1299,
      759,  758,  756,  759,  759,  759,  759,  759,  759,  759,
      760,  760,  760,  760,  760,  760,  760, 1301, 2357, 1302,
     2357, 2359,  760, 2359, 1300, 2363,    0, 2363,  761,  758,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  762, 1303, 1301,  763, 1302,  763,  762,

      760,  763,  763,  763,  763,  763,  763,  763,  764,  764,
      764,  764,  764,  764,  764,  765,  765,  765,  765,  765,
      765,  765, 1303, 2365, 2366, 2365, 2366,  762,  766,  766,
      766,  766,  766,  766,  766, 2368, 2370, 2368, 2370,  767,
      766,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768, 1304,  769, 1305,  769,    0,
      768,  769,  769,  769,  769,  769,  769,  769,  766,  770,
      770,  770,  770,  770,  770,  770, 1306, 2372, 1309, 2372,
     2381,  770, 2381, 1304, 2383, 1305, 2383,  771,  768,  771,
      771,  771,  771,  771,  771,  771,  772,  772,  772,  772,

      772,  772,  772, 1314, 1306,  773, 1309,  773,  772,  770,
      773,  773,  773,  773,  773,  773,  773,  774,  774,  774,
      774,  774,  774,  774, 1315, 2385, 1316, 2385, 2389,  774,
     2389, 1314, 2393,    0, 2393,  775,  772,  775,  775,  775,
      775,  775,  775,  775,  776,  776,  776,  776,  776,  776,
      776, 1317, 1315,  777, 1316,  777,  776,  774,  777,  777,
      777,  777,  777,  777,  777,  778,  778,  778,  778,  778,
      778,  778, 1318, 2397, 1319, 2397, 2398,  778, 2398, 1317,
     2400,    0, 2400,  779,  776,  779,  779,  779,  779,  779,
      779,  779,  780,  780,  780,  780,  780,  780,  780, 1320,

     1318,  781, 1319,  781,  780,  778,  781,  781,  781,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  782,  782,
     1322, 2403, 1326, 2403, 2405,  782, 2405, 1320, 2407,    0,
     2407,  783,  780,  783,  783,  783,  783,  783,  783,  783,
      784,  784,  784,  784,  784,  784,  784, 1328, 1322,  785,
     1326,  785,  784,  782,  785,  785,  785,  785,  785,  785,
      785,  786,  786,  786,  786,  786,  786,  786, 1330, 2412,
     1331, 2412, 2413,  786, 2413, 1328, 2414,    0, 2414,  787,
      784,  787,  787,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  788, 1332, 1330,  789, 1331,  789,

      788,  786,  789,  789,  789,  789,  789,  789,  789,  790,
      790,  790,  790,  790,  790,  790, 1333, 2424, 1334, 2424,
     2426,  790, 2426, 1332, 2427,    0, 2427,  791,  788,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792, 1337, 1333,  793, 1334,  793,  792,  790,
      793,  793,  793,  793,  793,  793,  793,  794,  794,  794,
      794,  794,  794,  794, 1338, 2428, 2434, 2428, 2434,  794,
     2437, 1337, 2437,    0,    0,  795,  792,  795,  795,  795,
      795,  795,  795,  795,  796,  796,  796,  796,  796,  796,
      796, 1340, 1338,  797, 1336,  797,  796,  794,  797,  797,

      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      798,  798, 1341, 1336, 2440,    0, 2440,  798, 2450, 1340,
     2450,    0, 1336,  799,  796,  799,  799,  799,  799,  799,
      799,  799,  800,  800,  800,  800,  800,  800,  800, 1339,
     1341,  801, 1339,  801,  800,  798,  801,  801,  801,  801,
      801,  801,  801,  802,  802,  802,  802,  802,  802,  802,
     1344, 2452, 1345, 2452, 2454,  802, 2454, 1339,    0,    0,
     1339,  803,  800,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  804,  804, 1346, 1344,  805,
     1345,  805,  804,  802,  805,  805,  805,  805,  805,  805,

      805,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      807,  807,  807,  807,  807, 1346, 1347, 1349,    0,    0,
      804,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  810,  810,  810,  810,  810,
      810,  810,    0,    0, 1347, 1349,  811,  810,  811,  811,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812, 1354,  813, 1358,  813,    0,  812,  813,  813,
      813,  813,  813,  813,  813,  810,  815,  815,  815,  815,
      815,  815,  815, 1360, 2459, 1361, 2459, 2470,  815, 2470,
     1354, 2472, 1358, 2472,  816,  812,  816,  816,  816,  816,

      816,  816,  816,  817,  817,  817,  817,  817,  817,  817,
        0, 1360,  818, 1361,  818,  817,  815,  818,  818,  818,
      818,  818,  818,  818,  819,  819,  819,  819,  819,  819,
      819,  820, 2475,  820, 2475,    0,  820,  820,  820,  820,
      820,  820,  820,  817,  821,  821,  821,  821,  821,  821,
      821,  822, 2477,  822, 2477,    0,  822,  822,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  823,  823,
      824, 2485,  824, 2485,    0,  824,  824,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,  825,  826,
     2487,  826, 2487,    0,  826,  826,  826,  826,  826,  826,

      826,  827,  827,  827,  827,  827,  827,  827,  828,  828,
      828,  828,  828,  828,  828,  829,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  831,
      831,  831,  831,  831,  831,  831,  832,  832,  832,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  834,  834,  834,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  842,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  844,
      844,  844,  845,  845,  845,  845,  845,  845,  845, 2488,

     2489, 2488, 2489,  846,  845,  846,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  847, 1363,
      848, 1364,  848, 1365,  847,  848,  848,  848,  848,  848,
      848,  848,  845,  849,  849,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  850,  850, 1363, 2494, 1364,
     2494, 1365,  847,  851,  851,  851,  851,  851,  851,  851,
      854,  854,  854,  854,  854,  854,  854,  855,  855,  855,
      855,  855,  855,  855,  858,  858,  858,  858,  858,  858,
      858,  866,  866,  866,  866,  866,  866,  866,  867,  867,
      867,  867,  867,  867,  867, 2496, 2501, 2496, 2501,  868,

      867,  868,  868,  868,  868,  868,  868,  868,  869,  869,
      869,  869,  869,  869,  869, 2503,  870, 2503,  870,    0,
      869,  870,  870,  870,  870,  870,  870,  870,  867,  871,
      871,  871,  871,  871,  871,  871,  872,  872,  872,    0,
        0,  872,  872,  872,  872,  872,  872,  872,  869,  873,
      873,  873,  873,  873,  873,  873,  874, 2505,  874, 2505,
     1367,  874,  874,  874,  874,  874,  874,  874,  875, 2507,
      875, 2507,    0,  875,  875,  875,  875,  875,  875,  875,
      876,  876,  876,  876,  876,  876,  876,  877, 1367,  877,
        0,    0,  877,  877,  877,  877,  877,  877,  877,  878,

      878,  878,  878,  878,  878,  878,  879, 2508,  879, 2508,
        0,  879,  879,  879,  879,  879,  879,  879,  880,  880,
      880,  880,  880,  880,  880,  881,  881,  881,    0, 1369,
      881,  881,  881,  881,  881,  881,  881,  882,  882,  882,
      882,  882,  882,  882,  883, 2509,  883, 2509, 1370,  883,
      883,  883,  883,  883,  883,  883,  884, 1369,  884,    0,
        0,  884,  884,  884,  884,  884,  884,  884,  885,  885,
      885,  885,  885,  885,  885,  886, 1370,  886,    0,    0,
      886,  886,  886,  886,  886,  886,  886,  887,  887,  887,
      887,  887,  887,  887,  888, 2511,  888, 2511,    0,  888,

      888,  888,  888,  888,  888,  888,  889,  889,  889,  889,
      889,  889,  889,  890,  890,  890,    0, 1371,  890,  890,
      890,  890,  890,  890,  890,  891,  891,  891,  891,  891,
      891,  891,  892, 2513,  892, 2513, 1372,  892,  892,  892,
      892,  892,  892,  892,  893, 1371,  893,    0,    0,  893,
      893,  893,  893,  893,  893,  893,  894,  894,  894,  894,
      894,  894,  894,  895, 1372,  895,    0,    0,  895,  895,
      895,  895,  895,  895,  895,  896,  896,  896,  896,  896,
      896,  896,  897, 2516,  897, 2516,    0,  897,  897,  897,
      897,  897,  897,  897,  898,  898,  898,  898,  898,  898,

      898,  899,  899,  899,    0, 1373,  899,  899,  899,  899,
      899,  899,  899,  900,  900,  900,  900,  900,  900,  900,
      901, 2517,  901, 2517, 1374,  901,  901,  901,  901,  901,
      901,  901,  902, 1373,  902,    0,    0,  902,  902,  902,
      902,  902,  902,  902,  903,  903,  903,  903,  903,  903,
      903,  904, 1374,  904,    0,    0,  904,  904,  904,  904,
      904,  904,  904,  905,  905,  905,  905,  905,  905,  905,
      906, 2518,  906, 2518,    0,  906,  906,  906,  906,  906,
      906,  906,  907,  907,  907,  907,  907,  907,  907,  912,
      912,  912,  912,  912,  912,  912,  917,  917,  917,  917,

      917,  917,  917,  918,  918,  918,  918,  918,  918,  918,
      921,  921,  921,  921,  921,  921,  921,  922,  922,  922,
      922,  922,  922,  922,  923,  923,  923,  923,  923,  923,
      923,  931,    0,  931, 1383,  931,  931,    0,    0,  931,
      931,  931,  931,  931,  931,  931,  932, 2519,  932, 2519,
      932,  932,    0,    0,  932,  932,  932,  932,  932,  932,
      932,  934, 1383,  934,    0,  934,  934,    0,    0,  934,
      934,  934,  934,  934,  934,  934,  935,  935,  935,  935,
      935,  935,  935, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032,

     1032, 1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046,

     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061,

     1061, 1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081,
     1081,    0,    0, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083,
        0,    0, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085,    0,
     1385, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087,    0,    0,

     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1165, 1385, 1165,
        0,    0, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
     2520, 1166, 2520,    0, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1386, 1167, 1191,    0, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1168, 2522, 1168, 2522, 1191, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1194, 2524, 1194, 2524, 2525,
     1386, 2525, 1191, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1387,    0, 1249, 1194, 1249, 1191,    0, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1388, 1389, 2526,    0, 2526,    0, 1251, 1387, 1251,

        0, 1194, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1253,    0, 1253, 1388,
     1389, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1255,    0, 1255, 1284, 1390,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256, 1285, 1284,
     1321, 1284, 1284, 1284, 1256, 1285, 1350, 1343, 1391, 1368,
     1321, 1343, 1343, 1343, 1348, 1350, 1284, 1390, 1348, 1348,
     1348,    0, 1368,    0, 1392, 1256, 1285, 1284, 1321, 1284,
     1284, 1284, 1256, 1285, 1350, 1343, 1391, 1368, 1321, 1343,
     1343, 1343, 1348, 1350, 1394, 1397, 1348, 1348, 1348, 1359,

     1368, 1359, 1392, 1399, 1400, 1401, 1403, 1404, 1405, 1406,
     1409, 1410, 1359, 1412, 1413, 1414, 1415, 1359, 1417, 1418,
        0, 1421, 1394, 1397,    0, 1422,    0, 1424, 1425,    0,
        0, 1399, 1400, 1401, 1403, 1404, 1405, 1406, 1409, 1410,
     1423, 1412, 1413, 1414, 1415, 1359, 1417, 1418, 1419, 1421,
     1423, 1426, 1419, 1422, 1419, 1424, 1425, 1419, 1419, 1431,
     1433, 1434, 1439, 1440, 1441, 1419, 1443, 1450, 1423, 1454,
     1455, 1456, 1457, 1458, 1459, 1461, 1419, 1462, 1423, 1426,
     1419, 1463, 1419, 1464, 1465, 1419, 1419, 1431, 1433, 1434,
     1439, 1440, 1441, 1419, 1443, 1450, 1466, 1454, 1455, 1456,

     1457, 1458, 1459, 1461, 1467, 1462, 1468, 1469, 1478, 1463,
     1479, 1464, 1465, 1482, 1487, 1489, 1490, 1491, 1492, 1493,
     1494, 1495, 1496, 1499, 1466, 1500, 1503, 1504, 1505, 1506,
     1507, 1508, 1467, 1510, 1468, 1469, 1478, 1507, 1479, 1511,
     1512, 1482, 1487, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1499, 1513, 1500, 1503, 1504, 1505, 1506, 1507, 1508,
     1509, 1510, 1509, 1514, 1516, 1507, 1515, 1511, 1512, 1518,
     1519, 1520, 1532, 1509, 1533, 1534, 1544, 1547, 1509, 1548,
     1513, 1557, 1515, 1561, 1562, 1563, 1564, 1565,    0, 1567,
        0, 1514, 1516, 1568, 1515, 1569, 1570, 1518, 1519, 1520,

     1532, 1571, 1533, 1534, 1544, 1547, 1509, 1548, 1572, 1557,
     1515, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1566, 1573,
     1574, 1568, 1575, 1569, 1570, 1576, 1579, 1582, 1583, 1571,
     1584, 1585, 1594, 1597, 1566, 1598, 1572, 1599, 1600, 1602,
     1603, 1601, 1604, 1605, 1606, 1607, 1609, 1573, 1574, 1601,
     1575, 1610, 1611, 1576, 1579, 1582, 1583, 1612, 1584, 1585,
     1594, 1597, 1566, 1598, 1613, 1599, 1600, 1602, 1603, 1601,
     1604, 1605, 1606, 1607, 1609, 1614, 1615, 1601, 1619, 1610,
     1611, 1620, 1621, 1622, 1623, 1612, 1624, 1625, 1626, 1627,
     1630, 1631, 1613, 1632, 1643, 1644, 1645, 1657, 1658, 1663,

     1665, 1668, 1669, 1614, 1615, 1672, 1619, 1673, 1674, 1620,
     1621, 1622, 1623, 1675, 1624, 1625, 1626, 1627, 1630, 1631,
     1677, 1632, 1643, 1644, 1645, 1657, 1658, 1663, 1665, 1668,
     1669, 1678, 1681, 1672, 1682, 1673, 1674, 1683, 1687, 1688,
     1694, 1675, 1696, 1697, 1699, 1700, 1701, 1702, 1677, 1703,
     1704, 1705, 1706, 1707, 1708, 1711, 1712, 1713, 1714, 1678,
     1681, 1718, 1682, 1719, 1720, 1683, 1687, 1688, 1694, 1721,
     1696, 1697, 1699, 1700, 1701, 1702, 1722, 1703, 1704, 1705,
     1706, 1707, 1708, 1711, 1712, 1713, 1714, 1723, 1724, 1718,
     1725, 1719, 1720, 1726, 1728, 1729, 1730, 1721, 1734, 1735,

     1736, 1742, 1743, 1744, 1722, 1745, 1746, 1747, 1748, 1749,
     1752, 1751, 1753, 1754, 1755, 1723, 1724, 1755, 1725, 1751,
     1756, 1726, 1728, 1729, 1730, 1757, 1734, 1735, 1736, 1742,
     1743, 1744, 1761, 1745, 1746, 1747, 1748, 1749, 1752, 1751,
     1753, 1754, 1755, 1758, 1766, 1755, 1758, 1751, 1756, 1759,
     1767, 1768, 1759, 1757, 1770, 1773, 1772, 1776, 1777, 1779,
     1761, 1772, 1780, 1783, 1784, 1785, 1786, 1787, 1788, 1790,
     1772, 1758, 1766, 1791, 1758, 1792, 1783, 1759, 1767, 1768,
     1759, 1793, 1770, 1773, 1772, 1776, 1777, 1779, 1794, 1772,
     1780, 1783, 1784, 1785, 1786, 1787, 1788, 1790, 1772, 1795,

     1796, 1791, 1798, 1792, 1783, 1799, 1800, 1801, 1802, 1793,
     1803, 1804, 1807, 1808, 1810, 1811, 1794, 1813, 1814, 1815,
     1816, 1818, 1819, 1820, 1821, 1822, 1823, 1795, 1796, 1824,
     1798, 1825, 1826, 1799, 1800, 1801, 1802, 1829, 1803, 1804,
     1807, 1808, 1810, 1811, 1833, 1813, 1814, 1815, 1816, 1818,
     1819, 1820, 1821, 1822, 1823, 1834, 1835, 1824, 1838, 1825,
     1826, 1841, 1842, 1843, 1849, 1829, 1843, 1850, 1853, 1855,
     1856, 1857, 1833, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
     1865, 1867, 1868, 1834, 1835, 1869, 1838, 1870, 1874, 1841,
     1842, 1843, 1849, 1875, 1843, 1850, 1853, 1855, 1856, 1857,

     1877, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1867,
     1868, 1878, 1882, 1869, 1886, 1870, 1874, 1887, 1890, 1896,
     1890, 1875, 1897, 1898, 1899, 1900, 1901, 1902, 1877, 1903,
     1904, 1908, 1909, 1910, 1912, 1915, 1890, 1916, 1917, 1878,
     1882, 1922, 1886, 1923, 1925, 1887, 1928, 1896, 1929, 1930,
     1897, 1898, 1899, 1900, 1901, 1902, 1931, 1903, 1904, 1908,
     1909, 1910, 1912, 1915, 1890, 1916, 1917, 1932, 1933, 1922,
     1933, 1923, 1925, 1935, 1928, 1936, 1929, 1930, 1939, 1940,
     1941, 1942, 1943, 1945, 1931, 1946, 1933, 1947, 1950, 1951,
     1955, 1956, 1958, 1959, 1963, 1932, 1971, 1972, 1974, 1975,

     1976, 1935, 1978, 1936, 1982, 1983, 1939, 1940, 1941, 1942,
     1943, 1945, 1984, 1946, 1933, 1947, 1950, 1951, 1955, 1956,
     1958, 1959, 1963, 1986, 1971, 1972, 1974, 1975, 1976, 1987,
     1978, 1988, 1982, 1983, 1989, 1991, 1992, 1995, 1996, 1997,
     1984, 1998, 1999, 2002, 2002, 2002, 2005, 2006,    0,    0,
     2003, 1986, 2003, 2011, 2013, 2014, 2015, 1987, 2007, 1988,
     2007, 2016, 1989, 1991, 1992, 1995, 1996, 1997, 2003, 1998,
     1999, 2002, 2002, 2002, 2005, 2006, 2007, 2009, 2012, 2009,
     2012, 2011, 2013, 2014, 2015, 2017, 2018,    0, 2020, 2016,
     2020, 2021, 2024, 2021, 2025, 2009, 2012, 2023, 2026, 2023,

     2028, 2032, 2034, 2035, 2036, 2038, 2020, 2040, 2044, 2021,
     2023, 2023, 2047, 2017, 2018, 2023, 2042, 2048, 2042, 2049,
     2024, 2043, 2025, 2043, 2050, 2045, 2026, 2045, 2028, 2032,
     2034, 2035, 2036, 2038, 2042, 2040, 2044, 2021, 2055, 2043,
     2047, 2056, 2051, 2045, 2051, 2048, 2053, 2049, 2053, 2057,
     2058, 2059, 2050, 2061, 2062, 2061, 2062, 2063, 2066, 2063,
     2051,    0, 2074, 2065, 2053, 2065, 2055, 2075, 2076, 2056,
        0, 2061, 2062,    0, 2069, 2063, 2069, 2057, 2058, 2059,
     2070, 2065, 2070, 2072, 2077, 2072, 2066, 2073, 2087, 2073,
     2074, 2078, 2069, 2078,    0, 2075, 2076, 2080, 2070, 2080,

     2082, 2072, 2082, 2088, 2083, 2073, 2083, 2089, 2084, 2078,
     2084, 2085, 2077, 2085, 2090, 2080, 2087, 2091, 2092, 2093,
     2094, 2095, 2083, 2096, 2097, 2098, 2084, 2099, 2082, 2085,
     2082, 2088, 2100, 2073, 2100, 2089, 2102, 2104, 2102, 2106,
     2108, 2109, 2090, 2112, 2114, 2091, 2092, 2093, 2094, 2095,
     2100, 2096, 2097, 2098, 2102, 2099, 2110, 2115, 2110, 2116,
     2117, 2118, 2119,    0, 2119, 2104,    0, 2106, 2108, 2109,
        0, 2112, 2114, 2121, 2110, 2121, 2123, 2125, 2123, 2125,
     2119, 2127, 2128, 2127, 2128, 2115,    0, 2116, 2117, 2118,
     2131, 2121, 2131, 2137, 2123, 2125, 2133, 2142, 2133, 2127,

     2128, 2135, 2135, 2135, 2136, 2138, 2136, 2138, 2131, 2143,
     2144, 2149, 2144, 2152, 2133, 2146, 2150, 2146, 2150, 2154,
     2155, 2137, 2136, 2138, 2151, 2142, 2151, 2156, 2144, 2135,
     2135, 2135, 2157, 2146, 2150, 2158, 2159, 2143, 2160, 2149,
     2161, 2152, 2151, 2164, 2165, 2164, 2166, 2154, 2155, 2167,
     2168, 2170, 2171, 2172, 2171, 2156, 2173, 2175,    0,    0,
     2157, 2164, 2190, 2158, 2159, 2180, 2160, 2180, 2161, 2185,
     2171, 2185, 2165, 2186, 2166, 2186,    0, 2167, 2168, 2170,
     2187, 2172, 2187, 2180, 2173, 2175, 2188, 2185, 2188, 2194,
     2190, 2186, 2191, 2193, 2191, 2195, 2193, 2198, 2187, 2203,

     2199, 2201, 2199, 2201, 2188, 2204, 2205, 2206, 2209, 2210,
     2191, 2211, 2212, 2204, 2213, 2204, 2213, 2194, 2199, 2201,
     2215, 2193, 2215, 2195, 2193, 2198, 2216, 2203, 2217, 2218,
     2219, 2222, 2213, 2204, 2205, 2206, 2209, 2210, 2215, 2211,
     2212, 2204, 2220, 2204, 2220, 2223, 2225, 2227, 2224, 2227,
     2229, 2234, 2229, 2224, 2216, 2236, 2217, 2218, 2219, 2222,
     2220, 2224, 2231, 2237, 2231, 2227, 2238, 2239, 2229, 2240,
     2243, 2244, 2245, 2223, 2225, 2246, 2224, 2247, 2248, 2234,
     2231, 2224, 2249, 2236, 2250, 2251, 2252, 2253, 2254, 2224,
     2258, 2237, 2249, 2260, 2238, 2239, 2261, 2240, 2243, 2244,

     2245, 2263, 2265, 2246, 2266, 2247, 2248, 2256, 2267, 2256,
     2249, 2272, 2250, 2251, 2252, 2253, 2254, 2259, 2258, 2259,
     2249, 2260, 2273, 2274, 2261, 2256, 2268, 2276, 2268, 2263,
     2265, 2275, 2266, 2275, 2279, 2259, 2267, 2280, 2277, 2272,
     2277, 2278, 2281, 2278, 2268, 2282, 2283, 2282, 2284, 2275,
     2273, 2274, 2285, 2286,    0, 2276, 2277, 2288, 2290, 2278,
     2292, 2296, 2279, 2282, 2287, 2280, 2287,    0, 2298, 2289,
     2281, 2289, 2268, 2293, 2283, 2293, 2284, 2295, 2299, 2295,
     2285, 2286, 2287, 2300, 2301, 2288, 2290, 2289, 2292, 2296,
     2297, 2293, 2297, 2305, 2306, 2295, 2298, 2302, 2307, 2302,

     2304, 2304, 2304, 2315,    0, 2308, 2299, 2308, 2297, 2316,
     2317, 2300, 2301,    0, 2310, 2302, 2310, 2311, 2321, 2311,
     2322, 2305, 2306, 2308, 2323, 2313, 2307, 2313, 2304, 2304,
     2304, 2315, 2310, 2330,    0, 2311, 2297, 2316, 2317, 2318,
     2320, 2318, 2320, 2313,    0, 2324, 2321, 2324, 2322, 2326,
        0, 2326, 2323, 2327, 2329, 2327, 2329, 2318, 2320, 2334,
     2332, 2330, 2332, 2324, 2335, 2338, 2335, 2326, 2337, 2337,
     2337, 2327, 2329, 2339, 2340, 2341,    0, 2343, 2332, 2343,
     2346, 2344, 2335, 2344, 2347, 2348, 2345, 2334, 2345, 2350,
     2355, 2350, 2358, 2338, 2358, 2343, 2337, 2337, 2337, 2344,

     2360, 2339, 2340, 2341, 2345, 2361, 2362, 2350, 2346, 2364,
     2358, 2364, 2347, 2348, 2367, 2371, 2367, 2369, 2355, 2369,
     2373, 2374, 2373, 2374, 2375, 2376, 2375, 2364, 2360, 2377,
     2378, 2379, 2367, 2361, 2362, 2369, 2386, 2387, 2373, 2374,
     2388, 2390, 2375, 2371, 2380, 2382, 2380, 2382, 2384, 2391,
     2384, 2392, 2396, 2376, 2399, 2401, 2399, 2377, 2378, 2379,
     2408,    0, 2380, 2382, 2386, 2387, 2384, 2410, 2388, 2390,
     2411, 2402, 2399, 2402, 2404,    0, 2404, 2391, 2416, 2392,
     2396,    0, 2406, 2401, 2406, 2415, 2418, 2415, 2408, 2402,
     2420, 2417, 2404, 2417, 2419, 2410, 2419, 2421, 2411, 2422,

     2406, 2423, 2425, 2415, 2429, 2430, 2416, 2431, 2432, 2417,
     2435, 2438, 2419, 2433, 2418, 2433, 2441, 2442, 2420, 2436,
     2443, 2436, 2439, 2445, 2439, 2421, 2446, 2422, 2447, 2423,
     2425, 2433, 2429, 2430, 2448, 2431, 2432, 2436, 2435, 2438,
     2439, 2444, 2449, 2444, 2441, 2442, 2451, 2453, 2443, 2455,
     2456, 2445, 2457, 2458, 2446, 2458, 2447, 2464, 2460, 2444,
     2460, 2465, 2448, 2462, 2466, 2462, 2461, 2467, 2461, 2468,
     2449, 2458, 2469,    0, 2451, 2453, 2460, 2455, 2456, 2461,
     2457, 2462,    0,    0, 2461, 2464, 2471, 2481, 2471, 2465,
     2482, 2473, 2466, 2473, 2474, 2467, 2474, 2468,    0, 2476,

     2469, 2476, 2483, 2484, 2471, 2478, 2478, 2478, 2479, 2473,
     2479, 2480, 2474, 2480, 2486, 2481, 2486, 2476, 2482, 2490,
     2491, 2490, 2491, 2492, 2499, 2492, 2479, 2500,    0, 2480,
     2483, 2484, 2486, 2478, 2478, 2478,    0, 2490, 2491,    0,
     2493, 2492, 2493, 2495, 2497, 2495, 2497, 2498, 2502, 2498,
     2502, 2504, 2499, 2504, 2506, 2500, 2506, 2510, 2493, 2510,
        0, 2495, 2497,    0,    0, 2498, 2502,    0, 2512, 2504,
     2512, 2514, 2506, 2514, 2515, 2510, 2515, 2521, 2523, 2521,
     2523,    0,    0,    0,    0,    0, 2512,    0,    0, 2514,
        0,    0, 2515,    0,    0, 2521, 2523, 2528, 2528, 2528,

     2528, 2528, 2529, 2529, 2529, 2529, 2529, 2530, 2530, 2530,
     2530, 2530, 2531, 2531, 2531, 2531, 2531, 2532, 2532, 2532,
     2532, 2532, 2533, 2533, 2533, 2533, 2533, 2534, 2534, 2534,
     2534, 2534, 2535, 2535, 2535, 2535, 2535, 2536, 2536, 2536,
     2536, 2536, 2537, 2537, 2537, 2537, 2537, 2538, 2538, 2538,
     2538, 2538, 2539, 2539, 2539, 2539, 2539, 2540, 2540, 2540,
     2540, 2540, 2541, 2541, 2541, 2541, 2541, 2542, 2542, 2542,
     2542, 2542, 2543, 2543, 2543, 2543, 2543, 2544, 2544, 2544,
     2544, 2544, 2545, 2545, 2545, 2545, 2545, 2546, 2546, 2546,
     2546, 2546, 2547, 2547, 2547, 2547, 2547, 2548, 2548, 2548,

     2548, 2548, 2549, 2549, 2549, 2549, 2549, 2550, 2550, 2550,
     2550, 2550, 2551, 2551, 2551, 2551, 2551, 2552, 2552, 2552,
     2552, 2552, 2553, 2553, 2553, 2553, 2553, 2554, 2554, 2554,
     2554, 2554, 2555, 2555, 2555, 2555, 2555, 2556, 2556, 2556,
     2556, 2556, 2557, 2557, 2557, 2557, 2557, 2558, 2558, 2558,
     2558, 2558, 2559, 2559, 2559, 2559, 2559, 2560, 2560, 2560,
     2560, 2560, 2561, 2561, 2561, 2561, 2561, 2562, 2562, 2562,
     2562, 2562, 2563, 2563, 2563, 2563, 2563, 2564, 2564, 2564,
     2564, 2564, 2565, 2565, 2565, 2565, 2565, 2566, 2566, 2566,
     2566, 2566, 2567, 2567, 2567, 2567, 2567, 2568, 2568, 2568,

     2568, 2568, 2569, 2569, 2569, 2569, 2569, 2570, 2570, 2571,
     2571, 2572, 2572, 2573, 2573, 2574, 2574, 2575, 2575, 2576,
     2576, 2577, 2577, 2579, 2579, 2580, 2580, 2581, 2581, 2582,
     2582, 2583, 2583, 2584, 2584, 2585, 2585, 2587, 2587, 2605,
     2605, 2606, 2606, 2607, 2607, 2608, 2608,    0, 2608, 2608,
     2609,    0,    0, 2609, 2609, 2610, 2610, 2611, 2611, 2612,
     2612, 2613, 2613, 2614, 2614, 2615, 2615, 2616, 2616, 2617,
     2617, 2618, 2618, 2620, 2620, 2621, 2621, 2622, 2622, 2623,
     2623, 2624, 2624, 2625, 2625, 2626, 2626, 2628, 2628, 2646,
     2646, 2647, 2647, 2648, 2648, 2649, 2649,    0, 2649, 2649,

     2650,    0,    0, 2650, 2650, 2651, 2651, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527, 2527,
     2527, 2527
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 23 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}





























































































































































#line 4326 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define ASOVERA 115
#define NUMTHREADS 116
#define SRCMOM 117
#define SRCMOMX 118
#define SRCMOMY 119
#define SRCMOMZ 120
#define SNKMOM 121
#define SNKMOMX 122
#define SNKMOMY 123
#define SNKMOMZ 124
#define SEQSRCMOM 125
#define SEQSRCMOMX 126
#define SEQSRCMOMY 127
#define SEQSRCMOMZ 128
#define SEQ2SRCMOM 129
#define SEQ2SRCMOMX 130
#define SEQ2SRCMOMY 131
#define SEQ2SRCMOMZ 132
#define CPUPREC 133
#define GPUPREC 134
#define GPUPRECSLOPPY 135
#define INVERTERTYPE 136
#define MMSID 137
#define CHKINVERSION 138
#define LAPHSTIMEPROJTYPE 139
#define LAPHSSPINPROJTYPE 140
#define LAPHSEVECPROJTYPE 141
#define LAPHSEVECNUMBER 142
#define LAPHSRNDVECNUMBER 143
#define LAPHSEVECPATHPRFX 144
#define LAPHSEVECFILEPRFX 145
#define LAPHS_TIME_SRC_NUMBER 146
#define LAPHS_SPIN_SRC_NUMBER 147
#define LAPHS_EVEC_SRC_NUMBER 148
#define LAPHS_PERAMBULATOR_PATH_PREFIX 149
#define LAPHS_PERAMBULATOR_FILE_PREFIX 150
#define COMMENT 151
#define ERROR 152
#define M_M_TWOPT 153
#define MXB_MXB_TWOPT 154
#define FERMION_TYPE 155
#define SOURCECOORDS 156
#define SRCSNKTIMESEP 157

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, (yy_size_t) max_size, cvc_in)) == 0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 216 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"

#line 4702 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2528 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2527 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 217 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 218 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 219 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 220 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 221 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 222 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 223 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 224 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 225 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 226 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 227 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 228 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 229 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 230 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 231 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 232 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 233 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 234 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 235 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 236 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 237 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 238 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 239 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 240 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 241 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 242 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 243 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 244 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 245 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 246 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 247 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 248 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 249 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 250 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 251 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 252 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 253 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 254 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 255 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCECOORDS);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 256 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 257 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 258 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 259 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 260 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 261 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 262 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 263 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 264 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 265 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 266 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 267 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 268 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 269 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 270 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 271 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 272 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 273 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 274 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 275 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 276 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 277 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 278 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 279 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 280 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 281 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 282 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 283 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 284 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 285 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 286 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 287 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 288 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 289 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 290 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 291 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 292 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 293 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 300 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 301 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 304 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 305 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 306 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 307 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 308 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 309 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 310 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 311 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 312 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 313 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 314 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 315 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 316 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 317 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 318 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 319 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 320 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 321 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 322 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 323 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 324 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 325 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 326 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 327 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 328 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 329 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 331 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 332 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 334 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 335 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 336 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 338 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 339 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 340 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 341 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 342 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 343 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 344 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 345 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOM);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 346 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 347 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 348 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 349 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 350 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 351 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 352 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 353 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMX);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 354 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMY);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 355 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMZ);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 356 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOM);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 357 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 358 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 359 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 360 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 361 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 362 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 364 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 365 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 366 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 367 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 368 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 369 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 370 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 371 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 372 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 373 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 375 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 376 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 378 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M_M_TWOPT);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 379 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MXB_MXB_TWOPT);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 380 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FERMION_TYPE);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 381 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCSNKTIMESEP);
	YY_BREAK
/* start namespace inclusion here */
case 156:
YY_RULE_SETUP
#line 386 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 390 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 394 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 398 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 402 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 406 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 410 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 414 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 418 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 422 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 426 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 430 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 434 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 438 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 443 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 448 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 452 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 456 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 460 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 464 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 468 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 472 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 476 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 480 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 484 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 488 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 492 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 496 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 500 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 504 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 509 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 514 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 519 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 523 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 527 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 531 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 535 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 539 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 543 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 547 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 551 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 559 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 577 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 581 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 585 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 589 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 593 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 597 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 601 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 605 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 609 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 613 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 617 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 621 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 625 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 629 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 633 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 637 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 641 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 645 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 649 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 653 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 657 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 661 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 665 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 669 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 673 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 677 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 681 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 685 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 689 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 693 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 697 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 701 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 706 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 710 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 714 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 723 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 727 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 731 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 736 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 745 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 755 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 759 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 763 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 767 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 771 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 775 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 779 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 784 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 790 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 796 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 802 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 808 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 814 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 819 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 823 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 828 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 833 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 838 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 842 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 850 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 855 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 860 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 864 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 874 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 882 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 890 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 898 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 906 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 915 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 924 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 933 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 941 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 945 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 949 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 953 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 958 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 963 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 968 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 974 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 981 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 986 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 991 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 996 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_sink_momentum_list[cvc::g_sink_momentum_number],
      cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+1, cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+2);
  cvc::g_sink_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sink momentum %s to list; total number is now %d\n", cvc_text, cvc::g_sink_momentum_number);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1003 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1008 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1013 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1019 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1026 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[0]);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1031 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[1]);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1036 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[2]);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1042 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number],
      cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+1, cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+2);
  cvc::g_seq2_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential^2 source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq2_source_momentum_number);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1049 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1059 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1069 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1079 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1083 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1087 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1096 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1101 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1106 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1112 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1117 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1122 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1127 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1132 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1137 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1142 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1148 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1153 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_m_m_2pt_num == MAX_M_M_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many m_m_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting m_m_2pt number %d\n", cvc::g_m_m_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gi),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+2,
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gf),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+2
  );

  cvc::g_m_m_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] m_m_2pt no. %d set to %s\n", cvc::g_m_m_2pt_num, cvc_text);
}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1177 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_source_location_number == MAX_SOURCE_LOCATION_NUMBER ) {
    fprintf(stderr, "[read_input_parser] Error, too many source locations\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting source coords %d\n", cvc::g_source_location_number);
  }

  sscanf(cvc_text, "%d,%d,%d,%d",
    cvc::g_source_coords_list[cvc::g_source_location_number],
    cvc::g_source_coords_list[cvc::g_source_location_number]+1,
    cvc::g_source_coords_list[cvc::g_source_location_number]+2,
    cvc::g_source_coords_list[cvc::g_source_location_number]+3);

  cvc::g_source_location_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] source coords no. %d set to %s\n", cvc::g_source_location_number, cvc_text);
}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1196 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_mxb_mxb_2pt_num == MAX_MXB_MXB_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many mxb_mxb_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting mxb_mxb_2pt number %d\n", cvc::g_mxb_mxb_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+2
  );

  cvc::g_mxb_mxb_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] mxb_mxb_2pt no. %d set to %s\n", cvc::g_mxb_mxb_2pt_num, cvc_text);
}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1228 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "TwistedMass")==0) {
    cvc::g_fermion_type = _TM_FERMION;
  } else if (strcmp(cvc_text, "Wilson")==0 ) {
    cvc::g_fermion_type = _WILSON_FERMION;
  } else if (strcmp(cvc_text, "DomainWall")==0 ) {
    cvc::g_fermion_type = _DW_WILSON_FERMION;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] fermion type set to %d\n", cvc::g_fermion_type);
}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1239 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_src_snk_time_separation = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_src_snk_time_separation = %s\n", cvc_text);
}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1245 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1249 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1253 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 1257 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1262 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 1265 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 317:
YY_RULE_SETUP
#line 1272 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 7018 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOM):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(SEQ2SRCMOM):
case YY_STATE_EOF(SEQ2SRCMOMX):
case YY_STATE_EOF(SEQ2SRCMOMY):
case YY_STATE_EOF(SEQ2SRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
case YY_STATE_EOF(M_M_TWOPT):
case YY_STATE_EOF(MXB_MXB_TWOPT):
case YY_STATE_EOF(FERMION_TYPE):
case YY_STATE_EOF(SOURCECOORDS):
case YY_STATE_EOF(SRCSNKTIMESEP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2528 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2528 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2527);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1271 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

