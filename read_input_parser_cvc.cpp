
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,int len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 299
#define YY_END_OF_BUFFER 300
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2373] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  295,  295,  298,  298,    0,    0,  300,  297,

      297,  296,  294,  293,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  147,  150,  151,  152,  148,  149,
      163,  297,  153,  297,  297,  154,  297,  297,  156,  297,
      297,  157,  297,  297,  158,  297,  297,  155,  297,  297,
      159,  297,  297,  160,  297,  297,  161,  297,  168,  169,
      171,  172,  173,  297,  162,  185,  297,  164,  297,  297,
      165,  297,  297,  166,  297,  297,  167,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  182,  183,  184,  186,
      187,  297,  297,  189,  297,  191,  170,  192,  193,  194,

      197,  198,  199,  200,  297,  195,  297,  297,  196,  297,
      297,  201,  297,  297,  202,  297,  203,  204,  297,  205,
      297,  297,  206,  297,  297,  207,  297,  297,  208,  297,
      297,  209,  297,  297,  210,  297,  297,  211,  297,  297,
      212,  297,  297,  213,  297,  297,  214,  297,  215,  216,
      218,  217,  297,  219,  297,  297,  297,  221,  297,  222,
      297,  223,  297,  224,  297,  225,  297,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  297,  297,  297,
      297,  297,  241,  242,  243,  297,  190,  297,  244,  245,
      246,  247,  297,  297,  249,  251,  259,  260,  252,  253,

      254,  255,  256,  257,  258,  261,  297,  262,  297,  263,
      297,  297,  297,  264,  297,  265,  297,  266,  297,  268,
      297,  269,  297,  270,  297,  297,  297,  271,  297,  272,
      297,  273,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  285,  297,  297,  288,  289,  290,  297,  295,
      295,  294,  293,  297,  297,  294,  293,  297,    0,  294,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,  147,  150,
      151,  152,  148,  149,  163,  153,    0,  153,    0,  154,
        0,  154,    0,  156,    0,  156,    0,  157,    0,  157,
        0,  158,    0,  158,    0,  155,    0,  155,    0,  159,
        0,  159,    0,  160,    0,  160,    0,  161,    0,  161,
        0,  168,  169,  171,  172,  173,  162,    0,  185,  164,
        0,  164,    0,  165,    0,  165,    0,  166,    0,  166,
        0,  167,    0,  167,    0,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  186,  187,  188,  189,

        0,  189,    0,  191,  170,  192,  193,  194,  197,  198,
      199,  200,  195,    0,  195,    0,  196,    0,  196,    0,
      201,    0,  201,    0,  202,    0,  202,    0,  203,  204,
      205,    0,  205,    0,  206,    0,  206,    0,  207,    0,
      207,    0,  208,    0,  208,    0,  209,    0,  209,    0,
      210,    0,  210,    0,  211,    0,  211,    0,  212,    0,
      212,    0,  213,    0,  213,    0,  214,    0,  214,    0,
      215,  216,  218,  217,  219,    0,  219,    0,  220,  221,
        0,  221,    0,  222,  223,    0,  224,    0,  225,    0,
      226,    0,  227,  228,  229,  230,  231,  232,  233,  234,

      235,  236,  237,  238,  239,  240,  241,  242,  243,  190,
        0,  190,    0,  244,  245,  246,  247,  248,  250,  249,
      251,  259,  260,  252,  253,  254,  255,  256,  257,  258,
      261,  262,    0,  262,    0,  263,    0,    0,    0,  264,
        0,  265,    0,  266,    0,  268,    0,  269,    0,  270,
        0,    0,    0,    0,  271,    0,  272,    0,  273,    0,
      275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  295,  295,  294,
      298,  298,  294,  292,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    3,    2,    0,    0,    0,    4,
        0,    5,    0,    6,    0,   12,    0,   11,    0,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,    0,  153,    0,  154,    0,  156,    0,  157,    0,
      158,    0,  155,    0,  159,    0,  160,    0,  161,    0,
      164,    0,  165,    0,  166,    0,  167,    0,  189,    0,
      195,    0,  196,    0,  201,    0,  202,    0,  205,    0,

      206,    0,  207,    0,  208,    0,  209,    0,  210,    0,
      211,    0,  212,    0,  213,    0,  214,    0,  219,    0,
      221,    0,  190,    0,  262,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    0,    0,    4,    5,    6,   12,   11,    0,    0,
        7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   58,    0,   57,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,   55,    0,    0,    0,    0,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      267,    0,  274,    0,    0,   58,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,   61,    0,   10,    0,    0,    0,    0,
       15,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,   70,    0,   73,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
       55,    0,    0,    0,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    0,    0,   23,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,   10,

        0,    0,    0,   15,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,   22,    0,   70,   73,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,   23,    0,    0,    0,    0,    0,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,    0,
        9,    0,    8,    0,  146,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,    0,    0,    0,  114,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,   25,    0,   26,    0,   27,    0,    0,    0,    0,
        0,   51,    0,   52,    0,   53,    0,   54,    0,    0,
        0,    0,    0,   62,    0,   63,    0,   64,    0,   65,
        0,    0,   20,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,    8,  146,    0,    0,    0,    0,    0,    0,   86,

        0,   87,    0,   88,    0,   89,    0,    0,   71,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      114,    0,    0,    0,    0,    0,    0,    0,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,    0,   72,    0,   74,    0,  115,   24,   25,
       26,   27,    0,    0,    0,    0,   49,   51,   52,   53,
       54,    0,    0,   60,    0,   59,    0,   62,   63,   64,
       65,    0,   20,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,    0,    0,    0,    0,   86,   87,   88,

       89,    0,   71,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   18,   17,    0,    0,    0,    0,    0,    0,
        0,   37,    0,    0,    0,   72,   74,  115,    0,    0,
        0,   49,    0,   50,   60,   59,    0,    0,    0,    0,
        0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,    0,   40,    0,
        0,    0,    0,  116,    0,    0,   35,    0,    0,    0,
        0,    0,   68,    0,   67,    0,    0,    0,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
       97,    0,    0,    0,    0,    0,   75,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,    0,    0,    0,

        0,  116,    0,   35,    0,    0,    0,    0,    0,   66,
       68,   67,    0,    0,  108,    0,    0,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   41,    0,    0,    0,  107,    0,    0,    0,
      128,    0,    0,   21,    0,    0,   97,    0,  129,    0,
        0,   47,    0,   46,    0,  131,   75,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
      102,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,  107,

        0,    0,  128,    0,    0,    0,    0,  129,    0,   47,
       46,  131,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   91,    0,    0,    0,    0,   34,    0,    0,    0,
        0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
        0,    0,   92,    0,    0,   45,    0,    0,  103,    0,
        0,    0,    0,    0,    0,  133,    0,   98,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   83,    0,   84,
        0,   34,    0,    0,    0,    0,    0,  110,    0,   43,
        0,    0,    0,    0,    0,  121,    0,  122,    0,  123,

        0,   93,    0,    0,   82,  103,    0,   38,    0,  117,
        0,    0,    0,    0,  133,   98,    0,    0,    0,   29,
        0,   30,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,   84,    0,    0,
        0,    0,    0,  110,    0,    0,    0,    0,    0,  121,
      122,  123,   93,    0,   42,   82,   38,  117,    0,    0,
        0,    0,   76,    0,  109,    0,    0,    0,   29,   30,
        0,    0,  101,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,   42,    0,  118,

        0,  119,    0,  120,   76,  109,    0,    0,    0,    0,
        0,  101,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,  104,    0,    0,
        0,    0,   94,    0,    0,    0,    0,    0,  118,  119,
      120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
        0,    0,   95,    0,    0,    0,    0,    0,    0,    0,
      127,    0,    0,    0,    0,   99,    0,    0,   33,    0,
      130,    0,    0,    0,    0,  136,    0,    0,    0,    0,
        0,  135,    0,    0,  134,    0,    0,   95,    0,  106,

        0,    0,    0,    0,    0,  127,    0,    0,    0,    0,
        0,   99,    0,  100,   33,  130,    0,    0,    0,  136,
        0,  143,    0,    0,    0,  135,    0,  142,  134,    0,
      141,    0,  106,    0,    0,    0,    0,    0,    0,  124,
        0,  125,    0,  126,    0,    0,  100,    0,    0,    0,
      143,    0,    0,    0,  142,  141,    0,  105,    0,    0,
        0,    0,    0,  124,  125,  126,    0,    0,    0,    0,
        0,    0,    0,    0,  105,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,  137,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  112,    0,  137,    0,

        0,    0,    0,  138,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  138,    0,  111,    0,    0,   31,
        0,   81,    0,    0,    0,    0,    0,    0,    0,  111,
        0,   32,   31,   81,    0,    0,    0,    0,   77,    0,
      113,    0,    0,    0,    0,   32,    0,   78,    0,   79,
        0,   80,   77,  113,    0,  140,    0,  139,    0,    0,
       78,   79,   80,  140,  139,    0,  145,    0,  144,  145,
      144,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    7,
        7,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,    1,    7,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   47,   47,   47,   48,   47,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    1,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[2494] =
    {   0,
        0,    6,   79,   97,  115,  133,  151,  169,  187,  205,
      223,  241,  259,  277,  295,  313,  331,  349,  367,  385,
      403,  421,  439,  457,  475,  493,  511,  529,  547,  565,
      583,  601,  619,  637,  655,  673,  691,  709,  727,  745,
      763,  781,  799,  817,  835,  853,  871,  889,  907,  925,
      943,  961,  979,  997, 1015, 1033, 1052, 1067, 1082, 1102,
     1117, 1132, 1152, 1167, 1182, 1202, 1217, 1232, 1252, 1267,
     1282, 1302, 1317, 1337, 1355, 1373, 1391, 1409, 1427, 1445,
     1464, 1511, 1479, 1526, 1572, 1590, 1488, 1535, 1553, 1608,
     1626, 1644, 1662, 1680, 1698, 1716, 1734, 1752, 1770, 1788,

     1806, 1824, 1842, 1860, 1878, 1896, 1914, 1932, 1950, 1968,
     1986, 2004, 2022, 2040, 2058, 2076, 2094, 2112, 2130, 2148,
     2166, 2184, 2202, 2220, 2238, 2256, 2274, 2292, 2310, 2328,
     2346, 2364, 2382, 2400, 2418, 2436, 2454, 2472, 2490, 2508,
     2526, 2544, 2562, 2580, 2598, 2616, 2635, 2650, 2696, 2714,
     2659, 2677, 2732, 2750, 2768, 2786, 2804, 2822, 2840, 2858,
     2876, 2894, 2912, 2930, 2948, 2966, 2984, 3002, 3020, 3038,
     3056, 3074, 3092, 3110, 3128, 3146, 3164, 3182, 3201, 3216,
     3231, 3251, 3266, 3281, 3301, 3316, 3331, 3351, 3366, 3386,
     3404, 3422, 3440, 3458, 3476, 3494, 3512, 3530, 3548, 3566,

     3584, 3602, 3621, 3668, 3636, 3683, 3729, 3747, 3766, 3813,
     3860, 3907, 3645, 3692, 3954, 4001, 4048, 4095, 4142, 4189,
     4236, 4283, 4330, 4377, 4424, 4471, 4518, 4565, 3710, 3777,
     4611, 4629, 3824, 3871, 4647, 4665, 4683, 4701, 4719, 4737,
     4755, 4773, 4791, 4809, 4827, 4845, 4863, 4881, 4899, 4917,
     4935, 4953, 4971, 4989, 5007, 5025, 5044, 5091, 5138, 5185,
     5232, 5279, 5326, 5373, 3918, 3965, 5420, 5467, 5514, 5561,
     5608, 5655, 5702, 5749, 4012, 4059, 4106, 4153, 4204, 4251,
     4298, 4345, 4213, 4260, 4307, 4354, 4392, 4435, 4486, 4533,
       84,  102,  120,  138,  156,  174, 5795, 1201, 1201,11852,

      190,11852,11852,11852, 4519, 1015, 5049, 1042, 1031, 5047,
     1079, 1043, 1082, 1096, 5813, 5803, 5865, 1109, 1179, 1137,
     4529, 5914,   87, 1128, 3784, 3791, 3831, 3838, 3878, 3885,
     3925, 3934, 4444, 3974, 4021, 4531, 4068, 4115, 4581, 4162,
     4401, 5053, 4494, 5106, 5146, 5115, 5159, 5193, 5206, 5240,
     5247, 5290, 5299, 5334, 5347, 5381, 5388, 5431, 3981, 4028,
     4075, 4122, 4169, 4485, 5443, 5044, 5475, 5482, 5525, 5534,
     5569, 5582, 5616, 5623, 5666, 5675, 5710, 5723,    0,    0,
        0,    0,    0,    0,    0,    0, 5138, 5279, 5306, 5326,
        0,    0, 5757, 5765, 5809, 5420, 5514, 5541, 5561, 5655,

     5682, 5702, 5864, 5943, 5971, 5978, 5991, 6000, 6007, 6022,
     6031, 6038, 6051, 6060, 6067, 6082, 6089, 6096, 6108, 6115,
     6128, 6137, 6144, 6159, 6168, 6175, 6188, 6197, 6204, 6219,
     6228, 6235, 6248, 6257, 6264, 6279, 6288, 6295, 6308, 6317,
     6324, 6339, 6348, 6355, 6368, 6377, 6384, 6399, 6406, 6413,
     6425, 6432, 6441, 6448, 6461,    0, 6470, 6477, 6492, 6499,
     6506, 6518, 6525, 6537, 6544, 6556, 6563, 6575, 6582, 6589,
     6596, 6603, 6610, 6617, 6624, 6631, 6638,    0,    0,    0,
        0,    0, 6645, 6652, 6659, 6668, 6675, 6688, 6695, 6702,
     6716,    0,    0, 6723, 6730,    0,    0, 6737,    0,    0,

        0,    0,    0,    0,    0, 6744, 6753, 6760, 6773, 6780,
     6787, 6801, 6808, 6820, 6827, 6839, 6846, 6858, 6865, 6877,
     6884, 6896, 6903, 6915, 6922, 6934, 6941, 6953, 6960, 6972,
     6979, 6991,    0,    0,    0,    0, 6998,    0,    0,    0,
        0, 7005, 7012,    0,    0, 7019, 7026, 7033,    0,    0,
      193,    0,    0,    0,  208,    0,    0, 7048,  211,11852,
     1131, 1149, 1188, 1195, 1225, 1237, 1225, 1224, 1256, 1262,
     1259, 1268, 1278, 1148, 1276, 1277, 1312, 1296, 1414,  123,
      159,  226, 1460, 1474,  229,  230,  244,  249,  264, 2582,
     2612, 5869, 3154, 3179, 3176, 3193, 3316, 5900, 3228, 3231,

     5871, 3225, 3226, 3264, 3293, 5835, 5811, 3288, 3276, 3313,
     4337, 3313, 3324, 5806, 3343,  283,  284, 3337, 7055, 7062,
     7069, 7076, 7083, 7090, 7097, 7104, 7117, 7124, 7137, 7145,
     7165, 7172, 7186, 7193, 7213, 7220, 7234, 7241, 7261, 7268,
     7282, 7289, 7309, 7316, 7330, 7337, 7357, 7364, 7378, 7385,
     7405, 7412, 7426, 7433, 7453, 7460, 7474, 7481, 7501, 7508,
     7522, 7529, 7536, 7549, 7556, 7563, 7575, 7582, 7589, 7596,
     7609, 7616, 7629, 7637, 7657, 7664, 7678, 7685, 7705, 7712,
     7726, 7733, 7753, 7760, 7774,    0,    0,    0,    0,    0,
        0,    0,    0, 7781, 7788, 7801, 7808,    0,    0, 7815,

     7828, 7835, 7848, 7856, 7863, 7876, 7883, 7890, 7897, 7904,
     7911, 7918, 7925, 7938, 7945, 7958, 7966, 7986, 7993, 8007,
     8014, 8034, 8041, 8055, 8062, 8082, 8089, 8103, 8110, 8117,
     8130, 8143, 8150, 8163, 8171, 8191, 8198, 8212, 8219, 8239,
     8246, 8260, 8267, 8287, 8294, 8308, 8315, 8335, 8342, 8356,
     8363, 8383, 8390, 8404, 8411, 8431, 8438, 8452, 8459, 8479,
     8486, 8500, 8507, 8527, 8534, 8548, 8555, 8575, 8582, 8596,
     8603, 8610, 8623, 8630, 8637, 8650, 8657, 8670,    0, 8678,
     8698, 8705, 8719, 8726, 8738, 8746, 8758, 8765, 8777, 8784,
     8796, 8803, 8810, 8817, 8824, 8831, 8838, 8845, 8852, 8859,

     8866,    0,    0,    0,    0,    0, 8873, 8880, 8887, 8894,
     8907, 8914, 8927, 8935, 8942, 8955,    0,    0, 8962, 8969,
        0,    0, 8976,    0,    0,    0,    0,    0,    0,    0,
     8983, 8990, 9003, 9010, 9023, 9031, 9043, 9051, 9063, 9075,
     9082, 9094, 9101, 9113, 9120, 9132, 9139, 9151, 9158, 9170,
     9177, 9189, 9196, 9208, 9220, 9227, 9239, 9246, 9258, 9265,
        0,    0,    0,    0, 9272,    0,    0,    0,    0, 9279,
     9286,    0,    0, 9293, 9300, 9307,    0,    0,  298,    0,
        0,  316,    0, 9322, 3339, 3351, 5858, 3353, 3584, 3628,
     1133,  303, 1115, 3629, 3732, 3731, 3726, 3793, 3851, 1109,

     1103, 4149, 4185,  334,  354,  370, 4194, 4247,  388,  408,
      424,  444,  460,  480,  496,  516,  532,  552, 1099, 4234,
      568,  588, 4294, 4291, 4334, 1098, 4341, 4351, 4359, 4401,
     9317, 4406, 4420, 4450, 4495, 4490, 1083, 4519, 4536, 4567,
     4582, 4582, 5001, 5039, 5056, 5052, 5045, 5154, 5166, 1065,
     5180, 5166, 5179, 5794, 5214, 5226, 5206, 5211, 5210,  604,
     5234, 9344, 9372, 9379, 9386, 9393, 9400, 9407, 9414, 9421,
     9428, 9435, 9442, 9449, 9456, 9463, 9470, 9477, 9484, 9491,
     9498, 9505, 9512, 9519, 9526, 9533, 9540, 9547, 9554, 9561,
     9568, 9575, 9582, 9589, 9596, 9603, 9610, 9617, 9624, 9631,

     9638, 9645, 9652, 9659, 9666, 9673, 9680, 9687, 9694, 9701,
     9708, 9715, 9722, 9729, 9736, 9743, 9750, 9757, 9764, 9771,
     9778, 9785, 9792, 9799, 9806, 9813, 9825, 9832, 9844, 5365,
     5346,  622,  642, 5362, 5359, 5353, 5379,  661,  662, 9843,
     5426, 5433, 5421, 5460, 5451, 5460, 5914, 5586, 5585, 5603,
      676, 5586, 5594,  680,  681,  694,  697,  698, 5621,  712,
      715, 5726, 5733, 5739, 1086, 5741, 5753, 5810, 5871, 5861,
     5880, 5874, 5885, 5903, 5910, 5914, 5928, 5930, 5974, 5964,
     5978, 6001, 1050, 6040, 6020, 1049, 6069, 6103,  716,  733,
     6111, 6098, 6135,  748, 6171, 6159, 1046, 6189, 6231, 6235,

     6249, 6291, 9858, 9870, 1034, 6293,  752,  753,  769,  784,
     6315, 1033, 6351, 6340,  788, 6371, 6378, 6448, 6444, 6433,
     6674, 6656, 6676, 7166, 6673, 9844, 6742, 7104, 9326, 1016,
     1015, 7122,  789,  802,  806, 7125, 7180, 7179,  820, 1009,
      840,  997, 7200, 7234, 7225, 7253, 7274, 7276, 7301,  860,
     7329,  874,  877, 7324, 7352, 7369, 7380, 7398, 7416, 7444,
     7479, 7478,  894,  823,  928,  897, 7499, 7533, 7534,  948,
      982, 7602, 7603, 7624, 7634, 7646, 7680, 7686,  979, 9885,
     9898, 9905, 9917, 9322, 7694, 1000, 1018, 7728, 7726, 7746,
     7784, 7783, 7817, 7833,  976, 1076, 7826, 1128, 7921, 7938,

     7962, 7962, 7971, 7996, 8011, 8037, 8057, 1178, 1038, 8054,
     9901, 9312, 1228, 1278, 1358, 1311, 8088, 8149, 8132, 1378,
     1379, 8158, 1397, 1398, 8153, 8180, 8211, 8220, 8243, 8264,
     8266, 8291, 1412, 1416, 8297, 1417, 1432, 1475, 1450, 8315,
     8337, 8345, 8364, 8375, 8393, 8395, 9320, 8426, 1540, 1451,
     1496, 8447,  961, 8442, 1506, 8466, 8486, 8494, 8530,  958,
     8650, 8552, 8566, 8595, 8587,  943, 9308, 8643, 8660, 8911,
     8904, 9898, 8909, 9917, 1541, 1560, 9050, 1561, 1575, 1601,
     9169, 9943, 9191, 9318,  940, 9814, 9854, 9890, 1593, 9908,
     9919, 9924, 9929, 9915, 9923, 9918, 9926, 1629, 1632, 1633,

     1649, 1650, 1669, 1670, 9939, 1683, 9917, 9943, 9933, 9941,
     9943, 9945, 9946, 9947, 1686, 9968, 1701, 1704, 9965,  925,
     9970, 9956, 9959,  922, 9963, 9962, 9959, 9977, 1705, 1719,
     9979, 9980, 1722, 9977, 9969, 9975,  918, 9973, 9987,10011,
     9977, 9980, 9994, 9995, 9995,10020, 1737, 1741, 1742, 1773,
    10000,  907,10020,10025, 1776, 1777, 1796, 1809,10011,10020,
    10029, 1813,  889, 1829, 1830, 1845, 1849, 1850,10030, 1881,
     1901, 1935,10017,10026,10037,10027,10033,10025,  886,10041,
    10038,10042,10035,10040,10046,10043,10062,10062, 1953, 1971,
     1991, 2007, 2027, 2028, 2043,10050,10060,  871,  868,10070,

     2047, 2048, 2061, 2081,10077, 2115,10063,10074,10070,10073,
    10074,10072,10068,10072,  864, 2082,10077,10072, 2135, 2169,
    10093,10093,10092,10091,10080,10139,10098,10086,10086,10094,
    10121, 2187,10097,10115,10112, 2207, 2241, 2261, 2295, 2315,
     2331, 2351, 2367, 2387, 2403, 2423,10130,10117,10122, 2439,
     2459, 2460, 2478, 2479, 2493, 2497, 2498, 2513,10123, 2529,
     2532,10127, 2533, 2552, 2565, 2568, 2569, 2586, 2603, 2644,
    10130, 2665, 2662, 2682,10125,10142,10143,10134,10131,10184,
    10131,10137,10148,10151,10154,10153,10145,10157,10164,10185,
     2685, 2699, 2717, 2735,10183,10176,10178,10187, 2739, 2771,

     2775, 2789, 2807, 2811, 2827, 2847,10190, 2861, 2865,10177,
    10187,10179,10179,10198,10199,10196,10199,10199,10203,10192,
     2881,10194,10203,10195,10195,10198,10208, 2882, 2897, 2901,
    10196,10205,10217,10237,10229,10231,10229, 2902, 2917,10231,
    10227,10232, 2933, 2936, 2937, 2954, 2969, 2972, 2973, 2989,
     2990, 3005,10233,10237,10244, 3008, 3009, 3023, 3027, 3028,
     3041, 3044, 3045, 3059, 3064, 3077,10236, 3081, 3095, 3098,
     3099,10254, 3113,10251,  852,  835,10253,10249, 3116, 3117,
    10246,10235,10259,10248,  834,10250,10249,  817,  810,10253,
    10248, 3131, 3135, 3136,10266,10268,  799, 3151, 3167, 3170,

     3171,10252, 3187,10269,10253,  798,10279,10274,10286,10294,
    10289,10299,10301,10294,10305,  781,  780,10289,10307,10306,
    10309, 3225, 3188, 3277,10293,10301,10306,10315,10312,10313,
    10314, 3293,10319,10316,10319, 3327, 3407, 3425,10304,10304,
    10312, 3428, 3429, 3443, 3446, 3461,10325,10320,10336,10348,
    10342,10352,10344, 3464,10359,10346,10354,10342,10350,10363,
    10354,10354,10355, 3465,10367, 3479, 3497, 3517,10356,10357,
    10364, 3518,10372, 3533,10405,10363, 3537, 3538,10382,10366,
     3569,10377,10403,  763,10404,10400,10394,10415,10417,10410,
     3572,10415,10421,10421,10405,10412,10408, 3573,10421,10415,

    10425,10422,10414,10419, 3590,10428,10432, 3632,10424,10421,
     3697,10431,10439,10450,10461, 3698,10463,10451,10453,10451,
    10452,10457,10458,10459,10460, 3717, 3607,10475, 3608,10461,
    10462,10481, 3718, 3653,10474, 3732, 3663,10481,10484,10471,
     3926, 4600, 3830, 4603, 3877,10467,10479, 4650, 3921,10470,
     4654,10472,10486,10483,10486,10506,10508,10504,10505,10509,
      759,10522,10519,10510,10519, 4686, 3968,10531,10513, 4690,
    10519,10532, 4722,10527,  727, 4726, 3971,10519,10525, 4758,
     4015,10557, 4762, 4794, 4798, 4830, 4018,10537,10527,10540,
    10532,10540,10531,10546,10536,10551, 4062, 4834,10562,10564,

    10556, 4065,10552, 4109,  726,10565,10561,10576, 4866, 4112,
     4156, 4159,10568,10583, 4216,10585, 4870, 4221,10576,10576,
    10568,10577,  722, 4902,10586,10583, 4906,10584,10575,10581,
    10577,10590, 4231,10580,10592, 4938, 4263,10588,10600, 4942,
     4268,10583,10594, 4278,10600,10621, 4310, 4974, 4315,10606,
     4978, 4325, 5010, 4357, 5014, 4362, 4397,10611,10622,  691,
    10633,10633,10627,  690,10629,  686, 5164, 4441,10621,10623,
    10624, 5352,10624,10632,10637,10644, 4462,10630,10637, 5587,
     4463,10633,10647,10636,10650,10632, 5728, 4513,10657,10648,
     5742, 4599,10662, 5783,10655,10666,10678,10672,10687, 5071,

     5841,10708, 5133,10717,10675,10694,10691, 5165,10686, 5177,
     5178, 5211,10685,  673,10688,10683,10684,  655,10691,  619,
    10692, 5212, 5850,10738,10706,10743, 5265,10689,10717,10699,
    10720,10753,  612,10766, 5266,10737,10727,10741,10731,10767,
    10770,10774, 5353,10777,10741, 5365,10778,10781, 5366,10798,
    10802,10759,10753,10763,10805, 5406,10806, 5407,10789,10812,
    10813,10825, 5461,10771,10780,10783,10793,10792,10791,10793,
    10800,10801,10797,10797,10800,10801,10849, 5462,10853, 5500,
    10804, 5501,10808,  601,10817,10808,10874, 5504,10816, 5588,
    10830,10839,10836,10827,10877, 5600,10881, 5601,10882, 5641,

    10888, 5642,10889,10894, 5729, 5741,10901, 5784,10902, 5851,
    10866,10911,10914,  583, 5908, 5913,10878,10875,10915, 6432,
    10921, 6525, 6544,10894,10922,10941,10893,  580,10885,10899,
    10898,10899,10899,10913,10902,10916, 6563, 6582,10948,10926,
    10931,10919,10926, 6779,10918,10965,10926,  565,10921, 6827,
     6846, 6865, 6884,10969, 6903, 6922, 6960, 6979,10974,10984,
    10989,10993, 6998,10994, 7052,10963,10941,10960, 7122, 7123,
    10971,10999, 7164,11003, 7165,10970,10990,10974,10989,  562,
      547,10976,10993,10981,10996,11027, 7169,11031,11000,10988,
    10990,10997,11053, 7215,11011,11029,11004, 7260,11066, 7263,

    11070, 7267,11073, 7308, 7311, 7315,11010,11024,11038,11026,
    11023, 7356, 7359,11026,11049,11038,11059,11056,11057,11062,
    11049,11060,11067,11071,11075, 7363,11099, 7404,11063,11113,
    11070,11076, 7407,  529,11093,11083,11092,11121, 7411, 7452,
     7453,11087,11086,11127,11113,11133,11134,11107,11110,11104,
    11154,11107,11119,11130,11111,11155,11122,11161,11123, 7457,
    11135,11164, 7500,11181,11149,11141,11145,11159,11153,11189,
     7503,11150,11151,11152,11200, 7614,11209,11215, 7615,11223,
     7656,11175,11181,11180,11228, 7659,11235,11180,11176,11188,
    11243, 7663,11248,11249, 7704,11252,11194, 7707,11255, 7711,

    11207,11200,11209,11225,11233, 7752,11263,11269,11274,11239,
    11241, 7755,11275, 7759, 7882, 7943,  526,11255,  511, 7944,
    11280, 7985,11256,11257,11265, 7988,11294, 7992, 8033,11297,
     8036,11300, 8040,11269,11266,11272,11257,11264,11303, 8081,
    11308, 8084,11320, 8088,11279,11286, 8136,11280,11288,11291,
     8137,  493,  490,11304, 8148, 8149,11328, 8190,11293,11309,
      475,11307,11305, 8193, 8197, 8238,11317,11339,11304,11347,
    11307,11310,11311,11312, 8241,11317,11324,11327,11323,11331,
    11322,11367, 8245,11343,11375, 8286,11347,11338,11344,11381,
    11351,11347,11368,11359,11371,11362, 8289,11372, 8293,11373,

    11377,11378,11403, 8334,11404,11414,11431,  457,11384,11373,
    11383,11384,11388,11389, 8337,11434, 8341,11442,11443, 8382,
    11446, 8385,11411,11456,11457,11408,11409,11435,11436, 8389,
    11466, 8430, 8433, 8437,11467,11470,11471,11492, 8478,11493,
     8481,11496,11497,11434,11435, 8485,11500, 8526,11501, 8529,
    11506, 8533, 8574, 8575,11507, 8579,11520, 8697,11521,11526,
     8700, 8704, 8745, 8765, 8784,11527, 8803,11530, 8912, 8913,
     8961,11852,11550,11555,11560,11565,11570,11575,11580,11585,
    11590,11595,11600,11605,11610,11615,11620,11625,11630,11635,
    11640,11645,11650,11655,11660,11665,11670,11675,11680,11685,

    11690,11695,11700,11705,11710,11715,11720,11725,11730,11735,
    11740,11745,11750,11752,11754,11756,11758,11760,11762,11764,
    11766,  497,11768,11770,11772,11774,11776,11778,11780,  482,
    11782,  464,  461,  446,  428,  425,  410,  392,  389,  374,
      371,  356,  338,  335,  320,  319,  316,  301,11784,11786,
    11788,11793,11798,11800,11802,11804,11806,11808,11810,11812,
    11814,  284,11816,11818,11820,11822,11824,11826,11828,  277,
    11830,  266,  265,  262,  247,  230,  211,  193,  176,  169,
      151,  140,  133,  115,  104,   97,   79,    0,11832,11834,
    11836,11841,11846

    } ;

static yyconst flex_int16_t yy_def[2494] =
    {   0,
     2373, 2372, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2374, 2374, 2375, 2375,
     2376, 2376, 2377, 2377, 2378, 2378, 2379, 2379, 2380, 2380,
     2381, 2381, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2382, 2382, 2383, 2383, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,

     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2384, 2384, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2385, 2385,
     2386, 2386, 2387, 2387, 2388, 2388, 2389, 2389, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,

     2373, 2373, 2390, 2390, 2391, 2391, 2373, 2373, 2392, 2392,
     2393, 2393, 2373, 2373, 2394, 2394, 2395, 2395, 2396, 2396,
     2397, 2397, 2398, 2398, 2399, 2399, 2400, 2400, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2401, 2401, 2402, 2402,
     2403, 2403, 2404, 2404, 2373, 2373, 2405, 2405, 2406, 2406,
     2407, 2407, 2408, 2408, 2373, 2373, 2373, 2373, 2409, 2409,
     2410, 2410, 2373, 2373, 2373, 2373, 2373, 2373, 2411, 2411,
     2373, 2373, 2412, 2412, 2413, 2413, 2373,  297, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2414, 2415,
     2416, 2417, 2418, 2419, 2420, 2421, 2372, 2372, 2372, 2372,
     2422, 2423, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2424, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2425, 2426, 2427,
     2428, 2429, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2430, 2431, 2372, 2372, 2432, 2433, 2372, 2434, 2435,

     2436, 2437, 2438, 2439, 2440, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2441, 2442, 2443, 2444, 2372, 2445, 2446, 2447,
     2448, 2372, 2372, 2449, 2450, 2372, 2372, 2372, 2451, 2452,
     2452, 2452, 2452, 2453, 2453, 2453, 2453, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2454, 2455, 2456, 2457, 2458,
     2459, 2460, 2461, 2372, 2372, 2372, 2372, 2462, 2463, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2464, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2465, 2466, 2467, 2468, 2469, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2470, 2471, 2372, 2372,
     2472, 2473, 2372, 2474, 2475, 2476, 2477, 2478, 2479, 2480,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2481, 2482, 2483, 2484, 2372, 2485, 2486, 2487, 2488, 2372,
     2372, 2489, 2490, 2372, 2372, 2372, 2491, 2492, 2492, 2492,
     2493, 2493, 2493, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372,    0, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372

    } ;

static yyconst flex_int16_t yy_nxt[11927] =
    {   0,
     2372,  301,  302,  301,  869,  303,  300,  301,  302,  301,
      300,  304,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  305,  306,  307,  308,
      309,  310,  311,  312,  313,  300,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  300,  300,  324,  300,
      300,  300,  300,  300,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  300,  314,  315,  316,  317,  318,  319,
      320,  321,  322,  323,  300,  300,  324,  300,  300,  300,
      301,  302,  301,  868,  303,  301,  302,  301,  616,  303,
      616,  325,  325,  325,  325,  325,  325,  325,  301,  302,

      301,  867,  304,  301,  302,  301,  617,  304,  866,  325,
      325,  325,  325,  325,  325,  325,  301,  302,  301,  864,
      303,  551,  302,  551,  580,  552,  580,  326,  326,  326,
      326,  326,  326,  326,  301,  302,  301,  863,  304,  551,
      302,  551,  582,  553,  862,  326,  326,  326,  326,  326,
      326,  326,  301,  302,  301,  861,  303,  301,  302,  555,
      904,  556,  904,  327,  327,  327,  327,  327,  327,  327,
      301,  302,  301,  830,  304,  301,  302,  555,  905,  557,
      829,  327,  327,  327,  327,  327,  327,  327,  301,  302,
      301,  559,  303,  559,  879,  560,  879,  828,  880,  328,

      328,  328,  328,  328,  328,  328,  301,  302,  301,  559,
      304,  882,  559,  883,  559,  827,  560,  328,  328,  328,
      328,  328,  328,  328,  301,  302,  301,  906,  303,  906,
      909,  911,  909,  911,  826,  329,  329,  329,  329,  329,
      329,  329,  301,  302,  301,  913,  304,  913,  910,  912,
      915,  825,  915,  329,  329,  329,  329,  329,  329,  329,
      301,  302,  301,  914,  303,  917,  824,  917,  916,  822,
      821,  330,  330,  330,  330,  330,  330,  330,  301,  302,
      301,  817,  304,  918,  616,  960,  616,  960,  698,  330,
      330,  330,  330,  330,  330,  330,  301,  302,  301,  879,

      303,  879,  617,  880, 1038,  869, 1038,  331,  331,  331,
      331,  331,  331,  331,  301,  302,  301,  559,  304,  882,
      868,  883, 1039,  867,  866,  331,  331,  331,  331,  331,
      331,  331,  301,  302,  301,  904,  303,  904,  332,  864,
      332,  333,  863,  334,  334,  334,  334,  334,  334,  334,
      301,  302,  301,  905,  304, 1051,  332, 1051,  332,  333,
      862,  334,  334,  334,  334,  334,  334,  334,  301,  302,
      301,  906,  303,  906,  335,  861,  335,  336,  830,  337,
      337,  337,  337,  337,  337,  337,  301,  302,  301,  909,
      304,  909,  335,  829,  335,  336,  828,  337,  337,  337,

      337,  337,  337,  337,  301,  302,  301,  910,  303, 1054,
      338, 1054,  338,  339,  827,  340,  340,  340,  340,  340,
      340,  340,  301,  302,  301,  911,  304,  911,  338,  826,
      338,  339,  825,  340,  340,  340,  340,  340,  340,  340,
      301,  302,  301,  912,  303, 1055,  341, 1055,  341,  342,
      824,  343,  343,  343,  343,  343,  343,  343,  301,  302,
      301,  913,  304,  913,  341,  822,  341,  342,  821,  343,
      343,  343,  343,  343,  343,  343,  301,  302,  301,  914,
      303, 1056,  344, 1056,  344,  345,  817,  346,  346,  346,
      346,  346,  346,  346,  301,  302,  301,  915,  304,  915,

      344,  698,  344,  345, 2323,  346,  346,  346,  346,  346,
      346,  346,  301,  302,  301,  916,  303, 1057,  347, 1057,
      347,  348, 2278,  349,  349,  349,  349,  349,  349,  349,
      301,  302,  301,  917,  304,  917,  347, 2273,  347,  348,
     2272,  349,  349,  349,  349,  349,  349,  349,  301,  302,
      301,  918,  303, 1058,  350, 1058,  350,  351, 2250,  352,
      352,  352,  352,  352,  352,  352,  301,  302,  301,  921,
      304,  921,  350, 2248,  350,  351, 2166,  352,  352,  352,
      352,  352,  352,  352,  301,  302,  301,  922,  303, 1061,
      353, 1061,  353,  354, 2121,  355,  355,  355,  355,  355,

      355,  355,  301,  302,  301,  960,  304,  960,  353, 2120,
      353,  354, 2096,  355,  355,  355,  355,  355,  355,  355,
      301,  302,  301, 1107,  303, 1107,  356, 2077,  356,  357,
     2066,  358,  358,  358,  358,  358,  358,  358,  301,  302,
      301, 1108,  304, 1109,  356, 1109,  356,  357, 2041,  358,
      358,  358,  358,  358,  358,  358,  301,  302,  301, 1989,
      303, 1110, 1038, 1115, 1038, 1115, 1975,  359,  359,  359,
      359,  359,  359,  359,  301,  302,  301, 1051,  304, 1051,
     1039, 1054, 1055, 1054, 1055,  359,  359,  359,  359,  359,
      359,  359,  301,  302,  301, 1056,  303, 1056, 1057, 1058,

     1057, 1058, 1973,  360,  360,  360,  360,  360,  360,  360,
      301,  302,  301, 1133,  304, 1133, 1061, 1163, 1061, 1163,
     1969,  360,  360,  360,  360,  360,  360,  360,  301,  302,
      301, 1134,  303, 1921, 1165, 1164, 1165, 1919, 1915,  361,
      361,  361,  361,  361,  361,  361,  301,  302,  301, 1170,
      304, 1170, 1166, 1107, 1186, 1107, 1186,  361,  361,  361,
      361,  361,  361,  361,  301,  302,  301, 1171,  303, 1886,
     1109, 1108, 1109, 1873, 1843,  362,  362,  362,  362,  362,
      362,  362,  301,  302,  301, 1187,  304, 1187, 1110, 1115,
     1133, 1115, 1133,  362,  362,  362,  362,  362,  362,  362,

      301,  302,  301, 1214,  303, 1214, 1828, 1215, 1134, 1215,
     1752,  363,  363,  363,  363,  363,  363,  363,  301,  302,
      301, 1220,  304, 1220, 1250, 1216, 1250, 1686, 1685,  363,
      363,  363,  363,  363,  363,  363,  301,  302,  301, 1221,
      303, 1223,  364, 1223,  364, 1675, 1671,  365,  365,  365,
      365,  365,  365,  365,  301,  302,  301, 1663,  304, 1224,
      364, 1233,  364, 1233, 1662,  365,  365,  365,  365,  365,
      365,  365,  301,  302,  301, 1236,  303, 1236, 1238, 1234,
     1238, 1659, 1651,  366,  366,  366,  366,  366,  366,  366,
      301,  302,  301, 1237,  304, 1163, 1239, 1163, 1251, 1650,

     1251,  366,  366,  366,  366,  366,  366,  366,  301,  302,
      301, 1518,  303, 1164,  367, 1497,  367,  368, 1496,  369,
      369,  369,  369,  369,  369,  369,  301,  302,  301, 1165,
      304, 1165,  367, 1481,  367,  368, 1462,  369,  369,  369,
      369,  369,  369,  369,  301,  302,  301, 1166,  303, 1170,
      370, 1170,  370,  371, 1448,  372,  372,  372,  372,  372,
      372,  372,  301,  302,  301, 1424,  304, 1171,  370, 1411,
      370,  371, 1407,  372,  372,  372,  372,  372,  372,  372,
      301,  302,  301, 1255,  303, 1255,  373, 1376,  373,  374,
     1346,  375,  375,  375,  375,  375,  375,  375,  301,  302,

      301, 1186,  304, 1186,  373, 1338,  373,  374, 1332,  375,
      375,  375,  375,  375,  375,  375,  301,  302,  301, 1187,
      303, 1187,  376, 1274,  376,  377, 1263,  378,  378,  378,
      378,  378,  378,  378,  301,  302,  301,  564,  304, 1289,
      376, 1289,  376,  377, 1225,  378,  378,  378,  378,  378,
      378,  378,  300,  301,  302,  301, 1222,  303,  300,  300,
      300,  300, 1212, 1211,  570,  564,  571,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300, 1275,  577, 1275,
     1189, 1184,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  570, 1174,  571, 1276, 1160, 1156,  300,  575,

     1138,  300,  300,  301,  302,  301,  577,  304,  300,  300,
      300,  300, 1091,  300,  576,  578,  579,  300,  301,  302,
      301,  300,  303,  300,  300,  300,  300,  575,  300, 1278,
     1078, 1278,  300,  301,  302,  301,  300,  304,  300,  300,
      300,  300,  576,  578,  579, 1065, 1059, 1279,  300,  602,
     1048,  300,  300,  301,  302,  301, 1047,  303,  300,  300,
      300,  300, 1040,  300,  605,  618,  885,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300,  602,  300, 1208,
     1037, 1208,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  605,  618,  885,  898,  886, 1209,  300,  603,

     2372,  300,  300,  301,  302,  301,  304,  304,  300,  300,
      300,  300, 2372,  300,  887,  888,  604,  300,  301,  302,
      301,  300,  303,  300,  300,  300,  300,  603,  300, 1298,
     2372, 1298,  300,  301,  302,  301,  300,  304,  300,  300,
      300,  300,  887,  888,  604, 2372, 2372, 1299,  300,  889,
     2372,  300,  300,  301,  302,  301, 2372,  303,  300,  300,
      300,  300, 2372,  300,  890,  891,  892,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300,  889,  300, 1214,
     2372, 1214,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  890,  891,  892,  893,  894,  895,  300,  896,

     2372,  300,  300,  301,  302,  301, 2372,  304,  300,  300,
      300,  300, 1300,  300, 1300,  897,  899,  900,  301,  302,
      301,  300,  303,  893,  894,  895, 2372,  896,  300,  387,
      387,  387,  387,  387,  387,  387,  901,  902,  301,  302,
      301, 2372,  304,  897,  899,  900, 2372, 2372,  300,  387,
      387,  387,  387,  387,  387,  387,  301,  302,  301, 1215,
      303, 1215, 2372, 2372,  901,  902, 2372,  388,  388,  388,
      388,  388,  388,  388,  301,  302,  301, 1216,  304, 1220,
     1304, 1220, 1304, 2372, 2372,  388,  388,  388,  388,  388,
      388,  388,  301,  302,  301, 2372,  303, 1221, 1223, 1306,

     1223, 1306, 2372,  389,  389,  389,  389,  389,  389,  389,
      301,  302,  301, 1233,  304, 1233, 1224, 1315, 1236, 1315,
     1236,  389,  389,  389,  389,  389,  389,  389,  301,  302,
      301, 1234,  303, 1317, 2372, 1317, 1237, 2372, 2372,  390,
      390,  390,  390,  390,  390,  390,  301,  302,  301,  903,
      304, 1318, 1250, 1318, 1250, 2372, 2372,  390,  390,  390,
      390,  390,  390,  390,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  300,  300, 1238,  903, 1238,  300,
      301,  302,  301,  300,  303,  300,  300,  300,  300,  301,
      302,  301, 2372,  303, 1239,  907,  908, 1251,  300, 1251,

      396,  396,  396,  396,  396,  396,  396, 1255, 2372, 1255,
      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  300,  300,  907,  908,  300,  300,  301,  302,  301,
      300,  304,  300,  300,  300,  300,  301,  302,  301, 2372,
      304, 1329, 1275, 1329, 1275,  300, 2372,  396,  396,  396,
      396,  396,  396,  396,  301,  302,  301,  300,  303, 1330,
     1276, 1362, 1278, 1362, 1278,  397,  397,  397,  397,  397,
      397,  397,  300,  301,  302,  301, 1364,  303, 1364,  393,
     1279,  393,  394, 2372,  395,  395,  395,  395,  395,  395,
      395,  301,  302,  301, 1289,  304, 1289,  393, 2372,  393,

      394, 2372,  395,  395,  395,  395,  395,  395,  395,  301,
      302,  301, 2372,  304, 1365, 1366, 1367, 1368, 2372, 2372,
      397,  397,  397,  397,  397,  397,  397,  301,  302,  301,
     1298,  303, 1298, 1389, 1300, 1389, 1300, 2372,  398,  398,
      398,  398,  398,  398,  398,  301,  302,  301, 1299,  304,
     1390, 1392, 1390, 1392, 2372, 2372,  398,  398,  398,  398,
      398,  398,  398,  301,  302,  301, 2372,  303, 1391, 1393,
     1394, 1304, 1394, 1304,  399,  399,  399,  399,  399,  399,
      399,  301,  302,  301, 1306,  304, 1306, 1315, 1395, 1315,
     2372, 2372,  399,  399,  399,  399,  399,  399,  399,  301,

      302,  301, 1317,  303, 1317, 1318, 1329, 1318, 1329, 2372,
      400,  400,  400,  400,  400,  400,  400,  301,  302,  301,
     1416,  304, 1416, 1419, 1330, 1419, 2372, 2372,  400,  400,
      400,  400,  400,  400,  400,  301,  302,  301, 1439,  303,
     1439, 1420, 1441, 1443, 1441, 1443,  401,  401,  401,  401,
      401,  401,  401,  301,  302,  301, 1440,  304, 2372, 2372,
     1442, 1444, 2372, 2372,  401,  401,  401,  401,  401,  401,
      401,  301,  302,  301, 1445,  303, 1445, 1451, 1453, 1451,
     1453, 2372,  402,  402,  402,  402,  402,  402,  402,  301,
      302,  301, 1446,  304, 2372, 1452, 1454, 1455, 2372, 1455,

      402,  402,  402,  402,  402,  402,  402,  301,  302,  301,
     1457,  303, 1457, 2372, 1362, 1456, 1362, 2372,  403,  403,
      403,  403,  403,  403,  403,  301,  302,  301, 1458,  304,
     1364, 1463, 1364, 1463, 2372, 2372,  403,  403,  403,  403,
      403,  403,  403,  301,  302,  301, 1465,  303, 1465, 1464,
     1467, 1469, 1467, 1469,  404,  404,  404,  404,  404,  404,
      404,  301,  302,  301, 1466,  304, 2372, 2372, 1468, 1470,
     2372, 2372,  404,  404,  404,  404,  404,  404,  404,  301,
      302,  301, 1370,  303, 1370,  405, 2372,  405,  406, 2372,
      407,  407,  407,  407,  407,  407,  407,  301,  302,  301,

     1372,  304, 1472,  405, 1472,  405,  406, 2372,  407,  407,
      407,  407,  407,  407,  407,  301,  302,  301, 2372,  303,
     1473,  408, 2372,  408,  409, 2372,  410,  410,  410,  410,
      410,  410,  410,  301,  302,  301, 1474,  304, 1474,  408,
     2372,  408,  409, 2372,  410,  410,  410,  410,  410,  410,
      410,  301,  302,  301, 1389,  303, 1389,  411, 2372,  411,
      412, 2372,  413,  413,  413,  413,  413,  413,  413,  301,
      302,  301, 1390,  304, 1390,  411, 2372,  411,  412, 2372,
      413,  413,  413,  413,  413,  413,  413,  301,  302,  301,
     1391,  303, 1491,  414, 1491,  414,  415, 2372,  416,  416,

      416,  416,  416,  416,  416,  301,  302,  301, 1392,  304,
     1392,  414, 2372,  414,  415, 2372,  416,  416,  416,  416,
      416,  416,  416,  301,  302,  301, 1393,  303, 1492, 1394,
     1492, 1394, 2372, 2372,  417,  417,  417,  417,  417,  417,
      417,  301,  302,  301, 1493,  304, 1493, 1395, 1499, 1501,
     1499, 1501,  417,  417,  417,  417,  417,  417,  417,  301,
      302,  301, 1503,  303, 1503, 2372, 1500, 1502, 2372, 2372,
      418,  418,  418,  418,  418,  418,  418,  301,  302,  301,
     1504,  304, 1505, 1416, 1505, 1416, 2372, 2372,  418,  418,
      418,  418,  418,  418,  418,  301,  302,  301, 2372,  303,

     1506,  419, 2372,  419,  420, 2372,  421,  421,  421,  421,
      421,  421,  421,  301,  302,  301, 1508,  304, 1508,  419,
     2372,  419,  420, 2372,  421,  421,  421,  421,  421,  421,
      421,  301,  302,  301, 1509,  303, 1419,  422, 1419,  422,
      423, 2372,  424,  424,  424,  424,  424,  424,  424,  301,
      302,  301, 2372,  304, 1420,  422, 2372,  422,  423, 2372,
      424,  424,  424,  424,  424,  424,  424,  301,  302,  301,
     1521,  303, 1521,  425, 2372,  425,  426, 2372,  427,  427,
      427,  427,  427,  427,  427,  301,  302,  301, 1538,  304,
     1538,  425, 2372,  425,  426, 2372,  427,  427,  427,  427,

      427,  427,  427,  301,  302,  301, 1539,  303, 1543,  428,
     1543,  428,  429, 2372,  430,  430,  430,  430,  430,  430,
      430,  301,  302,  301, 2372,  304, 1544,  428, 2372,  428,
      429, 2372,  430,  430,  430,  430,  430,  430,  430,  301,
      302,  301, 1545,  303, 1545,  431, 2372,  431,  432, 2372,
      433,  433,  433,  433,  433,  433,  433,  301,  302,  301,
     1546,  304, 1547,  431, 1547,  431,  432, 2372,  433,  433,
      433,  433,  433,  433,  433,  301,  302,  301, 2372,  303,
     1548,  434, 2372,  434,  435, 2372,  436,  436,  436,  436,
      436,  436,  436,  301,  302,  301, 1439,  304, 1439,  434,

     2372,  434,  435, 2372,  436,  436,  436,  436,  436,  436,
      436,  301,  302,  301, 1440,  303, 1549,  437, 1549,  437,
      438, 2372,  439,  439,  439,  439,  439,  439,  439,  301,
      302,  301, 1441,  304, 1441,  437, 2372,  437,  438, 2372,
      439,  439,  439,  439,  439,  439,  439,  301,  302,  301,
     1442,  303, 1550,  440, 1550,  440,  441, 2372,  442,  442,
      442,  442,  442,  442,  442,  301,  302,  301, 1443,  304,
     1443,  440, 2372,  440,  441, 2372,  442,  442,  442,  442,
      442,  442,  442,  301,  302,  301, 1444,  303, 1551,  443,
     1551,  443,  444, 2372,  445,  445,  445,  445,  445,  445,

      445,  301,  302,  301, 1445,  304, 1445,  443, 2372,  443,
      444, 2372,  445,  445,  445,  445,  445,  445,  445,  301,
      302,  301, 1446,  303, 1552,  446, 1552,  446,  447, 2372,
      448,  448,  448,  448,  448,  448,  448,  301,  302,  301,
     1556,  304, 1556,  446, 2372,  446,  447, 2372,  448,  448,
      448,  448,  448,  448,  448,  301,  302,  301, 1557,  303,
     1451, 1558, 1451, 1558, 2372, 2372,  449,  449,  449,  449,
      449,  449,  449,  301,  302,  301, 2372,  304, 1452, 1453,
     1559, 1453, 1559, 2372,  449,  449,  449,  449,  449,  449,
      449,  301,  302,  301, 1455,  303, 1455, 1454, 1560, 1457,

     1560, 1457,  450,  450,  450,  450,  450,  450,  450,  301,
      302,  301, 1456,  304, 1561, 2372, 1561, 1458, 2372, 2372,
      450,  450,  450,  450,  450,  450,  450,  301,  302,  301,
     1563,  303, 1563, 1565, 1463, 1565, 1463, 2372,  451,  451,
      451,  451,  451,  451,  451,  301,  302,  301, 1564,  304,
     2372, 1566, 1464, 1568, 2372, 1568,  451,  451,  451,  451,
      451,  451,  451,  301,  302,  301, 1465,  303, 1465, 1569,
     1467, 1569, 1467, 2372,  452,  452,  452,  452,  452,  452,
      452,  301,  302,  301, 1466,  304, 2372, 1570, 1468, 1570,
     2372, 2372,  452,  452,  452,  452,  452,  452,  452,  301,

      302,  301, 2372,  303, 1469,  453, 1469,  453,  454, 2372,
      455,  455,  455,  455,  455,  455,  455,  301,  302,  301,
      919,  304, 1470,  453, 2372,  453,  454, 2372,  455,  455,
      455,  455,  455,  455,  455,  300,  301,  302,  301,  920,
      303,  300,  300,  300,  300, 1571, 2372, 1571,  919, 2372,
      300,  301,  302,  301,  300,  304,  300,  300,  300,  300,
      301,  302,  301, 1573,  303, 1573, 1472,  920, 1472,  300,
     2372,  460,  460,  460,  460,  460,  460,  460,  301,  302,
      301,  300,  304, 1474, 1473, 1474, 1491, 2372, 1491,  460,
      460,  460,  460,  460,  460,  460,  300,  301,  302,  301,

     1492,  303, 1492,  457, 2372,  457,  458, 2372,  459,  459,
      459,  459,  459,  459,  459,  301,  302,  301, 1493,  304,
     1493,  457, 2372,  457,  458, 2372,  459,  459,  459,  459,
      459,  459,  459,  301,  302,  301, 1592,  303, 1592,  461,
     1499,  461, 1499, 2372,  462,  462,  462,  462,  462,  462,
      462,  301,  302,  301, 1593,  304, 2372,  461, 1500,  461,
     2372, 2372,  462,  462,  462,  462,  462,  462,  462,  301,
      302,  301, 1598,  303, 1598,  463, 1501,  463, 1501, 2372,
      464,  464,  464,  464,  464,  464,  464,  301,  302,  301,
     1599,  304, 1599,  463, 1502,  463, 2372, 2372,  464,  464,

      464,  464,  464,  464,  464,  301,  302,  301, 1503,  303,
     1503,  465, 1600,  465, 1600, 2372,  466,  466,  466,  466,
      466,  466,  466,  301,  302,  301, 1504,  304, 1505,  465,
     1505,  465, 2372, 2372,  466,  466,  466,  466,  466,  466,
      466,  301,  302,  301, 2372,  303, 1506,  467, 1601,  467,
     1601, 2372,  468,  468,  468,  468,  468,  468,  468,  301,
      302,  301, 1508,  304, 1508,  467, 1603,  467, 1603, 2372,
      468,  468,  468,  468,  468,  468,  468,  301,  302,  301,
     1509,  303, 1521, 1528, 1521, 1528, 2372, 2372,  469,  469,
      469,  469,  469,  469,  469,  301,  302,  301, 1622,  304,

     1622, 1530, 1624, 1538, 1624, 1538,  469,  469,  469,  469,
      469,  469,  469,  301,  302,  301, 1623,  303, 1632, 2372,
     1632, 1539, 2372, 2372,  470,  470,  470,  470,  470,  470,
      470,  301,  302,  301, 1543,  304, 1543, 1636, 1545, 1636,
     1545, 2372,  470,  470,  470,  470,  470,  470,  470,  301,
      302,  301, 1544,  303, 2372, 1637, 1546, 1637, 2372, 2372,
      471,  471,  471,  471,  471,  471,  471,  301,  302,  301,
     1547,  304, 1547, 1638, 1549, 1638, 1549, 2372,  471,  471,
      471,  471,  471,  471,  471,  301,  302,  301, 1548,  303,
     1550, 1551, 1550, 1551, 2372, 2372,  472,  472,  472,  472,

      472,  472,  472,  301,  302,  301, 1552,  304, 1552, 1556,
     1642, 1556, 1642, 2372,  472,  472,  472,  472,  472,  472,
      472,  301,  302,  301, 1558,  303, 1558, 1557, 1559, 1560,
     1559, 1560,  473,  473,  473,  473,  473,  473,  473,  301,
      302,  301, 1561,  304, 1561, 1643, 1563, 1643, 1563, 2372,
      473,  473,  473,  473,  473,  473,  473,  301,  302,  301,
     1645,  303, 1645, 1644, 1564, 1565, 2372, 1565,  474,  474,
      474,  474,  474,  474,  474,  301,  302,  301, 1646,  304,
     1646, 2372, 1568, 1566, 1568, 2372,  474,  474,  474,  474,
      474,  474,  474,  301,  302,  301, 1569,  303, 1569, 1570,

     1571, 1570, 1571, 2372,  475,  475,  475,  475,  475,  475,
      475,  301,  302,  301, 1573,  304, 1573, 1579, 1654, 1579,
     1654, 2372,  475,  475,  475,  475,  475,  475,  475,  301,
      302,  301, 1592,  303, 1592, 1580, 1666, 1667, 1666, 1667,
      476,  476,  476,  476,  476,  476,  476,  301,  302,  301,
     1593,  304, 1598, 2372, 1598, 1668, 2372, 2372,  476,  476,
      476,  476,  476,  476,  476,  301,  302,  301, 1599,  303,
     1599, 1600, 1601, 1600, 1601, 2372,  477,  477,  477,  477,
      477,  477,  477,  301,  302,  301,  926,  304, 1603, 1691,
     1603, 1691, 2372, 2372,  477,  477,  477,  477,  477,  477,

      477,  300,  301,  302,  301, 2372,  303,  300,  300,  300,
      300, 2372, 2372,  927,  926,  928,  300,  301,  302,  301,
      300,  304,  300,  300,  300,  300, 1622,  929, 1622, 2372,
     2372,  300,  301,  302,  301,  300,  303,  300,  300,  300,
      300,  927, 2372,  928, 1623, 2372, 2372,  300,  936, 2372,
      300,  300,  301,  302,  301,  929,  304,  300,  300,  300,
      300, 2372,  300,  937,  941,  942,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  936,  300, 1624, 2372,
     1624,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  937,  941,  942, 1632, 2372, 1632,  300,  943, 2372,

      300,  300,  301,  302,  301, 2372,  303,  300,  300,  300,
      300, 2372,  300,  944,  950,  951,  300,  301,  302,  301,
      300,  304,  300,  300,  300,  300,  943,  300, 1636, 2372,
     1636,  300,  301,  302,  301,  300,  303,  300,  300,  300,
      300,  944,  950,  951,  930,  952,  955,  300,  956, 2372,
      300,  300,  301,  302,  301, 2372,  304,  300,  300,  300,
      300, 2372,  300,  931,  959,  961, 1030,  301,  302,  301,
      300,  303,  930,  952,  955, 2372,  956,  300,  483,  483,
      483,  483,  483,  483,  483, 1031, 1034,  301,  302,  301,
     2372,  304,  959,  961, 1030, 2372, 2372,  300,  483,  483,

      483,  483,  483,  483,  483,  301,  302,  301, 1637,  303,
     1637, 2372, 2372, 1031, 1034, 2372,  484,  484,  484,  484,
      484,  484,  484,  301,  302,  301, 1638,  304, 1638, 1642,
     1643, 1642, 1643, 2372,  484,  484,  484,  484,  484,  484,
      484,  301,  302,  301, 1705,  303, 1705, 1645, 1644, 1645,
     2372, 2372,  485,  485,  485,  485,  485,  485,  485,  301,
      302,  301, 1646,  304, 1646, 1654, 1726, 1654, 1726, 2372,
      485,  485,  485,  485,  485,  485,  485,  301,  302,  301,
     1666,  303, 1666,  486, 1727,  486,  487, 2372,  488,  488,
      488,  488,  488,  488,  488,  301,  302,  301, 1667,  304,

     1667,  486, 2372,  486,  487, 2372,  488,  488,  488,  488,
      488,  488,  488,  301,  302,  301, 1668,  303, 1729, 1733,
     1729, 1733, 2372, 2372,  489,  489,  489,  489,  489,  489,
      489,  301,  302,  301, 1736,  304, 1736, 1734, 1742, 1744,
     1742, 1744,  489,  489,  489,  489,  489,  489,  489,  301,
      302,  301, 1737,  303, 2372, 2372, 1743, 1745, 2372, 2372,
      490,  490,  490,  490,  490,  490,  490,  301,  302,  301,
     1748,  304, 1748, 1691, 1766, 1691, 1766, 2372,  490,  490,
      490,  490,  490,  490,  490,  301,  302,  301, 1749,  303,
     2372, 1705, 1767, 1705, 2372, 2372,  491,  491,  491,  491,

      491,  491,  491,  301,  302,  301, 1035,  304, 1797, 1729,
     1797, 1729, 2372, 2372,  491,  491,  491,  491,  491,  491,
      491,  300,  301,  302,  301,  300,  303,  300,  300,  300,
      300,  300,  300, 1776, 1035, 1776,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  301,  302,  301, 2372,
      303, 1777, 1036, 1041, 1802,  300, 1802,  498,  498,  498,
      498,  498,  498,  498, 1804, 2372, 1804,  300,  300,  301,
      302,  301,  300,  304,  300,  300,  300,  300,  300,  300,
     1036, 1041,  300,  300,  301,  302,  301,  300,  304,  300,
      300,  300,  300,  301,  302,  301, 2372,  304, 1780, 1786,

     1780, 1786,  300, 2372,  498,  498,  498,  498,  498,  498,
      498,  301,  302,  301,  300,  303, 1781, 1787, 1726, 1733,
     1726, 1733,  506,  506,  506,  506,  506,  506,  506,  300,
      301,  302,  301, 1736,  303, 1736, 1727, 1734,  494, 2372,
     2372,  495,  495,  495,  495,  495,  495,  495,  301,  302,
      301, 1737,  304, 1042, 2372, 1043,  494, 2372, 1044,  495,
      495,  495,  495,  495,  495,  495,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  300,  300,  301,  302,
      301, 1042,  304, 1043, 2372,  300, 1044, 2372, 2372,  506,
      506,  506,  506,  506,  506,  506,  619,  619,  619,  619,

      619,  619,  619,  620,  620,  620,  620,  620,  620,  620,
     2372, 2372,  300,  300,  301,  302,  301,  300,  304,  300,
      300,  300,  300,  300,  300,  301,  302,  301, 2372,  303,
     1045, 1811,  300, 1811, 2372, 2372,  510,  510,  510,  510,
      510,  510,  510,  621,  621,  621,  621,  621,  621,  621,
      622,  622,  622,  622,  622,  622,  622, 2372, 1045,  300,
      300,  301,  302,  301,  300,  303,  300,  300,  300,  300,
      300,  300,  301,  302,  301, 2372,  304, 1046, 1812,  300,
     1812, 2372, 2372,  510,  510,  510,  510,  510,  510,  510,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,

      624,  624,  624,  624, 2372, 1046,  300,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300,  300,  300,  301,
      302,  301, 1815,  303, 1815, 2372,  300, 1809, 2372, 1809,
      537,  537,  537,  537,  537,  537,  537,  625,  625,  625,
      625,  625,  625,  625,  626, 1810,  627,  627,  627,  627,
      627,  627,  627,  300,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  300,  300,  301,  302,  301, 1833,
      304, 1833, 1844,  300, 1844, 2372, 2372,  537,  537,  537,
      537,  537,  537,  537,  626, 2372,  627,  627,  627,  627,
      627,  627,  627,  662,  662,  662,  662,  662,  662,  662,

      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  300,  300,  301,  302,  301, 1847,  303, 1847, 1857,
      300, 1857, 2372, 2372,  542,  542,  542,  542,  542,  542,
      542,  630, 2372,  631,  631,  631,  631,  631,  631,  631,
      663,  663,  663,  663,  663,  663,  663,  300,  300,  301,
      302,  301,  300,  303,  300,  300,  300,  300,  300,  300,
      301,  302,  301, 1797,  304, 1797, 1802,  300, 1802, 2372,
     2372,  542,  542,  542,  542,  542,  542,  542,  630, 2372,
      631,  631,  631,  631,  631,  631,  631,  664,  664,  664,
      664,  664,  664,  664,  300,  300,  301,  302,  301,  300,

      304,  300,  300,  300,  300,  300,  300,  301,  302,  301,
     1804,  303, 1804, 1877,  300, 1877, 2372, 2372,  543,  543,
      543,  543,  543,  543,  543,  634, 2372,  635,  635,  635,
      635,  635,  635,  635,  665,  665,  665,  665,  665,  665,
      665,  300,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  300,  300,  301,  302,  301, 1811,  304, 1811,
     1812,  300, 1812, 2372, 2372,  543,  543,  543,  543,  543,
      543,  543,  634, 1049,  635,  635,  635,  635,  635,  635,
      635,  666,  666,  666,  666,  666,  666,  666,  300,  300,
      301,  302,  301,  300,  304,  300,  300,  300,  300,  300,

      300, 1049, 2372, 2372,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  301,  302,  301, 1815,  303, 1815,
     1050, 1052, 1881,  300, 1881,  546,  546,  546,  546,  546,
      546,  546, 1833, 2372, 1833,  300,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  300,  300, 1050, 1052,
      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  301,  302,  301, 1900,  304, 1900, 1053, 1060, 1903,
      300, 1903,  546,  546,  546,  546,  546,  546,  546, 1844,
     2372, 1844,  300,  300,  301,  302,  301,  300,  304,  300,
      300,  300,  300,  300,  300, 1053, 1060,  300,  300,  301,

      302,  301,  300,  303,  300,  300,  300,  300,  301,  302,
      301, 1847,  303, 1847, 1062, 1063, 1908,  300, 1908,  547,
      547,  547,  547,  547,  547,  547, 1910, 2372, 1910,  300,
      300,  301,  302,  301,  300,  303,  300,  300,  300,  300,
      300,  300, 1062, 1063,  300,  300,  301,  302,  301,  300,
      304,  300,  300,  300,  300,  301,  302,  301, 1911,  304,
     1911,  953, 1064, 1912,  300, 1912,  547,  547,  547,  547,
      547,  547,  547,  954, 1066, 1067,  300,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300,  300,  300,  953,
     1064,  300, 1068,  301,  302,  301,  300,  303, 1857, 2372,

     1857,  954, 1066, 1067,  548,  548,  548,  548,  548,  548,
      548,  638, 2372,  639,  639,  639,  639,  639,  639,  639,
     1068, 2372, 2372,  300,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  300,  300,  301,  302,  301, 1069,
      304, 1073, 1922,  300, 1922, 2372, 2372,  548,  548,  548,
      548,  548,  548,  548, 2372, 1074,  628,  628,  628,  628,
      628,  628,  628, 1877, 1881, 1877, 1881, 1069,  629, 1073,
      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  300,  300, 1074, 2372, 1075,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  629,  667,  667,  667,

      667,  667,  667,  667,  638,  300,  639,  639,  639,  639,
      639,  639,  639, 1075, 1943, 2372, 1943,  300,  300,  301,
      302,  301,  300,  303,  300,  300,  300,  300,  300,  300,
     1076, 1077,  300,  300,  301,  302,  301,  300,  304,  300,
      300,  300,  300,  632,  632,  632,  632,  632,  632,  632,
      561, 2372,  300,  606, 1079,  633, 2372,  562, 1076, 1077,
      563,  607,  608,  609,  300,  300,  301,  302,  301,  300,
      304,  300,  300,  300,  300,  300,  300, 2372,  561,  300,
     1080,  606, 1079,  633,  300,  562, 2372, 1081,  563,  607,
      608,  609, 2372,  636,  636,  636,  636,  636,  636,  636,

     1946, 1742, 1946, 1742, 1744,  637, 1744, 1082, 1080, 1083,
     2372,  300,  301,  302,  301, 1081,  303, 2372,  507, 1743,
      507,  508, 1745,  509,  509,  509,  509,  509,  509,  509,
      301,  302,  301,  637,  304, 1082,  507, 1083,  507,  508,
     2372,  509,  509,  509,  509,  509,  509,  509,  301,  302,
      301, 1748,  303, 1748,  511, 1817,  511, 1817, 2372,  512,
      512,  512,  512,  512,  512,  512,  301,  302,  301, 1749,
      304, 2372,  511, 1818,  511, 2372, 2372,  512,  512,  512,
      512,  512,  512,  512,  301,  302,  301, 1766,  303, 1766,
      513, 1836,  513, 1836, 2372,  514,  514,  514,  514,  514,

      514,  514,  301,  302,  301, 1767,  304, 2372,  513, 1837,
      513, 2372, 2372,  514,  514,  514,  514,  514,  514,  514,
      301,  302,  301, 1840,  303, 1840,  515, 1776,  515, 1776,
     2372,  516,  516,  516,  516,  516,  516,  516,  301,  302,
      301, 1841,  304, 2372,  515, 1777,  515, 2372, 2372,  516,
      516,  516,  516,  516,  516,  516,  301,  302,  301, 1780,
      303, 1780,  517, 1851,  517, 1851, 2372,  518,  518,  518,
      518,  518,  518,  518,  301,  302,  301, 1781,  304, 2372,
      517, 1852,  517, 2372, 2372,  518,  518,  518,  518,  518,
      518,  518,  301,  302,  301, 1853,  303, 1853,  519, 1855,

      519, 1855, 2372,  520,  520,  520,  520,  520,  520,  520,
      301,  302,  301, 1854,  304, 2372,  519, 1856,  519, 2372,
     2372,  520,  520,  520,  520,  520,  520,  520,  301,  302,
      301, 1786,  303, 1786,  521, 1867,  521, 1867, 2372,  522,
      522,  522,  522,  522,  522,  522,  301,  302,  301, 1787,
      304, 2372,  521, 1868,  521, 2372, 2372,  522,  522,  522,
      522,  522,  522,  522,  301,  302,  301, 1809,  303, 1809,
      523, 1817,  523, 1817, 2372,  524,  524,  524,  524,  524,
      524,  524,  301,  302,  301, 1810,  304, 2372,  523, 1818,
      523, 2372, 2372,  524,  524,  524,  524,  524,  524,  524,

      301,  302,  301, 1887,  303, 1887,  525, 1891,  525, 1891,
     2372,  526,  526,  526,  526,  526,  526,  526,  301,  302,
      301, 1888,  304, 2372,  525, 1892,  525, 2372, 2372,  526,
      526,  526,  526,  526,  526,  526,  301,  302,  301, 1836,
      303, 1836,  527, 1840,  527, 1840, 2372,  528,  528,  528,
      528,  528,  528,  528,  301,  302,  301, 1837,  304, 2372,
      527, 1841,  527, 2372, 2372,  528,  528,  528,  528,  528,
      528,  528,  301,  302,  301, 1848,  303, 1848,  529, 1851,
      529, 1851, 2372,  530,  530,  530,  530,  530,  530,  530,
      301,  302,  301, 1849,  304, 2372,  529, 1852,  529, 2372,

     2372,  530,  530,  530,  530,  530,  530,  530,  301,  302,
      301, 1853,  303, 1853,  531, 1855,  531, 1855, 2372,  532,
      532,  532,  532,  532,  532,  532,  301,  302,  301, 1854,
      304, 2372,  531, 1856,  531, 2372, 1084,  532,  532,  532,
      532,  532,  532,  532,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  300,  300,  669,  669,  669,  669,
      669,  669,  669,  300, 1084,  640,  640,  640,  640,  640,
      640,  640, 1900, 2372, 1900,  572,  565,  641, 1085, 1086,
     1087,  573, 2372,  566,  567, 1088,  574,  568, 2372,  569,
      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,

      300,  300,  300,  572,  565,  641, 1085, 1086, 1087,  573,
      300,  566,  567, 1088,  574,  568,  642,  569,  643,  643,
      643,  643,  643,  643,  643,  642, 2372,  643,  643,  643,
      643,  643,  643,  643, 1903, 2372, 1903,  300,  300,  301,
      302,  301,  300,  303,  300,  300,  300,  300,  300,  300,
      694,  694,  694,  694,  694,  694,  694,  300,  644,  644,
      644,  644,  644,  644,  644, 1867, 1908, 1867, 1908,  646,
      645,  647,  647,  647,  647,  647,  647,  647, 1910, 1911,
     1910, 1911, 2372, 1868,  300,  300,  301,  302,  301,  300,
      304,  300,  300,  300,  300,  300,  300, 1089,  645, 1090,

     1092, 1093, 1094, 2372,  300,  648,  648,  648,  648,  648,
      648,  648, 1912, 1922, 1912, 1922,  646,  649,  647,  647,
      647,  647,  647,  647,  647, 1089, 2372, 1090, 1092, 1093,
     1094,  300,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  300,  300, 1097,  649, 1098, 1099, 1100, 1101,
      650,  300,  651,  651,  651,  651,  651,  651,  651,  652,
      652,  652,  652,  652,  652,  652, 1982, 1990, 1982, 1990,
     2372,  653, 1097, 1102, 1098, 1099, 1100, 1101,  300,  300,
      301,  302,  301,  300,  304,  300,  300,  300,  300,  300,
      300,  695,  695,  695,  695,  695,  695,  695,  300,  653,

      650, 1102,  651,  651,  651,  651,  651,  651,  651,  654,
     2372,  655,  655,  655,  655,  655,  655,  655,  696,  696,
      696,  696,  696,  696,  696,  300,  300,  301,  302,  301,
      300,  303,  300,  300,  300,  300,  300,  300,  697,  697,
      697,  697,  697,  697,  697,  300,  656,  656,  656,  656,
      656,  656,  656, 1926, 1943, 1926, 1943,  654,  657,  655,
      655,  655,  655,  655,  655,  655, 1946, 2006, 1946, 2006,
     2372, 1927,  300,  300,  301,  302,  301,  300,  304,  300,
      300,  300,  300,  300,  300, 1105,  657, 1106, 1111, 1112,
     1113,  658,  300,  659,  659,  659,  659,  659,  659,  659,

      660,  660,  660,  660,  660,  660,  660, 2015, 2016, 2015,
     2016, 2372,  661, 1105, 1114, 1106, 1111, 1112, 1113,  300,
      300,  301,  302,  301,  300,  303,  300,  300,  300,  300,
      300,  300,  704,  704,  704,  704,  704,  704,  704,  300,
      661,  658, 1114,  659,  659,  659,  659,  659,  659,  659,
      668, 1119,  668, 1120, 1121,  667,  667,  667,  667,  667,
      667,  667, 2023, 2037, 2023, 2037,  300,  300,  301,  302,
      301,  300,  304,  300,  300,  300,  300,  300,  300, 1119,
     1122, 1120, 1121, 1123, 1124,  670,  300,  671,  671,  671,
      671,  671,  671,  671,  672,  672,  672,  672,  672,  672,

      672, 2038, 1982, 2038, 1982, 2044,  673, 2044, 1122, 2372,
     2372, 1123, 1124,  300,  300,  301,  302,  301,  300,  303,
      300,  300,  300,  300,  300,  300,  705,  705,  705,  705,
      705,  705,  705,  300,  673,  670, 2372,  671,  671,  671,
      671,  671,  671,  671,  674, 2372,  675,  675,  675,  675,
      675,  675,  675,  706,  706,  706,  706,  706,  706,  706,
      300,  300,  301,  302,  301,  300,  304,  300,  300,  300,
      300,  300,  300,  707,  707,  707,  707,  707,  707,  707,
      300,  676,  676,  676,  676,  676,  676,  676, 1934, 1990,
     1934, 1990,  674,  677,  675,  675,  675,  675,  675,  675,

      675, 2050, 2051, 2050, 2051, 2372, 1935,  300,  300,  301,
      302,  301,  300,  303,  300,  300,  300,  300,  300,  300,
     1127,  677, 1128, 1129, 1130, 1131,  678,  300,  679,  679,
      679,  679,  679,  679,  679,  680,  680,  680,  680,  680,
      680,  680, 2052, 2053, 2052, 2053, 2372,  681, 1127, 1132,
     1128, 1129, 1130, 1131,  300,  300,  301,  302,  301,  300,
      304,  300,  300,  300,  300,  300,  300,  708,  708,  708,
      708,  708,  708,  708,  300,  681,  678, 1132,  679,  679,
      679,  679,  679,  679,  679,  682, 2372,  683,  683,  683,
      683,  683,  683,  683,  709,  709,  709,  709,  709,  709,

      709,  300,  300,  301,  302,  301,  300,  303,  300,  300,
      300,  300,  300,  300,  710,  710,  710,  710,  710,  710,
      710,  300,  684,  684,  684,  684,  684,  684,  684, 1887,
     2056, 1887, 2056,  682,  685,  683,  683,  683,  683,  683,
      683,  683, 2006, 1891, 2006, 1891, 2372, 1888,  300,  300,
      301,  302,  301,  300,  304,  300,  300,  300,  300,  300,
      300, 1892,  685, 1135, 1136, 1137, 1139,  700,  300,  701,
      701,  701,  701,  701,  701,  701, 2372,  702,  702,  702,
      702,  702,  702,  702, 1948, 2057, 1948, 2057, 2372,  703,
     1140, 1135, 1136, 1137, 1139,  300,  301,  302,  301,  558,

      303,  558, 1949,  558,  558, 2372, 2372,  558,  558,  558,
      558,  558,  558,  558,  580,  588,  580,  703, 1140,  700,
      589,  701,  701,  701,  701,  701,  701,  701, 2372, 2372,
      581,  948,  582,  583, 1095,  590, 1141,  957, 2372,  949,
      591, 1096, 1955,  592, 1955, 2372,  958,  584, 2372, 2372,
      593, 1977, 2058, 1977, 2058,  945,  585,  586,  587,  948,
     1956,  583, 1095,  590, 1141,  957,  946,  949,  591, 1978,
      921,  592,  921,  947,  958,  584,  711,  711,  711,  711,
      711,  711,  711,  945,  585,  586,  587,  594,  922, 1032,
      923,  938,  924,  595,  946, 1142,  596, 1033,  939,  597,

      940,  947,  598,  599, 1143,  600, 2372,  925, 1144, 2015,
     2372, 2015,  601, 1145, 2016,  594, 2016, 1032,  923,  938,
      924,  595, 1146, 1142,  596, 1033,  939,  597,  940, 2372,
      598,  599, 1143,  600,  610,  925, 1144, 1125,  611,  932,
     1147, 1145,  612,  933,  934,  935,  613, 1148,  614, 1126,
     1146, 1149, 1150, 2372,  615,  712,  712,  712,  712,  712,
      712,  712,  610, 2372, 2372, 1125,  611,  932, 1147, 1151,
      612,  933,  934,  935,  613, 1148,  614, 1126, 2372, 1149,
     1150,  713,  615,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  715, 1151, 1152, 1153,

     1154,  713,  716,  714,  714,  714,  714,  714,  714,  714,
      717, 2372,  718,  718,  718,  718,  718,  718,  718,  719,
      719,  719,  719,  719,  719,  719, 1152, 1153, 1154, 1155,
      716,  720,  717, 2372,  718,  718,  718,  718,  718,  718,
      718,  721, 2372,  722,  722,  722,  722,  722,  722,  722,
      723,  723,  723,  723,  723,  723,  723, 1155, 1159,  720,
     1157,  721,  724,  722,  722,  722,  722,  722,  722,  722,
      725, 2372,  726,  726,  726,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  727,  727, 1159, 1158, 1157, 1161,
      724,  728,  725, 2372,  726,  726,  726,  726,  726,  726,

      726,  729,  729,  729,  729,  729,  729,  729,  730,  730,
      730,  730,  730,  730,  730, 2372, 2372, 1161,  731,  728,
      732,  732,  732,  732,  732,  732,  732,  733,  733,  733,
      733,  733,  733,  733, 2372, 1162, 1167, 1168,  731,  734,
      732,  732,  732,  732,  732,  732,  732,  735, 2372,  736,
      736,  736,  736,  736,  736,  736,  737,  737,  737,  737,
      737,  737,  737, 1162, 1167, 1168, 1169,  734,  738,  735,
     2372,  736,  736,  736,  736,  736,  736,  736,  739, 2372,
      740,  740,  740,  740,  740,  740,  740,  741,  741,  741,
      741,  741,  741,  741, 1169, 1172,  738, 1173,  739,  742,

      740,  740,  740,  740,  740,  740,  740,  743, 2372,  744,
      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  745, 1172, 2372, 1173, 1175,  742,  746,  743,
     2372,  744,  744,  744,  744,  744,  744,  744,  747, 2372,
      748,  748,  748,  748,  748,  748,  748,  749,  749,  749,
      749,  749,  749,  749, 1175, 1176,  746, 1177,  747,  750,
      748,  748,  748,  748,  748,  748,  748,  751, 2372,  752,
      752,  752,  752,  752,  752,  752,  753,  753,  753,  753,
      753,  753,  753, 1176, 2372, 1177, 1178,  750,  754,  751,
     2372,  752,  752,  752,  752,  752,  752,  752,  755, 2372,

      756,  756,  756,  756,  756,  756,  756,  757,  757,  757,
      757,  757,  757,  757, 1178, 1179,  754, 1185,  755,  758,
      756,  756,  756,  756,  756,  756,  756,  759, 2372,  760,
      760,  760,  760,  760,  760,  760,  761,  761,  761,  761,
      761,  761,  761, 1179, 2372, 1185, 1188,  758,  762,  759,
     2372,  760,  760,  760,  760,  760,  760,  760,  763, 2372,
      764,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  765, 1188, 1190,  762, 1191,  763,  766,
      764,  764,  764,  764,  764,  764,  764,  767, 2372,  768,
      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,

      769,  769,  769, 1190, 1192, 1191, 1193,  766,  770,  767,
     2372,  768,  768,  768,  768,  768,  768,  768,  771,  771,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772, 1192, 2069, 1193, 2069,  770,  773,  773,  773,
      773,  773,  773,  773,  774,  774,  774,  774,  774,  774,
      774,  775, 2372,  776,  776,  776,  776,  776,  776,  776,
      777,  777,  777,  777,  777,  777,  777, 2372, 1194, 1195,
     1196,  775,  778,  776,  776,  776,  776,  776,  776,  776,
      780, 2372,  781,  781,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782, 1194, 1195, 1196, 2372,

      778,  783,  780, 2372,  781,  781,  781,  781,  781,  781,
      781,  784,  784,  784,  784,  784,  784,  784,  785,  785,
      785,  785,  785,  785,  785,  786, 2070,  786, 2070,  783,
      785,  785,  785,  785,  785,  785,  785,  787,  787,  787,
      787,  787,  787,  787,  788, 2023,  788, 2023, 2372,  787,
      787,  787,  787,  787,  787,  787,  789,  789,  789,  789,
      789,  789,  789,  790, 2037,  790, 2037, 2372,  789,  789,
      789,  789,  789,  789,  789,  791,  791,  791,  791,  791,
      791,  791,  792, 2038,  792, 2038, 2372,  791,  791,  791,
      791,  791,  791,  791,  793,  793,  793,  793,  793,  793,

      793,  794,  794,  794,  794,  794,  794,  794,  795,  795,
      795,  795,  795,  795,  795,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  798,
      798,  798,  798,  798,  798,  798,  799,  799,  799,  799,
      799,  799,  799,  800,  800,  800,  800,  800,  800,  800,
      801,  801,  801,  801,  801,  801,  801,  807,  807,  807,
      807,  807,  807,  807,  808,  808,  808,  808,  808,  808,
      808,  809,  809,  809,  809,  809,  809,  809,  810, 2372,
      811,  811,  811,  811,  811,  811,  811,  812,  812,  812,
      812,  812,  812,  812, 1197, 1198, 1199, 1203,  810,  813,

      811,  811,  811,  811,  811,  811,  811,  814,  814,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
      815, 2372, 1197, 1198, 1199, 1203, 2372,  813,  816,  816,
      816,  816,  816,  816,  816,  819,  819,  819,  819,  819,
      819,  819,  820,  820,  820,  820,  820,  820,  820,  823,
      823,  823,  823,  823,  823,  823,  831,  831,  831,  831,
      831,  831,  831,  832, 2372,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  834,  834,  834,  834, 1206,
     2044, 2372, 2044,  832,  835,  833,  833,  833,  833,  833,
      833,  833,  836,  836,  836,  836,  836,  836,  836,  837,

      837,  837,  837,  837,  837,  837, 2372, 1206,  838,  839,
      838, 2372,  835,  837,  837,  837,  837,  837,  837,  837,
      840,  840,  840,  840,  840,  840,  840,  841, 2050,  841,
     2050, 2372,  840,  840,  840,  840,  840,  840,  840,  842,
      842,  842,  842,  842,  842,  842,  843, 2051,  843, 2051,
     2372,  842,  842,  842,  842,  842,  842,  842,  844,  844,
      844,  844,  844,  844,  844,  845, 2052,  845, 2052, 2372,
      844,  844,  844,  844,  844,  844,  844,  846,  846,  846,
      846,  846,  846,  846,  847, 2053,  847, 2053, 2372,  846,
      846,  846,  846,  846,  846,  846,  848,  848,  848,  848,

      848,  848,  848,  849, 2098,  849, 2098, 2372,  848,  848,
      848,  848,  848,  848,  848,  850,  850,  850,  850,  850,
      850,  850,  851, 2056,  851, 2056, 2372,  850,  850,  850,
      850,  850,  850,  850,  852,  852,  852,  852,  852,  852,
      852,  853,  854,  853, 2372, 2372,  852,  852,  852,  852,
      852,  852,  852,  855,  855,  855,  855,  855,  855,  855,
      856, 2057,  856, 2057, 2372,  855,  855,  855,  855,  855,
      855,  855,  857,  857,  857,  857,  857,  857,  857,  858,
     2058,  858, 2058, 2372,  857,  857,  857,  857,  857,  857,
      857,  859,  859,  859,  859,  859,  859,  859,  860, 2105,

      860, 2105, 2372,  859,  859,  859,  859,  859,  859,  859,
      865,  865,  865,  865,  865,  865,  865,  870,  870,  870,
      870,  870,  870,  870,  871,  871,  871,  871,  871,  871,
      871,  874,  874,  874,  874,  874,  874,  874,  875,  875,
      875,  875,  875,  875,  875,  876,  876,  876,  876,  876,
      876,  876,  884, 2106,  884, 2106,  884,  884, 2372, 2372,
      884,  884,  884,  884,  884,  884,  884,  619,  619,  619,
      619,  619,  619,  619,  620,  620,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  621,  621,  622,  622,
      622,  622,  622,  622,  622,  623,  623,  623,  623,  623,

      623,  623,  624,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  625,  628,  628,  628,  628,
      628,  628,  628, 2069, 2070, 2069, 2070,  626,  629,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628, 1207,  962, 1213,  962, 2372,  629,  963,
      963,  963,  963,  963,  963,  963,  629,  632,  632,  632,
      632,  632,  632,  632, 1217, 2112, 2113, 2112, 2113,  633,
     2126, 1207, 2126, 1213, 2372,  630,  629,  631,  631,  631,
      631,  631,  631,  631,  632,  632,  632,  632,  632,  632,
      632, 1200, 1217,  964, 1201,  964,  633,  633,  965,  965,

      965,  965,  965,  965,  965,  636,  636,  636,  636,  636,
      636,  636, 1218, 1202, 1219, 2372, 2133,  637, 2133, 1200,
     2372, 2372, 1201,  634,  633,  635,  635,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  636,  636, 1226,
     1218,  966, 1219,  966,  637,  637,  967,  967,  967,  967,
      967,  967,  967,  640,  640,  640,  640,  640,  640,  640,
     1227, 2098, 1228, 2098, 2139,  641, 2139, 1226, 2140, 2372,
     2140,  638,  637,  639,  639,  639,  639,  639,  639,  639,
      640,  640,  640,  640,  640,  640,  640, 1229, 1227,  968,
     1228,  968,  641,  641,  969,  969,  969,  969,  969,  969,

      969,  644,  644,  644,  644,  644,  644,  644, 1230, 2141,
     1231, 2141, 2105,  645, 2105, 1229, 2106, 2372, 2106,  642,
      641,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644, 1232, 1230,  970, 1231,  970,
      645,  645,  971,  971,  971,  971,  971,  971,  971,  648,
      648,  648,  648,  648,  648,  648, 1235, 2112, 1240, 2112,
     2113,  649, 2113, 1232, 2126, 2372, 2126,  646,  645,  647,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  648, 1241, 1235,  972, 1240,  972,  649,  649,
      973,  973,  973,  973,  973,  973,  973,  652,  652,  652,

      652,  652,  652,  652, 1242, 2160, 1243, 2160, 2133,  653,
     2133, 1241, 2139, 2372, 2139,  650,  649,  651,  651,  651,
      651,  651,  651,  651,  652,  652,  652,  652,  652,  652,
      652, 1244, 1242,  974, 1243,  974,  653,  653,  975,  975,
      975,  975,  975,  975,  975,  656,  656,  656,  656,  656,
      656,  656, 1245, 2140, 2141, 2140, 2141,  657, 2160, 1244,
     2160, 2372, 2372,  654,  653,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656, 1246,
     1245,  976, 1247,  976,  657,  657,  977,  977,  977,  977,
      977,  977,  977,  660,  660,  660,  660,  660,  660,  660,

     1248, 2198, 1249, 2198, 2206,  661, 2206, 1246, 2372, 2372,
     1247,  658,  657,  659,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660, 1252, 1248,  978,
     1249,  978,  661,  661,  979,  979,  979,  979,  979,  979,
      979,  662,  662,  662,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  663,  663, 1252, 2372, 1253, 1254, 2372,
      661,  664,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  668, 2372,  668, 1253, 1254,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  669,  669,  669,  669,  669,  669,  669,  672,  672,
      672,  672,  672,  672,  672, 2212, 2215, 2212, 2215,  670,
      673,  671,  671,  671,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  672,  672, 1256,  980, 1257,  980, 2372,
      673,  981,  981,  981,  981,  981,  981,  981,  673,  676,
      676,  676,  676,  676,  676,  676, 1258, 2216, 1259, 2216,
     2220,  677, 2220, 1256, 2226, 1257, 2226,  674,  673,  675,
      675,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  676,  676, 1260, 1258,  982, 1259,  982,  677,  677,
      983,  983,  983,  983,  983,  983,  983,  680,  680,  680,

      680,  680,  680,  680, 1261, 2229, 1262, 2229, 2198,  681,
     2198, 1260, 2233, 2372, 2233,  678,  677,  679,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  680,
      680, 1266, 1261,  984, 1262,  984,  681,  681,  985,  985,
      985,  985,  985,  985,  985,  684,  684,  684,  684,  684,
      684,  684, 1267, 2206, 1268, 2206, 2212,  685, 2212, 1266,
     2247, 2372, 2247,  682,  681,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,  684,  684,  684,  684, 1269,
     1267,  986, 1268,  986,  685,  685,  987,  987,  987,  987,
      987,  987,  987,  694,  694,  694,  694,  694,  694,  694,

      695,  695,  695,  695,  695,  695,  695, 1269, 1270, 1271,
     2372, 2372,  685,  696,  696,  696,  696,  696,  696,  696,
      697,  697,  697,  697,  697,  697,  697,  702,  702,  702,
      702,  702,  702,  702, 2372, 2372, 1270, 1271,  700,  703,
      701,  701,  701,  701,  701,  701,  701,  702,  702,  702,
      702,  702,  702,  702, 1272,  988, 1273,  988, 1277,  703,
      989,  989,  989,  989,  989,  989,  989,  703,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705, 1272, 2215, 1273, 2215, 1277,  703,  706,  706,
      706,  706,  706,  706,  706,  707,  707,  707,  707,  707,

      707,  707,  708,  708,  708,  708,  708,  708,  708,  709,
      709,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      712,  712,  712,  712,  712,  712,  712,  715,  715,  715,
      715,  715,  715,  715, 2216, 2220, 2216, 2220,  713,  716,
      714,  714,  714,  714,  714,  714,  714,  715,  715,  715,
      715,  715,  715,  715, 1280,  990, 1281,  990, 2372,  716,
      991,  991,  991,  991,  991,  991,  991,  716,  719,  719,
      719,  719,  719,  719,  719, 1282, 2251, 1283, 2251, 2226,
      720, 2226, 1280, 2255, 1281, 2255,  717,  716,  718,  718,

      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719, 1284, 1282,  992, 1283,  992,  720,  720,  993,
      993,  993,  993,  993,  993,  993,  723,  723,  723,  723,
      723,  723,  723, 1285, 2229, 1286, 2229, 2256,  724, 2256,
     1284, 2233, 2372, 2233,  721,  720,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
     1287, 1285,  994, 1286,  994,  724,  724,  995,  995,  995,
      995,  995,  995,  995,  727,  727,  727,  727,  727,  727,
      727, 1288, 2264, 1290, 2264, 2265,  728, 2265, 1287, 2266,
     2372, 2266,  725,  724,  726,  726,  726,  726,  726,  726,

      726,  727,  727,  727,  727,  727,  727,  727, 1301, 1288,
      996, 1290,  996,  728,  728,  997,  997,  997,  997,  997,
      997,  997,  729,  729,  729,  729,  729,  729,  729,  730,
      730,  730,  730,  730,  730,  730, 1301, 2247, 2251, 2247,
     2251,  728,  733,  733,  733,  733,  733,  733,  733, 2255,
     2256, 2255, 2256,  731,  734,  732,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733, 1302,
      998, 1303,  998, 2372,  734,  999,  999,  999,  999,  999,
      999,  999,  734,  737,  737,  737,  737,  737,  737,  737,
     1305, 2275, 1307, 2275, 2264,  738, 2264, 1302, 2265, 1303,

     2265,  735,  734,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  737, 1308, 1305, 1000,
     1307, 1000,  738,  738, 1001, 1001, 1001, 1001, 1001, 1001,
     1001,  741,  741,  741,  741,  741,  741,  741, 1309, 2266,
     1310, 2266, 2275,  742, 2275, 1308, 2297, 2372, 2297,  739,
      738,  740,  740,  740,  740,  740,  740,  740,  741,  741,
      741,  741,  741,  741,  741, 1311, 1309, 1002, 1310, 1002,
      742,  742, 1003, 1003, 1003, 1003, 1003, 1003, 1003,  745,
      745,  745,  745,  745,  745,  745, 1312, 2299, 1313, 2299,
     2297,  746, 2297, 1311, 2299, 2372, 2299,  743,  742,  744,

      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  745, 1314, 1312, 1004, 1313, 1004,  746,  746,
     1005, 1005, 1005, 1005, 1005, 1005, 1005,  749,  749,  749,
      749,  749,  749,  749, 1316, 2315, 1319, 2315, 2315,  750,
     2315, 1314, 2330, 2372, 2330,  747,  746,  748,  748,  748,
      748,  748,  748,  748,  749,  749,  749,  749,  749,  749,
      749, 1320, 1316, 1006, 1319, 1006,  750,  750, 1007, 1007,
     1007, 1007, 1007, 1007, 1007,  753,  753,  753,  753,  753,
      753,  753, 1321, 2333, 1322, 2333, 2334,  754, 2334, 1320,
     2330, 2372, 2330,  751,  750,  752,  752,  752,  752,  752,

      752,  752,  753,  753,  753,  753,  753,  753,  753, 1323,
     1321, 1008, 1322, 1008,  754,  754, 1009, 1009, 1009, 1009,
     1009, 1009, 1009,  757,  757,  757,  757,  757,  757,  757,
     1324, 2346, 1325, 2346, 2333,  758, 2333, 1323, 2334, 2372,
     2334,  755,  754,  756,  756,  756,  756,  756,  756,  756,
      757,  757,  757,  757,  757,  757,  757, 1328, 1324, 1010,
     1325, 1010,  758,  758, 1011, 1011, 1011, 1011, 1011, 1011,
     1011,  761,  761,  761,  761,  761,  761,  761, 1331, 2353,
     1333, 2353, 2354,  762, 2354, 1328, 2346, 2372, 2346,  759,
      758,  760,  760,  760,  760,  760,  760,  760,  761,  761,

      761,  761,  761,  761,  761, 1334, 1331, 1012, 1333, 1012,
      762,  762, 1013, 1013, 1013, 1013, 1013, 1013, 1013,  765,
      765,  765,  765,  765,  765,  765, 1335, 2361, 1336, 2361,
     2362,  766, 2362, 1334, 2363, 2372, 2363,  763,  762,  764,
      764,  764,  764,  764,  764,  764,  765,  765,  765,  765,
      765,  765,  765, 1337, 1335, 1014, 1336, 1014,  766,  766,
     1015, 1015, 1015, 1015, 1015, 1015, 1015,  769,  769,  769,
      769,  769,  769,  769, 1341, 2353, 2354, 2353, 2354,  770,
     2364, 1337, 2364, 2372, 2372,  767,  766,  768,  768,  768,
      768,  768,  768,  768,  769,  769,  769,  769,  769,  769,

      769, 1342, 1341, 1016, 1343, 1016,  770,  770, 1017, 1017,
     1017, 1017, 1017, 1017, 1017,  771,  771,  771,  771,  771,
      771,  771,  772,  772,  772,  772,  772,  772,  772, 1342,
     1344, 1345, 1343, 2372,  770,  773,  773,  773,  773,  773,
      773,  773,  774,  774,  774,  774,  774,  774,  774,  777,
      777,  777,  777,  777,  777,  777, 2372, 2372, 1344, 1345,
      775,  778,  776,  776,  776,  776,  776,  776,  776,  777,
      777,  777,  777,  777,  777,  777, 1351, 1018, 1339, 1018,
     2372,  778, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  778,
      782,  782,  782,  782,  782,  782,  782, 1340, 2365, 1352,

     2365, 2361,  783, 2361, 1351, 2362, 1339, 2362,  780,  778,
      781,  781,  781,  781,  781,  781,  781,  782,  782,  782,
      782,  782,  782,  782, 2372, 2372, 1020, 1352, 1020,  783,
      783, 1021, 1021, 1021, 1021, 1021, 1021, 1021,  784,  784,
      784,  784,  784,  784,  784,  786, 2363,  786, 2363, 2372,
      785,  785,  785,  785,  785,  785,  785,  783,  785,  785,
      785,  785,  785,  785,  785,  788, 2364,  788, 2364, 2372,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  790, 2365,  790, 2365, 2372,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  792, 2370,  792, 2370, 2372,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  793,  793,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  794,  794,  795,  795,  795,  795,
      795,  795,  795,  796,  796,  796,  796,  796,  796,  796,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798,  799,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  807,  807,  807,  807,  807,
      807,  807,  808,  808,  808,  808,  808,  808,  808,  809,

      809,  809,  809,  809,  809,  809,  812,  812,  812,  812,
      812,  812,  812, 2371, 2370, 2371, 2370,  810,  813,  811,
      811,  811,  811,  811,  811,  811,  812,  812,  812,  812,
      812,  812,  812, 1353, 1022, 1354, 1022, 1359,  813, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  813,  814,  814,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
      815, 1353, 2371, 1354, 2371, 1359,  813,  816,  816,  816,
      816,  816,  816,  816,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  820,  823,  823,
      823,  823,  823,  823,  823,  831,  831,  831,  831,  831,

      831,  831,  834,  834,  834,  834,  834,  834,  834, 2372,
     2372, 2372, 2372,  832,  835,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  834,  834,  834,  834, 2372,
     1024, 2372, 1024, 2372,  835, 1025, 1025, 1025, 1025, 1025,
     1025, 1025,  835,  836,  836,  836,  836,  836,  836,  836,
      838,  839,  838, 2372, 2372,  837,  837,  837,  837,  837,
      837,  837,  835,  837,  837,  837,  837,  837,  837,  837,
     1026, 2372, 1026, 2372, 1363, 1027, 1027, 1027, 1027, 1027,
     1027, 1027,  841, 2372,  841, 2372, 2372,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  843, 1363,  843, 2372, 2372,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      845, 2372,  845, 2372, 2372,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  847,
     2372,  847, 2372, 2372,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  849, 2372,
      849, 2372, 2372,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  851, 2372,  851,
     2372, 2372,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  853,  854,  853, 2372,

     1369,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852, 1028, 2372, 1028, 2372, 1374,
     1029, 1029, 1029, 1029, 1029, 1029, 1029,  856, 1369,  856,
     2372, 2372,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  858, 1374,  858, 2372,
     2372,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  860, 2372,  860, 2372, 2372,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  865,  865,  865,  865,  865,  865,
      865,  870,  870,  870,  870,  870,  870,  870,  871,  871,

      871,  871,  871,  871,  871,  874,  874,  874,  874,  874,
      874,  874,  875,  875,  875,  875,  875,  875,  875,  876,
      876,  876,  876,  876,  876,  876,  884, 1208,  884, 1208,
      884,  884, 2372, 2372,  884,  884,  884,  884,  884,  884,
      884, 1070, 1264, 1296, 1326, 1209, 1375, 1347, 1071, 1265,
     1297, 1348, 1349, 1350, 1327, 1072,  963,  963,  963,  963,
      963,  963,  963, 2372, 2372, 2372, 2372, 2372, 2372, 1070,
     1264, 1296, 1326, 1210, 1375, 1347, 1071, 1265, 1297, 1348,
     1349, 1350, 1327, 1072,  963,  963,  963,  963,  963,  963,
      963,  965,  965,  965,  965,  965,  965,  965,  965,  965,

      965,  965,  965,  965,  965,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1009,

     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1026, 1103, 1026, 2372, 1377, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1028, 1104, 1028, 2372, 2372, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1116, 1377, 1180, 1117, 1180, 1204, 2372,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1378, 1182,
     1118, 1205, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 2372,
     2372, 1116, 2372, 2372, 1117, 2372, 1204, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 2372, 1180, 1378, 1180, 1118, 1205,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1182, 1291, 1182, 1379, 1380, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1292, 1355, 1293, 1294,
     1295, 1356, 1357, 1358, 1370, 1360, 1370, 1381, 1383, 1384,
     1385, 1386, 1387, 1291, 1361, 1379, 1380, 1371, 1388, 1396,
     1382, 1397, 1372, 1398, 1292, 1355, 1293, 1294, 1295, 1356,
     1357, 1358, 1399, 1360, 1400, 1381, 1383, 1384, 1385, 1386,
     1387, 1401, 1361, 1402, 1403, 1404, 1388, 1396, 1382, 1397,
     1373, 1398, 1405, 1406, 1408, 1409, 1410, 1412, 1413, 1414,

     1399, 1415, 1400, 1417, 1418, 1421, 1422, 1423, 1425, 1401,
     1426, 1402, 1403, 1404, 2372, 2372, 1432, 1433, 1434, 1436,
     1405, 1406, 1408, 1409, 1410, 1412, 1413, 1414, 1435, 1415,
     1437, 1417, 1418, 1421, 1422, 1423, 1425, 1427, 1426, 1428,
     1438, 1447, 1429, 1430, 1432, 1433, 1434, 1436, 1449, 1450,
     1431, 1459, 1460, 1461, 1471, 1475, 1435, 1476, 1437, 1477,
     1478, 1479, 1480, 1482, 1483, 1427, 1484, 1428, 1438, 1447,
     1429, 1430, 1485, 1486, 1487, 1488, 1449, 1450, 1431, 1459,
     1460, 1461, 1471, 1475, 1489, 1476, 1490, 1477, 1478, 1479,
     1480, 1482, 1483, 1494, 1484, 1495, 1498, 1507, 1510, 1511,

     1485, 1486, 1487, 1488, 1512, 1513, 1514, 1515, 1516, 1517,
     1519, 1520, 1489, 1522, 1490, 1523, 1524, 1527, 1532, 1533,
     1534, 1494, 1525, 1495, 1498, 1507, 1510, 1511, 1535, 1526,
     2372, 1540, 1512, 1513, 1514, 1515, 1516, 1517, 1519, 1520,
     1528, 1522, 1528, 1523, 1524, 1527, 1532, 1533, 1534, 1536,
     1525, 1541, 1542, 1529, 1553, 1554, 1535, 1526, 1530, 1540,
     1555, 1562, 1567, 1572, 1574, 1537, 1575, 1576, 1577, 1578,
     1582, 1583, 1584, 1585, 1586, 2372, 1587, 1536, 1588, 1541,
     1542, 1589, 1553, 1554, 1590, 1579, 1531, 1579, 1555, 1562,
     1567, 1572, 1574, 1537, 1575, 1576, 1577, 1578, 1582, 1583,

     1584, 1585, 1586, 1580, 1587, 1591, 1588, 1594, 1595, 1589,
     1596, 1597, 1590, 1602, 1604, 1605, 1606, 1607, 1608, 1610,
     1611, 1612, 1613, 1614, 1615, 1616, 1609, 1617, 1618, 1619,
     1620, 1581, 1621, 1591, 1625, 1594, 1595, 1626, 1596, 1597,
     1627, 1602, 1604, 1605, 1606, 1607, 1608, 1610, 1611, 1612,
     1613, 1614, 1615, 1616, 1609, 1617, 1618, 1619, 1620, 1628,
     1621, 1629, 1625, 1630, 1631, 1626, 1633, 1634, 1627, 1635,
     1639, 1640, 1641, 1647, 1648, 1649, 1652, 1653, 1655, 1656,
     1657, 1658, 1660, 1661, 1664, 1665, 1669, 1628, 1670, 1629,
     1672, 1630, 1631, 1673, 1633, 1634, 1674, 1635, 1639, 1640,

     1641, 1647, 1648, 1649, 1652, 1653, 1655, 1656, 1657, 1658,
     1660, 1661, 1664, 1665, 1669, 1676, 1670, 1677, 1672, 1678,
     1679, 1673, 1680, 1681, 1674, 1682, 1683, 1684, 1687, 1688,
     1689, 1690, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1676, 1703, 1677, 1704, 1678, 1679, 1706,
     1680, 1681, 1707, 1682, 1683, 1684, 1687, 1688, 1689, 1690,
     1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
     1702, 1708, 1703, 1709, 1704, 1710, 1711, 1706, 1712, 1713,
     1707, 1715, 1716, 1717, 1720, 1718, 1721, 1714, 1719, 1722,
     1724, 1728, 1723, 1725, 1730, 1731, 1732, 1735, 2372, 1708,

     1741, 1709, 1746, 1710, 1711, 1747, 1712, 1713, 1750, 1715,
     1716, 1717, 1720, 1718, 1721, 1714, 1719, 1722, 1724, 1728,
     1723, 1725, 1730, 1731, 1732, 1735, 1738, 1751, 1741, 1753,
     1746, 1739, 1755, 1747, 1756, 1757, 1750, 1758, 1759, 1760,
     1740, 1761, 1754, 1762, 1763, 1764, 1765, 1768, 1769, 1770,
     1771, 1772, 1773, 1774, 1738, 1751, 1775, 1753, 1778, 1739,
     1755, 1779, 1756, 1757, 1782, 1758, 1759, 1760, 1740, 1761,
     1754, 1762, 1763, 1764, 1765, 1768, 1769, 1770, 1771, 1772,
     1773, 1774, 1783, 1784, 1775, 1785, 1778, 1788, 1789, 1779,
     1790, 1791, 1782, 1792, 1793, 1794, 1795, 1796, 1798, 1799,

     1800, 1801, 1803, 1805, 1806, 1807, 1813, 1814, 1808, 1816,
     1783, 1784, 1819, 1785, 1820, 1788, 1789, 1821, 1790, 1791,
     1822, 1792, 1793, 1794, 1795, 1796, 1798, 1799, 1800, 1801,
     1803, 1805, 1806, 1807, 1813, 1814, 1808, 1816, 1823, 1824,
     1819, 1825, 1820, 1826, 1827, 1821, 1829, 1830, 1822, 1831,
     1832, 1834, 1835, 1838, 1839, 1842, 1845, 1846, 1848, 1858,
     1848, 1859, 1860, 1861, 1862, 1863, 1823, 1824, 1864, 1825,
     1865, 1826, 1827, 1866, 1829, 1830, 1849, 1831, 1832, 1834,
     1835, 1838, 1839, 1842, 1845, 1846, 1869, 1858, 1870, 1859,
     1860, 1861, 1862, 1863, 1871, 1872, 1864, 1874, 1865, 1875,

     1876, 1866, 1878, 1879, 1850, 1880, 1882, 1883, 1884, 1885,
     1889, 1890, 1893, 1894, 1869, 1895, 1870, 1896, 1897, 1898,
     1899, 1901, 1871, 1872, 1902, 1874, 1904, 1875, 1876, 1905,
     1878, 1879, 1906, 1880, 1882, 1883, 1884, 1885, 1889, 1890,
     1893, 1894, 1907, 1895, 1909, 1896, 1897, 1898, 1899, 1901,
     1913, 1914, 1902, 1916, 1904, 1917, 1918, 1905, 1920, 1923,
     1906, 1924, 1925, 1928, 1929, 1930, 1931, 1932, 1933, 1936,
     1907, 1937, 1909, 1938, 1939, 1940, 1941, 1942, 1913, 1914,
     1944, 1916, 1945, 1917, 1918, 1947, 1920, 1923, 1950, 1924,
     1925, 1928, 1929, 1930, 1931, 1932, 1933, 1936, 1951, 1937,

     1952, 1938, 1939, 1940, 1941, 1942, 1953, 1954, 1944, 1957,
     1945, 1957, 1964, 1947, 1965, 1966, 1950, 1967, 1960, 1968,
     1960, 1970, 1971, 1972, 1974, 1976, 1951, 1958, 1952, 2372,
     1981, 1961, 1962, 1983, 1953, 1954, 1963, 1984, 1985, 1979,
     1964, 1979, 1965, 1966, 1926, 1967, 1926, 1968, 1986, 1970,
     1971, 1972, 1974, 1976, 1987, 1959, 1987, 1980, 1981, 1991,
     1992, 1983, 1927, 1993, 1994, 1984, 1985, 1934, 1995, 1934,
     1995, 1997, 1988, 1997, 2003, 1999, 1986, 1999, 2001, 2004,
     2001, 2004, 1948, 2012, 1948, 1935, 1996, 1991, 1992, 1998,
     2013, 1993, 1994, 2000, 2014, 2024, 2002, 2005, 2372, 2007,

     1949, 2007, 2003, 2009, 2372, 2009, 1955, 1957, 1955, 1957,
     2017, 2012, 2018, 1960, 2019, 1960, 2019, 2008, 2013, 2025,
     2026, 2010, 2014, 2024, 1956, 1958, 2021, 2027, 2021, 2028,
     2029, 1963, 2020, 2030, 2031, 2032, 2033, 2034, 2017, 2035,
     2018, 2036, 2039, 2040, 2022, 2042, 2043, 2025, 2026, 2011,
     1977, 2045, 1977, 2046, 1979, 2027, 1979, 2028, 2029, 2047,
     2048, 2030, 2031, 2032, 2033, 2034, 2049, 2035, 1978, 2036,
     2039, 2040, 1980, 2042, 2043, 1987, 2372, 1987, 1995, 2045,
     1995, 2046, 1997, 1999, 1997, 1999, 2372, 2047, 2048, 2001,
     2054, 2001, 2054, 1988, 2049, 2004, 1996, 2004, 2067, 2068,

     1998, 2000, 2007, 2009, 2007, 2009, 2372, 2002, 2055, 2059,
     2060, 2061, 2062, 2005, 2062, 2064, 2019, 2064, 2019, 2071,
     2008, 2010, 2021, 2072, 2021, 2072, 2067, 2068, 2076, 2078,
     2063, 2079, 2372, 2065, 2020, 2080, 2081, 2059, 2060, 2061,
     2022, 2073, 2074, 2082, 2074, 2083, 2084, 2071, 2085, 2086,
     2088, 2086, 2089, 2090, 2091, 2092, 2076, 2078, 2095, 2079,
     2075, 2097, 2372, 2080, 2081, 2372, 2093, 2087, 2093, 2372,
     2054, 2082, 2054, 2083, 2084, 2099, 2085, 2099, 2088, 2109,
     2089, 2090, 2091, 2092, 2094, 2101, 2095, 2101, 2055, 2097,
     2103, 2110, 2103, 2100, 2062, 2064, 2062, 2064, 2107, 2111,

     2072, 2108, 2072, 2102, 2074, 2114, 2074, 2109, 2104, 2118,
     2119, 2122, 2063, 2065, 2123, 2115, 2124, 2125, 2073, 2110,
     2129, 2130, 2075, 2116, 2131, 2117, 2107, 2111, 2086, 2108,
     2086, 2132, 2127, 2114, 2127, 2134, 2138, 2118, 2119, 2122,
     2372, 2372, 2123, 2115, 2124, 2125, 2087, 2142, 2129, 2130,
     2128, 2116, 2131, 2117, 2093, 2135, 2093, 2372, 2143, 2132,
     2136, 2372, 2144, 2134, 2138, 2145, 2146, 2099, 2137, 2099,
     2147, 2101, 2094, 2101, 2103, 2142, 2103, 2148, 2149, 2150,
     2151, 2152, 2155, 2135, 2156, 2100, 2143, 2153, 2136, 2102,
     2144, 2157, 2104, 2145, 2146, 2158, 2137, 2154, 2147, 2159,

     2127, 2161, 2127, 2164, 2372, 2148, 2149, 2150, 2151, 2152,
     2155, 2165, 2156, 2167, 2162, 2153, 2162, 2168, 2128, 2157,
     2169, 2173, 2170, 2158, 2170, 2154, 2174, 2159, 2175, 2161,
     2175, 2164, 2163, 2177, 2178, 2180, 2178, 2180, 2182, 2165,
     2171, 2167, 2183, 2184, 2187, 2168, 2176, 2188, 2169, 2173,
     2189, 2190, 2179, 2181, 2174, 2185, 2191, 2185, 2191, 2193,
     2196, 2177, 2194, 2197, 2194, 2162, 2182, 2162, 2172, 2201,
     2183, 2184, 2187, 2186, 2192, 2188, 2202, 2203, 2189, 2190,
     2195, 2204, 2199, 2163, 2199, 2205, 2210, 2193, 2196, 2211,
     2170, 2197, 2170, 2207, 2208, 2209, 2372, 2201, 2372, 2217,

     2200, 2175, 2218, 2175, 2202, 2203, 2372, 2219, 2171, 2204,
     2213, 2223, 2213, 2205, 2210, 2224, 2178, 2211, 2178, 2176,
     2225, 2207, 2208, 2209, 2180, 2372, 2180, 2217, 2214, 2185,
     2218, 2185, 2232, 2234, 2179, 2219, 2221, 2235, 2221, 2223,
     2372, 2236, 2181, 2224, 2191, 2237, 2191, 2186, 2225, 2227,
     2194, 2227, 2194, 2230, 2222, 2230, 2199, 2238, 2199, 2245,
     2232, 2234, 2192, 2246, 2239, 2235, 2239, 2228, 2195, 2236,
     2241, 2231, 2241, 2237, 2200, 2243, 2213, 2243, 2213, 2249,
     2252, 2221, 2240, 2221, 2253, 2238, 2254, 2245, 2242, 2259,
     2260, 2246, 2261, 2244, 2214, 2227, 2262, 2227, 2230, 2222,

     2230, 2257, 2263, 2257, 2239, 2267, 2239, 2249, 2252, 2241,
     2268, 2241, 2253, 2228, 2254, 2269, 2231, 2259, 2260, 2258,
     2261, 2243, 2240, 2243, 2262, 2270, 2271, 2242, 2274, 2257,
     2263, 2257, 2276, 2267, 2277, 2279, 2280, 2281, 2268, 2244,
     2282, 2284, 2282, 2269, 2287, 2288, 2289, 2258, 2285, 2290,
     2285, 2291, 2292, 2270, 2271, 2293, 2274, 2294, 2283, 2295,
     2276, 2296, 2277, 2279, 2280, 2281, 2286, 2298, 2282, 2284,
     2282, 2300, 2287, 2288, 2289, 2301, 2285, 2290, 2285, 2291,
     2292, 2302, 2303, 2293, 2303, 2294, 2283, 2295, 2305, 2296,
     2306, 2307, 2308, 2309, 2286, 2298, 2310, 2311, 2312, 2300,

     2304, 2313, 2314, 2301, 2303, 2316, 2303, 2316, 2324, 2302,
     2325, 2326, 2327, 2328, 2329, 2318, 2305, 2318, 2306, 2307,
     2308, 2309, 2304, 2317, 2310, 2311, 2312, 2372, 2319, 2313,
     2314, 2372, 2321, 2320, 2321, 2316, 2324, 2316, 2325, 2326,
     2327, 2328, 2329, 2318, 2331, 2318, 2331, 2321, 2372, 2321,
     2322, 2342, 2343, 2317, 2335, 2336, 2337, 2338, 2340, 2338,
     2340, 2320, 2332, 2344, 2345, 2322, 2372, 2331, 2347, 2331,
     2347, 2349, 2351, 2349, 2351, 2339, 2341, 2359, 2360, 2342,
     2343, 2372, 2335, 2336, 2337, 2332, 2348, 2372, 2372, 2350,
     2352, 2344, 2345, 2338, 2340, 2338, 2340, 2355, 2357, 2355,

     2357, 2347, 2349, 2347, 2349, 2359, 2360, 2351, 2355, 2351,
     2355, 2339, 2341, 2372, 2372, 2356, 2358, 2372, 2372, 2348,
     2350, 2357, 2366, 2357, 2366, 2352, 2356, 2368, 2366, 2368,
     2366, 2368, 2372, 2368, 2372, 2372, 2372, 2372, 2372, 2358,
     2367, 2372, 2372, 2372, 2372, 2369, 2367, 2372, 2372, 2369,
      300,  300,  300,  300,  300,  379,  379,  379,  379,  379,
      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      382,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  385,
      386,  386,  386,  386,  386,  391,  391,  391,  391,  391,

      392,  392,  392,  392,  392,  456,  456,  456,  456,  456,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      480,  480,  480,  480,  480,  481,  481,  481,  481,  481,
      482,  482,  482,  482,  482,  492,  492,  492,  492,  492,
      493,  493,  493,  493,  493,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  499,  499,  499,  499,  499,
      500,  500,  500,  500,  500,  501,  501,  501,  501,  501,
      502,  502,  502,  502,  502,  503,  503,  503,  503,  503,
      504,  504,  504,  504,  504,  505,  505,  505,  505,  505,
      533,  533,  533,  533,  533,  534,  534,  534,  534,  534,

      535,  535,  535,  535,  535,  536,  536,  536,  536,  536,
      538,  538,  538,  538,  538,  539,  539,  539,  539,  539,
      540,  540,  540,  540,  540,  541,  541,  541,  541,  541,
      544,  544,  544,  544,  544,  545,  545,  545,  545,  545,
      549,  549,  549,  549,  549,  550,  550,  550,  550,  550,
      554,  554,  554,  554,  554,  686,  686,  687,  687,  688,
      688,  689,  689,  690,  690,  691,  691,  692,  692,  693,
      693,  699,  699,  779,  779,  802,  802,  803,  803,  804,
      804,  805,  805,  806,  806,  818,  818,  872,  872,  873,
      873,  877,  877,  878,  878, 2372,  878,  878,  881, 2372,

     2372,  881,  881,  686,  686,  687,  687,  688,  688,  689,
      689,  690,  690,  691,  691,  692,  692,  693,  693,  699,
      699,  779,  779,  802,  802,  803,  803,  804,  804,  805,
      805,  806,  806,  818,  818,  872,  872,  873,  873,  877,
      877,  878,  878, 2372,  878,  878,  881, 2372, 2372,  881,
      881,  299, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372
    } ;

static yyconst flex_int16_t yy_chk[11927] =
    {   0,
        0,    1,    1,    1, 2488,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3, 2487,    3,  291,  291,  291,  323,  291,
      323,    3,    3,    3,    3,    3,    3,    3,    4,    4,

        4, 2486,    4,  292,  292,  292,  323,  292, 2485,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5, 2484,
        5,  293,  293,  293,  580,  293,  580,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6, 2483,    6,  294,
      294,  294,  580,  294, 2482,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7, 2481,    7,  295,  295,  295,
      581,  295,  581,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8, 2480,    8,  296,  296,  296,  581,  296,
     2479,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,  301,    9,  301,  551,  301,  551, 2478,  551,    9,

        9,    9,    9,    9,    9,    9,   10,   10,   10,  555,
       10,  555,  559,  555,  559, 2477,  559,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,  582,   11,  582,
      585,  586,  585,  586, 2476,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  587,   12,  587,  585,  586,
      588, 2475,  588,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,  587,   13,  589, 2474,  589,  588, 2473,
     2472,   13,   13,   13,   13,   13,   13,   13,   14,   14,
       14, 2470,   14,  589,  616,  617,  616,  617, 2462,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  879,

       15,  879,  616,  879,  892, 2448,  892,   15,   15,   15,
       15,   15,   15,   15,   16,   16,   16,  882,   16,  882,
     2447,  882,  892, 2446, 2445,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,  904,   17,  904,   17, 2444,
       17,   17, 2443,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,  904,   18,  905,   18,  905,   18,   18,
     2442,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,  906,   19,  906,   19, 2441,   19,   19, 2440,   19,
       19,   19,   19,   19,   19,   19,   20,   20,   20,  909,
       20,  909,   20, 2439,   20,   20, 2438,   20,   20,   20,

       20,   20,   20,   20,   21,   21,   21,  909,   21,  910,
       21,  910,   21,   21, 2437,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22,  911,   22,  911,   22, 2436,
       22,   22, 2435,   22,   22,   22,   22,   22,   22,   22,
       23,   23,   23,  911,   23,  912,   23,  912,   23,   23,
     2434,   23,   23,   23,   23,   23,   23,   23,   24,   24,
       24,  913,   24,  913,   24, 2433,   24,   24, 2432,   24,
       24,   24,   24,   24,   24,   24,   25,   25,   25,  913,
       25,  914,   25,  914,   25,   25, 2430,   25,   25,   25,
       25,   25,   25,   25,   26,   26,   26,  915,   26,  915,

       26, 2422,   26,   26, 2308,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27,  915,   27,  916,   27,  916,
       27,   27, 2261,   27,   27,   27,   27,   27,   27,   27,
       28,   28,   28,  917,   28,  917,   28, 2253,   28,   28,
     2252,   28,   28,   28,   28,   28,   28,   28,   29,   29,
       29,  917,   29,  918,   29,  918,   29,   29, 2219,   29,
       29,   29,   29,   29,   29,   29,   30,   30,   30,  921,
       30,  921,   30, 2217,   30,   30, 2134,   30,   30,   30,
       30,   30,   30,   30,   31,   31,   31,  921,   31,  922,
       31,  922,   31,   31, 2081,   31,   31,   31,   31,   31,

       31,   31,   32,   32,   32,  960,   32,  960,   32, 2080,
       32,   32, 2048,   32,   32,   32,   32,   32,   32,   32,
       33,   33,   33, 1032,   33, 1032,   33, 2028,   33,   33,
     2014,   33,   33,   33,   33,   33,   33,   33,   34,   34,
       34, 1032,   34, 1033,   34, 1033,   34,   34, 1984,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35, 1933,
       35, 1033, 1038, 1039, 1038, 1039, 1920,   35,   35,   35,
       35,   35,   35,   35,   36,   36,   36, 1051,   36, 1051,
     1038, 1054, 1055, 1054, 1055,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37, 1056,   37, 1056, 1057, 1058,

     1057, 1058, 1918,   37,   37,   37,   37,   37,   37,   37,
       38,   38,   38, 1060,   38, 1060, 1061, 1089, 1061, 1089,
     1914,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39, 1060,   39, 1866, 1090, 1089, 1090, 1864, 1860,   39,
       39,   39,   39,   39,   39,   39,   40,   40,   40, 1094,
       40, 1094, 1090, 1107, 1108, 1107, 1108,   40,   40,   40,
       40,   40,   40,   40,   41,   41,   41, 1094,   41, 1823,
     1109, 1107, 1109, 1805, 1775,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1110,   42, 1110, 1109, 1115,
     1133, 1115, 1133,   42,   42,   42,   42,   42,   42,   42,

       43,   43,   43, 1134,   43, 1134, 1761, 1135, 1133, 1135,
     1684,   43,   43,   43,   43,   43,   43,   43,   44,   44,
       44, 1139,   44, 1139, 1164, 1135, 1164, 1617, 1616,   44,
       44,   44,   44,   44,   44,   44,   45,   45,   45, 1139,
       45, 1141,   45, 1141,   45, 1606, 1597,   45,   45,   45,
       45,   45,   45,   45,   46,   46,   46, 1589,   46, 1141,
       46, 1150,   46, 1150, 1588,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47, 1152,   47, 1152, 1153, 1150,
     1153, 1585, 1576,   47,   47,   47,   47,   47,   47,   47,
       48,   48,   48, 1152,   48, 1163, 1153, 1163, 1166, 1575,

     1166,   48,   48,   48,   48,   48,   48,   48,   49,   49,
       49, 1415,   49, 1163,   49, 1399,   49,   49, 1398,   49,
       49,   49,   49,   49,   49,   49,   50,   50,   50, 1165,
       50, 1165,   50, 1379,   50,   50, 1363,   50,   50,   50,
       50,   50,   50,   50,   51,   51,   51, 1165,   51, 1170,
       51, 1170,   51,   51, 1352,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1337,   52, 1170,   52, 1324,
       52,   52, 1320,   52,   52,   52,   52,   52,   52,   52,
       53,   53,   53, 1171,   53, 1171,   53, 1285,   53,   53,
     1266,   53,   53,   53,   53,   53,   53,   53,   54,   54,

       54, 1186,   54, 1186,   54, 1260,   54,   54, 1253,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55, 1187,
       55, 1187,   55, 1195,   55,   55, 1179,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,  306,   56, 1209,
       56, 1209,   56,   56, 1142,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1140,   57,   57,   57,
       57,   57, 1131, 1130,  308,  306,  309,   58,   58,   58,
       58,   57,   58,   58,   58,   58,   58, 1196,  312, 1196,
     1112, 1105,   59,   59,   59,   59,   58,   59,   59,   59,
       59,   59,  308, 1097,  309, 1196, 1086, 1083,   57,  311,

     1065,   59,   60,   60,   60,   60,  312,   60,   60,   60,
       60,   60,  950,   58,  311,  313,  314,   61,   61,   61,
       61,   60,   61,   61,   61,   61,   61,  311,   59, 1198,
      937, 1198,   62,   62,   62,   62,   61,   62,   62,   62,
       62,   62,  311,  313,  314,  926,  919, 1198,   60,  318,
      901,   62,   63,   63,   63,   63,  900,   63,   63,   63,
       63,   63,  893,   61,  320,  324,  561,   64,   64,   64,
       64,   63,   64,   64,   64,   64,   64,  318,   62, 1208,
      891, 1208,   65,   65,   65,   65,   64,   65,   65,   65,
       65,   65,  320,  324,  561,  574,  562, 1208,   63,  319,

      299,   65,   66,   66,   66,   66,  298,   66,   66,   66,
       66,   66,    0,   64,  563,  564,  319,   67,   67,   67,
       67,   66,   67,   67,   67,   67,   67,  319,   65, 1213,
        0, 1213,   68,   68,   68,   68,   67,   68,   68,   68,
       68,   68,  563,  564,  319,    0,    0, 1213,   66,  565,
        0,   68,   69,   69,   69,   69,    0,   69,   69,   69,
       69,   69,    0,   67,  566,  567,  568,   70,   70,   70,
       70,   69,   70,   70,   70,   70,   70,  565,   68, 1214,
        0, 1214,   71,   71,   71,   71,   70,   71,   71,   71,
       71,   71,  566,  567,  568,  569,  570,  571,   69,  572,

        0,   71,   72,   72,   72,   72,    0,   72,   72,   72,
       72,   72, 1216,   70, 1216,  573,  575,  576,   73,   73,
       73,   72,   73,  569,  570,  571,    0,  572,   71,   73,
       73,   73,   73,   73,   73,   73,  577,  578,   74,   74,
       74,    0,   74,  573,  575,  576,    0,    0,   72,   74,
       74,   74,   74,   74,   74,   74,   75,   75,   75, 1215,
       75, 1215,    0,    0,  577,  578,    0,   75,   75,   75,
       75,   75,   75,   75,   76,   76,   76, 1215,   76, 1220,
     1221, 1220, 1221,    0,    0,   76,   76,   76,   76,   76,
       76,   76,   77,   77,   77,    0,   77, 1220, 1223, 1224,

     1223, 1224,    0,   77,   77,   77,   77,   77,   77,   77,
       78,   78,   78, 1233,   78, 1233, 1223, 1234, 1236, 1234,
     1236,   78,   78,   78,   78,   78,   78,   78,   79,   79,
       79, 1233,   79, 1237,    0, 1237, 1236,    0,    0,   79,
       79,   79,   79,   79,   79,   79,   80,   80,   80,  579,
       80, 1239, 1250, 1239, 1250,    0,    0,   80,   80,   80,
       80,   80,   80,   80,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81, 1238,  579, 1238,   83,
       83,   83,   83,   81,   83,   83,   83,   83,   83,   87,
       87,   87,    0,   87, 1238,  583,  584, 1251,   83, 1251,

       87,   87,   87,   87,   87,   87,   87, 1255,    0, 1255,
       81,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,  583,  584,   83,   84,   84,   84,   84,
       82,   84,   84,   84,   84,   84,   88,   88,   88,    0,
       88, 1249, 1275, 1249, 1275,   84,    0,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,   82,   89, 1249,
     1275, 1276, 1278, 1276, 1278,   89,   89,   89,   89,   89,
       89,   89,   84,   85,   85,   85, 1279,   85, 1279,   85,
     1278,   85,   85,    0,   85,   85,   85,   85,   85,   85,
       85,   86,   86,   86, 1289,   86, 1289,   86,    0,   86,

       86,    0,   86,   86,   86,   86,   86,   86,   86,   90,
       90,   90,    0,   90, 1280, 1280, 1280, 1280,    0,    0,
       90,   90,   90,   90,   90,   90,   90,   91,   91,   91,
     1298,   91, 1298, 1299, 1300, 1299, 1300,    0,   91,   91,
       91,   91,   91,   91,   91,   92,   92,   92, 1298,   92,
     1301, 1302, 1301, 1302,    0,    0,   92,   92,   92,   92,
       92,   92,   92,   93,   93,   93,    0,   93, 1301, 1302,
     1303, 1304, 1303, 1304,   93,   93,   93,   93,   93,   93,
       93,   94,   94,   94, 1306,   94, 1306, 1315, 1303, 1315,
        0,    0,   94,   94,   94,   94,   94,   94,   94,   95,

       95,   95, 1317,   95, 1317, 1318, 1329, 1318, 1329,    0,
       95,   95,   95,   95,   95,   95,   95,   96,   96,   96,
     1330,   96, 1330, 1333, 1329, 1333,    0,    0,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97, 1347,   97,
     1347, 1333, 1348, 1349, 1348, 1349,   97,   97,   97,   97,
       97,   97,   97,   98,   98,   98, 1347,   98,    0,    0,
     1348, 1349,    0,    0,   98,   98,   98,   98,   98,   98,
       98,   99,   99,   99, 1350,   99, 1350, 1355, 1356, 1355,
     1356,    0,   99,   99,   99,   99,   99,   99,   99,  100,
      100,  100, 1350,  100,    0, 1355, 1356, 1357,    0, 1357,

      100,  100,  100,  100,  100,  100,  100,  101,  101,  101,
     1358,  101, 1358,    0, 1362, 1357, 1362,    0,  101,  101,
      101,  101,  101,  101,  101,  102,  102,  102, 1358,  102,
     1364, 1365, 1364, 1365,    0,    0,  102,  102,  102,  102,
      102,  102,  102,  103,  103,  103, 1366,  103, 1366, 1365,
     1367, 1368, 1367, 1368,  103,  103,  103,  103,  103,  103,
      103,  104,  104,  104, 1366,  104,    0,    0, 1367, 1368,
        0,    0,  104,  104,  104,  104,  104,  104,  104,  105,
      105,  105, 1370,  105, 1370,  105,    0,  105,  105,    0,
      105,  105,  105,  105,  105,  105,  105,  106,  106,  106,

     1370,  106, 1371,  106, 1371,  106,  106,    0,  106,  106,
      106,  106,  106,  106,  106,  107,  107,  107,    0,  107,
     1371,  107,    0,  107,  107,    0,  107,  107,  107,  107,
      107,  107,  107,  108,  108,  108, 1372,  108, 1372,  108,
        0,  108,  108,    0,  108,  108,  108,  108,  108,  108,
      108,  109,  109,  109, 1389,  109, 1389,  109,    0,  109,
      109,    0,  109,  109,  109,  109,  109,  109,  109,  110,
      110,  110, 1390,  110, 1390,  110,    0,  110,  110,    0,
      110,  110,  110,  110,  110,  110,  110,  111,  111,  111,
     1390,  111, 1391,  111, 1391,  111,  111,    0,  111,  111,

      111,  111,  111,  111,  111,  112,  112,  112, 1392,  112,
     1392,  112,    0,  112,  112,    0,  112,  112,  112,  112,
      112,  112,  112,  113,  113,  113, 1392,  113, 1393, 1394,
     1393, 1394,    0,    0,  113,  113,  113,  113,  113,  113,
      113,  114,  114,  114, 1395,  114, 1395, 1394, 1401, 1402,
     1401, 1402,  114,  114,  114,  114,  114,  114,  114,  115,
      115,  115, 1403,  115, 1403,    0, 1401, 1402,    0,    0,
      115,  115,  115,  115,  115,  115,  115,  116,  116,  116,
     1403,  116, 1404, 1416, 1404, 1416,    0,    0,  116,  116,
      116,  116,  116,  116,  116,  117,  117,  117,    0,  117,

     1404,  117,    0,  117,  117,    0,  117,  117,  117,  117,
      117,  117,  117,  118,  118,  118, 1406,  118, 1406,  118,
        0,  118,  118,    0,  118,  118,  118,  118,  118,  118,
      118,  119,  119,  119, 1406,  119, 1419,  119, 1419,  119,
      119,    0,  119,  119,  119,  119,  119,  119,  119,  120,
      120,  120,    0,  120, 1419,  120,    0,  120,  120,    0,
      120,  120,  120,  120,  120,  120,  120,  121,  121,  121,
     1420,  121, 1420,  121,    0,  121,  121,    0,  121,  121,
      121,  121,  121,  121,  121,  122,  122,  122, 1432,  122,
     1432,  122,    0,  122,  122,    0,  122,  122,  122,  122,

      122,  122,  122,  123,  123,  123, 1432,  123, 1436,  123,
     1436,  123,  123,    0,  123,  123,  123,  123,  123,  123,
      123,  124,  124,  124,    0,  124, 1436,  124,    0,  124,
      124,    0,  124,  124,  124,  124,  124,  124,  124,  125,
      125,  125, 1437,  125, 1437,  125,    0,  125,  125,    0,
      125,  125,  125,  125,  125,  125,  125,  126,  126,  126,
     1437,  126, 1438,  126, 1438,  126,  126,    0,  126,  126,
      126,  126,  126,  126,  126,  127,  127,  127,    0,  127,
     1438,  127,    0,  127,  127,    0,  127,  127,  127,  127,
      127,  127,  127,  128,  128,  128, 1439,  128, 1439,  128,

        0,  128,  128,    0,  128,  128,  128,  128,  128,  128,
      128,  129,  129,  129, 1439,  129, 1440,  129, 1440,  129,
      129,    0,  129,  129,  129,  129,  129,  129,  129,  130,
      130,  130, 1441,  130, 1441,  130,    0,  130,  130,    0,
      130,  130,  130,  130,  130,  130,  130,  131,  131,  131,
     1441,  131, 1442,  131, 1442,  131,  131,    0,  131,  131,
      131,  131,  131,  131,  131,  132,  132,  132, 1443,  132,
     1443,  132,    0,  132,  132,    0,  132,  132,  132,  132,
      132,  132,  132,  133,  133,  133, 1443,  133, 1444,  133,
     1444,  133,  133,    0,  133,  133,  133,  133,  133,  133,

      133,  134,  134,  134, 1445,  134, 1445,  134,    0,  134,
      134,    0,  134,  134,  134,  134,  134,  134,  134,  135,
      135,  135, 1445,  135, 1446,  135, 1446,  135,  135,    0,
      135,  135,  135,  135,  135,  135,  135,  136,  136,  136,
     1450,  136, 1450,  136,    0,  136,  136,    0,  136,  136,
      136,  136,  136,  136,  136,  137,  137,  137, 1450,  137,
     1451, 1452, 1451, 1452,    0,    0,  137,  137,  137,  137,
      137,  137,  137,  138,  138,  138,    0,  138, 1451, 1453,
     1454, 1453, 1454,    0,  138,  138,  138,  138,  138,  138,
      138,  139,  139,  139, 1455,  139, 1455, 1453, 1456, 1457,

     1456, 1457,  139,  139,  139,  139,  139,  139,  139,  140,
      140,  140, 1455,  140, 1458,    0, 1458, 1457,    0,    0,
      140,  140,  140,  140,  140,  140,  140,  141,  141,  141,
     1460,  141, 1460, 1461, 1463, 1461, 1463,    0,  141,  141,
      141,  141,  141,  141,  141,  142,  142,  142, 1460,  142,
        0, 1461, 1463, 1464,    0, 1464,  142,  142,  142,  142,
      142,  142,  142,  143,  143,  143, 1465,  143, 1465, 1466,
     1467, 1466, 1467,    0,  143,  143,  143,  143,  143,  143,
      143,  144,  144,  144, 1465,  144,    0, 1468, 1467, 1468,
        0,    0,  144,  144,  144,  144,  144,  144,  144,  145,

      145,  145,    0,  145, 1469,  145, 1469,  145,  145,    0,
      145,  145,  145,  145,  145,  145,  145,  146,  146,  146,
      590,  146, 1469,  146,    0,  146,  146,    0,  146,  146,
      146,  146,  146,  146,  146,  147,  147,  147,  147,  591,
      147,  147,  147,  147,  147, 1470,    0, 1470,  590,    0,
      148,  148,  148,  148,  147,  148,  148,  148,  148,  148,
      151,  151,  151, 1473,  151, 1473, 1472,  591, 1472,  148,
        0,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152,  147,  152, 1474, 1472, 1474, 1491,    0, 1491,  152,
      152,  152,  152,  152,  152,  152,  148,  149,  149,  149,

     1492,  149, 1492,  149,    0,  149,  149,    0,  149,  149,
      149,  149,  149,  149,  149,  150,  150,  150, 1493,  150,
     1493,  150,    0,  150,  150,    0,  150,  150,  150,  150,
      150,  150,  150,  153,  153,  153, 1494,  153, 1494,  153,
     1499,  153, 1499,    0,  153,  153,  153,  153,  153,  153,
      153,  154,  154,  154, 1494,  154,    0,  154, 1499,  154,
        0,    0,  154,  154,  154,  154,  154,  154,  154,  155,
      155,  155, 1500,  155, 1500,  155, 1501,  155, 1501,    0,
      155,  155,  155,  155,  155,  155,  155,  156,  156,  156,
     1502,  156, 1502,  156, 1501,  156,    0,    0,  156,  156,

      156,  156,  156,  156,  156,  157,  157,  157, 1503,  157,
     1503,  157, 1504,  157, 1504,    0,  157,  157,  157,  157,
      157,  157,  157,  158,  158,  158, 1503,  158, 1505,  158,
     1505,  158,    0,    0,  158,  158,  158,  158,  158,  158,
      158,  159,  159,  159,    0,  159, 1505,  159, 1506,  159,
     1506,    0,  159,  159,  159,  159,  159,  159,  159,  160,
      160,  160, 1508,  160, 1508,  160, 1509,  160, 1509,    0,
      160,  160,  160,  160,  160,  160,  160,  161,  161,  161,
     1508,  161, 1521, 1528, 1521, 1528,    0,    0,  161,  161,
      161,  161,  161,  161,  161,  162,  162,  162, 1529,  162,

     1529, 1528, 1530, 1538, 1530, 1538,  162,  162,  162,  162,
      162,  162,  162,  163,  163,  163, 1529,  163, 1539,    0,
     1539, 1538,    0,    0,  163,  163,  163,  163,  163,  163,
      163,  164,  164,  164, 1543,  164, 1543, 1544, 1545, 1544,
     1545,    0,  164,  164,  164,  164,  164,  164,  164,  165,
      165,  165, 1543,  165,    0, 1546, 1545, 1546,    0,    0,
      165,  165,  165,  165,  165,  165,  165,  166,  166,  166,
     1547,  166, 1547, 1548, 1549, 1548, 1549,    0,  166,  166,
      166,  166,  166,  166,  166,  167,  167,  167, 1547,  167,
     1550, 1551, 1550, 1551,    0,    0,  167,  167,  167,  167,

      167,  167,  167,  168,  168,  168, 1552,  168, 1552, 1556,
     1557, 1556, 1557,    0,  168,  168,  168,  168,  168,  168,
      168,  169,  169,  169, 1558,  169, 1558, 1556, 1559, 1560,
     1559, 1560,  169,  169,  169,  169,  169,  169,  169,  170,
      170,  170, 1561,  170, 1561, 1562, 1563, 1562, 1563,    0,
      170,  170,  170,  170,  170,  170,  170,  171,  171,  171,
     1564,  171, 1564, 1562, 1563, 1565,    0, 1565,  171,  171,
      171,  171,  171,  171,  171,  172,  172,  172, 1566,  172,
     1566,    0, 1568, 1565, 1568,    0,  172,  172,  172,  172,
      172,  172,  172,  173,  173,  173, 1569,  173, 1569, 1570,

     1571, 1570, 1571,    0,  173,  173,  173,  173,  173,  173,
      173,  174,  174,  174, 1573,  174, 1573, 1579, 1580, 1579,
     1580,    0,  174,  174,  174,  174,  174,  174,  174,  175,
      175,  175, 1592,  175, 1592, 1579, 1593, 1594, 1593, 1594,
      175,  175,  175,  175,  175,  175,  175,  176,  176,  176,
     1592,  176, 1598,    0, 1598, 1594,    0,    0,  176,  176,
      176,  176,  176,  176,  176,  177,  177,  177, 1599,  177,
     1599, 1600, 1601, 1600, 1601,    0,  177,  177,  177,  177,
      177,  177,  177,  178,  178,  178,  593,  178, 1603, 1623,
     1603, 1623,    0,    0,  178,  178,  178,  178,  178,  178,

      178,  179,  179,  179,  179,    0,  179,  179,  179,  179,
      179,    0,    0,  594,  593,  595,  180,  180,  180,  180,
      179,  180,  180,  180,  180,  180, 1622,  596, 1622,    0,
        0,  181,  181,  181,  181,  180,  181,  181,  181,  181,
      181,  594,    0,  595, 1622,    0,    0,  179,  599,    0,
      181,  182,  182,  182,  182,  596,  182,  182,  182,  182,
      182,    0,  180,  600,  602,  603,  183,  183,  183,  183,
      182,  183,  183,  183,  183,  183,  599,  181, 1624,    0,
     1624,  184,  184,  184,  184,  183,  184,  184,  184,  184,
      184,  600,  602,  603, 1632,    0, 1632,  182,  604,    0,

      184,  185,  185,  185,  185,    0,  185,  185,  185,  185,
      185,    0,  183,  605,  608,  609,  186,  186,  186,  186,
      185,  186,  186,  186,  186,  186,  604,  184, 1636,    0,
     1636,  187,  187,  187,  187,  186,  187,  187,  187,  187,
      187,  605,  608,  609,  597,  610,  612,  185,  613,    0,
      187,  188,  188,  188,  188,    0,  188,  188,  188,  188,
      188,    0,  186,  597,  615,  618,  885,  189,  189,  189,
      188,  189,  597,  610,  612,    0,  613,  187,  189,  189,
      189,  189,  189,  189,  189,  886,  888,  190,  190,  190,
        0,  190,  615,  618,  885,    0,    0,  188,  190,  190,

      190,  190,  190,  190,  190,  191,  191,  191, 1637,  191,
     1637,    0,    0,  886,  888,    0,  191,  191,  191,  191,
      191,  191,  191,  192,  192,  192, 1638,  192, 1638, 1642,
     1643, 1642, 1643,    0,  192,  192,  192,  192,  192,  192,
      192,  193,  193,  193, 1644,  193, 1644, 1645, 1643, 1645,
        0,    0,  193,  193,  193,  193,  193,  193,  193,  194,
      194,  194, 1646,  194, 1646, 1654, 1664, 1654, 1664,    0,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
     1666,  195, 1666,  195, 1664,  195,  195,    0,  195,  195,
      195,  195,  195,  195,  195,  196,  196,  196, 1667,  196,

     1667,  196,    0,  196,  196,    0,  196,  196,  196,  196,
      196,  196,  196,  197,  197,  197, 1667,  197, 1668, 1672,
     1668, 1672,    0,    0,  197,  197,  197,  197,  197,  197,
      197,  198,  198,  198, 1674,  198, 1674, 1672, 1677, 1678,
     1677, 1678,  198,  198,  198,  198,  198,  198,  198,  199,
      199,  199, 1674,  199,    0,    0, 1677, 1678,    0,    0,
      199,  199,  199,  199,  199,  199,  199,  200,  200,  200,
     1681,  200, 1681, 1691, 1698, 1691, 1698,    0,  200,  200,
      200,  200,  200,  200,  200,  201,  201,  201, 1681,  201,
        0, 1705, 1698, 1705,    0,    0,  201,  201,  201,  201,

      201,  201,  201,  202,  202,  202,  889,  202, 1727, 1729,
     1727, 1729,    0,    0,  202,  202,  202,  202,  202,  202,
      202,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203, 1708,  889, 1708,  205,  205,  205,  205,
      203,  205,  205,  205,  205,  205,  213,  213,  213,    0,
      213, 1708,  890,  894, 1734,  205, 1734,  213,  213,  213,
      213,  213,  213,  213, 1737,    0, 1737,  203,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      890,  894,  205,  206,  206,  206,  206,  204,  206,  206,
      206,  206,  206,  214,  214,  214,    0,  214, 1711, 1716,

     1711, 1716,  206,    0,  214,  214,  214,  214,  214,  214,
      214,  229,  229,  229,  204,  229, 1711, 1716, 1726, 1733,
     1726, 1733,  229,  229,  229,  229,  229,  229,  229,  206,
      207,  207,  207, 1736,  207, 1736, 1726, 1733,  207,    0,
        0,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208, 1736,  208,  895,    0,  896,  208,    0,  897,  208,
      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  230,  230,
      230,  895,  230,  896,    0,  209,  897,    0,    0,  230,
      230,  230,  230,  230,  230,  230,  325,  325,  325,  325,

      325,  325,  325,  326,  326,  326,  326,  326,  326,  326,
        0,    0,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  233,  233,  233,    0,  233,
      898, 1743,  210, 1743,    0,    0,  233,  233,  233,  233,
      233,  233,  233,  327,  327,  327,  327,  327,  327,  327,
      328,  328,  328,  328,  328,  328,  328,    0,  898,  210,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  234,  234,  234,    0,  234,  899, 1745,  211,
     1745,    0,    0,  234,  234,  234,  234,  234,  234,  234,
      329,  329,  329,  329,  329,  329,  329,  330,  330,  330,

      330,  330,  330,  330,    0,  899,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  265,
      265,  265, 1749,  265, 1749,    0,  212, 1741,    0, 1741,
      265,  265,  265,  265,  265,  265,  265,  331,  331,  331,
      331,  331,  331,  331,  332, 1741,  332,  332,  332,  332,
      332,  332,  332,  212,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  266,  266,  266, 1767,
      266, 1767, 1777,  215, 1777,    0,    0,  266,  266,  266,
      266,  266,  266,  266,  334,    0,  334,  334,  334,  334,
      334,  334,  334,  359,  359,  359,  359,  359,  359,  359,

      215,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  275,  275,  275, 1781,  275, 1781, 1787,
      216, 1787,    0,    0,  275,  275,  275,  275,  275,  275,
      275,  335,    0,  335,  335,  335,  335,  335,  335,  335,
      360,  360,  360,  360,  360,  360,  360,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      276,  276,  276, 1797,  276, 1797, 1802,  217, 1802,    0,
        0,  276,  276,  276,  276,  276,  276,  276,  337,    0,
      337,  337,  337,  337,  337,  337,  337,  361,  361,  361,
      361,  361,  361,  361,  217,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  277,  277,  277,
     1804,  277, 1804, 1810,  218, 1810,    0,    0,  277,  277,
      277,  277,  277,  277,  277,  338,    0,  338,  338,  338,
      338,  338,  338,  338,  362,  362,  362,  362,  362,  362,
      362,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  278,  278,  278, 1811,  278, 1811,
     1812,  219, 1812,    0,    0,  278,  278,  278,  278,  278,
      278,  278,  340,  902,  340,  340,  340,  340,  340,  340,
      340,  363,  363,  363,  363,  363,  363,  363,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  902,    0,    0,  279,  279,  279,  279,  220,  279,
      279,  279,  279,  279,  283,  283,  283, 1815,  283, 1815,
      903,  907, 1818,  279, 1818,  283,  283,  283,  283,  283,
      283,  283, 1833,    0, 1833,  220,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  903,  907,
      279,  280,  280,  280,  280,  221,  280,  280,  280,  280,
      280,  284,  284,  284, 1837,  284, 1837,  908,  920, 1841,
      280, 1841,  284,  284,  284,  284,  284,  284,  284, 1844,
        0, 1844,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  908,  920,  280,  281,  281,

      281,  281,  222,  281,  281,  281,  281,  281,  285,  285,
      285, 1847,  285, 1847,  923,  924, 1849,  281, 1849,  285,
      285,  285,  285,  285,  285,  285, 1852,    0, 1852,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  923,  924,  281,  282,  282,  282,  282,  223,
      282,  282,  282,  282,  282,  286,  286,  286, 1854,  286,
     1854,  611,  925, 1856,  282, 1856,  286,  286,  286,  286,
      286,  286,  286,  611,  927,  928,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  611,
      925,  282,  929,  287,  287,  287,  224,  287, 1857,    0,

     1857,  611,  927,  928,  287,  287,  287,  287,  287,  287,
      287,  341,    0,  341,  341,  341,  341,  341,  341,  341,
      929,    0,    0,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  288,  288,  288,  930,
      288,  932, 1868,  225, 1868,    0,    0,  288,  288,  288,
      288,  288,  288,  288,    0,  933,  333,  333,  333,  333,
      333,  333,  333, 1877, 1881, 1877, 1881,  930,  333,  932,
      225,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  933,    0,  934,  289,  289,  289,  289,
      226,  289,  289,  289,  289,  289,  333,  364,  364,  364,

      364,  364,  364,  364,  343,  289,  343,  343,  343,  343,
      343,  343,  343,  934, 1888,    0, 1888,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      935,  936,  289,  290,  290,  290,  290,  227,  290,  290,
      290,  290,  290,  336,  336,  336,  336,  336,  336,  336,
      305,    0,  290,  321,  938,  336,    0,  305,  935,  936,
      305,  321,  321,  321,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,    0,  305,  290,
      939,  321,  938,  336,  228,  305,    0,  940,  305,  321,
      321,  321,    0,  339,  339,  339,  339,  339,  339,  339,

     1892, 1742, 1892, 1742, 1744,  339, 1744,  941,  939,  942,
        0,  228,  231,  231,  231,  940,  231,    0,  231, 1742,
      231,  231, 1744,  231,  231,  231,  231,  231,  231,  231,
      232,  232,  232,  339,  232,  941,  232,  942,  232,  232,
        0,  232,  232,  232,  232,  232,  232,  232,  235,  235,
      235, 1748,  235, 1748,  235, 1751,  235, 1751,    0,  235,
      235,  235,  235,  235,  235,  235,  236,  236,  236, 1748,
      236,    0,  236, 1751,  236,    0,    0,  236,  236,  236,
      236,  236,  236,  236,  237,  237,  237, 1766,  237, 1766,
      237, 1770,  237, 1770,    0,  237,  237,  237,  237,  237,

      237,  237,  238,  238,  238, 1766,  238,    0,  238, 1770,
      238,    0,    0,  238,  238,  238,  238,  238,  238,  238,
      239,  239,  239, 1773,  239, 1773,  239, 1776,  239, 1776,
        0,  239,  239,  239,  239,  239,  239,  239,  240,  240,
      240, 1773,  240,    0,  240, 1776,  240,    0,    0,  240,
      240,  240,  240,  240,  240,  240,  241,  241,  241, 1780,
      241, 1780,  241, 1783,  241, 1783,    0,  241,  241,  241,
      241,  241,  241,  241,  242,  242,  242, 1780,  242,    0,
      242, 1783,  242,    0,    0,  242,  242,  242,  242,  242,
      242,  242,  243,  243,  243, 1784,  243, 1784,  243, 1785,

      243, 1785,    0,  243,  243,  243,  243,  243,  243,  243,
      244,  244,  244, 1784,  244,    0,  244, 1785,  244,    0,
        0,  244,  244,  244,  244,  244,  244,  244,  245,  245,
      245, 1786,  245, 1786,  245, 1798,  245, 1798,    0,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246, 1786,
      246,    0,  246, 1798,  246,    0,    0,  246,  246,  246,
      246,  246,  246,  246,  247,  247,  247, 1809,  247, 1809,
      247, 1817,  247, 1817,    0,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248, 1809,  248,    0,  248, 1817,
      248,    0,    0,  248,  248,  248,  248,  248,  248,  248,

      249,  249,  249, 1824,  249, 1824,  249, 1827,  249, 1827,
        0,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250, 1824,  250,    0,  250, 1827,  250,    0,    0,  250,
      250,  250,  250,  250,  250,  250,  251,  251,  251, 1836,
      251, 1836,  251, 1840,  251, 1840,    0,  251,  251,  251,
      251,  251,  251,  251,  252,  252,  252, 1836,  252,    0,
      252, 1840,  252,    0,    0,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253, 1848,  253, 1848,  253, 1851,
      253, 1851,    0,  253,  253,  253,  253,  253,  253,  253,
      254,  254,  254, 1848,  254,    0,  254, 1851,  254,    0,

        0,  254,  254,  254,  254,  254,  254,  254,  255,  255,
      255, 1853,  255, 1853,  255, 1855,  255, 1855,    0,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256, 1853,
      256,    0,  256, 1855,  256,    0,  943,  256,  256,  256,
      256,  256,  256,  256,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  366,  366,  366,  366,
      366,  366,  366,  257,  943,  342,  342,  342,  342,  342,
      342,  342, 1900,    0, 1900,  310,  307,  342,  944,  945,
      946,  310,    0,  307,  307,  947,  310,  307,    0,  307,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  310,  307,  342,  944,  945,  946,  310,
      258,  307,  307,  947,  310,  307,  344,  307,  344,  344,
      344,  344,  344,  344,  344,  346,    0,  346,  346,  346,
      346,  346,  346,  346, 1903,    0, 1903,  258,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      387,  387,  387,  387,  387,  387,  387,  259,  345,  345,
      345,  345,  345,  345,  345, 1867, 1908, 1867, 1908,  347,
      345,  347,  347,  347,  347,  347,  347,  347, 1910, 1911,
     1910, 1911,    0, 1867,  259,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  948,  345,  949,

      951,  952,  953,    0,  260,  348,  348,  348,  348,  348,
      348,  348, 1912, 1922, 1912, 1922,  349,  348,  349,  349,
      349,  349,  349,  349,  349,  948,    0,  949,  951,  952,
      953,  260,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  955,  348,  956,  957,  958,  959,
      350,  261,  350,  350,  350,  350,  350,  350,  350,  351,
      351,  351,  351,  351,  351,  351, 1927, 1935, 1927, 1935,
        0,  351,  955,  961,  956,  957,  958,  959,  261,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  388,  388,  388,  388,  388,  388,  388,  262,  351,

      352,  961,  352,  352,  352,  352,  352,  352,  352,  353,
        0,  353,  353,  353,  353,  353,  353,  353,  389,  389,
      389,  389,  389,  389,  389,  262,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  390,  390,
      390,  390,  390,  390,  390,  263,  354,  354,  354,  354,
      354,  354,  354, 1872, 1943, 1872, 1943,  355,  354,  355,
      355,  355,  355,  355,  355,  355, 1946, 1949, 1946, 1949,
        0, 1872,  263,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264, 1030,  354, 1031, 1034, 1035,
     1036,  356,  264,  356,  356,  356,  356,  356,  356,  356,

      357,  357,  357,  357,  357,  357,  357, 1956, 1958, 1956,
     1958,    0,  357, 1030, 1037, 1031, 1034, 1035, 1036,  264,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  396,  396,  396,  396,  396,  396,  396,  267,
      357,  358, 1037,  358,  358,  358,  358,  358,  358,  358,
      365, 1041,  365, 1042, 1043,  365,  365,  365,  365,  365,
      365,  365, 1963, 1978, 1963, 1978,  267,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268, 1041,
     1044, 1042, 1043, 1045, 1046,  367,  268,  367,  367,  367,
      367,  367,  367,  367,  368,  368,  368,  368,  368,  368,

      368, 1980, 1982, 1980, 1982, 1988,  368, 1988, 1044,    0,
        0, 1045, 1046,  268,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  397,  397,  397,  397,
      397,  397,  397,  269,  368,  369,    0,  369,  369,  369,
      369,  369,  369,  369,  370,    0,  370,  370,  370,  370,
      370,  370,  370,  398,  398,  398,  398,  398,  398,  398,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  399,  399,  399,  399,  399,  399,  399,
      270,  371,  371,  371,  371,  371,  371,  371, 1880, 1990,
     1880, 1990,  372,  371,  372,  372,  372,  372,  372,  372,

      372, 1996, 1998, 1996, 1998,    0, 1880,  270,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
     1048,  371, 1049, 1050, 1052, 1053,  373,  271,  373,  373,
      373,  373,  373,  373,  373,  374,  374,  374,  374,  374,
      374,  374, 2000, 2002, 2000, 2002,    0,  374, 1048, 1059,
     1049, 1050, 1052, 1053,  271,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  400,  400,  400,
      400,  400,  400,  400,  272,  374,  375, 1059,  375,  375,
      375,  375,  375,  375,  375,  376,    0,  376,  376,  376,
      376,  376,  376,  376,  401,  401,  401,  401,  401,  401,

      401,  272,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  402,  402,  402,  402,  402,  402,
      402,  273,  377,  377,  377,  377,  377,  377,  377, 1887,
     2005, 1887, 2005,  378,  377,  378,  378,  378,  378,  378,
      378,  378, 2006, 1891, 2006, 1891,    0, 1887,  273,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274, 1891,  377, 1062, 1063, 1064, 1066,  393,  274,  393,
      393,  393,  393,  393,  393,  393,    0,  394,  394,  394,
      394,  394,  394,  394, 1894, 2008, 1894, 2008,    0,  394,
     1067, 1062, 1063, 1064, 1066,  274,  297,  297,  297,  297,

      297,  297, 1894,  297,  297,    0,    0,  297,  297,  297,
      297,  297,  297,  297,  315,  316,  315,  394, 1067,  395,
      316,  395,  395,  395,  395,  395,  395,  395,    0,    0,
      315,  607,  315,  315,  954,  316, 1068,  614,    0,  607,
      316,  954, 1901,  316, 1901,    0,  614,  315,    0,    0,
      316, 1923, 2010, 1923, 2010,  606,  315,  315,  315,  607,
     1901,  315,  954,  316, 1068,  614,  606,  607,  316, 1923,
      592,  316,  592,  606,  614,  315,  403,  403,  403,  403,
      403,  403,  403,  606,  315,  315,  315,  317,  592,  887,
      592,  601,  592,  317,  606, 1069,  317,  887,  601,  317,

      601,  606,  317,  317, 1070,  317,    0,  592, 1071, 2015,
        0, 2015,  317, 1072, 2016,  317, 2016,  887,  592,  601,
      592,  317, 1073, 1069,  317,  887,  601,  317,  601,    0,
      317,  317, 1070,  317,  322,  592, 1071, 1047,  322,  598,
     1074, 1072,  322,  598,  598,  598,  322, 1075,  322, 1047,
     1073, 1076, 1077,    0,  322,  404,  404,  404,  404,  404,
      404,  404,  322,    0,    0, 1047,  322,  598, 1074, 1078,
      322,  598,  598,  598,  322, 1075,  322, 1047,    0, 1076,
     1077,  405,  322,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  406,  406,  406,  406,  406, 1078, 1079, 1080,

     1081,  407,  406,  407,  407,  407,  407,  407,  407,  407,
      408,    0,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409, 1079, 1080, 1081, 1082,
      406,  409,  410,    0,  410,  410,  410,  410,  410,  410,
      410,  411,    0,  411,  411,  411,  411,  411,  411,  411,
      412,  412,  412,  412,  412,  412,  412, 1082, 1085,  409,
     1084,  413,  412,  413,  413,  413,  413,  413,  413,  413,
      414,    0,  414,  414,  414,  414,  414,  414,  414,  415,
      415,  415,  415,  415,  415,  415, 1085, 1084, 1084, 1087,
      412,  415,  416,    0,  416,  416,  416,  416,  416,  416,

      416,  417,  417,  417,  417,  417,  417,  417,  418,  418,
      418,  418,  418,  418,  418,    0,    0, 1087,  419,  415,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  420,    0, 1088, 1091, 1092,  421,  420,
      421,  421,  421,  421,  421,  421,  421,  422,    0,  422,
      422,  422,  422,  422,  422,  422,  423,  423,  423,  423,
      423,  423,  423, 1088, 1091, 1092, 1093,  420,  423,  424,
        0,  424,  424,  424,  424,  424,  424,  424,  425,    0,
      425,  425,  425,  425,  425,  425,  425,  426,  426,  426,
      426,  426,  426,  426, 1093, 1095,  423, 1096,  427,  426,

      427,  427,  427,  427,  427,  427,  427,  428,    0,  428,
      428,  428,  428,  428,  428,  428,  429,  429,  429,  429,
      429,  429,  429, 1095,    0, 1096, 1098,  426,  429,  430,
        0,  430,  430,  430,  430,  430,  430,  430,  431,    0,
      431,  431,  431,  431,  431,  431,  431,  432,  432,  432,
      432,  432,  432,  432, 1098, 1099,  429, 1100,  433,  432,
      433,  433,  433,  433,  433,  433,  433,  434,    0,  434,
      434,  434,  434,  434,  434,  434,  435,  435,  435,  435,
      435,  435,  435, 1099,    0, 1100, 1101,  432,  435,  436,
        0,  436,  436,  436,  436,  436,  436,  436,  437,    0,

      437,  437,  437,  437,  437,  437,  437,  438,  438,  438,
      438,  438,  438,  438, 1101, 1102,  435, 1106,  439,  438,
      439,  439,  439,  439,  439,  439,  439,  440,    0,  440,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      441,  441,  441, 1102,    0, 1106, 1111,  438,  441,  442,
        0,  442,  442,  442,  442,  442,  442,  442,  443,    0,
      443,  443,  443,  443,  443,  443,  443,  444,  444,  444,
      444,  444,  444,  444, 1111, 1113,  441, 1114,  445,  444,
      445,  445,  445,  445,  445,  445,  445,  446,    0,  446,
      446,  446,  446,  446,  446,  446,  447,  447,  447,  447,

      447,  447,  447, 1113, 1116, 1114, 1117,  444,  447,  448,
        0,  448,  448,  448,  448,  448,  448,  448,  449,  449,
      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450, 1116, 2020, 1117, 2020,  447,  451,  451,  451,
      451,  451,  451,  451,  452,  452,  452,  452,  452,  452,
      452,  453,    0,  453,  453,  453,  453,  453,  453,  453,
      454,  454,  454,  454,  454,  454,  454,    0, 1118, 1119,
     1120,  455,  454,  455,  455,  455,  455,  455,  455,  455,
      457,    0,  457,  457,  457,  457,  457,  457,  457,  458,
      458,  458,  458,  458,  458,  458, 1118, 1119, 1120,    0,

      454,  458,  459,    0,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  462, 2022,  462, 2022,  458,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  463,
      463,  463,  463,  463,  464, 2023,  464, 2023,    0,  464,
      464,  464,  464,  464,  464,  464,  465,  465,  465,  465,
      465,  465,  465,  466, 2037,  466, 2037,    0,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      467,  467,  468, 2038,  468, 2038,    0,  468,  468,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  469,  469,

      469,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,  473,  473,  473,  473,  474,
      474,  474,  474,  474,  474,  474,  475,  475,  475,  475,
      475,  475,  475,  476,  476,  476,  476,  476,  476,  476,
      477,  477,  477,  477,  477,  477,  477,  483,  483,  483,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  484,
      484,  485,  485,  485,  485,  485,  485,  485,  486,    0,
      486,  486,  486,  486,  486,  486,  486,  487,  487,  487,
      487,  487,  487,  487, 1121, 1122, 1123, 1125,  488,  487,

      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  489,  489,  490,  490,  490,  490,  490,  490,
      490,    0, 1121, 1122, 1123, 1125,    0,  487,  491,  491,
      491,  491,  491,  491,  491,  494,  494,  494,  494,  494,
      494,  494,  495,  495,  495,  495,  495,  495,  495,  498,
      498,  498,  498,  498,  498,  498,  506,  506,  506,  506,
      506,  506,  506,  507,    0,  507,  507,  507,  507,  507,
      507,  507,  508,  508,  508,  508,  508,  508,  508, 1127,
     2044,    0, 2044,  509,  508,  509,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  510,  510,  510,  510,  511,

      511,  511,  511,  511,  511,  511,    0, 1127,  512,  512,
      512,    0,  508,  512,  512,  512,  512,  512,  512,  512,
      513,  513,  513,  513,  513,  513,  513,  514, 2050,  514,
     2050,    0,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  516, 2051,  516, 2051,
        0,  516,  516,  516,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  517,  517,  518, 2052,  518, 2052,    0,
      518,  518,  518,  518,  518,  518,  518,  519,  519,  519,
      519,  519,  519,  519,  520, 2053,  520, 2053,    0,  520,
      520,  520,  520,  520,  520,  520,  521,  521,  521,  521,

      521,  521,  521,  522, 2055,  522, 2055,    0,  522,  522,
      522,  522,  522,  522,  522,  523,  523,  523,  523,  523,
      523,  523,  524, 2056,  524, 2056,    0,  524,  524,  524,
      524,  524,  524,  524,  525,  525,  525,  525,  525,  525,
      525,  526,  526,  526,    0,    0,  526,  526,  526,  526,
      526,  526,  526,  527,  527,  527,  527,  527,  527,  527,
      528, 2057,  528, 2057,    0,  528,  528,  528,  528,  528,
      528,  528,  529,  529,  529,  529,  529,  529,  529,  530,
     2058,  530, 2058,    0,  530,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  531,  532, 2063,

      532, 2063,    0,  532,  532,  532,  532,  532,  532,  532,
      537,  537,  537,  537,  537,  537,  537,  542,  542,  542,
      542,  542,  542,  542,  543,  543,  543,  543,  543,  543,
      543,  546,  546,  546,  546,  546,  546,  546,  547,  547,
      547,  547,  547,  547,  547,  548,  548,  548,  548,  548,
      548,  548,  558, 2065,  558, 2065,  558,  558,    0,    0,
      558,  558,  558,  558,  558,  558,  558,  619,  619,  619,
      619,  619,  619,  619,  620,  620,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  621,  621,  622,  622,
      622,  622,  622,  622,  622,  623,  623,  623,  623,  623,

      623,  623,  624,  624,  624,  624,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  625,  626,  626,  626,  626,
      626,  626,  626, 2069, 2070, 2069, 2070,  627,  626,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628, 1128,  629, 1132,  629,    0,  628,  629,
      629,  629,  629,  629,  629,  629,  626,  630,  630,  630,
      630,  630,  630,  630, 1136, 2073, 2075, 2073, 2075,  630,
     2087, 1128, 2087, 1132,    0,  631,  628,  631,  631,  631,
      631,  631,  631,  631,  632,  632,  632,  632,  632,  632,
      632, 1124, 1136,  633, 1124,  633,  632,  630,  633,  633,

      633,  633,  633,  633,  633,  634,  634,  634,  634,  634,
      634,  634, 1137, 1124, 1138,    0, 2094,  634, 2094, 1124,
        0,    0, 1124,  635,  632,  635,  635,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  636,  636, 1143,
     1137,  637, 1138,  637,  636,  634,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  638,  638,  638,
     1144, 2098, 1145, 2098, 2100,  638, 2100, 1143, 2102,    0,
     2102,  639,  636,  639,  639,  639,  639,  639,  639,  639,
      640,  640,  640,  640,  640,  640,  640, 1146, 1144,  641,
     1145,  641,  640,  638,  641,  641,  641,  641,  641,  641,

      641,  642,  642,  642,  642,  642,  642,  642, 1147, 2104,
     1148, 2104, 2105,  642, 2105, 1146, 2106,    0, 2106,  643,
      640,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644, 1149, 1147,  645, 1148,  645,
      644,  642,  645,  645,  645,  645,  645,  645,  645,  646,
      646,  646,  646,  646,  646,  646, 1151, 2112, 1154, 2112,
     2113,  646, 2113, 1149, 2126,    0, 2126,  647,  644,  647,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  648, 1155, 1151,  649, 1154,  649,  648,  646,
      649,  649,  649,  649,  649,  649,  649,  650,  650,  650,

      650,  650,  650,  650, 1156, 2128, 1157, 2128, 2133,  650,
     2133, 1155, 2139,    0, 2139,  651,  648,  651,  651,  651,
      651,  651,  651,  651,  652,  652,  652,  652,  652,  652,
      652, 1158, 1156,  653, 1157,  653,  652,  650,  653,  653,
      653,  653,  653,  653,  653,  654,  654,  654,  654,  654,
      654,  654, 1159, 2140, 2141, 2140, 2141,  654, 2160, 1158,
     2160,    0,    0,  655,  652,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656, 1160,
     1159,  657, 1160,  657,  656,  654,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,

     1161, 2163, 1162, 2163, 2171,  658, 2171, 1160,    0,    0,
     1160,  659,  656,  659,  659,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660, 1167, 1161,  661,
     1162,  661,  660,  658,  661,  661,  661,  661,  661,  661,
      661,  662,  662,  662,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  663,  663, 1167,    0, 1168, 1169,    0,
      660,  664,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  667,    0,  667, 1168, 1169,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,

      668,  669,  669,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  670,  670, 2176, 2179, 2176, 2179,  671,
      670,  671,  671,  671,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  672,  672, 1172,  673, 1173,  673,    0,
      672,  673,  673,  673,  673,  673,  673,  673,  670,  674,
      674,  674,  674,  674,  674,  674, 1174, 2181, 1175, 2181,
     2186,  674, 2186, 1172, 2192, 1173, 2192,  675,  672,  675,
      675,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  676,  676, 1176, 1174,  677, 1175,  677,  676,  674,
      677,  677,  677,  677,  677,  677,  677,  678,  678,  678,

      678,  678,  678,  678, 1177, 2195, 1178, 2195, 2198,  678,
     2198, 1176, 2200,    0, 2200,  679,  676,  679,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  680,
      680, 1185, 1177,  681, 1178,  681,  680,  678,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682, 1188, 2206, 1189, 2206, 2212,  682, 2212, 1185,
     2214,    0, 2214,  683,  680,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,  684,  684,  684,  684, 1190,
     1188,  685, 1189,  685,  684,  682,  685,  685,  685,  685,
      685,  685,  685,  694,  694,  694,  694,  694,  694,  694,

      695,  695,  695,  695,  695,  695,  695, 1190, 1191, 1192,
        0,    0,  684,  696,  696,  696,  696,  696,  696,  696,
      697,  697,  697,  697,  697,  697,  697,  700,  700,  700,
      700,  700,  700,  700,    0,    0, 1191, 1192,  701,  700,
      701,  701,  701,  701,  701,  701,  701,  702,  702,  702,
      702,  702,  702,  702, 1193,  703, 1194,  703, 1197,  702,
      703,  703,  703,  703,  703,  703,  703,  700,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705, 1193, 2215, 1194, 2215, 1197,  702,  706,  706,
      706,  706,  706,  706,  706,  707,  707,  707,  707,  707,

      707,  707,  708,  708,  708,  708,  708,  708,  708,  709,
      709,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      712,  712,  712,  712,  712,  712,  712,  713,  713,  713,
      713,  713,  713,  713, 2216, 2220, 2216, 2220,  714,  713,
      714,  714,  714,  714,  714,  714,  714,  715,  715,  715,
      715,  715,  715,  715, 1199,  716, 1200,  716,    0,  715,
      716,  716,  716,  716,  716,  716,  716,  713,  717,  717,
      717,  717,  717,  717,  717, 1201, 2222, 1202, 2222, 2226,
      717, 2226, 1199, 2228, 1200, 2228,  718,  715,  718,  718,

      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719, 1203, 1201,  720, 1202,  720,  719,  717,  720,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  721,  721, 1204, 2229, 1205, 2229, 2231,  721, 2231,
     1203, 2233,    0, 2233,  722,  719,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
     1206, 1204,  724, 1205,  724,  723,  721,  724,  724,  724,
      724,  724,  724,  724,  725,  725,  725,  725,  725,  725,
      725, 1207, 2240, 1210, 2240, 2242,  725, 2242, 1206, 2244,
        0, 2244,  726,  723,  726,  726,  726,  726,  726,  726,

      726,  727,  727,  727,  727,  727,  727,  727, 1217, 1207,
      728, 1210,  728,  727,  725,  728,  728,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  729,  729,  730,
      730,  730,  730,  730,  730,  730, 1217, 2247, 2251, 2247,
     2251,  727,  731,  731,  731,  731,  731,  731,  731, 2255,
     2256, 2255, 2256,  732,  731,  732,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733, 1218,
      734, 1219,  734,    0,  733,  734,  734,  734,  734,  734,
      734,  734,  731,  735,  735,  735,  735,  735,  735,  735,
     1222, 2258, 1225, 2258, 2264,  735, 2264, 1218, 2265, 1219,

     2265,  736,  733,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  737, 1226, 1222,  738,
     1225,  738,  737,  735,  738,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  739, 1227, 2266,
     1228, 2266, 2275,  739, 2275, 1226, 2283,    0, 2283,  740,
      737,  740,  740,  740,  740,  740,  740,  740,  741,  741,
      741,  741,  741,  741,  741, 1229, 1227,  742, 1228,  742,
      741,  739,  742,  742,  742,  742,  742,  742,  742,  743,
      743,  743,  743,  743,  743,  743, 1230, 2286, 1231, 2286,
     2297,  743, 2297, 1229, 2299,    0, 2299,  744,  741,  744,

      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  745, 1232, 1230,  746, 1231,  746,  745,  743,
      746,  746,  746,  746,  746,  746,  746,  747,  747,  747,
      747,  747,  747,  747, 1235, 2304, 1240, 2304, 2315,  747,
     2315, 1232, 2317,    0, 2317,  748,  745,  748,  748,  748,
      748,  748,  748,  748,  749,  749,  749,  749,  749,  749,
      749, 1241, 1235,  750, 1240,  750,  749,  747,  750,  750,
      750,  750,  750,  750,  750,  751,  751,  751,  751,  751,
      751,  751, 1242, 2320, 1243, 2320, 2322,  751, 2322, 1241,
     2330,    0, 2330,  752,  749,  752,  752,  752,  752,  752,

      752,  752,  753,  753,  753,  753,  753,  753,  753, 1244,
     1242,  754, 1243,  754,  753,  751,  754,  754,  754,  754,
      754,  754,  754,  755,  755,  755,  755,  755,  755,  755,
     1245, 2332, 1246, 2332, 2333,  755, 2333, 1244, 2334,    0,
     2334,  756,  753,  756,  756,  756,  756,  756,  756,  756,
      757,  757,  757,  757,  757,  757,  757, 1248, 1245,  758,
     1246,  758,  757,  755,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759, 1252, 2339,
     1254, 2339, 2341,  759, 2341, 1248, 2346,    0, 2346,  760,
      757,  760,  760,  760,  760,  760,  760,  760,  761,  761,

      761,  761,  761,  761,  761, 1256, 1252,  762, 1254,  762,
      761,  759,  762,  762,  762,  762,  762,  762,  762,  763,
      763,  763,  763,  763,  763,  763, 1257, 2348, 1258, 2348,
     2350,  763, 2350, 1256, 2352,    0, 2352,  764,  761,  764,
      764,  764,  764,  764,  764,  764,  765,  765,  765,  765,
      765,  765,  765, 1259, 1257,  766, 1258,  766,  765,  763,
      766,  766,  766,  766,  766,  766,  766,  767,  767,  767,
      767,  767,  767,  767, 1262, 2353, 2354, 2353, 2354,  767,
     2356, 1259, 2356,    0,    0,  768,  765,  768,  768,  768,
      768,  768,  768,  768,  769,  769,  769,  769,  769,  769,

      769, 1263, 1262,  770, 1263,  770,  769,  767,  770,  770,
      770,  770,  770,  770,  770,  771,  771,  771,  771,  771,
      771,  771,  772,  772,  772,  772,  772,  772,  772, 1263,
     1264, 1265, 1263,    0,  769,  773,  773,  773,  773,  773,
      773,  773,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,    0,    0, 1264, 1265,
      776,  775,  776,  776,  776,  776,  776,  776,  776,  777,
      777,  777,  777,  777,  777,  777, 1268,  778, 1261,  778,
        0,  777,  778,  778,  778,  778,  778,  778,  778,  775,
      780,  780,  780,  780,  780,  780,  780, 1261, 2358, 1269,

     2358, 2361,  780, 2361, 1268, 2362, 1261, 2362,  781,  777,
      781,  781,  781,  781,  781,  781,  781,  782,  782,  782,
      782,  782,  782,  782,    0,    0,  783, 1269,  783,  782,
      780,  783,  783,  783,  783,  783,  783,  783,  784,  784,
      784,  784,  784,  784,  784,  785, 2363,  785, 2363,    0,
      785,  785,  785,  785,  785,  785,  785,  782,  786,  786,
      786,  786,  786,  786,  786,  787, 2364,  787, 2364,    0,
      787,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  789, 2365,  789, 2365,    0,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,

      790,  790,  790,  791, 2367,  791, 2367,    0,  791,  791,
      791,  791,  791,  791,  791,  792,  792,  792,  792,  792,
      792,  792,  793,  793,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  794,  794,  795,  795,  795,  795,
      795,  795,  795,  796,  796,  796,  796,  796,  796,  796,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798,  799,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  807,  807,  807,  807,  807,
      807,  807,  808,  808,  808,  808,  808,  808,  808,  809,

      809,  809,  809,  809,  809,  809,  810,  810,  810,  810,
      810,  810,  810, 2369, 2370, 2369, 2370,  811,  810,  811,
      811,  811,  811,  811,  811,  811,  812,  812,  812,  812,
      812,  812,  812, 1270,  813, 1271,  813, 1273,  812,  813,
      813,  813,  813,  813,  813,  813,  810,  814,  814,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
      815, 1270, 2371, 1271, 2371, 1273,  812,  816,  816,  816,
      816,  816,  816,  816,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  820,  823,  823,
      823,  823,  823,  823,  823,  831,  831,  831,  831,  831,

      831,  831,  832,  832,  832,  832,  832,  832,  832,    0,
        0,    0,    0,  833,  832,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  834,  834,  834,  834,    0,
      835,    0,  835,    0,  834,  835,  835,  835,  835,  835,
      835,  835,  832,  836,  836,  836,  836,  836,  836,  836,
      837,  837,  837,    0,    0,  837,  837,  837,  837,  837,
      837,  837,  834,  838,  838,  838,  838,  838,  838,  838,
      839,    0,  839,    0, 1277,  839,  839,  839,  839,  839,
      839,  839,  840,    0,  840,    0,    0,  840,  840,  840,
      840,  840,  840,  840,  841,  841,  841,  841,  841,  841,

      841,  842, 1277,  842,    0,    0,  842,  842,  842,  842,
      842,  842,  842,  843,  843,  843,  843,  843,  843,  843,
      844,    0,  844,    0,    0,  844,  844,  844,  844,  844,
      844,  844,  845,  845,  845,  845,  845,  845,  845,  846,
        0,  846,    0,    0,  846,  846,  846,  846,  846,  846,
      846,  847,  847,  847,  847,  847,  847,  847,  848,    0,
      848,    0,    0,  848,  848,  848,  848,  848,  848,  848,
      849,  849,  849,  849,  849,  849,  849,  850,    0,  850,
        0,    0,  850,  850,  850,  850,  850,  850,  850,  851,
      851,  851,  851,  851,  851,  851,  852,  852,  852,    0,

     1281,  852,  852,  852,  852,  852,  852,  852,  853,  853,
      853,  853,  853,  853,  853,  854,    0,  854,    0, 1283,
      854,  854,  854,  854,  854,  854,  854,  855, 1281,  855,
        0,    0,  855,  855,  855,  855,  855,  855,  855,  856,
      856,  856,  856,  856,  856,  856,  857, 1283,  857,    0,
        0,  857,  857,  857,  857,  857,  857,  857,  858,  858,
      858,  858,  858,  858,  858,  859,    0,  859,    0,    0,
      859,  859,  859,  859,  859,  859,  859,  860,  860,  860,
      860,  860,  860,  860,  865,  865,  865,  865,  865,  865,
      865,  870,  870,  870,  870,  870,  870,  870,  871,  871,

      871,  871,  871,  871,  871,  874,  874,  874,  874,  874,
      874,  874,  875,  875,  875,  875,  875,  875,  875,  876,
      876,  876,  876,  876,  876,  876,  884, 1129,  884, 1129,
      884,  884,    0,    0,  884,  884,  884,  884,  884,  884,
      884,  931, 1184, 1212, 1247, 1129, 1284, 1267,  931, 1184,
     1212, 1267, 1267, 1267, 1247,  931,  962,  962,  962,  962,
      962,  962,  962,    0,    0,    0,    0,    0,    0,  931,
     1184, 1212, 1247, 1129, 1284, 1267,  931, 1184, 1212, 1267,
     1267, 1267, 1247,  931,  963,  963,  963,  963,  963,  963,
      963,  964,  964,  964,  964,  964,  964,  964,  965,  965,

      965,  965,  965,  965,  965,  966,  966,  966,  966,  966,
      966,  966,  967,  967,  967,  967,  967,  967,  967,  968,
      968,  968,  968,  968,  968,  968,  969,  969,  969,  969,
      969,  969,  969,  970,  970,  970,  970,  970,  970,  970,
      971,  971,  971,  971,  971,  971,  971,  972,  972,  972,
      972,  972,  972,  972,  973,  973,  973,  973,  973,  973,
      973,  974,  974,  974,  974,  974,  974,  974,  975,  975,
      975,  975,  975,  975,  975,  976,  976,  976,  976,  976,
      976,  976,  977,  977,  977,  977,  977,  977,  977,  978,
      978,  978,  978,  978,  978,  978,  979,  979,  979,  979,

      979,  979,  979,  980,  980,  980,  980,  980,  980,  980,
      981,  981,  981,  981,  981,  981,  981,  982,  982,  982,
      982,  982,  982,  982,  983,  983,  983,  983,  983,  983,
      983,  984,  984,  984,  984,  984,  984,  984,  985,  985,
      985,  985,  985,  985,  985,  986,  986,  986,  986,  986,
      986,  986,  987,  987,  987,  987,  987,  987,  987,  988,
      988,  988,  988,  988,  988,  988,  989,  989,  989,  989,
      989,  989,  989,  990,  990,  990,  990,  990,  990,  990,
      991,  991,  991,  991,  991,  991,  991,  992,  992,  992,
      992,  992,  992,  992,  993,  993,  993,  993,  993,  993,

      993,  994,  994,  994,  994,  994,  994,  994,  995,  995,
      995,  995,  995,  995,  995,  996,  996,  996,  996,  996,
      996,  996,  997,  997,  997,  997,  997,  997,  997,  998,
      998,  998,  998,  998,  998,  998,  999,  999,  999,  999,
      999,  999,  999, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1008,

     1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1027, 1027, 1027,    0, 1286, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1029, 1029, 1029,    0,    0, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1040, 1286, 1103, 1040, 1103, 1126,    0,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1287, 1104,
     1040, 1126, 1104, 1104, 1104, 1104, 1104, 1104, 1104,    0,
        0, 1040,    0,    0, 1040,    0, 1126, 1180, 1180, 1180,

     1180, 1180, 1180, 1180,    0, 1181, 1287, 1181, 1040, 1126,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1183, 1211, 1183, 1288, 1290, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1211, 1272, 1211, 1211,
     1211, 1272, 1272, 1272, 1282, 1274, 1282, 1291, 1292, 1293,
     1294, 1295, 1296, 1211, 1274, 1288, 1290, 1282, 1297, 1305,
     1291, 1307, 1282, 1308, 1211, 1272, 1211, 1211, 1211, 1272,
     1272, 1272, 1309, 1274, 1310, 1291, 1292, 1293, 1294, 1295,
     1296, 1311, 1274, 1312, 1313, 1314, 1297, 1305, 1291, 1307,
     1282, 1308, 1316, 1319, 1321, 1322, 1323, 1325, 1326, 1327,

     1309, 1328, 1310, 1331, 1332, 1334, 1335, 1336, 1338, 1311,
     1339, 1312, 1313, 1314,    0,    0, 1341, 1342, 1343, 1344,
     1316, 1319, 1321, 1322, 1323, 1325, 1326, 1327, 1343, 1328,
     1345, 1331, 1332, 1334, 1335, 1336, 1338, 1340, 1339, 1340,
     1346, 1351, 1340, 1340, 1341, 1342, 1343, 1344, 1353, 1354,
     1340, 1359, 1360, 1361, 1369, 1373, 1343, 1374, 1345, 1375,
     1376, 1377, 1378, 1380, 1381, 1340, 1382, 1340, 1346, 1351,
     1340, 1340, 1383, 1384, 1385, 1386, 1353, 1354, 1340, 1359,
     1360, 1361, 1369, 1373, 1387, 1374, 1388, 1375, 1376, 1377,
     1378, 1380, 1381, 1396, 1382, 1397, 1400, 1405, 1407, 1408,

     1383, 1384, 1385, 1386, 1409, 1410, 1411, 1412, 1413, 1414,
     1417, 1418, 1387, 1421, 1388, 1422, 1423, 1425, 1427, 1428,
     1429, 1396, 1424, 1397, 1400, 1405, 1407, 1408, 1430, 1424,
        0, 1433, 1409, 1410, 1411, 1412, 1413, 1414, 1417, 1418,
     1426, 1421, 1426, 1422, 1423, 1425, 1427, 1428, 1429, 1431,
     1424, 1434, 1435, 1426, 1447, 1448, 1430, 1424, 1426, 1433,
     1449, 1459, 1462, 1471, 1475, 1431, 1476, 1477, 1478, 1479,
     1481, 1482, 1483, 1484, 1485,    0, 1486, 1431, 1487, 1434,
     1435, 1488, 1447, 1448, 1489, 1480, 1426, 1480, 1449, 1459,
     1462, 1471, 1475, 1431, 1476, 1477, 1478, 1479, 1481, 1482,

     1483, 1484, 1485, 1480, 1486, 1490, 1487, 1495, 1496, 1488,
     1497, 1498, 1489, 1507, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1522, 1514, 1523, 1524, 1525,
     1526, 1480, 1527, 1490, 1531, 1495, 1496, 1532, 1497, 1498,
     1533, 1507, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1522, 1514, 1523, 1524, 1525, 1526, 1534,
     1527, 1535, 1531, 1536, 1537, 1532, 1540, 1541, 1533, 1542,
     1553, 1554, 1555, 1567, 1572, 1574, 1577, 1578, 1581, 1582,
     1583, 1584, 1586, 1587, 1590, 1591, 1595, 1534, 1596, 1535,
     1602, 1536, 1537, 1604, 1540, 1541, 1605, 1542, 1553, 1554,

     1555, 1567, 1572, 1574, 1577, 1578, 1581, 1582, 1583, 1584,
     1586, 1587, 1590, 1591, 1595, 1607, 1596, 1608, 1602, 1609,
     1610, 1604, 1611, 1612, 1605, 1613, 1614, 1615, 1618, 1619,
     1620, 1621, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633,
     1634, 1635, 1639, 1607, 1640, 1608, 1641, 1609, 1610, 1647,
     1611, 1612, 1648, 1613, 1614, 1615, 1618, 1619, 1620, 1621,
     1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633, 1634, 1635,
     1639, 1649, 1640, 1650, 1641, 1651, 1652, 1647, 1653, 1655,
     1648, 1656, 1657, 1658, 1660, 1659, 1661, 1655, 1659, 1662,
     1663, 1665, 1662, 1663, 1669, 1670, 1671, 1673,    0, 1649,

     1676, 1650, 1679, 1651, 1652, 1680, 1653, 1655, 1682, 1656,
     1657, 1658, 1660, 1659, 1661, 1655, 1659, 1662, 1663, 1665,
     1662, 1663, 1669, 1670, 1671, 1673, 1675, 1683, 1676, 1685,
     1679, 1675, 1686, 1680, 1687, 1688, 1682, 1689, 1690, 1692,
     1675, 1693, 1685, 1694, 1695, 1696, 1697, 1699, 1700, 1701,
     1702, 1703, 1704, 1706, 1675, 1683, 1707, 1685, 1709, 1675,
     1686, 1710, 1687, 1688, 1712, 1689, 1690, 1692, 1675, 1693,
     1685, 1694, 1695, 1696, 1697, 1699, 1700, 1701, 1702, 1703,
     1704, 1706, 1713, 1714, 1707, 1715, 1709, 1717, 1718, 1710,
     1719, 1720, 1712, 1721, 1722, 1723, 1724, 1725, 1728, 1730,

     1731, 1732, 1735, 1738, 1739, 1740, 1746, 1747, 1740, 1750,
     1713, 1714, 1752, 1715, 1753, 1717, 1718, 1754, 1719, 1720,
     1755, 1721, 1722, 1723, 1724, 1725, 1728, 1730, 1731, 1732,
     1735, 1738, 1739, 1740, 1746, 1747, 1740, 1750, 1756, 1757,
     1752, 1758, 1753, 1759, 1760, 1754, 1762, 1763, 1755, 1764,
     1765, 1768, 1769, 1771, 1772, 1774, 1778, 1779, 1782, 1788,
     1782, 1789, 1790, 1791, 1792, 1793, 1756, 1757, 1794, 1758,
     1795, 1759, 1760, 1796, 1762, 1763, 1782, 1764, 1765, 1768,
     1769, 1771, 1772, 1774, 1778, 1779, 1799, 1788, 1800, 1789,
     1790, 1791, 1792, 1793, 1801, 1803, 1794, 1806, 1795, 1807,

     1808, 1796, 1813, 1814, 1782, 1816, 1819, 1820, 1821, 1822,
     1825, 1826, 1828, 1829, 1799, 1830, 1800, 1831, 1832, 1834,
     1835, 1838, 1801, 1803, 1839, 1806, 1842, 1807, 1808, 1843,
     1813, 1814, 1845, 1816, 1819, 1820, 1821, 1822, 1825, 1826,
     1828, 1829, 1846, 1830, 1850, 1831, 1832, 1834, 1835, 1838,
     1858, 1859, 1839, 1861, 1842, 1862, 1863, 1843, 1865, 1869,
     1845, 1870, 1871, 1873, 1874, 1875, 1876, 1878, 1879, 1882,
     1846, 1883, 1850, 1884, 1885, 1886, 1886, 1886, 1858, 1859,
     1889, 1861, 1890, 1862, 1863, 1893, 1865, 1869, 1895, 1870,
     1871, 1873, 1874, 1875, 1876, 1878, 1879, 1882, 1896, 1883,

     1897, 1884, 1885, 1886, 1886, 1886, 1898, 1899, 1889, 1902,
     1890, 1902, 1905, 1893, 1906, 1907, 1895, 1909, 1904, 1913,
     1904, 1915, 1916, 1917, 1919, 1921, 1896, 1902, 1897,    0,
     1925, 1904, 1904, 1928, 1898, 1899, 1904, 1929, 1930, 1924,
     1905, 1924, 1906, 1907, 1926, 1909, 1926, 1913, 1931, 1915,
     1916, 1917, 1919, 1921, 1932, 1902, 1932, 1924, 1925, 1936,
     1937, 1928, 1926, 1938, 1939, 1929, 1930, 1934, 1940, 1934,
     1940, 1941, 1932, 1941, 1945, 1942, 1931, 1942, 1944, 1947,
     1944, 1947, 1948, 1952, 1948, 1934, 1940, 1936, 1937, 1941,
     1953, 1938, 1939, 1942, 1954, 1964, 1944, 1947,    0, 1950,

     1948, 1950, 1945, 1951,    0, 1951, 1955, 1957, 1955, 1957,
     1959, 1952, 1959, 1960, 1961, 1960, 1961, 1950, 1953, 1965,
     1966, 1951, 1954, 1964, 1955, 1957, 1962, 1967, 1962, 1968,
     1969, 1960, 1961, 1970, 1971, 1972, 1973, 1974, 1959, 1975,
     1959, 1976, 1981, 1983, 1962, 1985, 1986, 1965, 1966, 1951,
     1977, 1989, 1977, 1991, 1979, 1967, 1979, 1968, 1969, 1992,
     1993, 1970, 1971, 1972, 1973, 1974, 1994, 1975, 1977, 1976,
     1981, 1983, 1979, 1985, 1986, 1987,    0, 1987, 1995, 1989,
     1995, 1991, 1997, 1999, 1997, 1999,    0, 1992, 1993, 2001,
     2003, 2001, 2003, 1987, 1994, 2004, 1995, 2004, 2017, 2018,

     1997, 1999, 2007, 2009, 2007, 2009,    0, 2001, 2003, 2011,
     2011, 2011, 2012, 2004, 2012, 2013, 2019, 2013, 2019, 2024,
     2007, 2009, 2021, 2025, 2021, 2025, 2017, 2018, 2027, 2029,
     2012, 2030,    0, 2013, 2019, 2031, 2032, 2011, 2011, 2011,
     2021, 2025, 2026, 2033, 2026, 2034, 2035, 2024, 2036, 2039,
     2040, 2039, 2041, 2042, 2043, 2045, 2027, 2029, 2047, 2030,
     2026, 2049,    0, 2031, 2032,    0, 2046, 2039, 2046,    0,
     2054, 2033, 2054, 2034, 2035, 2059, 2036, 2059, 2040, 2067,
     2041, 2042, 2043, 2045, 2046, 2060, 2047, 2060, 2054, 2049,
     2061, 2068, 2061, 2059, 2062, 2064, 2062, 2064, 2066, 2071,

     2072, 2066, 2072, 2060, 2074, 2076, 2074, 2067, 2061, 2078,
     2079, 2082, 2062, 2064, 2083, 2077, 2084, 2085, 2072, 2068,
     2089, 2090, 2074, 2077, 2091, 2077, 2066, 2071, 2086, 2066,
     2086, 2092, 2088, 2076, 2088, 2095, 2097, 2078, 2079, 2082,
        0,    0, 2083, 2077, 2084, 2085, 2086, 2107, 2089, 2090,
     2088, 2077, 2091, 2077, 2093, 2096, 2093,    0, 2108, 2092,
     2096,    0, 2109, 2095, 2097, 2110, 2111, 2099, 2096, 2099,
     2114, 2101, 2093, 2101, 2103, 2107, 2103, 2115, 2116, 2117,
     2118, 2119, 2121, 2096, 2122, 2099, 2108, 2120, 2096, 2101,
     2109, 2123, 2103, 2110, 2111, 2124, 2096, 2120, 2114, 2125,

     2127, 2129, 2127, 2131,    0, 2115, 2116, 2117, 2118, 2119,
     2121, 2132, 2122, 2135, 2130, 2120, 2130, 2136, 2127, 2123,
     2137, 2142, 2138, 2124, 2138, 2120, 2143, 2125, 2144, 2129,
     2144, 2131, 2130, 2145, 2146, 2147, 2146, 2147, 2148, 2132,
     2138, 2135, 2149, 2150, 2152, 2136, 2144, 2153, 2137, 2142,
     2154, 2155, 2146, 2147, 2143, 2151, 2156, 2151, 2156, 2157,
     2159, 2145, 2158, 2161, 2158, 2162, 2148, 2162, 2138, 2165,
     2149, 2150, 2152, 2151, 2156, 2153, 2166, 2167, 2154, 2155,
     2158, 2168, 2164, 2162, 2164, 2169, 2173, 2157, 2159, 2174,
     2170, 2161, 2170, 2172, 2172, 2172,    0, 2165,    0, 2182,

     2164, 2175, 2183, 2175, 2166, 2167,    0, 2184, 2170, 2168,
     2177, 2188, 2177, 2169, 2173, 2189, 2178, 2174, 2178, 2175,
     2190, 2172, 2172, 2172, 2180,    0, 2180, 2182, 2177, 2185,
     2183, 2185, 2197, 2201, 2178, 2184, 2187, 2202, 2187, 2188,
        0, 2203, 2180, 2189, 2191, 2204, 2191, 2185, 2190, 2193,
     2194, 2193, 2194, 2196, 2187, 2196, 2199, 2205, 2199, 2210,
     2197, 2201, 2191, 2211, 2207, 2202, 2207, 2193, 2194, 2203,
     2208, 2196, 2208, 2204, 2199, 2209, 2213, 2209, 2213, 2218,
     2223, 2221, 2207, 2221, 2224, 2205, 2225, 2210, 2208, 2234,
     2235, 2211, 2236, 2209, 2213, 2227, 2237, 2227, 2230, 2221,

     2230, 2232, 2238, 2232, 2239, 2245, 2239, 2218, 2223, 2241,
     2246, 2241, 2224, 2227, 2225, 2248, 2230, 2234, 2235, 2232,
     2236, 2243, 2239, 2243, 2237, 2249, 2250, 2241, 2254, 2257,
     2238, 2257, 2259, 2245, 2260, 2262, 2263, 2267, 2246, 2243,
     2268, 2269, 2268, 2248, 2271, 2272, 2273, 2257, 2270, 2274,
     2270, 2276, 2277, 2249, 2250, 2278, 2254, 2279, 2268, 2280,
     2259, 2281, 2260, 2262, 2263, 2267, 2270, 2284, 2282, 2269,
     2282, 2287, 2271, 2272, 2273, 2288, 2285, 2274, 2285, 2276,
     2277, 2289, 2290, 2278, 2290, 2279, 2282, 2280, 2291, 2281,
     2292, 2293, 2294, 2295, 2285, 2284, 2296, 2298, 2300, 2287,

     2290, 2301, 2302, 2288, 2303, 2305, 2303, 2305, 2309, 2289,
     2310, 2311, 2312, 2313, 2314, 2306, 2291, 2306, 2292, 2293,
     2294, 2295, 2303, 2305, 2296, 2298, 2300,    0, 2306, 2301,
     2302,    0, 2307, 2306, 2307, 2316, 2309, 2316, 2310, 2311,
     2312, 2313, 2314, 2318, 2319, 2318, 2319, 2321,    0, 2321,
     2307, 2326, 2327, 2316, 2323, 2323, 2323, 2324, 2325, 2324,
     2325, 2318, 2319, 2328, 2329, 2321,    0, 2331, 2335, 2331,
     2335, 2336, 2337, 2336, 2337, 2324, 2325, 2344, 2345, 2326,
     2327,    0, 2323, 2323, 2323, 2331, 2335,    0,    0, 2336,
     2337, 2328, 2329, 2338, 2340, 2338, 2340, 2342, 2343, 2342,

     2343, 2347, 2349, 2347, 2349, 2344, 2345, 2351, 2355, 2351,
     2355, 2338, 2340,    0,    0, 2342, 2343,    0,    0, 2347,
     2349, 2357, 2359, 2357, 2359, 2351, 2355, 2360, 2366, 2360,
     2366, 2368,    0, 2368,    0,    0,    0,    0,    0, 2357,
     2359,    0,    0,    0,    0, 2360, 2366,    0,    0, 2368,
     2373, 2373, 2373, 2373, 2373, 2374, 2374, 2374, 2374, 2374,
     2375, 2375, 2375, 2375, 2375, 2376, 2376, 2376, 2376, 2376,
     2377, 2377, 2377, 2377, 2377, 2378, 2378, 2378, 2378, 2378,
     2379, 2379, 2379, 2379, 2379, 2380, 2380, 2380, 2380, 2380,
     2381, 2381, 2381, 2381, 2381, 2382, 2382, 2382, 2382, 2382,

     2383, 2383, 2383, 2383, 2383, 2384, 2384, 2384, 2384, 2384,
     2385, 2385, 2385, 2385, 2385, 2386, 2386, 2386, 2386, 2386,
     2387, 2387, 2387, 2387, 2387, 2388, 2388, 2388, 2388, 2388,
     2389, 2389, 2389, 2389, 2389, 2390, 2390, 2390, 2390, 2390,
     2391, 2391, 2391, 2391, 2391, 2392, 2392, 2392, 2392, 2392,
     2393, 2393, 2393, 2393, 2393, 2394, 2394, 2394, 2394, 2394,
     2395, 2395, 2395, 2395, 2395, 2396, 2396, 2396, 2396, 2396,
     2397, 2397, 2397, 2397, 2397, 2398, 2398, 2398, 2398, 2398,
     2399, 2399, 2399, 2399, 2399, 2400, 2400, 2400, 2400, 2400,
     2401, 2401, 2401, 2401, 2401, 2402, 2402, 2402, 2402, 2402,

     2403, 2403, 2403, 2403, 2403, 2404, 2404, 2404, 2404, 2404,
     2405, 2405, 2405, 2405, 2405, 2406, 2406, 2406, 2406, 2406,
     2407, 2407, 2407, 2407, 2407, 2408, 2408, 2408, 2408, 2408,
     2409, 2409, 2409, 2409, 2409, 2410, 2410, 2410, 2410, 2410,
     2411, 2411, 2411, 2411, 2411, 2412, 2412, 2412, 2412, 2412,
     2413, 2413, 2413, 2413, 2413, 2414, 2414, 2415, 2415, 2416,
     2416, 2417, 2417, 2418, 2418, 2419, 2419, 2420, 2420, 2421,
     2421, 2423, 2423, 2424, 2424, 2425, 2425, 2426, 2426, 2427,
     2427, 2428, 2428, 2429, 2429, 2431, 2431, 2449, 2449, 2450,
     2450, 2451, 2451, 2452, 2452,    0, 2452, 2452, 2453,    0,

        0, 2453, 2453, 2454, 2454, 2455, 2455, 2456, 2456, 2457,
     2457, 2458, 2458, 2459, 2459, 2460, 2460, 2461, 2461, 2463,
     2463, 2464, 2464, 2465, 2465, 2466, 2466, 2467, 2467, 2468,
     2468, 2469, 2469, 2471, 2471, 2489, 2489, 2490, 2490, 2491,
     2491, 2492, 2492,    0, 2492, 2492, 2493,    0,    0, 2493,
     2493, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,

     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2372, 2372
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "../cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 23 "../cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}




















































































































































#line 4090 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define ASOVERA 115
#define NUMTHREADS 116
#define SRCMOM 117
#define SRCMOMX 118
#define SRCMOMY 119
#define SRCMOMZ 120
#define SNKMOMX 121
#define SNKMOMY 122
#define SNKMOMZ 123
#define SEQSRCMOM 124
#define SEQSRCMOMX 125
#define SEQSRCMOMY 126
#define SEQSRCMOMZ 127
#define CPUPREC 128
#define GPUPREC 129
#define GPUPRECSLOPPY 130
#define INVERTERTYPE 131
#define MMSID 132
#define CHKINVERSION 133
#define LAPHSTIMEPROJTYPE 134
#define LAPHSSPINPROJTYPE 135
#define LAPHSEVECPROJTYPE 136
#define LAPHSEVECNUMBER 137
#define LAPHSRNDVECNUMBER 138
#define LAPHSEVECPATHPRFX 139
#define LAPHSEVECFILEPRFX 140
#define LAPHS_TIME_SRC_NUMBER 141
#define LAPHS_SPIN_SRC_NUMBER 142
#define LAPHS_EVEC_SRC_NUMBER 143
#define LAPHS_PERAMBULATOR_PATH_PREFIX 144
#define LAPHS_PERAMBULATOR_FILE_PREFIX 145
#define COMMENT 146
#define ERROR 147
#define M_M_TWOPT 148

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

int cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 207 "../cvc_libwrapper/read_input_parser_cvc.l"

#line 4425 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2373 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2372 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 208 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 209 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 210 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 211 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 212 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 213 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 214 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 215 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 216 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 217 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 218 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 219 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 220 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 221 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 222 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 223 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 224 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 225 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 226 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 227 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 228 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 229 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 230 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 231 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 232 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 233 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 234 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 235 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 236 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 237 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 238 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 239 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 240 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 241 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 242 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 243 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 244 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 245 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 246 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 247 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 248 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 249 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 250 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 251 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 252 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 253 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 254 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 255 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 256 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 257 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 258 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 259 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 260 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 261 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 262 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 263 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 264 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 265 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 266 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 267 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 268 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 269 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 270 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 271 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 272 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 273 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 274 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 275 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 276 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 277 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 278 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 279 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 280 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 281 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 282 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 283 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 285 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 286 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 287 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 288 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 290 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 291 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 294 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 295 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 296 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 297 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 298 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 299 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 300 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 301 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 302 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 303 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 304 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 305 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 306 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 307 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 308 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 309 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 310 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 311 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 312 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 313 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 314 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 315 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 316 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 317 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 318 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 319 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 321 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 322 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 324 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 325 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 326 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 328 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 329 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 330 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 331 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 332 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 333 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 334 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 335 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 336 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 337 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 338 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 339 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 340 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 341 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 342 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 343 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 344 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 345 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 346 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 347 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 349 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 350 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 351 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 352 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 353 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 354 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 355 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 356 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 357 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 358 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 360 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 361 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 363 "../cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M_M_TWOPT);
	YY_BREAK
/* start namespace inclusion here */
case 147:
YY_RULE_SETUP
#line 368 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 372 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 376 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 380 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 384 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 388 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 392 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 396 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 400 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 404 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 408 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 412 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 416 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 420 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 425 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 430 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 434 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 438 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 442 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 446 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 450 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 454 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 458 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 462 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 466 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 470 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 474 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 478 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 482 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 486 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 491 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 496 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 501 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 505 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 509 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 513 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 517 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 521 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 525 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 529 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 533 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 541 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 559 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 563 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 567 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 571 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 575 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 579 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 583 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 587 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 591 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 595 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 599 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 603 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 607 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 611 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 615 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 619 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 623 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 627 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 631 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 635 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 639 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 643 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 647 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 651 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 655 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 659 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 663 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 667 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 671 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 675 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 679 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 683 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 688 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 692 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 696 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 705 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 709 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 713 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 718 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 727 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 737 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 741 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 745 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 749 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 753 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 757 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 761 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 766 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 772 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 778 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 784 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 790 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 796 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 801 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 805 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 810 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 815 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 820 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 824 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 832 "../cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 837 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 842 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 846 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 856 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 864 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 872 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 880 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 888 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 897 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 906 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 915 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 923 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 927 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 931 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 935 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 940 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 945 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 950 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 956 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 964 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 969 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 974 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 979 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 984 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 989 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 995 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1002 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1012 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1022 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1032 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1036 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1040 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1049 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1054 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1059 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1065 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1070 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1075 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1080 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1085 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1090 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1095 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1101 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1106 "../cvc_libwrapper/read_input_parser_cvc.l"
{

  if ( cvc::g_m_m_2pt_num == MAX_M_M_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many m_m_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting m_m_2pt number %d\n", cvc::g_m_m_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gi),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+2,
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gf),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+2
  );

  cvc::g_m_m_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] m_m_2pt no. %d set to %s\n", cvc::g_m_m_2pt_num, cvc_text);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1133 "../cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1137 "../cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1141 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 1145 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1150 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1153 "../cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 299:
YY_RULE_SETUP
#line 1160 "../cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 6596 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
case YY_STATE_EOF(M_M_TWOPT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2373 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2373 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2372);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
int cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1160 "../cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

