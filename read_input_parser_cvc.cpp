
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,int len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 301
#define YY_END_OF_BUFFER 302
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2388] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  297,  297,  300,  300,    0,    0,

      302,  299,  299,  298,  296,  295,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  148,  151,  152,  153,
      149,  150,  164,  299,  154,  299,  299,  155,  299,  299,
      157,  299,  299,  158,  299,  299,  159,  299,  299,  156,
      299,  299,  160,  299,  299,  161,  299,  299,  162,  299,
      169,  170,  172,  173,  174,  299,  163,  186,  299,  165,
      299,  299,  166,  299,  299,  167,  299,  299,  168,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  183,  184,
      185,  187,  188,  299,  299,  190,  299,  192,  171,  193,

      194,  195,  198,  199,  200,  201,  299,  196,  299,  299,
      197,  299,  299,  202,  299,  299,  203,  299,  204,  205,
      299,  206,  299,  299,  207,  299,  299,  208,  299,  299,
      209,  299,  299,  210,  299,  299,  211,  299,  299,  212,
      299,  299,  213,  299,  299,  214,  299,  299,  215,  299,
      216,  217,  219,  218,  299,  220,  299,  299,  299,  222,
      299,  223,  299,  224,  299,  225,  299,  226,  299,  227,
      228,  229,  230,  231,  232,  233,  234,  235,  236,  299,
      299,  299,  299,  299,  242,  243,  244,  299,  191,  299,
      245,  246,  247,  248,  299,  299,  250,  252,  260,  261,

      253,  254,  255,  256,  257,  258,  259,  262,  299,  263,
      299,  264,  299,  299,  299,  265,  299,  266,  299,  267,
      299,  299,  299,  269,  299,  270,  299,  271,  299,  299,
      299,  273,  299,  274,  299,  275,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  299,  299,  290,
      291,  292,  299,  297,  297,  296,  295,  299,  299,  296,
      295,  299,    0,  296,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0,  148,  151,  152,  153,  149,  150,  164,  154,
        0,  154,    0,  155,    0,  155,    0,  157,    0,  157,
        0,  158,    0,  158,    0,  159,    0,  159,    0,  156,
        0,  156,    0,  160,    0,  160,    0,  161,    0,  161,
        0,  162,    0,  162,    0,  169,  170,  172,  173,  174,
      163,    0,  186,  165,    0,  165,    0,  166,    0,  166,
        0,  167,    0,  167,    0,  168,    0,  168,    0,  175,
      176,  177,  178,  179,  180,  181,  182,  183,  184,  185,

      187,  188,  189,  190,    0,  190,    0,  192,  171,  193,
      194,  195,  198,  199,  200,  201,  196,    0,  196,    0,
      197,    0,  197,    0,  202,    0,  202,    0,  203,    0,
      203,    0,  204,  205,  206,    0,  206,    0,  207,    0,
      207,    0,  208,    0,  208,    0,  209,    0,  209,    0,
      210,    0,  210,    0,  211,    0,  211,    0,  212,    0,
      212,    0,  213,    0,  213,    0,  214,    0,  214,    0,
      215,    0,  215,    0,  216,  217,  219,  218,  220,    0,
      220,    0,  221,  222,    0,  222,    0,  223,  224,    0,
      225,    0,  226,    0,  227,    0,  228,  229,  230,  231,

      232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
      242,  243,  244,  191,    0,  191,    0,  245,  246,  247,
      248,  249,  251,  250,  252,  260,  261,  253,  254,  255,
      256,  257,  258,  259,  262,  263,    0,  263,    0,  264,
        0,    0,    0,  265,    0,  266,    0,  267,    0,    0,
        0,    0,  269,    0,  270,    0,  271,    0,    0,    0,
        0,  273,    0,  274,    0,  275,    0,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  297,  297,  296,  300,  300,  296,
      294,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    3,    2,    0,    0,    0,    4,    0,    5,    0,
        6,    0,   12,    0,   11,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    0,  154,
        0,  155,    0,  157,    0,  158,    0,  159,    0,  156,
        0,  160,    0,  161,    0,  162,    0,  165,    0,  166,
        0,  167,    0,  168,    0,  190,    0,  196,    0,  197,

        0,  202,    0,  203,    0,  206,    0,  207,    0,  208,
        0,  209,    0,  210,    0,  211,    0,  212,    0,  213,
        0,  214,    0,  215,    0,  220,    0,  222,    0,  191,
        0,  263,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    4,    5,    6,   12,   11,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   58,    0,   57,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,   55,    0,    0,    0,    0,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      268,    0,  272,    0,  276,    0,    0,   58,   57,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,   61,    0,   10,    0,    0,
        0,    0,   15,    0,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   22,    0,    0,   70,    0,
       73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,   55,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      133,   10,    0,    0,    0,   15,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,   70,   73,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,   23,    0,    0,    0,    0,
        0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      133,    0,    9,    0,    8,    0,  147,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   24,    0,   25,    0,   26,    0,   27,    0,    0,
        0,    0,    0,   51,    0,   52,    0,   53,    0,   54,
        0,    0,    0,    0,    0,   62,    0,   63,    0,   64,
        0,   65,    0,    0,   20,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    9,    8,  147,    0,    0,    0,    0,    0,
        0,   86,    0,   87,    0,   88,    0,   89,    0,    0,
       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  114,    0,    0,    0,    0,    0,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,    0,   72,    0,   74,    0,  115,
       24,   25,   26,   27,    0,    0,    0,    0,   49,   51,
       52,   53,   54,    0,    0,   60,    0,   59,    0,   62,
       63,   64,   65,    0,   20,    0,    0,    0,    0,    0,
        0,   48,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   44,    0,    0,    0,    0,   86,
       87,   88,   89,    0,   71,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,   17,    0,    0,    0,    0,
        0,    0,    0,   37,    0,    0,    0,   72,   74,  115,
        0,    0,    0,   49,    0,   50,   60,   59,    0,    0,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   44,    0,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   90,    0,
       40,    0,    0,    0,    0,  116,    0,    0,   35,    0,
        0,    0,    0,    0,   68,    0,   67,    0,    0,    0,
      108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   21,    0,
        0,    0,   97,    0,    0,    0,    0,    0,   75,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   90,    0,
        0,    0,    0,  116,    0,   35,    0,    0,    0,    0,
        0,   66,   68,   67,    0,    0,  108,    0,    0,  102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,    0,    0,    0,  107,    0,
        0,    0,  129,    0,    0,   21,    0,    0,   97,    0,
      130,    0,    0,   47,    0,   46,    0,  132,   75,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
        0,    0,  102,    0,    0,    0,    0,    0,  121,    0,

        0,   92,    0,    0,    0,   45,    0,    0,    0,    0,
        0,    0,    0,  107,    0,    0,  129,    0,    0,    0,
        0,  130,    0,   47,   46,  132,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,    0,  121,    0,    0,    0,   92,    0,    0,
       45,    0,    0,  103,    0,    0,    0,    0,    0,    0,
      134,    0,   98,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   83,    0,   84,    0,   34,    0,    0,    0,

        0,    0,  110,    0,   43,    0,    0,    0,    0,    0,
      122,    0,  123,    0,  124,    0,   93,    0,    0,   82,
      103,    0,   38,    0,  117,    0,    0,    0,    0,  134,
       98,    0,    0,    0,   29,    0,   30,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   83,   84,    0,    0,    0,    0,    0,  110,    0,
        0,    0,    0,    0,  122,  123,  124,   93,    0,   42,
       82,   38,  117,    0,    0,    0,    0,   76,    0,  109,
        0,    0,    0,   29,   30,    0,    0,  101,    0,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   85,    0,    0,    0,    0,    0,    0,   94,    0,
        0,    0,   42,    0,  118,    0,  119,    0,  120,   76,
      109,    0,    0,    0,    0,    0,  101,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,    0,  104,    0,    0,    0,    0,   94,    0,    0,
        0,    0,    0,  118,  119,  120,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  104,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,  128,    0,    0,    0,    0,
       99,    0,    0,   33,    0,  131,    0,    0,    0,    0,

      137,    0,    0,    0,    0,    0,  136,    0,    0,  135,
        0,    0,   95,    0,  106,    0,    0,    0,    0,    0,
      128,    0,    0,    0,    0,    0,   99,    0,  100,   33,
      131,    0,    0,    0,  137,    0,  144,    0,    0,    0,
      136,    0,  143,  135,    0,  142,    0,  106,    0,    0,
        0,    0,    0,    0,  125,    0,  126,    0,  127,    0,
        0,  100,    0,    0,    0,  144,    0,    0,    0,  143,
      142,    0,  105,    0,    0,    0,    0,    0,  125,  126,
      127,    0,    0,    0,    0,    0,    0,    0,    0,  105,
        0,    0,    0,    0,    0,    0,    0,  112,    0,    0,

      138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,    0,  138,    0,    0,    0,    0,  139,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  139,
        0,  111,    0,    0,   31,    0,   81,    0,    0,    0,
        0,    0,    0,    0,  111,    0,   32,   31,   81,    0,
        0,    0,    0,   77,    0,  113,    0,    0,    0,    0,
       32,    0,   78,    0,   79,    0,   80,   77,  113,    0,
      141,    0,  140,    0,    0,   78,   79,   80,  141,  140,
        0,  146,    0,  145,  146,  145,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    7,
        7,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,    1,    7,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   47,   47,   47,   48,   47,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[2509] =
    {   0,
        0,    6,   79,   97,  115,  133,  151,  169,  187,  205,
      223,  241,  259,  277,  295,  313,  331,  349,  367,  385,
      403,  421,  439,  457,  475,  493,  511,  529,  547,  565,
      583,  601,  619,  637,  655,  673,  691,  709,  727,  745,
      763,  781,  799,  817,  835,  853,  871,  889,  907,  925,
      943,  961,  979,  997, 1015, 1033, 1052, 1061, 1076, 1085,
     1108, 1118, 1133, 1142, 1165, 1175, 1190, 1199, 1222, 1232,
     1247, 1256, 1268, 1293, 1311, 1329, 1347, 1365, 1383, 1401,
     1420, 1467, 1435, 1444, 1513, 1531, 1482, 1549, 1567, 1585,
     1603, 1621, 1639, 1657, 1675, 1693, 1711, 1729, 1747, 1765,

     1783, 1801, 1819, 1837, 1855, 1873, 1891, 1909, 1927, 1945,
     1963, 1981, 1999, 2017, 2035, 2053, 2071, 2089, 2107, 2125,
     2143, 2161, 2179, 2197, 2215, 2233, 2251, 2269, 2287, 2305,
     2323, 2341, 2359, 2377, 2395, 2413, 2431, 2449, 2467, 2485,
     2503, 2521, 2539, 2557, 2575, 2593, 2612, 2621, 2667, 2685,
     2631, 2703, 2721, 2739, 2757, 2775, 2793, 2811, 2829, 2847,
     2865, 2883, 2901, 2919, 2937, 2955, 2973, 2991, 3009, 3027,
     3045, 3063, 3081, 3099, 3117, 3135, 3153, 3171, 3190, 3199,
     3214, 3223, 3246, 3256, 3271, 3280, 3303, 3313, 3322, 3340,
     3359, 3377, 3395, 3413, 3431, 3449, 3467, 3485, 3503, 3521,

     3539, 3557, 3576, 3623, 3591, 3600, 3669, 3687, 3706, 3753,
     3800, 3847, 3638, 3717, 3894, 3941, 3988, 4035, 4082, 4129,
     4176, 4223, 4270, 4317, 4364, 4411, 4458, 4505, 3764, 3811,
     4551, 4569, 3858, 3905, 4587, 4605, 4623, 4641, 4659, 4677,
     4695, 4713, 4731, 4749, 4767, 4785, 4803, 4821, 4839, 4857,
     4875, 4893, 4911, 4929, 4947, 4965, 4983, 5001, 5020, 5067,
     5114, 5161, 5208, 5255, 5302, 5349, 3952, 3999, 5396, 5443,
     5490, 5537, 5584, 5631, 5678, 5725, 4046, 4093, 4140, 4187,
     4238, 4247, 4294, 4341, 4376, 4422, 4469, 4516, 5031, 5078,
     5129, 5138,   84,  102,  120,  138,  156,  174, 5771, 1388,

     1390,11941,  190,11941,11941,11941, 3607, 1015, 5166, 1022,
     1038, 5164, 1054, 1040, 1067, 1109, 5789, 5779, 5841, 1090,
     1166, 1105, 5215, 5890,   87, 1109, 1443, 1489, 2638, 2647,
     3599, 3645, 3724, 3733, 4523, 3773, 3820, 5173, 3867, 3914,
     5228, 3961, 4008, 5270, 4055, 4102, 5311, 4149, 4196, 5357,
     4246, 4293, 5370, 4340, 4385, 5411, 4431, 4478, 5452, 5040,
     3780, 3827, 3874, 3921, 3968, 4015, 5090, 4062, 5137, 5498,
     5324, 5465, 5511, 5552, 5561, 5592, 5605, 5639, 5646, 5689,
        0,    0,    0,    0,    0,    0,    0,    0, 4109, 4156,
     4203, 4317,    0,    0, 5698, 5741, 5733, 4438, 4485, 5047,

     5302, 5443, 5584, 5678, 5705, 5785, 5840, 5919, 5947, 5960,
     5967, 5980, 5989, 5996, 6011, 6020, 6027, 6040, 6047, 6054,
     6068, 6075, 6088, 6097, 6104, 6119, 6128, 6135, 6148, 6157,
     6164, 6179, 6188, 6195, 6208, 6217, 6224, 6239, 6248, 6255,
     6268, 6277, 6284, 6299, 6308, 6315, 6328, 6337, 6344, 6359,
     6366, 6373, 6385, 6392, 6401, 6408, 6421,    0, 6430, 6437,
     6452, 6459, 6466, 6478, 6485, 6497, 6504, 6516, 6523, 6535,
     6542, 6549, 6556, 6563, 6570, 6577, 6584, 6591, 6598,    0,
        0,    0,    0,    0, 6605, 6612, 6619, 6628, 6635, 6648,
     6655, 6662, 6676,    0,    0, 6683, 6690,    0,    0, 6697,

        0,    0,    0,    0,    0,    0,    0, 6704, 6713, 6720,
     6733, 6740, 6747, 6761, 6768, 6780, 6787, 6799, 6806, 6818,
     6825, 6837, 6844, 6856, 6863, 6875, 6882, 6894, 6901, 6913,
     6920, 6932, 6939, 6951, 6958, 6970,    0,    0,    0,    0,
     6977,    0,    0,    0,    0, 6984, 6991,    0,    0, 6998,
     7005, 7012,    0,    0,  193,    0,    0,    0,  208,    0,
        0, 7027,  211,11941, 1124, 1329, 1159, 1169, 1191, 1189,
     1206, 1218, 1233, 1242, 1249, 1258, 1253, 1325, 1251, 1252,
     1381, 1393, 1429,  123,  159,  226, 1430, 1458,  229,  230,
      244,  249,  264, 1444, 1462, 5845, 1459, 1475, 1472, 2563,

     2610, 5882, 3155, 3148, 5847, 3143, 3172, 3178, 3193, 5811,
     5174, 3201, 3199, 3235, 5356, 3235, 3246, 5165, 3263,  283,
      284, 3272, 7034, 7041, 7048, 7055, 7062, 7069, 7076, 7083,
     7096, 7103, 7116, 7124, 7144, 7151, 7165, 7172, 7192, 7199,
     7213, 7220, 7240, 7247, 7261, 7268, 7288, 7295, 7309, 7316,
     7336, 7343, 7357, 7364, 7384, 7391, 7405, 7412, 7432, 7439,
     7453, 7460, 7480, 7487, 7501, 7508, 7515, 7528, 7535, 7542,
     7554, 7561, 7568, 7575, 7588, 7595, 7608, 7616, 7636, 7643,
     7657, 7664, 7684, 7691, 7705, 7712, 7732, 7739, 7753,    0,
        0,    0,    0,    0,    0,    0,    0, 7760, 7767, 7780,

     7787,    0,    0, 7794, 7807, 7814, 7827, 7835, 7842, 7855,
     7862, 7869, 7876, 7883, 7890, 7897, 7904, 7917, 7924, 7937,
     7945, 7965, 7972, 7986, 7993, 8013, 8020, 8034, 8041, 8061,
     8068, 8082, 8089, 8096, 8109, 8122, 8129, 8142, 8150, 8170,
     8177, 8191, 8198, 8218, 8225, 8239, 8246, 8266, 8273, 8287,
     8294, 8314, 8321, 8335, 8342, 8362, 8369, 8383, 8390, 8410,
     8417, 8431, 8438, 8458, 8465, 8479, 8486, 8506, 8513, 8527,
     8534, 8554, 8561, 8575, 8582, 8589, 8602, 8609, 8616, 8629,
     8636, 8649,    0, 8657, 8677, 8684, 8698, 8705, 8717, 8725,
     8737, 8744, 8756, 8763, 8775, 8782, 8789, 8796, 8803, 8810,

     8817, 8824, 8831, 8838, 8845,    0,    0,    0,    0,    0,
     8852, 8859, 8866, 8873, 8886, 8893, 8906, 8914, 8921, 8934,
        0,    0, 8941, 8948,    0,    0, 8955,    0,    0,    0,
        0,    0,    0,    0, 8962, 8969, 8982, 8989, 9002, 9010,
     9022, 9030, 9042, 9054, 9061, 9073, 9080, 9092, 9099, 9111,
     9118, 9130, 9142, 9149, 9161, 9168, 9180, 9187, 9199, 9206,
     9218, 9230, 9237, 9249, 9256, 9268, 9275,    0,    0,    0,
        0, 9282,    0,    0,    0,    0, 9289, 9296,    0,    0,
     9303, 9310, 9317,    0,    0,  298,    0,    0,  316,    0,
     9332, 3274, 3527, 5776, 3557, 3599, 3612, 1310,  303, 1306,

     3623, 3644, 3643, 3666, 4170, 4211, 1293, 1275, 4262, 4252,
      334,  354,  370, 4349, 4360,  388,  408,  424,  444,  460,
      480,  496,  516,  532,  552, 1274, 4371,  568,  588, 4500,
     4498, 4499, 1195, 4512, 4525, 4974, 4971, 5849, 4977, 5047,
     5049, 5063, 5059, 1173, 5160, 5206, 5231, 5228, 5241, 5234,
     5231, 5248, 5244, 5293, 5319, 5332, 1172, 5369, 5356, 5387,
     5371, 5382, 5393, 5433, 5466, 5466,  604, 5467, 9339, 9346,
     9353, 9360, 9367, 9374, 9381, 9388, 9395, 9402, 9409, 9416,
     9423, 9430, 9437, 9444, 9451, 9458, 9465, 9472, 9479, 9486,
     9493, 9500, 9507, 9514, 9521, 9528, 9535, 9542, 9549, 9556,

     9563, 9570, 9577, 9584, 9591, 9598, 9605, 9612, 9619, 9626,
     9633, 9640, 9647, 9654, 9661, 9668, 9675, 9682, 9689, 9696,
     9703, 9710, 9717, 9724, 9731, 9738, 9745, 9752, 9759, 9766,
     9773, 9780, 9787, 9799, 9806, 9818, 9825, 9837, 5501, 5489,
      622,  642, 5506, 5522, 5516, 5519,  661,  662, 9836, 5618,
     5625, 5613, 5627, 5616, 5648, 5759, 5675, 5701, 5719,  676,
     5702, 5710,  680,  681,  694,  697,  698, 5714,  712,  715,
     5775, 5782, 5791, 1198, 5840, 5834, 5858, 5861, 5846, 5864,
     5877, 5882, 5886, 5891, 5902, 5916, 5902, 5963, 5953, 5967,
     5990, 1116, 6027, 6011, 1115, 6075, 6064,  716,  733, 6072,

     6087, 6124,  748, 6133, 6148, 1109, 6178, 6193, 6224, 6238,
     6253, 9851, 9863, 9876, 1108, 6282,  752,  753,  769,  784,
     6304, 1059, 6313, 6327,  788, 6333, 6400, 6409, 6405, 6617,
     6635, 6617, 6637, 7145, 6715, 9858, 7085, 7085, 9895, 1058,
     1023, 7120,  789,  802,  806, 7152, 7161, 7183,  820, 1009,
      840,  979, 7200, 7215, 7229, 7253, 7255, 7280, 7301,  860,
     7310,  874,  877, 7328, 7352, 7350, 7384, 7398, 7397, 7471,
     7437, 7455,  894,  823,  928,  897, 7508, 7590, 7592,  948,
      982, 7602, 7603, 7630, 7659, 7648, 7686, 7711,  976, 9890,
     9904, 9912, 9931, 9919, 9943, 9942, 7696, 1000, 1018, 7734,

     7759, 7755, 7809, 7809, 7800, 7920,  961, 1093, 7913, 1150,
     7921, 7938, 7968, 7987, 7973, 8002, 8036, 8039, 8063, 1207,
     1038, 8119, 9929, 9932, 1332, 1096, 1335, 1264, 8130, 8149,
     8132, 1336, 1276, 8164, 1355, 1296, 8178, 8182, 8217, 8245,
     8245, 8270, 8291, 8293, 1368, 1300, 8303, 1372, 1389, 1552,
     1406, 8340, 8339, 8351, 8389, 8377, 8399, 8420, 9941, 8428,
     1555, 1407, 1556, 8453,  958, 8467, 1572, 8468, 8492, 8519,
     8532,  943, 8629, 8558, 9916, 8574, 8566,  940, 9933, 8622,
     8639, 8890, 8883, 9941, 8888, 9946, 1575, 1588, 9029, 1592,
     1606, 1614, 9091,10006, 9113, 9182,  925, 9207, 9805, 9834,

     1609, 9951, 9960, 9963, 9969, 9975, 9990, 9985, 9989, 1642,
     1645, 1646, 1662, 1663, 1682, 1683,10002, 1696, 9979,10004,
     9987, 9994, 9990, 9992, 9993, 9994, 1699,10009, 1714, 1717,
    10006,  922,10011, 9997,10000,  918,10005,10004,10001,10018,
     1718, 1732,10019,10020, 1735,10017,10011,10025,  907,10031,
    10051,10049,10039,10042,10058,10059,10049,10066, 1750, 1754,
     1755, 1786,10046,  889,10061,10066, 1789, 1790, 1809, 1822,
    10051,10061,10071, 1826,  886, 1842, 1858, 1878, 1912, 1932,
    10072, 1966, 1986, 1843,10059,10067,10077,10067,10073,10067,
      871,10091,10096,10106,10094,10100,10106,10103,10114,10113,

     2005, 2006, 2020, 2023, 2038, 2042, 2043,10095,10104,  868,
      864,10114, 2056, 2076, 2110, 2130,10122, 2164,10108,10119,
    10111,10114,10115,10113,10109,10114,  852, 2059,10119,10114,
     2184, 2218,10134,10133,10132,10147,10123,10186,10149,10153,
    10156,10157,10164, 2236,10159,10158,10155, 2256, 2290, 2310,
     2344, 2364, 2380, 2400, 2416, 2436, 2437, 2452,10172,10160,
    10161, 2456, 2457, 2470, 2488, 2491, 2492, 2509, 2524, 2527,
    10163, 2528, 2545,10167, 2560, 2564, 2580, 2565, 2670, 2634,
     2690, 2638,10170, 2710, 2709, 2724,10165,10183,10185,10176,
    10173,10239,10176,10182,10193,10203,10208,10211,10208,10222,

    10227,10228, 2742, 2746, 2760, 2764,10225,10218,10219,10228,
     2778, 2798, 2814, 2818, 2834, 2854, 2868, 2871,10231, 2872,
     2889,10218,10229,10222,10222,10243,10241,10240,10243,10243,
    10247,10236, 2904,10239,10248,10240,10247,10252,10266, 2907,
     2908, 2922,10259,10270,10280,10282,10273,10274,10272, 2927,
     2940,10273,10270,10274, 2944, 2958, 2961, 2976, 2980, 2981,
     2994, 2997, 3012, 3015,10276,10280,10287, 3016, 3030, 3033,
     3048, 3051, 3052, 3066, 3069, 3070, 3086, 3089,10279, 3105,
     3106, 3120, 3123,10297, 3124,10295,  835,  834,10297,10293,
     3138, 3141,10290,10279,10303,10293,  817,10295,10294,  810,

      799,10298,10300, 3142, 3159, 3231,10320,10326,  798, 3176,
     3234, 3288, 3330,10315, 3343,10334,10316,  781,10324,10318,
    10329,10337,10331,10342,10343,10337,10348,  780,  763,10332,
    10350,10349,10353, 3347, 3362, 3366,10337,10345,10350,10359,
    10356,10358,10359, 3367,10364,10361,10371, 3380, 3383, 3384,
    10358,10362,10375, 3398, 3401, 3402, 3416, 3420,10390,10383,
    10381,10392,10385,10395,10386, 3421,10403,10387,10397,10385,
    10394,10406,10396,10398,10400, 3434,10410, 3454, 3470, 3473,
    10401,10402,10409, 3474,10424, 3491,10444,10415, 3506, 3510,
    10438,10432, 3511,10441,10449,  759,10449,10443,10436,10458,

    10461,10454, 3542,10459,10464,10463,10449,10456,10452, 3545,
    10465,10459,10470,10467,10459,10464, 3546,10480,10484, 4543,
    10480,10481, 4590,10493,10484,10495,10505, 4594,10506,10494,
    10495,10494,10494,10500,10501,10502,10503, 4626, 3562,10518,
     3565,10505,10506,10525, 4630, 3676,10518, 4662, 3720,10525,
    10528,10516, 4666, 4698, 3767, 4702, 3770,10512,10524, 4734,
     3814,10522, 4738,10524,10542,10543,10548,10551,10553,10548,
    10548,10552,  727,10564,10562,10552,10562, 4770, 3817,10574,
    10556, 4774,10562,10575, 4806,10571,  726, 4810, 3861,10563,
    10569, 4842, 3864,10601, 4846, 4878, 4882, 4914, 3908,10581,

    10572,10585,10577,10585,10583,10604,10596,10610, 3911, 4918,
    10609,10614,10601, 3955,10597, 3958,  722,10609,10604,10619,
     4950, 4002, 4005, 4049,10610,10626, 4052,10627, 4954, 4096,
    10619,10619,10611,10620,10654, 4986,10629,10628, 5108,10631,
    10624,10629,10624,10637, 4099,10637,10654, 5155, 4143,10650,
    10661, 5180, 4146,10643,10653, 4190,10657,10673, 4193, 5413,
     4282,10657, 5610, 4287, 5759, 4336, 5817, 4358, 4381,10657,
    10668,  691,10678,10677,10671,  690,10673,  686,10702, 4406,
    10668,10669,10670,10728,10670,10680,10687,10696, 4425,10683,
    10701,10738, 4428,10697,10714,10705,10720,10748, 4472,10709,

    10755, 4475,10722,10716,10768, 4522,10732,10774,10729,10731,
    10742,10734,10756, 4556,10783,10794, 4990,10797,10742,10769,
    10770, 5084,10768, 5175, 5176, 5234,10767,  673,10770,10766,
    10767,  655,10775,  619,10776, 5235,10820,10823,10786,10827,
     5288,10771,10799,10781,10797,10848,  612,10849, 5289,10810,
    10802,10822,10812, 5292,10855,10856,10861, 5329,10868,10821,
     5342,10875,10876, 5343,10880,10883,10837,10828,10839,10887,
     5363,10900, 5375,10884,10907,10908,10912, 5376,10868,10857,
    10860,10866,10867,10873,10874,10882,10883,10879,10881,10883,
    10883,10933, 5430,10936, 5433,10891, 5470,10903,  601,10913,

    10905,10953, 5483,10912, 5484,10925,10933,10934,10920,10959,
     5516,10960, 5517,10964, 5554,10979, 5558,10987,10988, 5611,
     5623,10991, 5624,10992, 5664,10956,11001,11002,  583, 5665,
     5760,10948,10960,11012, 5824,11013, 5827, 6392,10972,11016,
    11021,10973,  580,10965,10986,10986,10989,10986,11001,10990,
    11006, 6485, 6504,11038,11018,11022,11010,11017, 6523,11010,
    11049,11016,  565,11009, 6542, 6739, 6787, 6806,11062, 6825,
     6863, 6882, 6901,11066,11077,11081,11085, 6939,11086, 6958,
    11055,11017,11033, 6977, 7031,11046,11094, 7101,11098, 7102,
    11044,11073,11056,11073,  562,  547,11068,11088,11075,11090,

    11111, 7143,11122,11095,11083,11086,11090,11126, 7144,11104,
    11116,11100, 7148,11132, 7194,11158, 7239,11161, 7242, 7246,
     7287,11103,11112,11126,11114,11111, 7290, 7294,11113,11130,
    11123,11145,11142,11143,11144,11138,11148,11149,11152,11160,
     7335,11186, 7338,11150,11189,11163,11163, 7342,  529,11182,
    11169,11178,11208, 7383, 7386, 7390,11176,11173,11214,11194,
    11217,11218,11191,11191,11186,11242,11191,11201,11212,11195,
    11243,11202,11246,11203, 7431,11220,11251, 7434,11263,11238,
    11224,11237,11249,11240,11272, 7438,11234,11239,11243,11282,
     7479,11291,11292, 7480,11295, 7484,11257,11263,11261,11312,

     7593,11316,11259,11265,11288,11320, 7594,11321,11324, 7635,
    11325,11291, 7638,11333, 7642,11304,11296,11305,11318,11317,
     7683,11344,11348,11352,11322,11324, 7686,11353, 7690, 7731,
     7734,  526,11326,  511, 7738,11361, 7861,11335,11333,11347,
     7922,11372, 7923, 7964,11376, 7967,11380, 7971,11356,11358,
    11364,11346,11348,11389, 8012,11397, 8015,11400, 8019,11363,
    11369, 8060,11359,11360,11367, 8063,  493,  490,11381, 8067,
     8115,11408, 8116,11367,11382,  475,11387,11387, 8127, 8128,
     8169,11400,11423,11386,11428,11391,11397,11401,11400, 8172,
    11404,11411,11412,11407,11416,11406,11451, 8176,11425,11452,

     8217,11426,11420,11421,11460,11422,11419,11451,11442,11454,
    11446, 8220,11456, 8224,11457,11459,11460,11488, 8265,11494,
    11513,11498,  457,11468,11456,11466,11468,11473,11475, 8268,
    11522, 8272,11528,11532, 8313,11533, 8316,11494,11539,11542,
    11475,11501,11520,11521, 8320,11552, 8361, 8364, 8368,11556,
    11559,11567,11578, 8409,11579, 8412,11582,11586,11513,11520,
     8416,11587, 8457,11591, 8460,11592, 8464, 8505, 8508,11599,
     8512,11606, 8553,11611,11612, 8556, 8560, 8676, 8679, 8683,
    11616, 8724,11619, 8744, 8763, 8782,11941,11639,11644,11649,
    11654,11659,11664,11669,11674,11679,11684,11689,11694,11699,

    11704,11709,11714,11719,11724,11729,11734,11739,11744,11749,
    11754,11759,11764,11769,11774,11779,11784,11789,11794,11799,
    11804,11809,11814,11819,11824,11829,11834,11839,11841,11843,
    11845,11847,11849,11851,11853,11855,  497,11857,11859,11861,
    11863,11865,11867,11869,  482,11871,  464,  461,  446,  428,
      425,  410,  392,  389,  374,  371,  356,  338,  335,  320,
      319,  316,  301,11873,11875,11877,11882,11887,11889,11891,
    11893,11895,11897,11899,11901,11903,  284,11905,11907,11909,
    11911,11913,11915,11917,  277,11919,  266,  265,  262,  247,
      230,  211,  193,  176,  169,  151,  140,  133,  115,  104,

       97,   79,    0,11921,11923,11925,11930,11935
    } ;

static yyconst flex_int16_t yy_def[2509] =
    {   0,
     2388, 2387, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2389, 2389, 2390, 2390,
     2391, 2391, 2392, 2392, 2393, 2393, 2394, 2394, 2395, 2395,
     2396, 2396, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2397, 2397, 2398, 2398, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,

     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2399, 2399, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2400, 2400,
     2401, 2401, 2402, 2402, 2403, 2403, 2404, 2404, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,

     2388, 2388, 2405, 2405, 2406, 2406, 2388, 2388, 2407, 2407,
     2408, 2408, 2388, 2388, 2409, 2409, 2410, 2410, 2411, 2411,
     2412, 2412, 2413, 2413, 2414, 2414, 2415, 2415, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2388, 2388, 2416, 2416,
     2417, 2417, 2418, 2418, 2419, 2419, 2388, 2388, 2420, 2420,
     2421, 2421, 2422, 2422, 2423, 2423, 2388, 2388, 2388, 2388,
     2424, 2424, 2425, 2425, 2388, 2388, 2388, 2388, 2388, 2388,
     2426, 2426, 2388, 2388, 2427, 2427, 2428, 2428, 2388,  299,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2387, 2387,
     2387, 2387, 2437, 2438, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2439, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2440,
     2441, 2442, 2443, 2444, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2445, 2446, 2387, 2387, 2447, 2448, 2387,

     2449, 2450, 2451, 2452, 2453, 2454, 2455, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2456, 2457, 2458, 2459,
     2387, 2460, 2461, 2462, 2463, 2387, 2387, 2464, 2465, 2387,
     2387, 2387, 2466, 2467, 2467, 2467, 2467, 2468, 2468, 2468,
     2468, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2469,
     2470, 2471, 2472, 2473, 2474, 2475, 2476, 2387, 2387, 2387,

     2387, 2477, 2478, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2479, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2480, 2481, 2482, 2483, 2484,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2485, 2486, 2387, 2387, 2487, 2488, 2387, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2496, 2497, 2498,
     2499, 2387, 2500, 2501, 2502, 2503, 2387, 2387, 2504, 2505,
     2387, 2387, 2387, 2506, 2507, 2507, 2507, 2508, 2508, 2508,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387,    0, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387
    } ;

static yyconst flex_int16_t yy_nxt[12016] =
    {   0,
     2387,  303,  304,  303,  876,  305,  302,  303,  304,  303,
      302,  306,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  302,  316,  317,  318,  319,
      320,  321,  322,  323,  324,  325,  302,  302,  326,  302,
      302,  302,  302,  302,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  302,  316,  317,  318,  319,  320,  321,
      322,  323,  324,  325,  302,  302,  326,  302,  302,  302,
      303,  304,  303,  875,  305,  303,  304,  303,  620,  305,
      620,  327,  327,  327,  327,  327,  327,  327,  303,  304,

      303,  874,  306,  303,  304,  303,  621,  306,  873,  327,
      327,  327,  327,  327,  327,  327,  303,  304,  303,  871,
      305,  555,  304,  555,  584,  556,  584,  328,  328,  328,
      328,  328,  328,  328,  303,  304,  303,  870,  306,  555,
      304,  555,  586,  557,  869,  328,  328,  328,  328,  328,
      328,  328,  303,  304,  303,  868,  305,  303,  304,  559,
      911,  560,  911,  329,  329,  329,  329,  329,  329,  329,
      303,  304,  303,  834,  306,  303,  304,  559,  912,  561,
      833,  329,  329,  329,  329,  329,  329,  329,  303,  304,
      303,  563,  305,  563,  886,  564,  886,  832,  887,  330,

      330,  330,  330,  330,  330,  330,  303,  304,  303,  563,
      306,  889,  563,  890,  563,  831,  564,  330,  330,  330,
      330,  330,  330,  330,  303,  304,  303,  913,  305,  913,
      916,  918,  916,  918,  830,  331,  331,  331,  331,  331,
      331,  331,  303,  304,  303,  920,  306,  920,  917,  919,
      922,  829,  922,  331,  331,  331,  331,  331,  331,  331,
      303,  304,  303,  921,  305,  924,  828,  924,  923,  826,
      825,  332,  332,  332,  332,  332,  332,  332,  303,  304,
      303,  821,  306,  925,  620,  967,  620,  967,  702,  332,
      332,  332,  332,  332,  332,  332,  303,  304,  303,  886,

      305,  886,  621,  887, 1047,  876, 1047,  333,  333,  333,
      333,  333,  333,  333,  303,  304,  303,  563,  306,  889,
      875,  890, 1048,  874,  873,  333,  333,  333,  333,  333,
      333,  333,  303,  304,  303,  911,  305,  911,  334,  871,
      334,  335,  870,  336,  336,  336,  336,  336,  336,  336,
      303,  304,  303,  912,  306, 1060,  334, 1060,  334,  335,
      869,  336,  336,  336,  336,  336,  336,  336,  303,  304,
      303,  913,  305,  913,  337,  868,  337,  338,  834,  339,
      339,  339,  339,  339,  339,  339,  303,  304,  303,  916,
      306,  916,  337,  833,  337,  338,  832,  339,  339,  339,

      339,  339,  339,  339,  303,  304,  303,  917,  305, 1063,
      340, 1063,  340,  341,  831,  342,  342,  342,  342,  342,
      342,  342,  303,  304,  303,  918,  306,  918,  340,  830,
      340,  341,  829,  342,  342,  342,  342,  342,  342,  342,
      303,  304,  303,  919,  305, 1064,  343, 1064,  343,  344,
      828,  345,  345,  345,  345,  345,  345,  345,  303,  304,
      303,  920,  306,  920,  343,  826,  343,  344,  825,  345,
      345,  345,  345,  345,  345,  345,  303,  304,  303,  921,
      305, 1065,  346, 1065,  346,  347,  821,  348,  348,  348,
      348,  348,  348,  348,  303,  304,  303,  922,  306,  922,

      346,  702,  346,  347, 2338,  348,  348,  348,  348,  348,
      348,  348,  303,  304,  303,  923,  305, 1066,  349, 1066,
      349,  350, 2293,  351,  351,  351,  351,  351,  351,  351,
      303,  304,  303,  924,  306,  924,  349, 2288,  349,  350,
     2287,  351,  351,  351,  351,  351,  351,  351,  303,  304,
      303,  925,  305, 1067,  352, 1067,  352,  353, 2265,  354,
      354,  354,  354,  354,  354,  354,  303,  304,  303,  928,
      306,  928,  352, 2263,  352,  353, 2181,  354,  354,  354,
      354,  354,  354,  354,  303,  304,  303,  929,  305, 1070,
      355, 1070,  355,  356, 2136,  357,  357,  357,  357,  357,

      357,  357,  303,  304,  303,  967,  306,  967,  355, 2135,
      355,  356, 2111,  357,  357,  357,  357,  357,  357,  357,
      303,  304,  303, 1117,  305, 1117,  358, 2092,  358,  359,
     2081,  360,  360,  360,  360,  360,  360,  360,  303,  304,
      303, 1118,  306, 1119,  358, 1119,  358,  359, 2056,  360,
      360,  360,  360,  360,  360,  360,  303,  304,  303, 2004,
      305, 1120, 1047, 1125, 1047, 1125, 1990,  361,  361,  361,
      361,  361,  361,  361,  303,  304,  303, 1060,  306, 1060,
     1048, 1063, 1064, 1063, 1064,  361,  361,  361,  361,  361,
      361,  361,  303,  304,  303, 1065,  305, 1065, 1066, 1067,

     1066, 1067, 1988,  362,  362,  362,  362,  362,  362,  362,
      303,  304,  303, 1143,  306, 1143, 1070, 1173, 1070, 1173,
     1984,  362,  362,  362,  362,  362,  362,  362,  303,  304,
      303, 1144,  305, 1935, 1175, 1174, 1175, 1933, 1929,  363,
      363,  363,  363,  363,  363,  363,  303,  304,  303, 1180,
      306, 1180, 1176, 1117, 1198, 1117, 1198,  363,  363,  363,
      363,  363,  363,  363,  303,  304,  303, 1181,  305, 1885,
     1119, 1118, 1119, 1855, 1840,  364,  364,  364,  364,  364,
      364,  364,  303,  304,  303, 1199,  306, 1199, 1120, 1125,
     1143, 1125, 1143,  364,  364,  364,  364,  364,  364,  364,

      303,  304,  303, 1226,  305, 1226, 1764, 1227, 1144, 1227,
     1698,  365,  365,  365,  365,  365,  365,  365,  303,  304,
      303, 1232,  306, 1232, 1262, 1228, 1262, 1697, 1687,  365,
      365,  365,  365,  365,  365,  365,  303,  304,  303, 1233,
      305, 1235,  366, 1235,  366, 1683, 1675,  367,  367,  367,
      367,  367,  367,  367,  303,  304,  303, 1674,  306, 1236,
      366, 1245,  366, 1245, 1671,  367,  367,  367,  367,  367,
      367,  367,  303,  304,  303, 1248,  305, 1248, 1250, 1246,
     1250, 1663, 1662,  368,  368,  368,  368,  368,  368,  368,
      303,  304,  303, 1249,  306, 1173, 1251, 1173, 1263, 1530,

     1263,  368,  368,  368,  368,  368,  368,  368,  303,  304,
      303, 1509,  305, 1174,  369, 1508,  369,  370, 1493,  371,
      371,  371,  371,  371,  371,  371,  303,  304,  303, 1175,
      306, 1175,  369, 1474,  369,  370, 1460,  371,  371,  371,
      371,  371,  371,  371,  303,  304,  303, 1176,  305, 1180,
      372, 1180,  372,  373, 1436,  374,  374,  374,  374,  374,
      374,  374,  303,  304,  303, 1423,  306, 1181,  372, 1419,
      372,  373, 1388,  374,  374,  374,  374,  374,  374,  374,
      303,  304,  303, 1267,  305, 1267,  375, 1358,  375,  376,
     1350,  377,  377,  377,  377,  377,  377,  377,  303,  304,

      303, 1198,  306, 1198,  375, 1344,  375,  376, 1286,  377,
      377,  377,  377,  377,  377,  377,  303,  304,  303, 1199,
      305, 1199,  378, 1275,  378,  379, 1237,  380,  380,  380,
      380,  380,  380,  380,  303,  304,  303,  568,  306, 1301,
      378, 1301,  378,  379,  574,  380,  380,  380,  380,  380,
      380,  380,  302,  303,  304,  303, 1234,  305,  302,  302,
      302,  302,  303,  304,  303,  568,  306,  302,  302,  302,
     1224,  302,  574,  575,  579,  581,  302,  303,  304,  303,
      302,  305,  302,  302,  302,  302,  303,  304,  303,  580,
      306,  302,  302,  302, 1287,  302, 1287, 1226,  302, 1226,

      582,  575,  579,  581,  302, 1223, 1201,  302,  302,  303,
      304,  303, 1288,  305,  302,  302,  302,  580,  302,  303,
      304,  303,  302,  306,  302,  302,  302,  302,  582,  583,
      606,  302,  609,  302,  303,  304,  303,  302,  305,  302,
      302,  302,  302,  303,  304,  303,  622,  306,  302,  302,
      302, 1290,  302, 1290,  302, 1196, 1184,  583,  606,  892,
      609,  302, 1170, 1166,  302,  302,  303,  304,  303, 1291,
      305,  302,  302,  302,  622,  302,  303,  304,  303,  302,
      306,  302,  302,  302,  302,  894,  607,  892,  302,  895,
      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,

      303,  304,  303,  608,  306,  302,  302,  302, 1220,  302,
     1220,  302, 1148,  894,  607,  896,  897,  895,  302, 1100,
     1087,  302,  302,  303,  304,  303, 1221,  305,  302,  302,
      302,  608,  302,  303,  304,  303,  302,  306,  302,  302,
      302,  302, 1074,  896,  897,  302,  898,  302,  303,  304,
      303,  302,  305,  302,  302,  302,  302,  303,  304,  303,
      899,  306,  302,  302,  302, 1312,  302, 1312,  302,  303,
      304,  303,  900,  305,  898,  302,  901, 1316,  302, 1316,
      389,  389,  389,  389,  389,  389,  389,  902,  899,  903,
      904,  906,  907,  302,  303,  304,  303, 1318,  306, 1318,

      900, 1327,  302, 1327,  901,  389,  389,  389,  389,  389,
      389,  389,  303,  304,  303,  902,  305,  903,  904,  906,
      907, 1068, 1057,  390,  390,  390,  390,  390,  390,  390,
      303,  304,  303, 1310,  306, 1310, 1227, 1232, 1227, 1232,
     1056,  390,  390,  390,  390,  390,  390,  390,  303,  304,
      303, 1311,  305, 1049, 1228, 1233, 1235, 1046, 1235,  391,
      391,  391,  391,  391,  391,  391,  303,  304,  303, 1245,
      306, 1245,  905, 1248, 1236, 1248,  893,  391,  391,  391,
      391,  391,  391,  391,  303,  304,  303, 1246,  305, 2387,
     1329, 1249, 1329,  306, 2387,  392,  392,  392,  392,  392,

      392,  392,  303,  304,  303,  908,  306, 1330, 1262, 1330,
     1262, 2387, 2387,  392,  392,  392,  392,  392,  392,  392,
      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,
      302,  302, 2387,  908,  909,  302,  303,  304,  303,  302,
      305,  302,  302,  302,  302,  303,  304,  303, 2387,  306,
      302,  302,  302, 2387,  302,  623,  623,  623,  623,  623,
      623,  623,  909,  302,  910,  914,  302,  302,  303,  304,
      303,  302,  306,  302,  302,  302,  302,  302,  302, 2387,
      915,  302,  926,  303,  304,  303,  302,  305, 2387,  927,
      302,  933,  910,  914,  398,  398,  398,  398,  398,  398,

      398,  624,  624,  624,  624,  624,  624,  624,  915,  934,
      926,  935, 2387,  302,  303,  304,  303,  927,  305,  933,
      395, 2387,  395,  396, 2387,  397,  397,  397,  397,  397,
      397,  397,  303,  304,  303, 2387,  306,  934,  395,  935,
      395,  396, 2387,  397,  397,  397,  397,  397,  397,  397,
      303,  304,  303, 1250,  306, 1250, 1341, 1263, 1341, 1263,
     2387,  398,  398,  398,  398,  398,  398,  398,  303,  304,
      303, 1251,  305, 1267, 1342, 1267, 1287, 2387, 1287,  399,
      399,  399,  399,  399,  399,  399,  303,  304,  303, 1374,
      306, 1374, 2387, 1290, 1288, 1290, 2387,  399,  399,  399,

      399,  399,  399,  399,  303,  304,  303, 1376,  305, 1376,
     1301, 1291, 1301, 2387, 2387,  400,  400,  400,  400,  400,
      400,  400,  303,  304,  303, 2387,  306, 1377, 1378, 1379,
     1380, 2387, 2387,  400,  400,  400,  400,  400,  400,  400,
      303,  304,  303, 1310,  305, 1310, 1401, 1312, 1401, 1312,
     2387,  401,  401,  401,  401,  401,  401,  401,  303,  304,
      303, 1311,  306, 1402, 1404, 1402, 1404, 2387, 2387,  401,
      401,  401,  401,  401,  401,  401,  303,  304,  303, 2387,
      305, 1403, 1405, 1406, 1316, 1406, 1316,  402,  402,  402,
      402,  402,  402,  402,  303,  304,  303, 1318,  306, 1318,

     1327, 1407, 1327, 2387, 2387,  402,  402,  402,  402,  402,
      402,  402,  303,  304,  303, 1329,  305, 1329, 1330, 1341,
     1330, 1341, 2387,  403,  403,  403,  403,  403,  403,  403,
      303,  304,  303, 1428,  306, 1428, 1431, 1342, 1431, 2387,
     2387,  403,  403,  403,  403,  403,  403,  403,  303,  304,
      303, 1451,  305, 1451, 1432, 1453, 1455, 1453, 1455,  404,
      404,  404,  404,  404,  404,  404,  303,  304,  303, 1452,
      306, 2387, 2387, 1454, 1456, 2387, 2387,  404,  404,  404,
      404,  404,  404,  404,  303,  304,  303, 1457,  305, 1457,
     1463, 1465, 1463, 1465, 2387,  405,  405,  405,  405,  405,

      405,  405,  303,  304,  303, 1458,  306, 2387, 1464, 1466,
     1467, 2387, 1467,  405,  405,  405,  405,  405,  405,  405,
      303,  304,  303, 1469,  305, 1469, 2387, 1374, 1468, 1374,
     2387,  406,  406,  406,  406,  406,  406,  406,  303,  304,
      303, 1470,  306, 1376, 1486, 1376, 1486, 2387, 2387,  406,
      406,  406,  406,  406,  406,  406,  303,  304,  303, 1475,
      305, 1475,  407, 2387,  407,  408, 2387,  409,  409,  409,
      409,  409,  409,  409,  303,  304,  303, 1476,  306, 1477,
      407, 1477,  407,  408, 2387,  409,  409,  409,  409,  409,
      409,  409,  303,  304,  303, 2387,  305, 1478,  410, 2387,

      410,  411, 2387,  412,  412,  412,  412,  412,  412,  412,
      303,  304,  303, 1479,  306, 1479,  410, 2387,  410,  411,
     2387,  412,  412,  412,  412,  412,  412,  412,  303,  304,
      303, 1480,  305, 1481,  413, 1481,  413,  414, 2387,  415,
      415,  415,  415,  415,  415,  415,  303,  304,  303, 2387,
      306, 1482,  413, 2387,  413,  414, 2387,  415,  415,  415,
      415,  415,  415,  415,  303,  304,  303, 1382,  305, 1382,
      416, 2387,  416,  417, 2387,  418,  418,  418,  418,  418,
      418,  418,  303,  304,  303, 1384,  306, 1484,  416, 1484,
      416,  417, 2387,  418,  418,  418,  418,  418,  418,  418,

      303,  304,  303, 2387,  305, 1485, 1401, 1402, 1401, 1402,
     2387,  419,  419,  419,  419,  419,  419,  419,  303,  304,
      303, 1503,  306, 1503, 1404, 1403, 1404, 2387, 2387,  419,
      419,  419,  419,  419,  419,  419,  303,  304,  303, 1504,
      305, 1504, 1405, 1406, 1505, 1406, 1505,  420,  420,  420,
      420,  420,  420,  420,  303,  304,  303, 1511,  306, 1511,
     1428, 1407, 1428, 2387, 2387,  420,  420,  420,  420,  420,
      420,  420,  303,  304,  303, 1512,  305, 1513,  421, 1513,
      421,  422, 2387,  423,  423,  423,  423,  423,  423,  423,
      303,  304,  303, 2387,  306, 1514,  421, 2387,  421,  422,

     2387,  423,  423,  423,  423,  423,  423,  423,  303,  304,
      303, 1515,  305, 1515,  424, 2387,  424,  425, 2387,  426,
      426,  426,  426,  426,  426,  426,  303,  304,  303, 1516,
      306, 1517,  424, 1517,  424,  425, 2387,  426,  426,  426,
      426,  426,  426,  426,  303,  304,  303, 2387,  305, 1518,
      427, 2387,  427,  428, 2387,  429,  429,  429,  429,  429,
      429,  429,  303,  304,  303, 1520,  306, 1520,  427, 2387,
      427,  428, 2387,  429,  429,  429,  429,  429,  429,  429,
      303,  304,  303, 1521,  305, 1431,  430, 1431,  430,  431,
     2387,  432,  432,  432,  432,  432,  432,  432,  303,  304,

      303, 2387,  306, 1432,  430, 2387,  430,  431, 2387,  432,
      432,  432,  432,  432,  432,  432,  303,  304,  303, 1533,
      305, 1533,  433, 2387,  433,  434, 2387,  435,  435,  435,
      435,  435,  435,  435,  303,  304,  303, 1550,  306, 1550,
      433, 2387,  433,  434, 2387,  435,  435,  435,  435,  435,
      435,  435,  303,  304,  303, 1551,  305, 1555,  436, 1555,
      436,  437, 2387,  438,  438,  438,  438,  438,  438,  438,
      303,  304,  303, 2387,  306, 1556,  436, 2387,  436,  437,
     2387,  438,  438,  438,  438,  438,  438,  438,  303,  304,
      303, 1557,  305, 1557,  439, 2387,  439,  440, 2387,  441,

      441,  441,  441,  441,  441,  441,  303,  304,  303, 1558,
      306, 1559,  439, 1559,  439,  440, 2387,  441,  441,  441,
      441,  441,  441,  441,  303,  304,  303, 2387,  305, 1560,
      442, 2387,  442,  443, 2387,  444,  444,  444,  444,  444,
      444,  444,  303,  304,  303, 1451,  306, 1451,  442, 2387,
      442,  443, 2387,  444,  444,  444,  444,  444,  444,  444,
      303,  304,  303, 1452,  305, 1561,  445, 1561,  445,  446,
     2387,  447,  447,  447,  447,  447,  447,  447,  303,  304,
      303, 1453,  306, 1453,  445, 2387,  445,  446, 2387,  447,
      447,  447,  447,  447,  447,  447,  303,  304,  303, 1454,

      305, 1562,  448, 1562,  448,  449, 2387,  450,  450,  450,
      450,  450,  450,  450,  303,  304,  303, 1455,  306, 1455,
      448, 2387,  448,  449, 2387,  450,  450,  450,  450,  450,
      450,  450,  303,  304,  303, 1456,  305, 1563, 1457, 1563,
     1457, 2387, 2387,  451,  451,  451,  451,  451,  451,  451,
      303,  304,  303, 1564,  306, 1564, 1458, 1568, 1463, 1568,
     1463,  451,  451,  451,  451,  451,  451,  451,  303,  304,
      303, 1570,  305, 1570, 2387, 1569, 1464, 2387, 2387,  452,
      452,  452,  452,  452,  452,  452,  303,  304,  303, 1465,
      306, 1465, 1571, 1467, 1571, 1467, 2387,  452,  452,  452,

      452,  452,  452,  452,  303,  304,  303, 1466,  305, 2387,
     1572, 1468, 1572, 2387, 2387,  453,  453,  453,  453,  453,
      453,  453,  303,  304,  303, 1469,  306, 1469, 1573, 1575,
     1573, 1575, 2387,  453,  453,  453,  453,  453,  453,  453,
      303,  304,  303, 1470,  305, 2387, 1577, 1576, 1577, 2387,
     2387,  454,  454,  454,  454,  454,  454,  454,  303,  304,
      303, 1475,  306, 1475, 1578, 1580, 1581, 1580, 1581,  454,
      454,  454,  454,  454,  454,  454,  303,  304,  303, 1476,
      305, 1477,  455, 1477,  455,  456, 2387,  457,  457,  457,
      457,  457,  457,  457,  303,  304,  303,  936,  306, 1478,

      455, 2387,  455,  456, 2387,  457,  457,  457,  457,  457,
      457,  457,  302,  303,  304,  303, 2387,  305,  302,  302,
      302,  302,  303,  304,  303,  936,  306,  302,  302,  302,
     2387,  302,  303,  304,  303, 1582,  305, 1582,  937, 1583,
      302, 1583, 2387,  462,  462,  462,  462,  462,  462,  462,
      625,  625,  625,  625,  625,  625,  625,  938,  302,  626,
      626,  626,  626,  626,  626,  626,  937,  302,  303,  304,
      303, 1479,  305, 1479,  459, 2387,  459,  460, 2387,  461,
      461,  461,  461,  461,  461,  461,  303,  304,  303, 1480,
      306, 1481,  459, 1481,  459,  460, 2387,  461,  461,  461,

      461,  461,  461,  461,  303,  304,  303, 2387,  306, 1482,
     1585, 1484, 1585, 1484, 2387,  462,  462,  462,  462,  462,
      462,  462,  303,  304,  303, 1486,  305, 1486,  463, 1485,
      463, 2387, 2387,  464,  464,  464,  464,  464,  464,  464,
      303,  304,  303, 1503,  306, 1503,  463, 1504,  463, 1504,
     2387,  464,  464,  464,  464,  464,  464,  464,  303,  304,
      303, 1505,  305, 1505,  465, 1604,  465, 1604, 2387,  466,
      466,  466,  466,  466,  466,  466,  303,  304,  303, 1511,
      306, 1511,  465, 1605,  465, 2387, 2387,  466,  466,  466,
      466,  466,  466,  466,  303,  304,  303, 1512,  305, 1610,

      467, 1610,  467, 2387, 2387,  468,  468,  468,  468,  468,
      468,  468,  303,  304,  303, 1513,  306, 1513,  467, 1611,
      467, 1611, 2387,  468,  468,  468,  468,  468,  468,  468,
      303,  304,  303, 1514,  305, 1515,  469, 1515,  469, 2387,
     2387,  470,  470,  470,  470,  470,  470,  470,  303,  304,
      303, 2387,  306, 1516,  469, 1612,  469, 1612, 2387,  470,
      470,  470,  470,  470,  470,  470,  303,  304,  303, 1517,
      305, 1517, 1613, 1520, 1613, 1520, 2387,  471,  471,  471,
      471,  471,  471,  471,  303,  304,  303, 1518,  306, 2387,
     1615, 1521, 1615, 2387, 2387,  471,  471,  471,  471,  471,

      471,  471,  303,  304,  303, 1533,  305, 1533, 1540, 1634,
     1540, 1634, 2387,  472,  472,  472,  472,  472,  472,  472,
      303,  304,  303, 1636,  306, 1636, 1542, 1635, 1550, 2387,
     1550,  472,  472,  472,  472,  472,  472,  472,  303,  304,
      303, 1644,  305, 1644, 2387, 1555, 1551, 1555, 2387,  473,
      473,  473,  473,  473,  473,  473,  303,  304,  303, 1648,
      306, 1648, 1557, 1556, 1557, 2387, 2387,  473,  473,  473,
      473,  473,  473,  473,  303,  304,  303, 1649,  305, 1649,
     1558, 1559, 1650, 1559, 1650,  474,  474,  474,  474,  474,
      474,  474,  303,  304,  303, 1561,  306, 1561, 1562, 1560,

     1562, 2387, 2387,  474,  474,  474,  474,  474,  474,  474,
      303,  304,  303, 1563,  305, 1563, 1564, 1568, 1564, 1568,
     2387,  475,  475,  475,  475,  475,  475,  475,  303,  304,
      303, 1654,  306, 1654, 1570, 1569, 1570, 2387, 2387,  475,
      475,  475,  475,  475,  475,  475,  303,  304,  303, 1571,
      305, 1571, 1572, 1573, 1572, 1573, 2387,  476,  476,  476,
      476,  476,  476,  476,  303,  304,  303, 1655,  306, 1655,
     1575, 1657, 1575, 1657, 2387,  476,  476,  476,  476,  476,
      476,  476,  303,  304,  303, 1656,  305, 1577, 1576, 1577,
     1658, 2387, 1658,  477,  477,  477,  477,  477,  477,  477,

      303,  304,  303, 2387,  306, 1578, 1580, 1581, 1580, 1581,
     2387,  477,  477,  477,  477,  477,  477,  477,  303,  304,
      303, 1582,  305, 1582, 1583, 1585, 1583, 1585, 2387,  478,
      478,  478,  478,  478,  478,  478,  303,  304,  303, 1591,
      306, 1591, 1666, 1604, 1666, 1604, 2387,  478,  478,  478,
      478,  478,  478,  478,  303,  304,  303, 1592,  305, 2387,
     1678, 1605, 1678, 2387, 2387,  479,  479,  479,  479,  479,
      479,  479,  303,  304,  303,  943,  306, 1610, 2387, 1610,
      944, 2387,  948,  479,  479,  479,  479,  479,  479,  479,
      302,  303,  304,  303, 2387,  305,  302,  302,  302,  302,

      303,  304,  303,  943,  306,  302,  302,  302,  944,  302,
      948,  949,  950,  951,  302,  303,  304,  303,  302,  305,
      302,  302,  302,  302,  303,  304,  303,  957,  306,  302,
      302,  302, 1679,  302, 1679, 1611,  302, 1611,  958,  949,
      950,  951,  302, 2387, 2387,  302,  302,  303,  304,  303,
     1680,  305,  302,  302,  302,  957,  302,  303,  304,  303,
      302,  306,  302,  302,  302,  302,  958,  959,  962,  302,
      963,  302,  303,  304,  303,  302,  305,  302,  302,  302,
      302,  303,  304,  303,  966,  306,  302,  302,  302, 1612,
      302, 1612,  302, 2387, 2387,  959,  962, 2387,  963,  302,

      968, 1039,  302,  302,  303,  304,  303, 2387,  305,  302,
      302,  302,  966,  302,  303,  304,  303,  302,  306,  302,
      302,  302,  302,  303,  304,  303,  302,  305,  968, 1039,
     2387, 1613,  302, 1613,  485,  485,  485,  485,  485,  485,
      485,  303,  304,  303, 1615,  306, 1615, 2387, 1634,  302,
     1634, 2387,  485,  485,  485,  485,  485,  485,  485,  302,
      303,  304,  303, 1703,  305, 1703, 1635, 1636, 1644, 1636,
     1644,  486,  486,  486,  486,  486,  486,  486,  303,  304,
      303, 1648,  306, 1648, 1649, 1650, 1649, 1650, 2387,  486,
      486,  486,  486,  486,  486,  486,  303,  304,  303, 1654,

      305, 1654, 1655, 1717, 1655, 1717, 2387,  487,  487,  487,
      487,  487,  487,  487,  303,  304,  303, 1657,  306, 1657,
     1656, 1658, 1666, 1658, 1666,  487,  487,  487,  487,  487,
      487,  487,  303,  304,  303, 1738,  305, 1738,  488, 2387,
      488,  489, 2387,  490,  490,  490,  490,  490,  490,  490,
      303,  304,  303, 1739,  306, 1678,  488, 1678,  488,  489,
     2387,  490,  490,  490,  490,  490,  490,  490,  303,  304,
      303, 1679,  305, 1679, 1741, 1745, 1741, 1745, 2387,  491,
      491,  491,  491,  491,  491,  491,  303,  304,  303, 1680,
      306, 2387, 1748, 1746, 1748, 2387, 2387,  491,  491,  491,

      491,  491,  491,  491,  303,  304,  303, 1754,  305, 1754,
     1749, 1756, 1760, 1756, 1760,  492,  492,  492,  492,  492,
      492,  492,  303,  304,  303, 1755,  306, 2387, 2387, 1757,
     1761, 2387, 2387,  492,  492,  492,  492,  492,  492,  492,
      303,  304,  303, 1703,  305, 1703, 1778, 1717, 1778, 1717,
     2387,  493,  493,  493,  493,  493,  493,  493,  303,  304,
      303, 1040,  306, 1809, 1779, 1809, 1741, 2387, 1741,  493,
      493,  493,  493,  493,  493,  493,  302,  303,  304,  303,
      302,  305,  302,  302,  302,  302,  302,  302, 2387, 1040,
     1043,  302,  303,  304,  303,  302,  305,  302,  302,  302,

      302,  303,  304,  303, 2387,  306,  302,  302,  302, 2387,
      302,  627,  627,  627,  627,  627,  627,  627, 1043,  302,
     2387, 1044,  302,  302,  303,  304,  303,  302,  306,  302,
      302,  302,  302,  302,  302, 2387, 1045,  302,  565,  303,
      304,  303,  302,  305, 2387,  566,  302, 1050,  567, 1044,
      500,  500,  500,  500,  500,  500,  500,  628,  628,  628,
      628,  628,  628,  628, 1045, 1051,  565, 1052, 2387,  302,
      303,  304,  303,  566,  305, 1050,  567, 1814,  496, 1814,
     2387,  497,  497,  497,  497,  497,  497,  497,  303,  304,
      303, 2387,  306, 1051, 2387, 1052,  496, 2387, 1053,  497,

      497,  497,  497,  497,  497,  497,  302,  303,  304,  303,
      302,  305,  302,  302,  302,  302,  302,  302,  303,  304,
      303, 1816,  306, 1816, 2387,  302, 1053, 2387, 2387,  500,
      500,  500,  500,  500,  500,  500,  629,  629,  629,  629,
      629,  629,  629,  630, 2387,  631,  631,  631,  631,  631,
      631,  631,  302,  302,  303,  304,  303,  302,  306,  302,
      302,  302,  302,  302,  302,  303,  304,  303, 1823,  305,
     1823, 1824,  302, 1824, 2387, 2387,  508,  508,  508,  508,
      508,  508,  508,  630, 2387,  631,  631,  631,  631,  631,
      631,  631,  666,  666,  666,  666,  666,  666,  666,  302,

      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,
      302,  302,  303,  304,  303, 1827,  306, 1827, 1845,  302,
     1845, 2387, 2387,  508,  508,  508,  508,  508,  508,  508,
      634, 2387,  635,  635,  635,  635,  635,  635,  635,  667,
      667,  667,  667,  667,  667,  667,  302,  302,  303,  304,
      303,  302,  306,  302,  302,  302,  302,  302,  302,  303,
      304,  303, 1856,  305, 1856, 1859,  302, 1859, 2387, 2387,
      512,  512,  512,  512,  512,  512,  512,  634, 2387,  635,
      635,  635,  635,  635,  635,  635,  668,  668,  668,  668,
      668,  668,  668,  302,  302,  303,  304,  303,  302,  305,

      302,  302,  302,  302,  302,  302,  303,  304,  303, 1869,
      306, 1869, 1809,  302, 1809, 2387, 2387,  512,  512,  512,
      512,  512,  512,  512,  638, 2387,  639,  639,  639,  639,
      639,  639,  639,  669,  669,  669,  669,  669,  669,  669,
      302,  302,  303,  304,  303,  302,  306,  302,  302,  302,
      302,  302,  302,  303,  304,  303, 1814,  305, 1814, 1816,
      302, 1816, 2387, 2387,  541,  541,  541,  541,  541,  541,
      541,  638, 2387,  639,  639,  639,  639,  639,  639,  639,
      670,  670,  670,  670,  670,  670,  670,  302,  302,  303,
      304,  303,  302,  305,  302,  302,  302,  302,  302,  302,

      303,  304,  303, 1889,  306, 1889, 1823,  302, 1823, 2387,
     2387,  541,  541,  541,  541,  541,  541,  541,  642, 2387,
      643,  643,  643,  643,  643,  643,  643,  671,  671,  671,
      671,  671,  671,  671,  302,  302,  303,  304,  303,  302,
      306,  302,  302,  302,  302,  302,  302,  303,  304,  303,
     1824,  305, 1824, 1827,  302, 1827, 2387, 2387,  546,  546,
      546,  546,  546,  546,  546,  642, 2387,  643,  643,  643,
      643,  643,  643,  643,  673,  673,  673,  673,  673,  673,
      673,  302,  302,  303,  304,  303,  302,  305,  302,  302,
      302,  302,  302,  302,  303,  304,  303, 1893,  306, 1893,

     1845,  302, 1845, 2387, 2387,  546,  546,  546,  546,  546,
      546,  546,  646, 2387,  647,  647,  647,  647,  647,  647,
      647,  698,  698,  698,  698,  698,  698,  698,  302,  302,
      303,  304,  303,  302,  306,  302,  302,  302,  302,  302,
      302,  303,  304,  303, 1914,  305, 1914, 1917,  302, 1917,
     2387, 2387,  547,  547,  547,  547,  547,  547,  547,  646,
     2387,  647,  647,  647,  647,  647,  647,  647,  699,  699,
      699,  699,  699,  699,  699,  302,  302,  303,  304,  303,
      302,  305,  302,  302,  302,  302,  302,  302,  303,  304,
      303, 1856,  306, 1856, 1859,  302, 1859, 2387, 2387,  547,

      547,  547,  547,  547,  547,  547,  650, 1054,  651,  651,
      651,  651,  651,  651,  651,  700,  700,  700,  700,  700,
      700,  700,  302,  302,  303,  304,  303,  302,  306,  302,
      302,  302,  302,  302,  302, 1054, 2387, 1055,  302,  303,
      304,  303,  302,  305,  302,  302,  302,  302,  303,  304,
      303, 2387,  306,  302,  302,  302,  650,  302,  651,  651,
      651,  651,  651,  651,  651, 1055,  302, 2387, 2387,  302,
      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,
      302,  302, 2387, 1922,  302, 1922, 1058, 1059, 1924,  302,
     1924, 2387, 2387,  302,  302,  303,  304,  303, 2387,  305,

      302,  302,  302,  654, 2387,  655,  655,  655,  655,  655,
      655,  655, 2387,  302, 1058, 1059,  302,  302,  303,  304,
      303,  302,  306,  302,  302,  302,  302,  302,  302,  701,
      701,  701,  701,  701,  701,  701,  302, 1925, 2387, 1925,
      302,  302,  303,  304,  303, 2387,  306,  302,  302,  302,
      654, 2387,  655,  655,  655,  655,  655,  655,  655, 1926,
      302, 1926, 2387,  302,  302,  303,  304,  303,  302,  305,
      302,  302,  302,  302,  302,  302, 1061,  303,  304,  303,
     1062,  305, 1869,  302, 1869, 2387, 2387,  302,  550,  550,
      550,  550,  550,  550,  550,  658, 2387,  659,  659,  659,

      659,  659,  659,  659, 1061, 1069, 2387, 1936, 1062, 1936,
      302,  302,  303,  304,  303,  302,  306,  302,  302,  302,
      302,  302,  302,  303,  304,  303, 1889,  306, 1889, 1893,
      302, 1893, 2387, 1069,  550,  550,  550,  550,  550,  550,
      550,  658, 2387,  659,  659,  659,  659,  659,  659,  659,
      708,  708,  708,  708,  708,  708,  708,  302,  302,  303,
      304,  303,  302,  305,  302,  302,  302,  302,  302,  302,
      303,  304,  303, 1954,  305, 1954, 1958,  302, 1958, 2387,
     2387,  551,  551,  551,  551,  551,  551,  551,  662, 2387,
      663,  663,  663,  663,  663,  663,  663,  709,  709,  709,

      709,  709,  709,  709,  302,  302,  303,  304,  303,  302,
      306,  302,  302,  302,  302,  302,  302,  303,  304,  303,
     1071,  306, 1072, 1961,  302, 1961, 2387, 1073,  551,  551,
      551,  551,  551,  551,  551,  632,  632,  632,  632,  632,
      632,  632, 2387, 2387, 1788, 1075, 1788,  633, 1071, 1076,
     1072,  302,  303,  304,  303, 1073,  305, 1914,  509, 1914,
      509,  510, 1789,  511,  511,  511,  511,  511,  511,  511,
      303,  304,  303, 1075,  306,  633,  509, 1076,  509,  510,
     2387,  511,  511,  511,  511,  511,  511,  511,  303,  304,
      303, 1792,  305, 1792,  513, 1798,  513, 1798, 2387,  514,

      514,  514,  514,  514,  514,  514,  303,  304,  303, 1793,
      306, 2387,  513, 1799,  513, 2387, 2387,  514,  514,  514,
      514,  514,  514,  514,  303,  304,  303, 1738,  305, 1738,
      515, 1745,  515, 1745, 2387,  516,  516,  516,  516,  516,
      516,  516,  303,  304,  303, 1739,  306, 2387,  515, 1746,
      515, 2387, 2387,  516,  516,  516,  516,  516,  516,  516,
      303,  304,  303, 1748,  305, 1748,  517, 1821,  517, 1821,
     2387,  518,  518,  518,  518,  518,  518,  518,  303,  304,
      303, 1749,  306, 2387,  517, 1822,  517, 2387, 2387,  518,
      518,  518,  518,  518,  518,  518,  303,  304,  303, 1754,

      305, 1754,  519, 1756,  519, 1756, 2387,  520,  520,  520,
      520,  520,  520,  520,  303,  304,  303, 1755,  306, 2387,
      519, 1757,  519, 2387, 2387,  520,  520,  520,  520,  520,
      520,  520,  303,  304,  303, 1760,  305, 1760,  521, 1829,
      521, 1829, 2387,  522,  522,  522,  522,  522,  522,  522,
      303,  304,  303, 1761,  306, 2387,  521, 1830,  521, 2387,
     2387,  522,  522,  522,  522,  522,  522,  522,  303,  304,
      303, 1778,  305, 1778,  523, 1848,  523, 1848, 2387,  524,
      524,  524,  524,  524,  524,  524,  303,  304,  303, 1779,
      306, 2387,  523, 1849,  523, 2387, 2387,  524,  524,  524,

      524,  524,  524,  524,  303,  304,  303, 1852,  305, 1852,
      525, 1788,  525, 1788, 2387,  526,  526,  526,  526,  526,
      526,  526,  303,  304,  303, 1853,  306, 2387,  525, 1789,
      525, 2387, 2387,  526,  526,  526,  526,  526,  526,  526,
      303,  304,  303, 1792,  305, 1792,  527, 1863,  527, 1863,
     2387,  528,  528,  528,  528,  528,  528,  528,  303,  304,
      303, 1793,  306, 2387,  527, 1864,  527, 2387, 2387,  528,
      528,  528,  528,  528,  528,  528,  303,  304,  303, 1865,
      305, 1865,  529, 1867,  529, 1867, 2387,  530,  530,  530,
      530,  530,  530,  530,  303,  304,  303, 1866,  306, 2387,

      529, 1868,  529, 2387, 2387,  530,  530,  530,  530,  530,
      530,  530,  303,  304,  303, 1798,  305, 1798,  531, 1879,
      531, 1879, 2387,  532,  532,  532,  532,  532,  532,  532,
      303,  304,  303, 1799,  306, 2387,  531, 1880,  531, 2387,
     2387,  532,  532,  532,  532,  532,  532,  532,  303,  304,
      303, 1821,  305, 1821,  533, 1829,  533, 1829, 2387,  534,
      534,  534,  534,  534,  534,  534,  303,  304,  303, 1822,
      306, 2387,  533, 1830,  533, 2387, 2387,  534,  534,  534,
      534,  534,  534,  534,  303,  304,  303, 1901,  305, 1901,
      535, 1917,  535, 1917, 2387,  536,  536,  536,  536,  536,

      536,  536,  303,  304,  303, 1902,  306, 1077,  535, 1078,
      535, 2387, 1082,  536,  536,  536,  536,  536,  536,  536,
      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,
      302,  302,  303,  304,  303, 1077,  305, 1078, 2387,  302,
     1082, 2387, 2387,  552,  552,  552,  552,  552,  552,  552,
      662, 2387,  663,  663,  663,  663,  663,  663,  663,  710,
      710,  710,  710,  710,  710,  710,  302,  302,  303,  304,
      303,  302,  306,  302,  302,  302,  302,  302,  302,  303,
      304,  303, 1083,  306, 1084, 1922,  302, 1922, 2387, 2387,
      552,  552,  552,  552,  552,  552,  552,  672, 1085,  672,

     1086, 2387,  671,  671,  671,  671,  671,  671,  671, 1905,
     1083, 1905, 1084,  302,  302,  303,  304,  303,  302,  305,
      302,  302,  302,  302,  302,  302, 1085, 1906, 1086,  302,
      303,  304,  303,  302,  305,  302,  302,  302,  302,  303,
      304,  303, 2387,  306,  302,  302,  302,  674,  302,  675,
      675,  675,  675,  675,  675,  675, 1848,  302, 1848, 2387,
      302,  302,  303,  304,  303,  302,  306,  302,  302,  302,
      302,  302,  302, 2387, 1849,  302, 1924, 1925, 1924, 1925,
      302, 1852, 2387, 1852,  302,  636,  636,  636,  636,  636,
      636,  636,  576,  569,  955, 1088,  964,  637,  577, 1853,

      570,  571,  956,  578,  572,  965,  573,  302,  302,  303,
      304,  303,  302,  305,  302,  302,  302,  302,  302,  302,
      576,  569,  955, 1088,  964,  637,  577,  302,  570,  571,
      956,  578,  572,  965,  573, 1926, 1936, 1926, 1936,  610,
      640,  640,  640,  640,  640,  640,  640,  611,  612,  613,
     1089, 1090,  641, 1091,  302,  302,  303,  304,  303,  302,
      306,  302,  302,  302,  302,  302,  302,  610, 1092, 1093,
     1094, 1095, 1096, 2387,  302,  611,  612,  613, 1089, 1090,
      641, 1091,  644,  644,  644,  644,  644,  644,  644, 1997,
     2005, 1997, 2005, 1954,  645, 1954, 1092, 1093, 1094, 1095,

     1096,  302,  302,  303,  304,  303,  302,  305,  302,  302,
      302,  302,  302,  302,  711,  711,  711,  711,  711,  711,
      711,  302,  645,  648,  648,  648,  648,  648,  648,  648,
     1958, 2387, 1958, 1097,  674,  649,  675,  675,  675,  675,
      675,  675,  675, 1961, 2021, 1961, 2021, 2387,  302,  302,
      303,  304,  303,  302,  306,  302,  302,  302,  302,  302,
      302, 1097, 1098,  649, 2030, 1099, 2030, 2387,  302,  652,
      652,  652,  652,  652,  652,  652, 2031, 2038, 2031, 2038,
      960,  653,  656,  656,  656,  656,  656,  656,  656, 1101,
     1098, 1102,  961, 1099,  657,  302,  302,  303,  304,  303,

      302,  305,  302,  302,  302,  302,  302,  302,  960,  653,
     1103, 1104, 1106, 1107, 1860,  302, 1860, 1101, 1105, 1102,
      961, 2387,  657,  660,  660,  660,  660,  660,  660,  660,
     2387, 2052, 1861, 2052, 2053,  661, 2053, 2387, 1103, 1104,
     1106, 1107,  302,  302,  303,  304,  303,  302,  306,  302,
      302,  302,  302,  302,  302,  712,  712,  712,  712,  712,
      712,  712,  302,  661,  664,  664,  664,  664,  664,  664,
      664, 1997, 2387, 1997, 1108,  678,  665,  679,  679,  679,
      679,  679,  679,  679, 2059, 2005, 2059, 2005, 2387,  302,
      302,  303,  304,  303,  302,  305,  302,  302,  302,  302,

      302,  302, 1108, 1109,  665, 1110, 1111, 2387, 2387,  302,
      676,  676,  676,  676,  676,  676,  676, 2065, 2066, 2065,
     2066, 1115,  677,  680,  680,  680,  680,  680,  680,  680,
     1116, 1109, 1121, 1110, 1111,  681,  302,  302,  303,  304,
      303,  302,  306,  302,  302,  302,  302,  302,  302, 1115,
      677, 2387, 1122, 1123, 1124, 2067,  302, 2067, 1116, 2068,
     1121, 2068,  678,  681,  679,  679,  679,  679,  679,  679,
      679,  682, 2387,  683,  683,  683,  683,  683,  683,  683,
     1122, 1123, 1124,  302,  302,  303,  304,  303,  302,  305,
      302,  302,  302,  302,  302,  302,  713,  713,  713,  713,

      713,  713,  713,  302,  684,  684,  684,  684,  684,  684,
      684, 1863, 2071, 1863, 2071,  682,  685,  683,  683,  683,
      683,  683,  683,  683, 2021, 2072, 2021, 2072, 2387, 1864,
      302,  302,  303,  304,  303,  302,  306,  302,  302,  302,
      302,  302,  302, 1129,  685, 1130, 1131, 1132, 1133,  686,
      302,  687,  687,  687,  687,  687,  687,  687,  688,  688,
      688,  688,  688,  688,  688, 2073, 2030, 2073, 2030, 2387,
      689, 1129, 1134, 1130, 1131, 1132, 1133,  302,  302,  303,
      304,  303,  302,  305,  302,  302,  302,  302,  302,  302,
      714,  714,  714,  714,  714,  714,  714,  302,  689,  686,

     1134,  687,  687,  687,  687,  687,  687,  687,  704, 1137,
      705,  705,  705,  705,  705,  705,  705,  715,  715,  715,
      715,  715,  715,  715,  302,  302,  303,  304,  303,  302,
      306,  302,  302,  302,  302,  302,  302, 1137, 1138, 1139,
     1140, 1141, 1142,  704,  302,  705,  705,  705,  705,  705,
      705,  705, 2387,  706,  706,  706,  706,  706,  706,  706,
     1865, 2031, 1865, 2031, 2387,  707, 1138, 1139, 1140, 1141,
     1142,  302,  303,  304,  303,  562,  305,  562, 1866,  562,
      562, 2387, 1135,  562,  562,  562,  562,  562,  562,  562,
      584,  592,  584,  707, 1136, 2387,  593,  716,  716,  716,

      716,  716,  716,  716, 2387, 2387,  585, 1041,  586,  587,
     1135,  594, 1145, 1146, 2387, 1042,  595, 1147, 1867,  596,
     1867, 2387, 1136,  588, 2387, 2084,  597, 2084, 2085, 2387,
     2085,  952,  589,  590,  591, 1041, 1868,  587, 2387,  594,
     1145, 1146,  953, 1042,  595, 1147,  928,  596,  928,  954,
      717,  588,  718,  718,  718,  718,  718,  718,  718,  952,
      589,  590,  591,  598,  929, 1149,  930,  945,  931,  599,
      953, 1150,  600, 1079,  946,  601,  947,  954,  602,  603,
     1080,  604, 2387,  932, 1151, 1152, 2387, 1081,  605, 1153,
     2387,  598, 1154, 1149,  930,  945,  931,  599, 2387, 1150,

      600, 1079,  946,  601,  947, 2387,  602,  603, 1080,  604,
      614,  932, 1151, 1152,  615, 1081, 1155, 1153,  616, 1156,
     1154,  939,  617, 1157,  618,  940,  941,  942, 1158, 2387,
      619,  719,  719,  719,  719,  719,  719,  719,  614, 1159,
     1160, 1161,  615,  720, 1155, 2387,  616, 1156, 2387,  939,
      617, 1157,  618,  940,  941,  942, 1158,  717,  619,  718,
      718,  718,  718,  718,  718,  718, 2387, 1159, 1160, 1161,
      721,  720,  722,  722,  722,  722,  722,  722,  722,  723,
      723,  723,  723,  723,  723,  723, 2387, 1162, 1163, 1164,
      721,  724,  722,  722,  722,  722,  722,  722,  722,  725,

     2387,  726,  726,  726,  726,  726,  726,  726,  727,  727,
      727,  727,  727,  727,  727, 1162, 1163, 1164, 1165,  724,
      728,  725, 2387,  726,  726,  726,  726,  726,  726,  726,
      729, 2387,  730,  730,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  731,  731,  731, 1165, 1167,  728, 1169,
      729,  732,  730,  730,  730,  730,  730,  730,  730,  733,
      733,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      734,  734,  734, 2387, 1168, 1167, 2387, 1169,  735,  732,
      736,  736,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  737, 2387, 1171, 1172, 1177,  735,  738,

      736,  736,  736,  736,  736,  736,  736,  739, 2387,  740,
      740,  740,  740,  740,  740,  740,  741,  741,  741,  741,
      741,  741,  741, 1171, 1172, 1177, 1178,  738,  742,  739,
     2387,  740,  740,  740,  740,  740,  740,  740,  743, 2387,
      744,  744,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  745,  745, 1178, 1179,  742, 1182,  743,  746,
      744,  744,  744,  744,  744,  744,  744,  747, 2387,  748,
      748,  748,  748,  748,  748,  748,  749,  749,  749,  749,
      749,  749,  749, 1179, 2387, 1182, 1183,  746,  750,  747,
     2387,  748,  748,  748,  748,  748,  748,  748,  751, 2387,

      752,  752,  752,  752,  752,  752,  752,  753,  753,  753,
      753,  753,  753,  753, 1183, 1185,  750, 1186,  751,  754,
      752,  752,  752,  752,  752,  752,  752,  755, 2387,  756,
      756,  756,  756,  756,  756,  756,  757,  757,  757,  757,
      757,  757,  757, 1185, 2387, 1186, 1187,  754,  758,  755,
     2387,  756,  756,  756,  756,  756,  756,  756,  759, 2387,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  761,  761, 1187, 1188,  758, 1189,  759,  762,
      760,  760,  760,  760,  760,  760,  760,  763, 2387,  764,
      764,  764,  764,  764,  764,  764,  765,  765,  765,  765,

      765,  765,  765, 1188, 2387, 1189, 1197,  762,  766,  763,
     2387,  764,  764,  764,  764,  764,  764,  764,  767, 2387,
      768,  768,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  769,  769, 1197, 1200,  766, 1202,  767,  770,
      768,  768,  768,  768,  768,  768,  768,  771, 2387,  772,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      773,  773,  773, 1200, 1203, 1202, 1204,  770,  774,  771,
     2387,  772,  772,  772,  772,  772,  772,  772,  775,  775,
      775,  775,  775,  775,  775,  776,  776,  776,  776,  776,
      776,  776, 1203, 2038, 1204, 2038,  774,  777,  777,  777,

      777,  777,  777,  777,  778,  778,  778,  778,  778,  778,
      778,  779, 2387,  780,  780,  780,  780,  780,  780,  780,
      781,  781,  781,  781,  781,  781,  781, 2387, 1205, 1206,
     1207,  779,  782,  780,  780,  780,  780,  780,  780,  780,
      784, 2387,  785,  785,  785,  785,  785,  785,  785,  786,
      786,  786,  786,  786,  786,  786, 1205, 1206, 1207, 2387,
      782,  787,  784, 2387,  785,  785,  785,  785,  785,  785,
      785,  788,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  790, 2052,  790, 2052,  787,
      789,  789,  789,  789,  789,  789,  789,  791,  791,  791,

      791,  791,  791,  791,  792, 2053,  792, 2053, 2387,  791,
      791,  791,  791,  791,  791,  791,  793,  793,  793,  793,
      793,  793,  793,  794, 2059,  794, 2059, 2387,  793,  793,
      793,  793,  793,  793,  793,  795,  795,  795,  795,  795,
      795,  795,  796, 2065,  796, 2065, 2387,  795,  795,  795,
      795,  795,  795,  795,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  798,  799,  799,
      799,  799,  799,  799,  799,  800,  800,  800,  800,  800,
      800,  800,  801,  801,  801,  801,  801,  801,  801,  802,
      802,  802,  802,  802,  802,  802,  803,  803,  803,  803,

      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
      805,  805,  805,  805,  805,  805,  805,  811,  811,  811,
      811,  811,  811,  811,  812,  812,  812,  812,  812,  812,
      812,  813,  813,  813,  813,  813,  813,  813,  814, 2387,
      815,  815,  815,  815,  815,  815,  815,  816,  816,  816,
      816,  816,  816,  816, 1208, 1209, 1210, 1211,  814,  817,
      815,  815,  815,  815,  815,  815,  815,  818,  818,  818,
      818,  818,  818,  818,  819,  819,  819,  819,  819,  819,
      819, 2387, 1208, 1209, 1210, 1211, 2387,  817,  820,  820,
      820,  820,  820,  820,  820,  823,  823,  823,  823,  823,

      823,  823,  824,  824,  824,  824,  824,  824,  824,  827,
      827,  827,  827,  827,  827,  827,  835,  835,  835,  835,
      835,  835,  835,  836, 2387,  837,  837,  837,  837,  837,
      837,  837,  838,  838,  838,  838,  838,  838,  838, 1215,
     2066, 2387, 2066,  836,  839,  837,  837,  837,  837,  837,
      837,  837,  840,  840,  840,  840,  840,  840,  840,  841,
      841,  841,  841,  841,  841,  841, 2387, 1215,  842,  843,
      842, 2387,  839,  841,  841,  841,  841,  841,  841,  841,
      844,  844,  844,  844,  844,  844,  844,  845, 2067,  845,
     2067, 2387,  844,  844,  844,  844,  844,  844,  844,  846,

      846,  846,  846,  846,  846,  846,  847, 2068,  847, 2068,
     2387,  846,  846,  846,  846,  846,  846,  846,  848,  848,
      848,  848,  848,  848,  848,  849, 2113,  849, 2113, 2387,
      848,  848,  848,  848,  848,  848,  848,  850,  850,  850,
      850,  850,  850,  850,  851,  852,  851, 2387, 2387,  850,
      850,  850,  850,  850,  850,  850,  853,  853,  853,  853,
      853,  853,  853,  854, 2071,  854, 2071, 2387,  853,  853,
      853,  853,  853,  853,  853,  855,  855,  855,  855,  855,
      855,  855,  856, 2072,  856, 2072, 2387,  855,  855,  855,
      855,  855,  855,  855,  857,  857,  857,  857,  857,  857,

      857,  858, 2073,  858, 2073, 2387,  857,  857,  857,  857,
      857,  857,  857,  859,  859,  859,  859,  859,  859,  859,
      860,  861,  860, 2387, 2387,  859,  859,  859,  859,  859,
      859,  859,  862,  862,  862,  862,  862,  862,  862,  863,
     2120,  863, 2120, 2387,  862,  862,  862,  862,  862,  862,
      862,  864,  864,  864,  864,  864,  864,  864,  865, 2121,
      865, 2121, 2387,  864,  864,  864,  864,  864,  864,  864,
      866,  866,  866,  866,  866,  866,  866,  867, 2084,  867,
     2084, 2387,  866,  866,  866,  866,  866,  866,  866,  872,
      872,  872,  872,  872,  872,  872,  877,  877,  877,  877,

      877,  877,  877,  878,  878,  878,  878,  878,  878,  878,
      881,  881,  881,  881,  881,  881,  881,  882,  882,  882,
      882,  882,  882,  882,  883,  883,  883,  883,  883,  883,
      883,  891, 2085,  891, 2085,  891,  891, 2387, 2387,  891,
      891,  891,  891,  891,  891,  891,  623,  623,  623,  623,
      623,  623,  623,  624,  624,  624,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  627,  627,  627,  627,  627,  627,
      627,  628,  628,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  629,  629,  629,  632,  632,  632,  632,  632,

      632,  632, 2127, 2128, 2127, 2128,  630,  633,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,
      632,  632, 1218,  969, 1219,  969, 2387,  633,  970,  970,
      970,  970,  970,  970,  970,  633,  636,  636,  636,  636,
      636,  636,  636, 1225, 2141, 2148, 2141, 2148,  637, 2113,
     1218, 2113, 1219, 2387,  634,  633,  635,  635,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  636,  636,
     1212, 1225,  971, 1213,  971,  637,  637,  972,  972,  972,
      972,  972,  972,  972,  640,  640,  640,  640,  640,  640,
      640, 1229, 1214, 1230, 2387, 2154,  641, 2154, 1212, 2387,

     2387, 1213,  638,  637,  639,  639,  639,  639,  639,  639,
      639,  640,  640,  640,  640,  640,  640,  640, 1231, 1229,
      973, 1230,  973,  641,  641,  974,  974,  974,  974,  974,
      974,  974,  644,  644,  644,  644,  644,  644,  644, 1238,
     2155, 1239, 2155, 2156,  645, 2156, 1231, 2120, 2387, 2120,
      642,  641,  643,  643,  643,  643,  643,  643,  643,  644,
      644,  644,  644,  644,  644,  644, 1240, 1238,  975, 1239,
      975,  645,  645,  976,  976,  976,  976,  976,  976,  976,
      648,  648,  648,  648,  648,  648,  648, 1241, 2121, 1242,
     2121, 2127,  649, 2127, 1240, 2128, 2387, 2128,  646,  645,

      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648, 1243, 1241,  977, 1242,  977,  649,
      649,  978,  978,  978,  978,  978,  978,  978,  652,  652,
      652,  652,  652,  652,  652, 1244, 2141, 1247, 2141, 2175,
      653, 2175, 1243, 2148, 2387, 2148,  650,  649,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
      652,  652, 1252, 1244,  979, 1247,  979,  653,  653,  980,
      980,  980,  980,  980,  980,  980,  656,  656,  656,  656,
      656,  656,  656, 1253, 2154, 1254, 2154, 2155,  657, 2155,
     1252, 2156, 2387, 2156,  654,  653,  655,  655,  655,  655,

      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
     1255, 1253,  981, 1254,  981,  657,  657,  982,  982,  982,
      982,  982,  982,  982,  660,  660,  660,  660,  660,  660,
      660, 1256, 2175, 1257, 2175, 2213,  661, 2213, 1255, 2221,
     2387, 2221,  658,  657,  659,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660, 1260, 1256,
      983, 1257,  983,  661,  661,  984,  984,  984,  984,  984,
      984,  984,  664,  664,  664,  664,  664,  664,  664, 1261,
     2227, 2230, 2227, 2230,  665, 2231, 1260, 2231, 2387, 2387,
      662,  661,  663,  663,  663,  663,  663,  663,  663,  664,

      664,  664,  664,  664,  664,  664, 1258, 1261,  985, 1259,
      985,  665,  665,  986,  986,  986,  986,  986,  986,  986,
      666,  666,  666,  666,  666,  666,  666,  667,  667,  667,
      667,  667,  667,  667, 1258, 2387, 1264, 1259, 2387,  665,
      668,  668,  668,  668,  668,  668,  668,  669,  669,  669,
      669,  669,  669,  669,  670,  670,  670,  670,  670,  670,
      670,  672, 2387,  672, 1264, 2387,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      673,  673,  673,  673,  673,  673,  673,  676,  676,  676,
      676,  676,  676,  676, 2235, 2241, 2235, 2241,  674,  677,

      675,  675,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  676, 1265,  987, 1266,  987, 2387,  677,
      988,  988,  988,  988,  988,  988,  988,  677,  680,  680,
      680,  680,  680,  680,  680, 1268, 2244, 1269, 2244, 2213,
      681, 2213, 1265, 2248, 1266, 2248,  678,  677,  679,  679,
      679,  679,  679,  679,  679,  680,  680,  680,  680,  680,
      680,  680, 1270, 1268,  989, 1269,  989,  681,  681,  990,
      990,  990,  990,  990,  990,  990,  684,  684,  684,  684,
      684,  684,  684, 1271, 2221, 1272, 2221, 2227,  685, 2227,
     1270, 2262, 2387, 2262,  682,  681,  683,  683,  683,  683,

      683,  683,  683,  684,  684,  684,  684,  684,  684,  684,
     1273, 1271,  991, 1272,  991,  685,  685,  992,  992,  992,
      992,  992,  992,  992,  688,  688,  688,  688,  688,  688,
      688, 1274, 2230, 1278, 2230, 2231,  689, 2231, 1273, 2235,
     2387, 2235,  686,  685,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688, 1279, 1274,
      993, 1278,  993,  689,  689,  994,  994,  994,  994,  994,
      994,  994,  698,  698,  698,  698,  698,  698,  698,  699,
      699,  699,  699,  699,  699,  699, 1279, 1280, 1281, 2387,
     2387,  689,  700,  700,  700,  700,  700,  700,  700,  701,

      701,  701,  701,  701,  701,  701,  706,  706,  706,  706,
      706,  706,  706, 2387, 2387, 1280, 1281,  704,  707,  705,
      705,  705,  705,  705,  705,  705,  706,  706,  706,  706,
      706,  706,  706, 1282,  995, 1283,  995, 1284,  707,  996,
      996,  996,  996,  996,  996,  996,  707,  708,  708,  708,
      708,  708,  708,  708,  709,  709,  709,  709,  709,  709,
      709, 1282, 2266, 1283, 2266, 1284,  707,  710,  710,  710,
      710,  710,  710,  710,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  713,  713,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,

      714,  714,  715,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  719,  719,  719,  719,
      719,  719,  719, 2241, 2270, 2241, 2270,  717,  720,  718,
      718,  718,  718,  718,  718,  718,  719,  719,  719,  719,
      719,  719,  719, 1285,  997, 1289,  997, 2387,  720,  998,
      998,  998,  998,  998,  998,  998,  720,  723,  723,  723,
      723,  723,  723,  723, 1292, 2244, 1293, 2244, 2271,  724,
     2271, 1285, 2248, 1289, 2248,  721,  720,  722,  722,  722,
      722,  722,  722,  722,  723,  723,  723,  723,  723,  723,
      723, 1294, 1292,  999, 1293,  999,  724,  724, 1000, 1000,

     1000, 1000, 1000, 1000, 1000,  727,  727,  727,  727,  727,
      727,  727, 1295, 2279, 1296, 2279, 2280,  728, 2280, 1294,
     2281, 2387, 2281,  725,  724,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  727, 1297,
     1295, 1001, 1296, 1001,  728,  728, 1002, 1002, 1002, 1002,
     1002, 1002, 1002,  731,  731,  731,  731,  731,  731,  731,
     1298, 2262, 1299, 2262, 2266,  732, 2266, 1297, 2270, 2387,
     2270,  729,  728,  730,  730,  730,  730,  730,  730,  730,
      731,  731,  731,  731,  731,  731,  731, 1300, 1298, 1003,
     1299, 1003,  732,  732, 1004, 1004, 1004, 1004, 1004, 1004,

     1004,  733,  733,  733,  733,  733,  733,  733,  734,  734,
      734,  734,  734,  734,  734, 1300, 2271, 2290, 2271, 2290,
      732,  737,  737,  737,  737,  737,  737,  737, 2279, 2280,
     2279, 2280,  735,  738,  736,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737, 1302, 1005,
     1313, 1005, 2387,  738, 1006, 1006, 1006, 1006, 1006, 1006,
     1006,  738,  741,  741,  741,  741,  741,  741,  741, 1314,
     2281, 1315, 2281, 2290,  742, 2290, 1302, 2312, 1313, 2312,
      739,  738,  740,  740,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  741,  741, 1317, 1314, 1007, 1315,

     1007,  742,  742, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
      745,  745,  745,  745,  745,  745,  745, 1319, 2314, 1320,
     2314, 2312,  746, 2312, 1317, 2314, 2387, 2314,  743,  742,
      744,  744,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  745,  745, 1321, 1319, 1009, 1320, 1009,  746,
      746, 1010, 1010, 1010, 1010, 1010, 1010, 1010,  749,  749,
      749,  749,  749,  749,  749, 1322, 2330, 1323, 2330, 2330,
      750, 2330, 1321, 2345, 2387, 2345,  747,  746,  748,  748,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      749,  749, 1324, 1322, 1011, 1323, 1011,  750,  750, 1012,

     1012, 1012, 1012, 1012, 1012, 1012,  753,  753,  753,  753,
      753,  753,  753, 1325, 2348, 1326, 2348, 2349,  754, 2349,
     1324, 2345, 2387, 2345,  751,  750,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
     1328, 1325, 1013, 1326, 1013,  754,  754, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,  757,  757,  757,  757,  757,  757,
      757, 1331, 2361, 1332, 2361, 2348,  758, 2348, 1328, 2349,
     2387, 2349,  755,  754,  756,  756,  756,  756,  756,  756,
      756,  757,  757,  757,  757,  757,  757,  757, 1333, 1331,
     1015, 1332, 1015,  758,  758, 1016, 1016, 1016, 1016, 1016,

     1016, 1016,  761,  761,  761,  761,  761,  761,  761, 1334,
     2368, 1335, 2368, 2369,  762, 2369, 1333, 2361, 2387, 2361,
      759,  758,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761, 1336, 1334, 1017, 1335,
     1017,  762,  762, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
      765,  765,  765,  765,  765,  765,  765, 1337, 2376, 1340,
     2376, 2377,  766, 2377, 1336, 2378, 2387, 2378,  763,  762,
      764,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  765, 1343, 1337, 1019, 1340, 1019,  766,
      766, 1020, 1020, 1020, 1020, 1020, 1020, 1020,  769,  769,

      769,  769,  769,  769,  769, 1345, 2368, 1346, 2368, 2369,
      770, 2369, 1343, 2379, 2387, 2379,  767,  766,  768,  768,
      768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
      769,  769, 1347, 1345, 1021, 1346, 1021,  770,  770, 1022,
     1022, 1022, 1022, 1022, 1022, 1022,  773,  773,  773,  773,
      773,  773,  773, 1348, 2380, 1349, 2380, 2376,  774, 2376,
     1347, 2377, 2387, 2377,  771,  770,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,
     1353, 1348, 1023, 1349, 1023,  774,  774, 1024, 1024, 1024,
     1024, 1024, 1024, 1024,  775,  775,  775,  775,  775,  775,

      775,  776,  776,  776,  776,  776,  776,  776, 1353, 1356,
     1357, 2387, 2387,  774,  777,  777,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  778,  778,  781,  781,
      781,  781,  781,  781,  781, 2387, 2387, 1356, 1357,  779,
      782,  780,  780,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  781,  781, 1363, 1025, 1351, 1025, 2387,
      782, 1026, 1026, 1026, 1026, 1026, 1026, 1026,  782,  786,
      786,  786,  786,  786,  786,  786, 1352, 2378, 1364, 2378,
     2379,  787, 2379, 1363, 2380, 1351, 2380,  784,  782,  785,
      785,  785,  785,  785,  785,  785,  786,  786,  786,  786,

      786,  786,  786, 2387, 2387, 1027, 1364, 1027,  787,  787,
     1028, 1028, 1028, 1028, 1028, 1028, 1028,  788,  788,  788,
      788,  788,  788,  788,  790, 2385,  790, 2385, 2387,  789,
      789,  789,  789,  789,  789,  789,  787,  789,  789,  789,
      789,  789,  789,  789,  792, 2386,  792, 2386, 2387,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  794, 2385,  794, 2385, 2387,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  796, 2386,  796, 2386, 2387,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  797,  797,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
      799,  799,  800,  800,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  801,  801,  801,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  804,  804,  805,  805,  805,
      805,  805,  805,  805,  811,  811,  811,  811,  811,  811,
      811,  812,  812,  812,  812,  812,  812,  812,  813,  813,
      813,  813,  813,  813,  813,  816,  816,  816,  816,  816,
      816,  816, 2387, 2387, 2387, 2387,  814,  817,  815,  815,

      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  816, 1365, 1029, 1366, 1029, 1371,  817, 1030, 1030,
     1030, 1030, 1030, 1030, 1030,  817,  818,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
     1365, 2387, 1366, 2387, 1371,  817,  820,  820,  820,  820,
      820,  820,  820,  823,  823,  823,  823,  823,  823,  823,
      824,  824,  824,  824,  824,  824,  824,  827,  827,  827,
      827,  827,  827,  827,  835,  835,  835,  835,  835,  835,
      835,  838,  838,  838,  838,  838,  838,  838, 2387, 2387,
     2387, 2387,  836,  839,  837,  837,  837,  837,  837,  837,

      837,  838,  838,  838,  838,  838,  838,  838, 2387, 1031,
     2387, 1031, 2387,  839, 1032, 1032, 1032, 1032, 1032, 1032,
     1032,  839,  840,  840,  840,  840,  840,  840,  840,  842,
      843,  842, 2387, 2387,  841,  841,  841,  841,  841,  841,
      841,  839,  841,  841,  841,  841,  841,  841,  841, 1033,
     2387, 1033, 2387, 1375, 1034, 1034, 1034, 1034, 1034, 1034,
     1034,  845, 2387,  845, 2387, 2387,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      847, 1375,  847, 2387, 2387,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  849,

     2387,  849, 2387, 2387,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  851,  852,
      851, 2387, 1381,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850, 1035, 2387, 1035,
     2387, 1386, 1036, 1036, 1036, 1036, 1036, 1036, 1036,  854,
     1381,  854, 2387, 2387,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  856, 1386,
      856, 2387, 2387,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  858, 2387,  858,
     2387, 2387,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  860,  861,  860, 2387,
     1387,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859, 1037, 2387, 1037, 2387, 1389,
     1038, 1038, 1038, 1038, 1038, 1038, 1038,  863, 1387,  863,
     2387, 2387,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  865, 1389,  865, 2387,
     2387,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  867, 2387,  867, 2387, 2387,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  872,  872,  872,  872,  872,  872,

      872,  877,  877,  877,  877,  877,  877,  877,  878,  878,
      878,  878,  878,  878,  878,  881,  881,  881,  881,  881,
      881,  881,  882,  882,  882,  882,  882,  882,  882,  883,
      883,  883,  883,  883,  883,  883,  891, 2387,  891, 2387,
      891,  891, 2387, 2387,  891,  891,  891,  891,  891,  891,
      891,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  976,  976,  976,  976,  976,  976,  976,

      976,  976,  976,  976,  976,  976,  976,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1033, 1112, 1033, 2387,
     2387, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1035, 1113, 1035, 2387, 1390,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1037, 1114, 1037, 2387, 2387, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1126, 1390, 1190, 1127,
     1190, 2387, 2387, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1192, 1391, 1192, 1128, 2387, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1216, 1194, 1126, 1194, 2387, 1127, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1217, 1220, 2387, 1220, 1391,

     2387, 1128, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 2387,
     1216, 1190, 2387, 1190, 1221, 2387, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1217, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1192, 2387,
     1192, 2387, 1222, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1194, 1354, 1194, 1303, 1355, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1276, 1308, 1304, 1338, 1305, 1306, 1307, 1277,
     1309, 1392, 1359, 2387, 1372, 1339, 1360, 1361, 1362, 1354,
     1367, 1303, 1355, 1373, 1368, 1369, 1370, 1395, 1393, 1396,
     1276, 1308, 1304, 1338, 1305, 1306, 1307, 1277, 1309, 1392,

     1359, 1394, 1372, 1339, 1360, 1361, 1362, 1382, 1367, 1382,
     1397, 1373, 1368, 1369, 1370, 1395, 1393, 1396, 1398, 1399,
     1383, 1400, 1408, 1409, 1410, 1384, 1411, 1412, 1413, 1394,
     1414, 1415, 1416, 1417, 1418, 1420, 1421, 1422, 1397, 1424,
     1425, 1426, 1427, 1429, 1430, 1433, 1398, 1399, 1434, 1400,
     1408, 1409, 1410, 1385, 1411, 1412, 1413, 1435, 1414, 1415,
     1416, 1417, 1418, 1420, 1421, 1422, 1437, 1424, 1425, 1426,
     1427, 1429, 1430, 1433, 1438, 1439, 1434, 1440, 1444, 1445,
     1441, 1442, 1446, 1448, 1449, 1435, 1450, 1459, 1443, 1461,
     1462, 1471, 1447, 1472, 1437, 1473, 1483, 1487, 1488, 1489,

     1490, 1491, 1438, 1439, 1492, 1440, 1444, 1445, 1441, 1442,
     1446, 1448, 1449, 1494, 1450, 1459, 1443, 1461, 1462, 1471,
     1447, 1472, 1495, 1473, 1483, 1487, 1488, 1489, 1490, 1491,
     1496, 1497, 1492, 1498, 1499, 1500, 1501, 1502, 1506, 1507,
     1510, 1494, 1519, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
     1495, 1529, 1531, 1532, 1534, 1535, 1536, 2387, 1496, 1497,
     1539, 1498, 1499, 1500, 1501, 1502, 1506, 1507, 1510, 1544,
     1519, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1537, 1529,
     1531, 1532, 1534, 1535, 1536, 1538, 1545, 1540, 1539, 1540,
     1546, 1547, 1548, 1552, 1553, 1554, 1565, 1544, 1566, 1567,

     1541, 1574, 1579, 1584, 1586, 1542, 1537, 1587, 1549, 1588,
     1589, 1590, 2387, 1538, 1545, 1594, 1595, 1596, 1546, 1547,
     1548, 1552, 1553, 1554, 1565, 1597, 1566, 1567, 1598, 1574,
     1579, 1584, 1586, 1543, 1599, 1587, 1549, 1588, 1589, 1590,
     1591, 1600, 1591, 1594, 1595, 1596, 1601, 1602, 1603, 1606,
     1607, 1608, 1609, 1597, 1614, 1616, 1598, 1617, 1592, 1618,
     1619, 1622, 1599, 1620, 1623, 1624, 1625, 1626, 1627, 1600,
     1628, 1621, 1629, 1630, 1601, 1602, 1603, 1606, 1607, 1608,
     1609, 1631, 1614, 1616, 1632, 1617, 1593, 1618, 1619, 1622,
     1633, 1620, 1623, 1624, 1625, 1626, 1627, 1637, 1628, 1621,

     1629, 1630, 1638, 1639, 1640, 1641, 1642, 1643, 1645, 1631,
     1646, 1647, 1632, 1651, 1652, 1653, 1659, 1660, 1633, 1661,
     1664, 1665, 1667, 1668, 1669, 1637, 1670, 1672, 1673, 1676,
     1638, 1639, 1640, 1641, 1642, 1643, 1645, 1677, 1646, 1647,
     1681, 1651, 1652, 1653, 1659, 1660, 1682, 1661, 1664, 1665,
     1667, 1668, 1669, 1684, 1670, 1672, 1673, 1676, 1685, 1686,
     1688, 1689, 1690, 1691, 1692, 1677, 1693, 1694, 1681, 1695,
     1696, 1699, 1700, 1701, 1682, 1702, 1704, 1705, 1706, 1707,
     1708, 1684, 1709, 1710, 1711, 1712, 1685, 1686, 1688, 1689,
     1690, 1691, 1692, 1713, 1693, 1694, 1714, 1695, 1696, 1699,

     1700, 1701, 1715, 1702, 1704, 1705, 1706, 1707, 1708, 1716,
     1709, 1710, 1711, 1712, 1718, 1719, 1720, 1721, 1722, 1723,
     1724, 1713, 1727, 1725, 1714, 1728, 1729, 1732, 1733, 1730,
     1715, 1726, 1731, 1734, 1740, 1736, 1735, 1716, 1737, 1742,
     1743, 1744, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1747,
     1727, 1725, 1753, 1728, 1729, 1732, 1733, 1730, 1758, 1726,
     1731, 1734, 1740, 1736, 1735, 1750, 1737, 1742, 1743, 1744,
     1751, 1759, 1762, 1763, 1765, 1767, 1768, 1747, 1769, 1752,
     1753, 1770, 1771, 1772, 1773, 1774, 1758, 1766, 1775, 1776,
     1777, 1780, 1781, 1750, 1782, 1783, 1784, 1785, 1751, 1759,

     1762, 1763, 1765, 1767, 1768, 1786, 1769, 1752, 1787, 1770,
     1771, 1772, 1773, 1774, 1790, 1766, 1775, 1776, 1777, 1780,
     1781, 1791, 1782, 1783, 1784, 1785, 1794, 1795, 1796, 1797,
     1800, 1801, 1802, 1786, 1803, 1804, 1787, 1805, 1806, 1807,
     1808, 1810, 1790, 1811, 1812, 1813, 1815, 1817, 1818, 1791,
     1819, 1825, 1826, 1820, 1794, 1795, 1796, 1797, 1800, 1801,
     1802, 1828, 1803, 1804, 1831, 1805, 1806, 1807, 1808, 1810,
     1832, 1811, 1812, 1813, 1815, 1817, 1818, 1833, 1819, 1825,
     1826, 1820, 1834, 1835, 1836, 1837, 1838, 1839, 1841, 1828,
     1842, 1843, 1831, 1844, 1846, 1847, 1850, 1851, 1832, 1854,

     1857, 1858, 1860, 1870, 1860, 1833, 1871, 1872, 1873, 1874,
     1834, 1835, 1836, 1837, 1838, 1839, 1841, 1875, 1842, 1843,
     1861, 1844, 1846, 1847, 1850, 1851, 1876, 1854, 1857, 1858,
     1877, 1870, 1878, 1881, 1871, 1872, 1873, 1874, 1882, 1883,
     1884, 1886, 1887, 1888, 1890, 1875, 1891, 1892, 1862, 1894,
     1895, 1896, 1897, 1903, 1876, 1898, 1904, 1898, 1877, 1907,
     1878, 1881, 1908, 1909, 1910, 1911, 1882, 1883, 1884, 1886,
     1887, 1888, 1890, 1899, 1891, 1892, 1912, 1894, 1895, 1896,
     1897, 1903, 1913, 1915, 1904, 1916, 1918, 1907, 1919, 1920,
     1908, 1909, 1910, 1911, 1921, 1923, 1927, 1928, 1930, 1931,

     1932, 1900, 1934, 1879, 1912, 1879, 1937, 1938, 1939, 1942,
     1913, 1915, 1943, 1916, 1918, 1944, 1919, 1920, 1945, 2387,
     1946, 1880, 1921, 1923, 1927, 1928, 1930, 1931, 1932, 1940,
     1934, 1940, 1947, 1950, 1937, 1938, 1939, 1942, 1951, 1948,
     1943, 1948, 1952, 1944, 1953, 1959, 1945, 1941, 1946, 1898,
     1960, 1898, 1955, 1956, 1957, 1962, 1901, 1949, 1901, 2387,
     1947, 1950, 1965, 1966, 1967, 2387, 1951, 1899, 1968, 1905,
     1952, 1905, 1953, 1959, 1902, 1963, 1969, 1963, 1960, 1979,
     1955, 1956, 1957, 1962, 1970, 2387, 1970, 1906, 2387, 1980,
     1965, 1966, 1967, 1964, 1981, 1972, 1968, 1972, 1975, 1982,

     1975, 1983, 1971, 1985, 1969, 1986, 1987, 1979, 1989, 1991,
     1996, 1976, 1977, 1973, 2387, 1998, 1978, 1980, 2387, 1999,
     2000, 1992, 1981, 1992, 1994, 2001, 1994, 1982, 1940, 1983,
     1940, 1985, 2006, 1986, 1987, 2007, 1989, 1991, 1996, 1993,
     2387, 1974, 1995, 1998, 2008, 2009, 1941, 1999, 2000, 2002,
     1948, 2002, 1948, 2001, 2018, 2387, 2010, 2012, 2010, 2012,
     2006, 2027, 2014, 2007, 2014, 2028, 2387, 2003, 1949, 2016,
     2029, 2016, 2008, 2009, 2011, 2013, 2019, 1963, 2019, 1963,
     2015, 2022, 2018, 2022, 2024, 2387, 2024, 2017, 1970, 2027,
     1970, 2387, 2039, 2028, 2020, 1964, 2040, 2041, 2029, 2023,

     2042, 1972, 2025, 1972, 2043, 2032, 1971, 2033, 1975, 2034,
     1975, 2034, 2044, 2036, 2045, 2036, 2046, 2047, 2048, 1973,
     2039, 2049, 2050, 2051, 2040, 2041, 1978, 2035, 2042, 2054,
     2026, 2037, 2043, 2032, 1992, 2033, 1992, 1994, 2055, 1994,
     2044, 2057, 2045, 2058, 2046, 2047, 2048, 2060, 2061, 2049,
     2050, 2051, 1993, 2062, 2002, 1995, 2002, 2054, 2063, 2064,
     2010, 2012, 2010, 2012, 2387, 2014, 2055, 2014, 2082, 2057,
     2387, 2058, 2003, 2387, 2387, 2060, 2061, 2387, 2011, 2013,
     2016, 2062, 2016, 2015, 2083, 2387, 2063, 2064, 2069, 2019,
     2069, 2019, 2022, 2024, 2022, 2024, 2082, 2086, 2017, 2074,

     2075, 2076, 2077, 2079, 2077, 2079, 2070, 2020, 2091, 2093,
     2023, 2025, 2083, 2034, 2036, 2034, 2036, 2087, 2094, 2087,
     2078, 2080, 2089, 2095, 2089, 2086, 2096, 2074, 2075, 2076,
     2097, 2035, 2037, 2098, 2099, 2088, 2091, 2093, 2100, 2101,
     2090, 2101, 2103, 2104, 2105, 2106, 2094, 2107, 2110, 2112,
     2108, 2095, 2108, 2387, 2096, 2124, 2387, 2102, 2097, 2387,
     2387, 2098, 2099, 2069, 2125, 2069, 2100, 2114, 2109, 2114,
     2103, 2104, 2105, 2106, 2126, 2107, 2110, 2112, 2116, 2129,
     2116, 2070, 2118, 2124, 2118, 2115, 2077, 2079, 2077, 2079,
     2122, 2133, 2125, 2123, 2134, 2087, 2117, 2087, 2130, 2089,

     2119, 2089, 2126, 2137, 2078, 2080, 2131, 2129, 2132, 2138,
     2139, 2140, 2101, 2088, 2101, 2144, 2145, 2090, 2122, 2133,
     2146, 2123, 2134, 2142, 2147, 2142, 2130, 2108, 2149, 2108,
     2102, 2137, 2153, 2114, 2131, 2114, 2132, 2138, 2139, 2140,
     2157, 2143, 2150, 2144, 2145, 2109, 2158, 2151, 2146, 2387,
     2159, 2115, 2147, 2160, 2161, 2152, 2149, 2162, 2163, 2116,
     2153, 2116, 2118, 2164, 2118, 2165, 2166, 2167, 2157, 2168,
     2150, 2170, 2171, 2172, 2158, 2151, 2173, 2117, 2159, 2169,
     2119, 2160, 2161, 2152, 2174, 2162, 2163, 2142, 2176, 2142,
     2177, 2164, 2177, 2165, 2166, 2167, 2179, 2168, 2180, 2170,

     2171, 2172, 2182, 2183, 2173, 2143, 2184, 2169, 2178, 2185,
     2188, 2185, 2174, 2189, 2192, 2190, 2176, 2190, 2193, 2195,
     2193, 2195, 2197, 2198, 2179, 2199, 2180, 2186, 2202, 2203,
     2182, 2183, 2204, 2191, 2184, 2205, 2194, 2196, 2188, 2208,
     2211, 2189, 2192, 2200, 2206, 2200, 2206, 2209, 2212, 2209,
     2197, 2198, 2177, 2199, 2177, 2187, 2202, 2203, 2216, 2217,
     2204, 2201, 2207, 2205, 2214, 2210, 2214, 2208, 2211, 2218,
     2178, 2219, 2220, 2185, 2225, 2185, 2212, 2222, 2223, 2224,
     2226, 2232, 2215, 2190, 2233, 2190, 2216, 2217, 2234, 2387,
     2238, 2186, 2228, 2193, 2228, 2193, 2195, 2218, 2195, 2219,

     2220, 2191, 2225, 2387, 2239, 2222, 2223, 2224, 2226, 2232,
     2229, 2194, 2233, 2200, 2196, 2200, 2234, 2236, 2238, 2236,
     2240, 2206, 2242, 2206, 2242, 2209, 2245, 2209, 2245, 2247,
     2249, 2201, 2239, 2250, 2214, 2237, 2214, 2251, 2252, 2207,
     2243, 2253, 2260, 2210, 2246, 2254, 2261, 2254, 2240, 2256,
     2264, 2256, 2215, 2258, 2228, 2258, 2228, 2247, 2249, 2267,
     2268, 2250, 2236, 2255, 2236, 2251, 2252, 2257, 2269, 2253,
     2260, 2259, 2229, 2242, 2261, 2242, 2274, 2245, 2264, 2245,
     2237, 2272, 2275, 2272, 2276, 2277, 2278, 2267, 2268, 2282,
     2254, 2243, 2254, 2283, 2284, 2246, 2269, 2285, 2256, 2273,

     2256, 2258, 2286, 2258, 2274, 2289, 2291, 2292, 2255, 2272,
     2275, 2272, 2276, 2277, 2278, 2294, 2257, 2282, 2295, 2259,
     2296, 2283, 2284, 2299, 2297, 2285, 2297, 2273, 2302, 2300,
     2286, 2300, 2303, 2289, 2291, 2292, 2304, 2305, 2306, 2307,
     2308, 2309, 2298, 2294, 2310, 2311, 2295, 2301, 2296, 2313,
     2315, 2299, 2297, 2300, 2297, 2300, 2302, 2316, 2317, 2320,
     2303, 2318, 2321, 2318, 2304, 2305, 2306, 2307, 2308, 2309,
     2298, 2301, 2310, 2311, 2322, 2323, 2324, 2313, 2315, 2319,
     2325, 2326, 2327, 2328, 2329, 2316, 2317, 2320, 2387, 2318,
     2321, 2318, 2339, 2340, 2341, 2331, 2342, 2331, 2343, 2336,

     2344, 2336, 2322, 2323, 2324, 2387, 2387, 2319, 2325, 2326,
     2327, 2328, 2329, 2332, 2333, 2387, 2333, 2337, 2357, 2387,
     2339, 2340, 2341, 2331, 2342, 2331, 2343, 2334, 2344, 2333,
     2387, 2333, 2335, 2346, 2336, 2346, 2336, 2350, 2351, 2352,
     2353, 2332, 2353, 2355, 2358, 2355, 2357, 2335, 2359, 2360,
     2387, 2347, 2337, 2346, 2387, 2346, 2374, 2362, 2354, 2362,
     2364, 2356, 2364, 2375, 2387, 2350, 2351, 2352, 2366, 2387,
     2366, 2347, 2358, 2387, 2387, 2363, 2359, 2360, 2365, 2353,
     2355, 2353, 2355, 2370, 2374, 2370, 2367, 2372, 2362, 2372,
     2362, 2375, 2364, 2366, 2364, 2366, 2387, 2354, 2356, 2387,

     2370, 2371, 2370, 2387, 2387, 2373, 2363, 2372, 2387, 2372,
     2365, 2367, 2381, 2383, 2381, 2383, 2387, 2381, 2371, 2381,
     2383, 2387, 2383, 2387, 2387, 2373, 2387, 2387, 2387, 2387,
     2382, 2384, 2387, 2387, 2387, 2382, 2387, 2387, 2384,  302,
      302,  302,  302,  302,  381,  381,  381,  381,  381,  382,
      382,  382,  382,  382,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  385,  385,  385,  385,  385,  386,
      386,  386,  386,  386,  387,  387,  387,  387,  387,  388,
      388,  388,  388,  388,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  458,  458,  458,  458,  458,  480,

      480,  480,  480,  480,  481,  481,  481,  481,  481,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  483,  484,
      484,  484,  484,  484,  494,  494,  494,  494,  494,  495,
      495,  495,  495,  495,  498,  498,  498,  498,  498,  499,
      499,  499,  499,  499,  501,  501,  501,  501,  501,  502,
      502,  502,  502,  502,  503,  503,  503,  503,  503,  504,
      504,  504,  504,  504,  505,  505,  505,  505,  505,  506,
      506,  506,  506,  506,  507,  507,  507,  507,  507,  537,
      537,  537,  537,  537,  538,  538,  538,  538,  538,  539,
      539,  539,  539,  539,  540,  540,  540,  540,  540,  542,

      542,  542,  542,  542,  543,  543,  543,  543,  543,  544,
      544,  544,  544,  544,  545,  545,  545,  545,  545,  548,
      548,  548,  548,  548,  549,  549,  549,  549,  549,  553,
      553,  553,  553,  553,  554,  554,  554,  554,  554,  558,
      558,  558,  558,  558,  690,  690,  691,  691,  692,  692,
      693,  693,  694,  694,  695,  695,  696,  696,  697,  697,
      703,  703,  783,  783,  806,  806,  807,  807,  808,  808,
      809,  809,  810,  810,  822,  822,  879,  879,  880,  880,
      884,  884,  885,  885, 2387,  885,  885,  888, 2387, 2387,
      888,  888,  690,  690,  691,  691,  692,  692,  693,  693,

      694,  694,  695,  695,  696,  696,  697,  697,  703,  703,
      783,  783,  806,  806,  807,  807,  808,  808,  809,  809,
      810,  810,  822,  822,  879,  879,  880,  880,  884,  884,
      885,  885, 2387,  885,  885,  888, 2387, 2387,  888,  888,
      301, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387
    } ;

static yyconst flex_int16_t yy_chk[12016] =
    {   0,
        0,    1,    1,    1, 2503,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3, 2502,    3,  293,  293,  293,  325,  293,
      325,    3,    3,    3,    3,    3,    3,    3,    4,    4,

        4, 2501,    4,  294,  294,  294,  325,  294, 2500,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5, 2499,
        5,  295,  295,  295,  584,  295,  584,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6, 2498,    6,  296,
      296,  296,  584,  296, 2497,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7, 2496,    7,  297,  297,  297,
      585,  297,  585,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8, 2495,    8,  298,  298,  298,  585,  298,
     2494,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,  303,    9,  303,  555,  303,  555, 2493,  555,    9,

        9,    9,    9,    9,    9,    9,   10,   10,   10,  559,
       10,  559,  563,  559,  563, 2492,  563,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,  586,   11,  586,
      589,  590,  589,  590, 2491,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  591,   12,  591,  589,  590,
      592, 2490,  592,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,  591,   13,  593, 2489,  593,  592, 2488,
     2487,   13,   13,   13,   13,   13,   13,   13,   14,   14,
       14, 2485,   14,  593,  620,  621,  620,  621, 2477,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  886,

       15,  886,  620,  886,  899, 2463,  899,   15,   15,   15,
       15,   15,   15,   15,   16,   16,   16,  889,   16,  889,
     2462,  889,  899, 2461, 2460,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,  911,   17,  911,   17, 2459,
       17,   17, 2458,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,  911,   18,  912,   18,  912,   18,   18,
     2457,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,  913,   19,  913,   19, 2456,   19,   19, 2455,   19,
       19,   19,   19,   19,   19,   19,   20,   20,   20,  916,
       20,  916,   20, 2454,   20,   20, 2453,   20,   20,   20,

       20,   20,   20,   20,   21,   21,   21,  916,   21,  917,
       21,  917,   21,   21, 2452,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22,  918,   22,  918,   22, 2451,
       22,   22, 2450,   22,   22,   22,   22,   22,   22,   22,
       23,   23,   23,  918,   23,  919,   23,  919,   23,   23,
     2449,   23,   23,   23,   23,   23,   23,   23,   24,   24,
       24,  920,   24,  920,   24, 2448,   24,   24, 2447,   24,
       24,   24,   24,   24,   24,   24,   25,   25,   25,  920,
       25,  921,   25,  921,   25,   25, 2445,   25,   25,   25,
       25,   25,   25,   25,   26,   26,   26,  922,   26,  922,

       26, 2437,   26,   26, 2323,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27,  922,   27,  923,   27,  923,
       27,   27, 2276,   27,   27,   27,   27,   27,   27,   27,
       28,   28,   28,  924,   28,  924,   28, 2268,   28,   28,
     2267,   28,   28,   28,   28,   28,   28,   28,   29,   29,
       29,  924,   29,  925,   29,  925,   29,   29, 2234,   29,
       29,   29,   29,   29,   29,   29,   30,   30,   30,  928,
       30,  928,   30, 2232,   30,   30, 2149,   30,   30,   30,
       30,   30,   30,   30,   31,   31,   31,  928,   31,  929,
       31,  929,   31,   31, 2096,   31,   31,   31,   31,   31,

       31,   31,   32,   32,   32,  967,   32,  967,   32, 2095,
       32,   32, 2063,   32,   32,   32,   32,   32,   32,   32,
       33,   33,   33, 1041,   33, 1041,   33, 2043,   33,   33,
     2029,   33,   33,   33,   33,   33,   33,   33,   34,   34,
       34, 1041,   34, 1042,   34, 1042,   34,   34, 1999,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35, 1947,
       35, 1042, 1047, 1048, 1047, 1048, 1934,   35,   35,   35,
       35,   35,   35,   35,   36,   36,   36, 1060,   36, 1060,
     1047, 1063, 1064, 1063, 1064,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37, 1065,   37, 1065, 1066, 1067,

     1066, 1067, 1932,   37,   37,   37,   37,   37,   37,   37,
       38,   38,   38, 1069,   38, 1069, 1070, 1098, 1070, 1098,
     1928,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39, 1069,   39, 1878, 1099, 1098, 1099, 1876, 1872,   39,
       39,   39,   39,   39,   39,   39,   40,   40,   40, 1103,
       40, 1103, 1099, 1117, 1118, 1117, 1118,   40,   40,   40,
       40,   40,   40,   40,   41,   41,   41, 1103,   41, 1817,
     1119, 1117, 1119, 1787, 1773,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1120,   42, 1120, 1119, 1125,
     1143, 1125, 1143,   42,   42,   42,   42,   42,   42,   42,

       43,   43,   43, 1144,   43, 1144, 1696, 1145, 1143, 1145,
     1629,   43,   43,   43,   43,   43,   43,   43,   44,   44,
       44, 1149,   44, 1149, 1174, 1145, 1174, 1628, 1618,   44,
       44,   44,   44,   44,   44,   44,   45,   45,   45, 1149,
       45, 1151,   45, 1151,   45, 1609, 1601,   45,   45,   45,
       45,   45,   45,   45,   46,   46,   46, 1600,   46, 1151,
       46, 1160,   46, 1160, 1597,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47, 1162,   47, 1162, 1163, 1160,
     1163, 1588, 1587,   47,   47,   47,   47,   47,   47,   47,
       48,   48,   48, 1162,   48, 1173, 1163, 1173, 1176, 1427,

     1176,   48,   48,   48,   48,   48,   48,   48,   49,   49,
       49, 1411,   49, 1173,   49, 1410,   49,   49, 1391,   49,
       49,   49,   49,   49,   49,   49,   50,   50,   50, 1175,
       50, 1175,   50, 1375,   50,   50, 1364,   50,   50,   50,
       50,   50,   50,   50,   51,   51,   51, 1175,   51, 1180,
       51, 1180,   51,   51, 1349,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1336,   52, 1180,   52, 1332,
       52,   52, 1297,   52,   52,   52,   52,   52,   52,   52,
       53,   53,   53, 1181,   53, 1181,   53, 1278,   53,   53,
     1272,   53,   53,   53,   53,   53,   53,   53,   54,   54,

       54, 1198,   54, 1198,   54, 1265,   54,   54, 1207,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55, 1199,
       55, 1199,   55, 1189,   55,   55, 1152,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,  308,   56, 1221,
       56, 1221,   56,   56,  310,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1150,   57,   57,   57,
       57,   58,   58,   58,   58,  308,   58,   58,   58,   58,
     1141,   57,  310,  311,  313,  314,   59,   59,   59,   59,
       58,   59,   59,   59,   59,   60,   60,   60,   60,  313,
       60,   60,   60,   60, 1208,   59, 1208, 1226,   57, 1226,

      315,  311,  313,  314,   60, 1140, 1122,   58,   61,   61,
       61,   61, 1208,   61,   61,   61,   61,  313,   62,   62,
       62,   62,   59,   62,   62,   62,   62,   61,  315,  316,
      320,   60,  322,   63,   63,   63,   63,   62,   63,   63,
       63,   63,   64,   64,   64,   64,  326,   64,   64,   64,
       64, 1210,   63, 1210,   61, 1115, 1106,  316,  320,  565,
      322,   64, 1095, 1092,   62,   65,   65,   65,   65, 1210,
       65,   65,   65,   65,  326,   66,   66,   66,   66,   63,
       66,   66,   66,   66,   65,  567,  321,  565,   64,  568,
       67,   67,   67,   67,   66,   67,   67,   67,   67,   68,

       68,   68,   68,  321,   68,   68,   68,   68, 1220,   67,
     1220,   65, 1074,  567,  321,  569,  570,  568,   68,  957,
      944,   66,   69,   69,   69,   69, 1220,   69,   69,   69,
       69,  321,   70,   70,   70,   70,   67,   70,   70,   70,
       70,   69,  933,  569,  570,   68,  571,   71,   71,   71,
       71,   70,   71,   71,   71,   71,   72,   72,   72,   72,
      572,   72,   72,   72,   72, 1228,   71, 1228,   69,   73,
       73,   73,  573,   73,  571,   72,  574, 1233,   70, 1233,
       73,   73,   73,   73,   73,   73,   73,  575,  572,  576,
      577,  579,  580,   71,   74,   74,   74, 1236,   74, 1236,

      573, 1246,   72, 1246,  574,   74,   74,   74,   74,   74,
       74,   74,   75,   75,   75,  575,   75,  576,  577,  579,
      580,  926,  908,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76, 1225,   76, 1225, 1227, 1232, 1227, 1232,
      907,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77, 1225,   77,  900, 1227, 1232, 1235,  898, 1235,   77,
       77,   77,   77,   77,   77,   77,   78,   78,   78, 1245,
       78, 1245,  578, 1248, 1235, 1248,  566,   78,   78,   78,
       78,   78,   78,   78,   79,   79,   79, 1245,   79,  301,
     1249, 1248, 1249,  300,    0,   79,   79,   79,   79,   79,

       79,   79,   80,   80,   80,  581,   80, 1251, 1262, 1251,
     1262,    0,    0,   80,   80,   80,   80,   80,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,    0,  581,  582,   83,   83,   83,   83,   81,
       83,   83,   83,   83,   84,   84,   84,   84,    0,   84,
       84,   84,   84,    0,   83,  327,  327,  327,  327,  327,
      327,  327,  582,   84,  583,  587,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,    0,
      588,   83,  594,   87,   87,   87,   82,   87,    0,  595,
       84,  597,  583,  587,   87,   87,   87,   87,   87,   87,

       87,  328,  328,  328,  328,  328,  328,  328,  588,  598,
      594,  599,    0,   82,   85,   85,   85,  595,   85,  597,
       85,    0,   85,   85,    0,   85,   85,   85,   85,   85,
       85,   85,   86,   86,   86,    0,   86,  598,   86,  599,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       88,   88,   88, 1250,   88, 1250, 1261, 1263, 1261, 1263,
        0,   88,   88,   88,   88,   88,   88,   88,   89,   89,
       89, 1250,   89, 1267, 1261, 1267, 1287,    0, 1287,   89,
       89,   89,   89,   89,   89,   89,   90,   90,   90, 1288,
       90, 1288,    0, 1290, 1287, 1290,    0,   90,   90,   90,

       90,   90,   90,   90,   91,   91,   91, 1291,   91, 1291,
     1301, 1290, 1301,    0,    0,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,    0,   92, 1292, 1292, 1292,
     1292,    0,    0,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93, 1310,   93, 1310, 1311, 1312, 1311, 1312,
        0,   93,   93,   93,   93,   93,   93,   93,   94,   94,
       94, 1310,   94, 1313, 1314, 1313, 1314,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,    0,
       95, 1313, 1314, 1315, 1316, 1315, 1316,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96, 1318,   96, 1318,

     1327, 1315, 1327,    0,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97, 1329,   97, 1329, 1330, 1341,
     1330, 1341,    0,   97,   97,   97,   97,   97,   97,   97,
       98,   98,   98, 1342,   98, 1342, 1345, 1341, 1345,    0,
        0,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99, 1359,   99, 1359, 1345, 1360, 1361, 1360, 1361,   99,
       99,   99,   99,   99,   99,   99,  100,  100,  100, 1359,
      100,    0,    0, 1360, 1361,    0,    0,  100,  100,  100,
      100,  100,  100,  100,  101,  101,  101, 1362,  101, 1362,
     1367, 1368, 1367, 1368,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102, 1362,  102,    0, 1367, 1368,
     1369,    0, 1369,  102,  102,  102,  102,  102,  102,  102,
      103,  103,  103, 1370,  103, 1370,    0, 1374, 1369, 1374,
        0,  103,  103,  103,  103,  103,  103,  103,  104,  104,
      104, 1370,  104, 1376, 1384, 1376, 1384,    0,    0,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105, 1377,
      105, 1377,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  106, 1377,  106, 1378,
      106, 1378,  106,  106,    0,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107, 1378,  107,    0,

      107,  107,    0,  107,  107,  107,  107,  107,  107,  107,
      108,  108,  108, 1379,  108, 1379,  108,    0,  108,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109, 1379,  109, 1380,  109, 1380,  109,  109,    0,  109,
      109,  109,  109,  109,  109,  109,  110,  110,  110,    0,
      110, 1380,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  111,  111,  111, 1382,  111, 1382,
      111,    0,  111,  111,    0,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1382,  112, 1383,  112, 1383,
      112,  112,    0,  112,  112,  112,  112,  112,  112,  112,

      113,  113,  113,    0,  113, 1383, 1401, 1402, 1401, 1402,
        0,  113,  113,  113,  113,  113,  113,  113,  114,  114,
      114, 1403,  114, 1403, 1404, 1402, 1404,    0,    0,  114,
      114,  114,  114,  114,  114,  114,  115,  115,  115, 1405,
      115, 1405, 1404, 1406, 1407, 1406, 1407,  115,  115,  115,
      115,  115,  115,  115,  116,  116,  116, 1413,  116, 1413,
     1428, 1406, 1428,    0,    0,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117, 1413,  117, 1414,  117, 1414,
      117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  118,    0,  118, 1414,  118,    0,  118,  118,

        0,  118,  118,  118,  118,  118,  118,  118,  119,  119,
      119, 1415,  119, 1415,  119,    0,  119,  119,    0,  119,
      119,  119,  119,  119,  119,  119,  120,  120,  120, 1415,
      120, 1416,  120, 1416,  120,  120,    0,  120,  120,  120,
      120,  120,  120,  120,  121,  121,  121,    0,  121, 1416,
      121,    0,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122, 1418,  122, 1418,  122,    0,
      122,  122,    0,  122,  122,  122,  122,  122,  122,  122,
      123,  123,  123, 1418,  123, 1431,  123, 1431,  123,  123,
        0,  123,  123,  123,  123,  123,  123,  123,  124,  124,

      124,    0,  124, 1431,  124,    0,  124,  124,    0,  124,
      124,  124,  124,  124,  124,  124,  125,  125,  125, 1432,
      125, 1432,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  126,  126,  126, 1444,  126, 1444,
      126,    0,  126,  126,    0,  126,  126,  126,  126,  126,
      126,  126,  127,  127,  127, 1444,  127, 1448,  127, 1448,
      127,  127,    0,  127,  127,  127,  127,  127,  127,  127,
      128,  128,  128,    0,  128, 1448,  128,    0,  128,  128,
        0,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129, 1449,  129, 1449,  129,    0,  129,  129,    0,  129,

      129,  129,  129,  129,  129,  129,  130,  130,  130, 1449,
      130, 1450,  130, 1450,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  131,  131,  131,    0,  131, 1450,
      131,    0,  131,  131,    0,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132, 1451,  132, 1451,  132,    0,
      132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
      133,  133,  133, 1451,  133, 1452,  133, 1452,  133,  133,
        0,  133,  133,  133,  133,  133,  133,  133,  134,  134,
      134, 1453,  134, 1453,  134,    0,  134,  134,    0,  134,
      134,  134,  134,  134,  134,  134,  135,  135,  135, 1453,

      135, 1454,  135, 1454,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136, 1455,  136, 1455,
      136,    0,  136,  136,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137, 1455,  137, 1456, 1457, 1456,
     1457,    0,    0,  137,  137,  137,  137,  137,  137,  137,
      138,  138,  138, 1458,  138, 1458, 1457, 1462, 1463, 1462,
     1463,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139, 1464,  139, 1464,    0, 1462, 1463,    0,    0,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140, 1465,
      140, 1465, 1466, 1467, 1466, 1467,    0,  140,  140,  140,

      140,  140,  140,  140,  141,  141,  141, 1465,  141,    0,
     1468, 1467, 1468,    0,    0,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142, 1469,  142, 1469, 1470, 1472,
     1470, 1472,    0,  142,  142,  142,  142,  142,  142,  142,
      143,  143,  143, 1469,  143,    0, 1473, 1472, 1473,    0,
        0,  143,  143,  143,  143,  143,  143,  143,  144,  144,
      144, 1475,  144, 1475, 1473, 1476, 1478, 1476, 1478,  144,
      144,  144,  144,  144,  144,  144,  145,  145,  145, 1475,
      145, 1477,  145, 1477,  145,  145,    0,  145,  145,  145,
      145,  145,  145,  145,  146,  146,  146,  600,  146, 1477,

      146,    0,  146,  146,    0,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  147,  147,    0,  147,  147,  147,
      147,  148,  148,  148,  148,  600,  148,  148,  148,  148,
        0,  147,  151,  151,  151, 1480,  151, 1480,  601, 1482,
      148, 1482,    0,  151,  151,  151,  151,  151,  151,  151,
      329,  329,  329,  329,  329,  329,  329,  601,  147,  330,
      330,  330,  330,  330,  330,  330,  601,  148,  149,  149,
      149, 1479,  149, 1479,  149,    0,  149,  149,    0,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1479,
      150, 1481,  150, 1481,  150,  150,    0,  150,  150,  150,

      150,  150,  150,  150,  152,  152,  152,    0,  152, 1481,
     1485, 1484, 1485, 1484,    0,  152,  152,  152,  152,  152,
      152,  152,  153,  153,  153, 1486,  153, 1486,  153, 1484,
      153,    0,    0,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154, 1503,  154, 1503,  154, 1504,  154, 1504,
        0,  154,  154,  154,  154,  154,  154,  154,  155,  155,
      155, 1505,  155, 1505,  155, 1506,  155, 1506,    0,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156, 1511,
      156, 1511,  156, 1506,  156,    0,    0,  156,  156,  156,
      156,  156,  156,  156,  157,  157,  157, 1511,  157, 1512,

      157, 1512,  157,    0,    0,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  158, 1513,  158, 1513,  158, 1514,
      158, 1514,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159, 1513,  159, 1515,  159, 1515,  159,    0,
        0,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160,    0,  160, 1515,  160, 1516,  160, 1516,    0,  160,
      160,  160,  160,  160,  160,  160,  161,  161,  161, 1517,
      161, 1517, 1518, 1520, 1518, 1520,    0,  161,  161,  161,
      161,  161,  161,  161,  162,  162,  162, 1517,  162,    0,
     1521, 1520, 1521,    0,    0,  162,  162,  162,  162,  162,

      162,  162,  163,  163,  163, 1533,  163, 1533, 1540, 1541,
     1540, 1541,    0,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164, 1542,  164, 1542, 1540, 1541, 1550,    0,
     1550,  164,  164,  164,  164,  164,  164,  164,  165,  165,
      165, 1551,  165, 1551,    0, 1555, 1550, 1555,    0,  165,
      165,  165,  165,  165,  165,  165,  166,  166,  166, 1556,
      166, 1556, 1557, 1555, 1557,    0,    0,  166,  166,  166,
      166,  166,  166,  166,  167,  167,  167, 1558,  167, 1558,
     1557, 1559, 1560, 1559, 1560,  167,  167,  167,  167,  167,
      167,  167,  168,  168,  168, 1561,  168, 1561, 1562, 1559,

     1562,    0,    0,  168,  168,  168,  168,  168,  168,  168,
      169,  169,  169, 1563,  169, 1563, 1564, 1568, 1564, 1568,
        0,  169,  169,  169,  169,  169,  169,  169,  170,  170,
      170, 1569,  170, 1569, 1570, 1568, 1570,    0,    0,  170,
      170,  170,  170,  170,  170,  170,  171,  171,  171, 1571,
      171, 1571, 1572, 1573, 1572, 1573,    0,  171,  171,  171,
      171,  171,  171,  171,  172,  172,  172, 1574,  172, 1574,
     1575, 1576, 1575, 1576,    0,  172,  172,  172,  172,  172,
      172,  172,  173,  173,  173, 1574,  173, 1577, 1575, 1577,
     1578,    0, 1578,  173,  173,  173,  173,  173,  173,  173,

      174,  174,  174,    0,  174, 1577, 1580, 1581, 1580, 1581,
        0,  174,  174,  174,  174,  174,  174,  174,  175,  175,
      175, 1582,  175, 1582, 1583, 1585, 1583, 1585,    0,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176, 1591,
      176, 1591, 1592, 1604, 1592, 1604,    0,  176,  176,  176,
      176,  176,  176,  176,  177,  177,  177, 1591,  177,    0,
     1605, 1604, 1605,    0,    0,  177,  177,  177,  177,  177,
      177,  177,  178,  178,  178,  603,  178, 1610,    0, 1610,
      604,    0,  606,  178,  178,  178,  178,  178,  178,  178,
      179,  179,  179,  179,    0,  179,  179,  179,  179,  180,

      180,  180,  180,  603,  180,  180,  180,  180,  604,  179,
      606,  607,  608,  609,  181,  181,  181,  181,  180,  181,
      181,  181,  181,  182,  182,  182,  182,  612,  182,  182,
      182,  182, 1606,  181, 1606, 1611,  179, 1611,  613,  607,
      608,  609,  182,    0,    0,  180,  183,  183,  183,  183,
     1606,  183,  183,  183,  183,  612,  184,  184,  184,  184,
      181,  184,  184,  184,  184,  183,  613,  614,  616,  182,
      617,  185,  185,  185,  185,  184,  185,  185,  185,  185,
      186,  186,  186,  186,  619,  186,  186,  186,  186, 1612,
      185, 1612,  183,    0,    0,  614,  616,    0,  617,  186,

      622,  892,  184,  187,  187,  187,  187,    0,  187,  187,
      187,  187,  619,  188,  188,  188,  188,  185,  188,  188,
      188,  188,  187,  189,  189,  189,  186,  189,  622,  892,
        0, 1613,  188, 1613,  189,  189,  189,  189,  189,  189,
      189,  190,  190,  190, 1615,  190, 1615,    0, 1634,  187,
     1634,    0,  190,  190,  190,  190,  190,  190,  190,  188,
      191,  191,  191, 1635,  191, 1635, 1634, 1636, 1644, 1636,
     1644,  191,  191,  191,  191,  191,  191,  191,  192,  192,
      192, 1648,  192, 1648, 1649, 1650, 1649, 1650,    0,  192,
      192,  192,  192,  192,  192,  192,  193,  193,  193, 1654,

      193, 1654, 1655, 1656, 1655, 1656,    0,  193,  193,  193,
      193,  193,  193,  193,  194,  194,  194, 1657,  194, 1657,
     1655, 1658, 1666, 1658, 1666,  194,  194,  194,  194,  194,
      194,  194,  195,  195,  195, 1676,  195, 1676,  195,    0,
      195,  195,    0,  195,  195,  195,  195,  195,  195,  195,
      196,  196,  196, 1676,  196, 1678,  196, 1678,  196,  196,
        0,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197, 1679,  197, 1679, 1680, 1684, 1680, 1684,    0,  197,
      197,  197,  197,  197,  197,  197,  198,  198,  198, 1679,
      198,    0, 1686, 1684, 1686,    0,    0,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199, 1689,  199, 1689,
     1686, 1690, 1693, 1690, 1693,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200, 1689,  200,    0,    0, 1690,
     1693,    0,    0,  200,  200,  200,  200,  200,  200,  200,
      201,  201,  201, 1703,  201, 1703, 1710, 1717, 1710, 1717,
        0,  201,  201,  201,  201,  201,  201,  201,  202,  202,
      202,  893,  202, 1739, 1710, 1739, 1741,    0, 1741,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,    0,  893,
      895,  205,  205,  205,  205,  203,  205,  205,  205,  205,

      206,  206,  206,  206,    0,  206,  206,  206,  206,    0,
      205,  331,  331,  331,  331,  331,  331,  331,  895,  206,
        0,  896,  203,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,    0,  897,  205,  307,  213,
      213,  213,  204,  213,    0,  307,  206,  901,  307,  896,
      213,  213,  213,  213,  213,  213,  213,  332,  332,  332,
      332,  332,  332,  332,  897,  902,  307,  903,    0,  204,
      207,  207,  207,  307,  207,  901,  307, 1746,  207, 1746,
        0,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208,    0,  208,  902,    0,  903,  208,    0,  904,  208,

      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  214,  214,
      214, 1749,  214, 1749,    0,  209,  904,    0,    0,  214,
      214,  214,  214,  214,  214,  214,  333,  333,  333,  333,
      333,  333,  333,  334,    0,  334,  334,  334,  334,  334,
      334,  334,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  229,  229,  229, 1755,  229,
     1755, 1757,  210, 1757,    0,    0,  229,  229,  229,  229,
      229,  229,  229,  336,    0,  336,  336,  336,  336,  336,
      336,  336,  361,  361,  361,  361,  361,  361,  361,  210,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  230,  230,  230, 1761,  230, 1761, 1779,  211,
     1779,    0,    0,  230,  230,  230,  230,  230,  230,  230,
      337,    0,  337,  337,  337,  337,  337,  337,  337,  362,
      362,  362,  362,  362,  362,  362,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  233,
      233,  233, 1789,  233, 1789, 1793,  212, 1793,    0,    0,
      233,  233,  233,  233,  233,  233,  233,  339,    0,  339,
      339,  339,  339,  339,  339,  339,  363,  363,  363,  363,
      363,  363,  363,  212,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  234,  234,  234, 1799,
      234, 1799, 1809,  215, 1809,    0,    0,  234,  234,  234,
      234,  234,  234,  234,  340,    0,  340,  340,  340,  340,
      340,  340,  340,  364,  364,  364,  364,  364,  364,  364,
      215,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  267,  267,  267, 1814,  267, 1814, 1816,
      216, 1816,    0,    0,  267,  267,  267,  267,  267,  267,
      267,  342,    0,  342,  342,  342,  342,  342,  342,  342,
      365,  365,  365,  365,  365,  365,  365,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      268,  268,  268, 1822,  268, 1822, 1823,  217, 1823,    0,
        0,  268,  268,  268,  268,  268,  268,  268,  343,    0,
      343,  343,  343,  343,  343,  343,  343,  366,  366,  366,
      366,  366,  366,  366,  217,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  277,  277,  277,
     1824,  277, 1824, 1827,  218, 1827,    0,    0,  277,  277,
      277,  277,  277,  277,  277,  345,    0,  345,  345,  345,
      345,  345,  345,  345,  368,  368,  368,  368,  368,  368,
      368,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  278,  278,  278, 1830,  278, 1830,

     1845,  219, 1845,    0,    0,  278,  278,  278,  278,  278,
      278,  278,  346,    0,  346,  346,  346,  346,  346,  346,
      346,  389,  389,  389,  389,  389,  389,  389,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  279,  279,  279, 1849,  279, 1849, 1853,  220, 1853,
        0,    0,  279,  279,  279,  279,  279,  279,  279,  348,
        0,  348,  348,  348,  348,  348,  348,  348,  390,  390,
      390,  390,  390,  390,  390,  220,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  280,  280,
      280, 1856,  280, 1856, 1859,  221, 1859,    0,    0,  280,

      280,  280,  280,  280,  280,  280,  349,  905,  349,  349,
      349,  349,  349,  349,  349,  391,  391,  391,  391,  391,
      391,  391,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  905,    0,  906,  281,  281,
      281,  281,  222,  281,  281,  281,  281,  282,  282,  282,
      282,    0,  282,  282,  282,  282,  351,  281,  351,  351,
      351,  351,  351,  351,  351,  906,  282,    0,    0,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,    0, 1861,  281, 1861,  909,  910, 1864,  223,
     1864,    0,    0,  282,  283,  283,  283,  283,    0,  283,

      283,  283,  283,  352,    0,  352,  352,  352,  352,  352,
      352,  352,    0,  283,  909,  910,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  392,
      392,  392,  392,  392,  392,  392,  224, 1866,    0, 1866,
      283,  284,  284,  284,  284,    0,  284,  284,  284,  284,
      354,    0,  354,  354,  354,  354,  354,  354,  354, 1868,
      284, 1868,    0,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  914,  285,  285,  285,
      915,  285, 1869,  225, 1869,    0,    0,  284,  285,  285,
      285,  285,  285,  285,  285,  355,    0,  355,  355,  355,

      355,  355,  355,  355,  914,  927,    0, 1880,  915, 1880,
      225,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  286,  286,  286, 1889,  286, 1889, 1893,
      226, 1893,    0,  927,  286,  286,  286,  286,  286,  286,
      286,  357,    0,  357,  357,  357,  357,  357,  357,  357,
      398,  398,  398,  398,  398,  398,  398,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      287,  287,  287, 1899,  287, 1899, 1902,  227, 1902,    0,
        0,  287,  287,  287,  287,  287,  287,  287,  358,    0,
      358,  358,  358,  358,  358,  358,  358,  399,  399,  399,

      399,  399,  399,  399,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  288,  288,  288,
      930,  288,  931, 1906,  228, 1906,    0,  932,  288,  288,
      288,  288,  288,  288,  288,  335,  335,  335,  335,  335,
      335,  335,    0,    0, 1720,  934, 1720,  335,  930,  935,
      931,  228,  231,  231,  231,  932,  231, 1914,  231, 1914,
      231,  231, 1720,  231,  231,  231,  231,  231,  231,  231,
      232,  232,  232,  934,  232,  335,  232,  935,  232,  232,
        0,  232,  232,  232,  232,  232,  232,  232,  235,  235,
      235, 1723,  235, 1723,  235, 1728,  235, 1728,    0,  235,

      235,  235,  235,  235,  235,  235,  236,  236,  236, 1723,
      236,    0,  236, 1728,  236,    0,    0,  236,  236,  236,
      236,  236,  236,  236,  237,  237,  237, 1738,  237, 1738,
      237, 1745,  237, 1745,    0,  237,  237,  237,  237,  237,
      237,  237,  238,  238,  238, 1738,  238,    0,  238, 1745,
      238,    0,    0,  238,  238,  238,  238,  238,  238,  238,
      239,  239,  239, 1748,  239, 1748,  239, 1753,  239, 1753,
        0,  239,  239,  239,  239,  239,  239,  239,  240,  240,
      240, 1748,  240,    0,  240, 1753,  240,    0,    0,  240,
      240,  240,  240,  240,  240,  240,  241,  241,  241, 1754,

      241, 1754,  241, 1756,  241, 1756,    0,  241,  241,  241,
      241,  241,  241,  241,  242,  242,  242, 1754,  242,    0,
      242, 1756,  242,    0,    0,  242,  242,  242,  242,  242,
      242,  242,  243,  243,  243, 1760,  243, 1760,  243, 1763,
      243, 1763,    0,  243,  243,  243,  243,  243,  243,  243,
      244,  244,  244, 1760,  244,    0,  244, 1763,  244,    0,
        0,  244,  244,  244,  244,  244,  244,  244,  245,  245,
      245, 1778,  245, 1778,  245, 1782,  245, 1782,    0,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246, 1778,
      246,    0,  246, 1782,  246,    0,    0,  246,  246,  246,

      246,  246,  246,  246,  247,  247,  247, 1785,  247, 1785,
      247, 1788,  247, 1788,    0,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248, 1785,  248,    0,  248, 1788,
      248,    0,    0,  248,  248,  248,  248,  248,  248,  248,
      249,  249,  249, 1792,  249, 1792,  249, 1795,  249, 1795,
        0,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250, 1792,  250,    0,  250, 1795,  250,    0,    0,  250,
      250,  250,  250,  250,  250,  250,  251,  251,  251, 1796,
      251, 1796,  251, 1797,  251, 1797,    0,  251,  251,  251,
      251,  251,  251,  251,  252,  252,  252, 1796,  252,    0,

      252, 1797,  252,    0,    0,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253, 1798,  253, 1798,  253, 1810,
      253, 1810,    0,  253,  253,  253,  253,  253,  253,  253,
      254,  254,  254, 1798,  254,    0,  254, 1810,  254,    0,
        0,  254,  254,  254,  254,  254,  254,  254,  255,  255,
      255, 1821,  255, 1821,  255, 1829,  255, 1829,    0,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256, 1821,
      256,    0,  256, 1829,  256,    0,    0,  256,  256,  256,
      256,  256,  256,  256,  257,  257,  257, 1836,  257, 1836,
      257, 1917,  257, 1917,    0,  257,  257,  257,  257,  257,

      257,  257,  258,  258,  258, 1836,  258,  936,  258,  937,
      258,    0,  939,  258,  258,  258,  258,  258,  258,  258,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  289,  289,  289,  936,  289,  937,    0,  259,
      939,    0,    0,  289,  289,  289,  289,  289,  289,  289,
      360,    0,  360,  360,  360,  360,  360,  360,  360,  400,
      400,  400,  400,  400,  400,  400,  259,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  290,
      290,  290,  940,  290,  941, 1922,  260, 1922,    0,    0,
      290,  290,  290,  290,  290,  290,  290,  367,  942,  367,

      943,    0,  367,  367,  367,  367,  367,  367,  367, 1839,
      940, 1839,  941,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  942, 1839,  943,  291,
      291,  291,  291,  261,  291,  291,  291,  291,  292,  292,
      292,  292,    0,  292,  292,  292,  292,  369,  291,  369,
      369,  369,  369,  369,  369,  369, 1848,  292, 1848,    0,
      261,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,    0, 1848,  291, 1924, 1925, 1924, 1925,
      262, 1852,    0, 1852,  292,  338,  338,  338,  338,  338,
      338,  338,  312,  309,  611,  945,  618,  338,  312, 1852,

      309,  309,  611,  312,  309,  618,  309,  262,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      312,  309,  611,  945,  618,  338,  312,  263,  309,  309,
      611,  312,  309,  618,  309, 1926, 1936, 1926, 1936,  323,
      341,  341,  341,  341,  341,  341,  341,  323,  323,  323,
      946,  947,  341,  948,  263,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  323,  949,  950,
      951,  952,  953,    0,  264,  323,  323,  323,  946,  947,
      341,  948,  344,  344,  344,  344,  344,  344,  344, 1941,
     1949, 1941, 1949, 1954,  344, 1954,  949,  950,  951,  952,

      953,  264,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  401,  401,  401,  401,  401,  401,
      401,  265,  344,  347,  347,  347,  347,  347,  347,  347,
     1958,    0, 1958,  954,  371,  347,  371,  371,  371,  371,
      371,  371,  371, 1961, 1964, 1961, 1964,    0,  265,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  954,  955,  347, 1971,  956, 1971,    0,  266,  350,
      350,  350,  350,  350,  350,  350, 1973, 1978, 1973, 1978,
      615,  350,  353,  353,  353,  353,  353,  353,  353,  958,
      955,  959,  615,  956,  353,  266,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  615,  350,
      960,  961,  962,  963, 1860,  269, 1860,  958,  961,  959,
      615,    0,  353,  356,  356,  356,  356,  356,  356,  356,
        0, 1993, 1860, 1993, 1995,  356, 1995,    0,  960,  961,
      962,  963,  269,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  402,  402,  402,  402,  402,
      402,  402,  270,  356,  359,  359,  359,  359,  359,  359,
      359, 1997,    0, 1997,  964,  372,  359,  372,  372,  372,
      372,  372,  372,  372, 2003, 2005, 2003, 2005,    0,  270,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  964,  965,  359,  966,  968,    0,    0,  271,
      370,  370,  370,  370,  370,  370,  370, 2011, 2013, 2011,
     2013, 1039,  370,  373,  373,  373,  373,  373,  373,  373,
     1040,  965, 1043,  966,  968,  373,  271,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272, 1039,
      370,    0, 1044, 1045, 1046, 2015,  272, 2015, 1040, 2017,
     1043, 2017,  374,  373,  374,  374,  374,  374,  374,  374,
      374,  375,    0,  375,  375,  375,  375,  375,  375,  375,
     1044, 1045, 1046,  272,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  403,  403,  403,  403,

      403,  403,  403,  273,  376,  376,  376,  376,  376,  376,
      376, 1863, 2020, 1863, 2020,  377,  376,  377,  377,  377,
      377,  377,  377,  377, 2021, 2023, 2021, 2023,    0, 1863,
      273,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274, 1050,  376, 1051, 1052, 1053, 1054,  378,
      274,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  379,  379,  379, 2025, 2030, 2025, 2030,    0,
      379, 1050, 1055, 1051, 1052, 1053, 1054,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      404,  404,  404,  404,  404,  404,  404,  275,  379,  380,

     1055,  380,  380,  380,  380,  380,  380,  380,  395, 1057,
      395,  395,  395,  395,  395,  395,  395,  405,  405,  405,
      405,  405,  405,  405,  275,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276, 1057, 1058, 1059,
     1061, 1062, 1068,  397,  276,  397,  397,  397,  397,  397,
      397,  397,    0,  396,  396,  396,  396,  396,  396,  396,
     1865, 2031, 1865, 2031,    0,  396, 1058, 1059, 1061, 1062,
     1068,  276,  299,  299,  299,  299,  299,  299, 1865,  299,
      299,    0, 1056,  299,  299,  299,  299,  299,  299,  299,
      317,  318,  317,  396, 1056,    0,  318,  406,  406,  406,

      406,  406,  406,  406,    0,    0,  317,  894,  317,  317,
     1056,  318, 1071, 1072,    0,  894,  318, 1073, 1867,  318,
     1867,    0, 1056,  317,    0, 2035,  318, 2035, 2037,    0,
     2037,  610,  317,  317,  317,  894, 1867,  317,    0,  318,
     1071, 1072,  610,  894,  318, 1073,  596,  318,  596,  610,
      407,  317,  407,  407,  407,  407,  407,  407,  407,  610,
      317,  317,  317,  319,  596, 1075,  596,  605,  596,  319,
      610, 1076,  319,  938,  605,  319,  605,  610,  319,  319,
      938,  319,    0,  596, 1077, 1078,    0,  938,  319, 1079,
        0,  319, 1080, 1075,  596,  605,  596,  319,    0, 1076,

      319,  938,  605,  319,  605,    0,  319,  319,  938,  319,
      324,  596, 1077, 1078,  324,  938, 1081, 1079,  324, 1082,
     1080,  602,  324, 1083,  324,  602,  602,  602, 1084,    0,
      324,  408,  408,  408,  408,  408,  408,  408,  324, 1085,
     1086, 1087,  324,  408, 1081,    0,  324, 1082,    0,  602,
      324, 1083,  324,  602,  602,  602, 1084,  409,  324,  409,
      409,  409,  409,  409,  409,  409,    0, 1085, 1086, 1087,
      410,  408,  410,  410,  410,  410,  410,  410,  410,  411,
      411,  411,  411,  411,  411,  411,    0, 1088, 1089, 1090,
      412,  411,  412,  412,  412,  412,  412,  412,  412,  413,

        0,  413,  413,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  414,  414, 1088, 1089, 1090, 1091,  411,
      414,  415,    0,  415,  415,  415,  415,  415,  415,  415,
      416,    0,  416,  416,  416,  416,  416,  416,  416,  417,
      417,  417,  417,  417,  417,  417, 1091, 1093,  414, 1094,
      418,  417,  418,  418,  418,  418,  418,  418,  418,  419,
      419,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  420,    0, 1093, 1093,    0, 1094,  421,  417,
      421,  421,  421,  421,  421,  421,  421,  422,  422,  422,
      422,  422,  422,  422,    0, 1096, 1097, 1100,  423,  422,

      423,  423,  423,  423,  423,  423,  423,  424,    0,  424,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,
      425,  425,  425, 1096, 1097, 1100, 1101,  422,  425,  426,
        0,  426,  426,  426,  426,  426,  426,  426,  427,    0,
      427,  427,  427,  427,  427,  427,  427,  428,  428,  428,
      428,  428,  428,  428, 1101, 1102,  425, 1104,  429,  428,
      429,  429,  429,  429,  429,  429,  429,  430,    0,  430,
      430,  430,  430,  430,  430,  430,  431,  431,  431,  431,
      431,  431,  431, 1102,    0, 1104, 1105,  428,  431,  432,
        0,  432,  432,  432,  432,  432,  432,  432,  433,    0,

      433,  433,  433,  433,  433,  433,  433,  434,  434,  434,
      434,  434,  434,  434, 1105, 1107,  431, 1108,  435,  434,
      435,  435,  435,  435,  435,  435,  435,  436,    0,  436,
      436,  436,  436,  436,  436,  436,  437,  437,  437,  437,
      437,  437,  437, 1107,    0, 1108, 1109,  434,  437,  438,
        0,  438,  438,  438,  438,  438,  438,  438,  439,    0,
      439,  439,  439,  439,  439,  439,  439,  440,  440,  440,
      440,  440,  440,  440, 1109, 1110,  437, 1111,  441,  440,
      441,  441,  441,  441,  441,  441,  441,  442,    0,  442,
      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,

      443,  443,  443, 1110,    0, 1111, 1116,  440,  443,  444,
        0,  444,  444,  444,  444,  444,  444,  444,  445,    0,
      445,  445,  445,  445,  445,  445,  445,  446,  446,  446,
      446,  446,  446,  446, 1116, 1121,  443, 1123,  447,  446,
      447,  447,  447,  447,  447,  447,  447,  448,    0,  448,
      448,  448,  448,  448,  448,  448,  449,  449,  449,  449,
      449,  449,  449, 1121, 1124, 1123, 1126,  446,  449,  450,
        0,  450,  450,  450,  450,  450,  450,  450,  451,  451,
      451,  451,  451,  451,  451,  452,  452,  452,  452,  452,
      452,  452, 1124, 2038, 1126, 2038,  449,  453,  453,  453,

      453,  453,  453,  453,  454,  454,  454,  454,  454,  454,
      454,  455,    0,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,  456,    0, 1127, 1128,
     1129,  457,  456,  457,  457,  457,  457,  457,  457,  457,
      459,    0,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  460,  460,  460,  460, 1127, 1128, 1129,    0,
      456,  460,  461,    0,  461,  461,  461,  461,  461,  461,
      461,  462,  462,  462,  462,  462,  462,  462,  463,  463,
      463,  463,  463,  463,  463,  464, 2052,  464, 2052,  460,
      464,  464,  464,  464,  464,  464,  464,  465,  465,  465,

      465,  465,  465,  465,  466, 2053,  466, 2053,    0,  466,
      466,  466,  466,  466,  466,  466,  467,  467,  467,  467,
      467,  467,  467,  468, 2059,  468, 2059,    0,  468,  468,
      468,  468,  468,  468,  468,  469,  469,  469,  469,  469,
      469,  469,  470, 2065,  470, 2065,    0,  470,  470,  470,
      470,  470,  470,  470,  471,  471,  471,  471,  471,  471,
      471,  472,  472,  472,  472,  472,  472,  472,  473,  473,
      473,  473,  473,  473,  473,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475,  476,
      476,  476,  476,  476,  476,  476,  477,  477,  477,  477,

      477,  477,  477,  478,  478,  478,  478,  478,  478,  478,
      479,  479,  479,  479,  479,  479,  479,  485,  485,  485,
      485,  485,  485,  485,  486,  486,  486,  486,  486,  486,
      486,  487,  487,  487,  487,  487,  487,  487,  488,    0,
      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  489,  489, 1130, 1131, 1132, 1133,  490,  489,
      490,  490,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,  491,  491,  492,  492,  492,  492,  492,  492,
      492,    0, 1130, 1131, 1132, 1133,    0,  489,  493,  493,
      493,  493,  493,  493,  493,  496,  496,  496,  496,  496,

      496,  496,  497,  497,  497,  497,  497,  497,  497,  500,
      500,  500,  500,  500,  500,  500,  508,  508,  508,  508,
      508,  508,  508,  509,    0,  509,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  510,  510,  510,  510, 1135,
     2066,    0, 2066,  511,  510,  511,  511,  511,  511,  511,
      511,  511,  512,  512,  512,  512,  512,  512,  512,  513,
      513,  513,  513,  513,  513,  513,    0, 1135,  514,  514,
      514,    0,  510,  514,  514,  514,  514,  514,  514,  514,
      515,  515,  515,  515,  515,  515,  515,  516, 2067,  516,
     2067,    0,  516,  516,  516,  516,  516,  516,  516,  517,

      517,  517,  517,  517,  517,  517,  518, 2068,  518, 2068,
        0,  518,  518,  518,  518,  518,  518,  518,  519,  519,
      519,  519,  519,  519,  519,  520, 2070,  520, 2070,    0,
      520,  520,  520,  520,  520,  520,  520,  521,  521,  521,
      521,  521,  521,  521,  522,  522,  522,    0,    0,  522,
      522,  522,  522,  522,  522,  522,  523,  523,  523,  523,
      523,  523,  523,  524, 2071,  524, 2071,    0,  524,  524,
      524,  524,  524,  524,  524,  525,  525,  525,  525,  525,
      525,  525,  526, 2072,  526, 2072,    0,  526,  526,  526,
      526,  526,  526,  526,  527,  527,  527,  527,  527,  527,

      527,  528, 2073,  528, 2073,    0,  528,  528,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
      530,  530,  530,    0,    0,  530,  530,  530,  530,  530,
      530,  530,  531,  531,  531,  531,  531,  531,  531,  532,
     2078,  532, 2078,    0,  532,  532,  532,  532,  532,  532,
      532,  533,  533,  533,  533,  533,  533,  533,  534, 2080,
      534, 2080,    0,  534,  534,  534,  534,  534,  534,  534,
      535,  535,  535,  535,  535,  535,  535,  536, 2084,  536,
     2084,    0,  536,  536,  536,  536,  536,  536,  536,  541,
      541,  541,  541,  541,  541,  541,  546,  546,  546,  546,

      546,  546,  546,  547,  547,  547,  547,  547,  547,  547,
      550,  550,  550,  550,  550,  550,  550,  551,  551,  551,
      551,  551,  551,  551,  552,  552,  552,  552,  552,  552,
      552,  562, 2085,  562, 2085,  562,  562,    0,    0,  562,
      562,  562,  562,  562,  562,  562,  623,  623,  623,  623,
      623,  623,  623,  624,  624,  624,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  627,  627,  627,  627,  627,  627,
      627,  628,  628,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  629,  629,  629,  630,  630,  630,  630,  630,

      630,  630, 2088, 2090, 2088, 2090,  631,  630,  631,  631,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,
      632,  632, 1137,  633, 1138,  633,    0,  632,  633,  633,
      633,  633,  633,  633,  633,  630,  634,  634,  634,  634,
      634,  634,  634, 1142, 2102, 2109, 2102, 2109,  634, 2113,
     1137, 2113, 1138,    0,  635,  632,  635,  635,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  636,  636,
     1134, 1142,  637, 1134,  637,  636,  634,  637,  637,  637,
      637,  637,  637,  637,  638,  638,  638,  638,  638,  638,
      638, 1146, 1134, 1147,    0, 2115,  638, 2115, 1134,    0,

        0, 1134,  639,  636,  639,  639,  639,  639,  639,  639,
      639,  640,  640,  640,  640,  640,  640,  640, 1148, 1146,
      641, 1147,  641,  640,  638,  641,  641,  641,  641,  641,
      641,  641,  642,  642,  642,  642,  642,  642,  642, 1153,
     2117, 1154, 2117, 2119,  642, 2119, 1148, 2120,    0, 2120,
      643,  640,  643,  643,  643,  643,  643,  643,  643,  644,
      644,  644,  644,  644,  644,  644, 1155, 1153,  645, 1154,
      645,  644,  642,  645,  645,  645,  645,  645,  645,  645,
      646,  646,  646,  646,  646,  646,  646, 1156, 2121, 1157,
     2121, 2127,  646, 2127, 1155, 2128,    0, 2128,  647,  644,

      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648, 1158, 1156,  649, 1157,  649,  648,
      646,  649,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  650, 1159, 2141, 1161, 2141, 2143,
      650, 2143, 1158, 2148,    0, 2148,  651,  648,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
      652,  652, 1164, 1159,  653, 1161,  653,  652,  650,  653,
      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654, 1165, 2154, 1166, 2154, 2155,  654, 2155,
     1164, 2156,    0, 2156,  655,  652,  655,  655,  655,  655,

      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
     1167, 1165,  657, 1166,  657,  656,  654,  657,  657,  657,
      657,  657,  657,  657,  658,  658,  658,  658,  658,  658,
      658, 1168, 2175, 1169, 2175, 2178,  658, 2178, 1167, 2186,
        0, 2186,  659,  656,  659,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660, 1171, 1168,
      661, 1169,  661,  660,  658,  661,  661,  661,  661,  661,
      661,  661,  662,  662,  662,  662,  662,  662,  662, 1172,
     2191, 2194, 2191, 2194,  662, 2196, 1171, 2196,    0,    0,
      663,  660,  663,  663,  663,  663,  663,  663,  663,  664,

      664,  664,  664,  664,  664,  664, 1170, 1172,  665, 1170,
      665,  664,  662,  665,  665,  665,  665,  665,  665,  665,
      666,  666,  666,  666,  666,  666,  666,  667,  667,  667,
      667,  667,  667,  667, 1170,    0, 1177, 1170,    0,  664,
      668,  668,  668,  668,  668,  668,  668,  669,  669,  669,
      669,  669,  669,  669,  670,  670,  670,  670,  670,  670,
      670,  671,    0,  671, 1177,    0,  671,  671,  671,  671,
      671,  671,  671,  672,  672,  672,  672,  672,  672,  672,
      673,  673,  673,  673,  673,  673,  673,  674,  674,  674,
      674,  674,  674,  674, 2201, 2207, 2201, 2207,  675,  674,

      675,  675,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  676, 1178,  677, 1179,  677,    0,  676,
      677,  677,  677,  677,  677,  677,  677,  674,  678,  678,
      678,  678,  678,  678,  678, 1182, 2210, 1183, 2210, 2213,
      678, 2213, 1178, 2215, 1179, 2215,  679,  676,  679,  679,
      679,  679,  679,  679,  679,  680,  680,  680,  680,  680,
      680,  680, 1184, 1182,  681, 1183,  681,  680,  678,  681,
      681,  681,  681,  681,  681,  681,  682,  682,  682,  682,
      682,  682,  682, 1185, 2221, 1186, 2221, 2227,  682, 2227,
     1184, 2229,    0, 2229,  683,  680,  683,  683,  683,  683,

      683,  683,  683,  684,  684,  684,  684,  684,  684,  684,
     1187, 1185,  685, 1186,  685,  684,  682,  685,  685,  685,
      685,  685,  685,  685,  686,  686,  686,  686,  686,  686,
      686, 1188, 2230, 1197, 2230, 2231,  686, 2231, 1187, 2235,
        0, 2235,  687,  684,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688, 1200, 1188,
      689, 1197,  689,  688,  686,  689,  689,  689,  689,  689,
      689,  689,  698,  698,  698,  698,  698,  698,  698,  699,
      699,  699,  699,  699,  699,  699, 1200, 1201, 1202,    0,
        0,  688,  700,  700,  700,  700,  700,  700,  700,  701,

      701,  701,  701,  701,  701,  701,  704,  704,  704,  704,
      704,  704,  704,    0,    0, 1201, 1202,  705,  704,  705,
      705,  705,  705,  705,  705,  705,  706,  706,  706,  706,
      706,  706,  706, 1203,  707, 1204,  707, 1205,  706,  707,
      707,  707,  707,  707,  707,  707,  704,  708,  708,  708,
      708,  708,  708,  708,  709,  709,  709,  709,  709,  709,
      709, 1203, 2237, 1204, 2237, 1205,  706,  710,  710,  710,
      710,  710,  710,  710,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  713,  713,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,

      714,  714,  715,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  716,  717,  717,  717,  717,
      717,  717,  717, 2241, 2243, 2241, 2243,  718,  717,  718,
      718,  718,  718,  718,  718,  718,  719,  719,  719,  719,
      719,  719,  719, 1206,  720, 1209,  720,    0,  719,  720,
      720,  720,  720,  720,  720,  720,  717,  721,  721,  721,
      721,  721,  721,  721, 1211, 2244, 1212, 2244, 2246,  721,
     2246, 1206, 2248, 1209, 2248,  722,  719,  722,  722,  722,
      722,  722,  722,  722,  723,  723,  723,  723,  723,  723,
      723, 1213, 1211,  724, 1212,  724,  723,  721,  724,  724,

      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,
      725,  725, 1214, 2255, 1215, 2255, 2257,  725, 2257, 1213,
     2259,    0, 2259,  726,  723,  726,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  727, 1216,
     1214,  728, 1215,  728,  727,  725,  728,  728,  728,  728,
      728,  728,  728,  729,  729,  729,  729,  729,  729,  729,
     1217, 2262, 1218, 2262, 2266,  729, 2266, 1216, 2270,    0,
     2270,  730,  727,  730,  730,  730,  730,  730,  730,  730,
      731,  731,  731,  731,  731,  731,  731, 1219, 1217,  732,
     1218,  732,  731,  729,  732,  732,  732,  732,  732,  732,

      732,  733,  733,  733,  733,  733,  733,  733,  734,  734,
      734,  734,  734,  734,  734, 1219, 2271, 2273, 2271, 2273,
      731,  735,  735,  735,  735,  735,  735,  735, 2279, 2280,
     2279, 2280,  736,  735,  736,  736,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  737,  737, 1222,  738,
     1229,  738,    0,  737,  738,  738,  738,  738,  738,  738,
      738,  735,  739,  739,  739,  739,  739,  739,  739, 1230,
     2281, 1231, 2281, 2290,  739, 2290, 1222, 2298, 1229, 2298,
      740,  737,  740,  740,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  741,  741, 1234, 1230,  742, 1231,

      742,  741,  739,  742,  742,  742,  742,  742,  742,  742,
      743,  743,  743,  743,  743,  743,  743, 1237, 2301, 1238,
     2301, 2312,  743, 2312, 1234, 2314,    0, 2314,  744,  741,
      744,  744,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  745,  745, 1239, 1237,  746, 1238,  746,  745,
      743,  746,  746,  746,  746,  746,  746,  746,  747,  747,
      747,  747,  747,  747,  747, 1240, 2319, 1241, 2319, 2330,
      747, 2330, 1239, 2332,    0, 2332,  748,  745,  748,  748,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      749,  749, 1242, 1240,  750, 1241,  750,  749,  747,  750,

      750,  750,  750,  750,  750,  750,  751,  751,  751,  751,
      751,  751,  751, 1243, 2335, 1244, 2335, 2337,  751, 2337,
     1242, 2345,    0, 2345,  752,  749,  752,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  753,
     1247, 1243,  754, 1244,  754,  753,  751,  754,  754,  754,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  755,
      755, 1252, 2347, 1253, 2347, 2348,  755, 2348, 1247, 2349,
        0, 2349,  756,  753,  756,  756,  756,  756,  756,  756,
      756,  757,  757,  757,  757,  757,  757,  757, 1254, 1252,
      758, 1253,  758,  757,  755,  758,  758,  758,  758,  758,

      758,  758,  759,  759,  759,  759,  759,  759,  759, 1255,
     2354, 1256, 2354, 2356,  759, 2356, 1254, 2361,    0, 2361,
      760,  757,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761, 1257, 1255,  762, 1256,
      762,  761,  759,  762,  762,  762,  762,  762,  762,  762,
      763,  763,  763,  763,  763,  763,  763, 1258, 2363, 1260,
     2363, 2365,  763, 2365, 1257, 2367,    0, 2367,  764,  761,
      764,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  765, 1264, 1258,  766, 1260,  766,  765,
      763,  766,  766,  766,  766,  766,  766,  766,  767,  767,

      767,  767,  767,  767,  767, 1266, 2368, 1268, 2368, 2369,
      767, 2369, 1264, 2371,    0, 2371,  768,  765,  768,  768,
      768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
      769,  769, 1269, 1266,  770, 1268,  770,  769,  767,  770,
      770,  770,  770,  770,  770,  770,  771,  771,  771,  771,
      771,  771,  771, 1270, 2373, 1271, 2373, 2376,  771, 2376,
     1269, 2377,    0, 2377,  772,  769,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,
     1274, 1270,  774, 1271,  774,  773,  771,  774,  774,  774,
      774,  774,  774,  774,  775,  775,  775,  775,  775,  775,

      775,  776,  776,  776,  776,  776,  776,  776, 1274, 1276,
     1277,    0,    0,  773,  777,  777,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,    0,    0, 1276, 1277,  780,
      779,  780,  780,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  781,  781, 1280,  782, 1273,  782,    0,
      781,  782,  782,  782,  782,  782,  782,  782,  779,  784,
      784,  784,  784,  784,  784,  784, 1273, 2378, 1281, 2378,
     2379,  784, 2379, 1280, 2380, 1273, 2380,  785,  781,  785,
      785,  785,  785,  785,  785,  785,  786,  786,  786,  786,

      786,  786,  786,    0,    0,  787, 1281,  787,  786,  784,
      787,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  789, 2382,  789, 2382,    0,  789,
      789,  789,  789,  789,  789,  789,  786,  790,  790,  790,
      790,  790,  790,  790,  791, 2384,  791, 2384,    0,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792,  793, 2385,  793, 2385,    0,  793,  793,
      793,  793,  793,  793,  793,  794,  794,  794,  794,  794,
      794,  794,  795, 2386,  795, 2386,    0,  795,  795,  795,
      795,  795,  795,  795,  796,  796,  796,  796,  796,  796,

      796,  797,  797,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
      799,  799,  800,  800,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  801,  801,  801,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  804,  804,  805,  805,  805,
      805,  805,  805,  805,  811,  811,  811,  811,  811,  811,
      811,  812,  812,  812,  812,  812,  812,  812,  813,  813,
      813,  813,  813,  813,  813,  814,  814,  814,  814,  814,
      814,  814,    0,    0,    0,    0,  815,  814,  815,  815,

      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  816, 1282,  817, 1283,  817, 1285,  816,  817,  817,
      817,  817,  817,  817,  817,  814,  818,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  819,
     1282,    0, 1283,    0, 1285,  816,  820,  820,  820,  820,
      820,  820,  820,  823,  823,  823,  823,  823,  823,  823,
      824,  824,  824,  824,  824,  824,  824,  827,  827,  827,
      827,  827,  827,  827,  835,  835,  835,  835,  835,  835,
      835,  836,  836,  836,  836,  836,  836,  836,    0,    0,
        0,    0,  837,  836,  837,  837,  837,  837,  837,  837,

      837,  838,  838,  838,  838,  838,  838,  838,    0,  839,
        0,  839,    0,  838,  839,  839,  839,  839,  839,  839,
      839,  836,  840,  840,  840,  840,  840,  840,  840,  841,
      841,  841,    0,    0,  841,  841,  841,  841,  841,  841,
      841,  838,  842,  842,  842,  842,  842,  842,  842,  843,
        0,  843,    0, 1289,  843,  843,  843,  843,  843,  843,
      843,  844,    0,  844,    0,    0,  844,  844,  844,  844,
      844,  844,  844,  845,  845,  845,  845,  845,  845,  845,
      846, 1289,  846,    0,    0,  846,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  847,  848,

        0,  848,    0,    0,  848,  848,  848,  848,  848,  848,
      848,  849,  849,  849,  849,  849,  849,  849,  850,  850,
      850,    0, 1293,  850,  850,  850,  850,  850,  850,  850,
      851,  851,  851,  851,  851,  851,  851,  852,    0,  852,
        0, 1295,  852,  852,  852,  852,  852,  852,  852,  853,
     1293,  853,    0,    0,  853,  853,  853,  853,  853,  853,
      853,  854,  854,  854,  854,  854,  854,  854,  855, 1295,
      855,    0,    0,  855,  855,  855,  855,  855,  855,  855,
      856,  856,  856,  856,  856,  856,  856,  857,    0,  857,
        0,    0,  857,  857,  857,  857,  857,  857,  857,  858,

      858,  858,  858,  858,  858,  858,  859,  859,  859,    0,
     1296,  859,  859,  859,  859,  859,  859,  859,  860,  860,
      860,  860,  860,  860,  860,  861,    0,  861,    0, 1298,
      861,  861,  861,  861,  861,  861,  861,  862, 1296,  862,
        0,    0,  862,  862,  862,  862,  862,  862,  862,  863,
      863,  863,  863,  863,  863,  863,  864, 1298,  864,    0,
        0,  864,  864,  864,  864,  864,  864,  864,  865,  865,
      865,  865,  865,  865,  865,  866,    0,  866,    0,    0,
      866,  866,  866,  866,  866,  866,  866,  867,  867,  867,
      867,  867,  867,  867,  872,  872,  872,  872,  872,  872,

      872,  877,  877,  877,  877,  877,  877,  877,  878,  878,
      878,  878,  878,  878,  878,  881,  881,  881,  881,  881,
      881,  881,  882,  882,  882,  882,  882,  882,  882,  883,
      883,  883,  883,  883,  883,  883,  891,    0,  891,    0,
      891,  891,    0,    0,  891,  891,  891,  891,  891,  891,
      891,  969,  969,  969,  969,  969,  969,  969,  970,  970,
      970,  970,  970,  970,  970,  971,  971,  971,  971,  971,
      971,  971,  972,  972,  972,  972,  972,  972,  972,  973,
      973,  973,  973,  973,  973,  973,  974,  974,  974,  974,
      974,  974,  974,  975,  975,  975,  975,  975,  975,  975,

      976,  976,  976,  976,  976,  976,  976,  977,  977,  977,
      977,  977,  977,  977,  978,  978,  978,  978,  978,  978,
      978,  979,  979,  979,  979,  979,  979,  979,  980,  980,
      980,  980,  980,  980,  980,  981,  981,  981,  981,  981,
      981,  981,  982,  982,  982,  982,  982,  982,  982,  983,
      983,  983,  983,  983,  983,  983,  984,  984,  984,  984,
      984,  984,  984,  985,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  986,  986,  987,  987,  987,
      987,  987,  987,  987,  988,  988,  988,  988,  988,  988,
      988,  989,  989,  989,  989,  989,  989,  989,  990,  990,

      990,  990,  990,  990,  990,  991,  991,  991,  991,  991,
      991,  991,  992,  992,  992,  992,  992,  992,  992,  993,
      993,  993,  993,  993,  993,  993,  994,  994,  994,  994,
      994,  994,  994,  995,  995,  995,  995,  995,  995,  995,
      996,  996,  996,  996,  996,  996,  996,  997,  997,  997,
      997,  997,  997,  997,  998,  998,  998,  998,  998,  998,
      998,  999,  999,  999,  999,  999,  999,  999, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1033,

     1033, 1033, 1033, 1033, 1033, 1033, 1034, 1034, 1034,    0,
        0, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1036, 1036, 1036,    0, 1299,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1038, 1038, 1038,    0,    0, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1049, 1299, 1112, 1049,
     1112,    0,    0, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1113, 1300, 1113, 1049,    0, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1136, 1114, 1049, 1114,    0, 1049, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1136, 1139,    0, 1139, 1300,

        0, 1049, 1190, 1190, 1190, 1190, 1190, 1190, 1190,    0,
     1136, 1191,    0, 1191, 1139,    0, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1136, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1193,    0,
     1193,    0, 1139, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1195, 1275, 1195, 1223, 1275, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1196, 1224, 1223, 1259, 1223, 1223, 1223, 1196,
     1224, 1302, 1279,    0, 1286, 1259, 1279, 1279, 1279, 1275,
     1284, 1223, 1275, 1286, 1284, 1284, 1284, 1304, 1303, 1305,
     1196, 1224, 1223, 1259, 1223, 1223, 1223, 1196, 1224, 1302,

     1279, 1303, 1286, 1259, 1279, 1279, 1279, 1294, 1284, 1294,
     1306, 1286, 1284, 1284, 1284, 1304, 1303, 1305, 1307, 1308,
     1294, 1309, 1317, 1319, 1320, 1294, 1321, 1322, 1323, 1303,
     1324, 1325, 1326, 1328, 1331, 1333, 1334, 1335, 1306, 1337,
     1338, 1339, 1340, 1343, 1344, 1346, 1307, 1308, 1347, 1309,
     1317, 1319, 1320, 1294, 1321, 1322, 1323, 1348, 1324, 1325,
     1326, 1328, 1331, 1333, 1334, 1335, 1350, 1337, 1338, 1339,
     1340, 1343, 1344, 1346, 1351, 1352, 1347, 1352, 1353, 1354,
     1352, 1352, 1355, 1356, 1357, 1348, 1358, 1363, 1352, 1365,
     1366, 1371, 1355, 1372, 1350, 1373, 1381, 1385, 1386, 1387,

     1388, 1389, 1351, 1352, 1390, 1352, 1353, 1354, 1352, 1352,
     1355, 1356, 1357, 1392, 1358, 1363, 1352, 1365, 1366, 1371,
     1355, 1372, 1393, 1373, 1381, 1385, 1386, 1387, 1388, 1389,
     1394, 1395, 1390, 1396, 1397, 1398, 1399, 1400, 1408, 1409,
     1412, 1392, 1417, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
     1393, 1426, 1429, 1430, 1433, 1434, 1435,    0, 1394, 1395,
     1437, 1396, 1397, 1398, 1399, 1400, 1408, 1409, 1412, 1439,
     1417, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1436, 1426,
     1429, 1430, 1433, 1434, 1435, 1436, 1440, 1438, 1437, 1438,
     1441, 1442, 1443, 1445, 1446, 1447, 1459, 1439, 1460, 1461,

     1438, 1471, 1474, 1483, 1487, 1438, 1436, 1488, 1443, 1489,
     1490, 1491,    0, 1436, 1440, 1493, 1494, 1495, 1441, 1442,
     1443, 1445, 1446, 1447, 1459, 1496, 1460, 1461, 1497, 1471,
     1474, 1483, 1487, 1438, 1498, 1488, 1443, 1489, 1490, 1491,
     1492, 1499, 1492, 1493, 1494, 1495, 1500, 1501, 1502, 1507,
     1508, 1509, 1510, 1496, 1519, 1522, 1497, 1523, 1492, 1524,
     1525, 1527, 1498, 1526, 1528, 1529, 1530, 1531, 1532, 1499,
     1534, 1526, 1535, 1536, 1500, 1501, 1502, 1507, 1508, 1509,
     1510, 1537, 1519, 1522, 1538, 1523, 1492, 1524, 1525, 1527,
     1539, 1526, 1528, 1529, 1530, 1531, 1532, 1543, 1534, 1526,

     1535, 1536, 1544, 1545, 1546, 1547, 1548, 1549, 1552, 1537,
     1553, 1554, 1538, 1565, 1566, 1567, 1579, 1584, 1539, 1586,
     1589, 1590, 1593, 1594, 1595, 1543, 1596, 1598, 1599, 1602,
     1544, 1545, 1546, 1547, 1548, 1549, 1552, 1603, 1553, 1554,
     1607, 1565, 1566, 1567, 1579, 1584, 1608, 1586, 1589, 1590,
     1593, 1594, 1595, 1614, 1596, 1598, 1599, 1602, 1616, 1617,
     1619, 1620, 1621, 1622, 1623, 1603, 1624, 1625, 1607, 1626,
     1627, 1630, 1631, 1632, 1608, 1633, 1637, 1638, 1639, 1640,
     1641, 1614, 1642, 1643, 1645, 1646, 1616, 1617, 1619, 1620,
     1621, 1622, 1623, 1647, 1624, 1625, 1651, 1626, 1627, 1630,

     1631, 1632, 1652, 1633, 1637, 1638, 1639, 1640, 1641, 1653,
     1642, 1643, 1645, 1646, 1659, 1660, 1661, 1662, 1663, 1664,
     1665, 1647, 1668, 1667, 1651, 1669, 1670, 1672, 1673, 1671,
     1652, 1667, 1671, 1674, 1677, 1675, 1674, 1653, 1675, 1681,
     1682, 1683, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1685,
     1668, 1667, 1688, 1669, 1670, 1672, 1673, 1671, 1691, 1667,
     1671, 1674, 1677, 1675, 1674, 1687, 1675, 1681, 1682, 1683,
     1687, 1692, 1694, 1695, 1697, 1698, 1699, 1685, 1700, 1687,
     1688, 1701, 1702, 1704, 1705, 1706, 1691, 1697, 1707, 1708,
     1709, 1711, 1712, 1687, 1713, 1714, 1715, 1716, 1687, 1692,

     1694, 1695, 1697, 1698, 1699, 1718, 1700, 1687, 1719, 1701,
     1702, 1704, 1705, 1706, 1721, 1697, 1707, 1708, 1709, 1711,
     1712, 1722, 1713, 1714, 1715, 1716, 1724, 1725, 1726, 1727,
     1729, 1730, 1731, 1718, 1732, 1733, 1719, 1734, 1735, 1736,
     1737, 1740, 1721, 1742, 1743, 1744, 1747, 1750, 1751, 1722,
     1752, 1758, 1759, 1752, 1724, 1725, 1726, 1727, 1729, 1730,
     1731, 1762, 1732, 1733, 1764, 1734, 1735, 1736, 1737, 1740,
     1765, 1742, 1743, 1744, 1747, 1750, 1751, 1766, 1752, 1758,
     1759, 1752, 1767, 1768, 1769, 1770, 1771, 1772, 1774, 1762,
     1775, 1776, 1764, 1777, 1780, 1781, 1783, 1784, 1765, 1786,

     1790, 1791, 1794, 1800, 1794, 1766, 1801, 1802, 1803, 1804,
     1767, 1768, 1769, 1770, 1771, 1772, 1774, 1805, 1775, 1776,
     1794, 1777, 1780, 1781, 1783, 1784, 1806, 1786, 1790, 1791,
     1807, 1800, 1808, 1811, 1801, 1802, 1803, 1804, 1812, 1813,
     1815, 1818, 1819, 1820, 1825, 1805, 1826, 1828, 1794, 1831,
     1832, 1833, 1834, 1837, 1806, 1835, 1838, 1835, 1807, 1840,
     1808, 1811, 1841, 1842, 1843, 1844, 1812, 1813, 1815, 1818,
     1819, 1820, 1825, 1835, 1826, 1828, 1846, 1831, 1832, 1833,
     1834, 1837, 1847, 1850, 1838, 1851, 1854, 1840, 1855, 1857,
     1841, 1842, 1843, 1844, 1858, 1862, 1870, 1871, 1873, 1874,

     1875, 1835, 1877, 1879, 1846, 1879, 1881, 1882, 1883, 1885,
     1847, 1850, 1886, 1851, 1854, 1887, 1855, 1857, 1888,    0,
     1890, 1879, 1858, 1862, 1870, 1871, 1873, 1874, 1875, 1884,
     1877, 1884, 1891, 1894, 1881, 1882, 1883, 1885, 1895, 1892,
     1886, 1892, 1896, 1887, 1897, 1903, 1888, 1884, 1890, 1898,
     1904, 1898, 1900, 1900, 1900, 1907, 1901, 1892, 1901,    0,
     1891, 1894, 1909, 1910, 1911,    0, 1895, 1898, 1912, 1905,
     1896, 1905, 1897, 1903, 1901, 1908, 1913, 1908, 1904, 1919,
     1900, 1900, 1900, 1907, 1915,    0, 1915, 1905,    0, 1920,
     1909, 1910, 1911, 1908, 1921, 1916, 1912, 1916, 1918, 1923,

     1918, 1927, 1915, 1929, 1913, 1930, 1931, 1919, 1933, 1935,
     1939, 1918, 1918, 1916,    0, 1942, 1918, 1920,    0, 1943,
     1944, 1937, 1921, 1937, 1938, 1945, 1938, 1923, 1940, 1927,
     1940, 1929, 1950, 1930, 1931, 1951, 1933, 1935, 1939, 1937,
        0, 1916, 1938, 1942, 1952, 1953, 1940, 1943, 1944, 1946,
     1948, 1946, 1948, 1945, 1960,    0, 1955, 1956, 1955, 1956,
     1950, 1967, 1957, 1951, 1957, 1968,    0, 1946, 1948, 1959,
     1969, 1959, 1952, 1953, 1955, 1956, 1962, 1963, 1962, 1963,
     1957, 1965, 1960, 1965, 1966,    0, 1966, 1959, 1970, 1967,
     1970,    0, 1979, 1968, 1962, 1963, 1980, 1981, 1969, 1965,

     1982, 1972, 1966, 1972, 1983, 1974, 1970, 1974, 1975, 1976,
     1975, 1976, 1984, 1977, 1985, 1977, 1986, 1987, 1988, 1972,
     1979, 1989, 1990, 1991, 1980, 1981, 1975, 1976, 1982, 1996,
     1966, 1977, 1983, 1974, 1992, 1974, 1992, 1994, 1998, 1994,
     1984, 2000, 1985, 2001, 1986, 1987, 1988, 2004, 2006, 1989,
     1990, 1991, 1992, 2007, 2002, 1994, 2002, 1996, 2008, 2009,
     2010, 2012, 2010, 2012,    0, 2014, 1998, 2014, 2032, 2000,
        0, 2001, 2002,    0,    0, 2004, 2006,    0, 2010, 2012,
     2016, 2007, 2016, 2014, 2033,    0, 2008, 2009, 2018, 2019,
     2018, 2019, 2022, 2024, 2022, 2024, 2032, 2039, 2016, 2026,

     2026, 2026, 2027, 2028, 2027, 2028, 2018, 2019, 2042, 2044,
     2022, 2024, 2033, 2034, 2036, 2034, 2036, 2040, 2045, 2040,
     2027, 2028, 2041, 2046, 2041, 2039, 2047, 2026, 2026, 2026,
     2048, 2034, 2036, 2049, 2050, 2040, 2042, 2044, 2051, 2054,
     2041, 2054, 2055, 2056, 2057, 2058, 2045, 2060, 2062, 2064,
     2061, 2046, 2061,    0, 2047, 2082,    0, 2054, 2048,    0,
        0, 2049, 2050, 2069, 2083, 2069, 2051, 2074, 2061, 2074,
     2055, 2056, 2057, 2058, 2086, 2060, 2062, 2064, 2075, 2091,
     2075, 2069, 2076, 2082, 2076, 2074, 2077, 2079, 2077, 2079,
     2081, 2093, 2083, 2081, 2094, 2087, 2075, 2087, 2092, 2089,

     2076, 2089, 2086, 2097, 2077, 2079, 2092, 2091, 2092, 2098,
     2099, 2100, 2101, 2087, 2101, 2104, 2105, 2089, 2081, 2093,
     2106, 2081, 2094, 2103, 2107, 2103, 2092, 2108, 2110, 2108,
     2101, 2097, 2112, 2114, 2092, 2114, 2092, 2098, 2099, 2100,
     2122, 2103, 2111, 2104, 2105, 2108, 2123, 2111, 2106,    0,
     2124, 2114, 2107, 2125, 2126, 2111, 2110, 2129, 2130, 2116,
     2112, 2116, 2118, 2131, 2118, 2132, 2133, 2134, 2122, 2135,
     2111, 2136, 2137, 2138, 2123, 2111, 2139, 2116, 2124, 2135,
     2118, 2125, 2126, 2111, 2140, 2129, 2130, 2142, 2144, 2142,
     2145, 2131, 2145, 2132, 2133, 2134, 2146, 2135, 2147, 2136,

     2137, 2138, 2150, 2151, 2139, 2142, 2152, 2135, 2145, 2153,
     2157, 2153, 2140, 2158, 2160, 2159, 2144, 2159, 2161, 2162,
     2161, 2162, 2163, 2164, 2146, 2165, 2147, 2153, 2167, 2168,
     2150, 2151, 2169, 2159, 2152, 2170, 2161, 2162, 2157, 2172,
     2174, 2158, 2160, 2166, 2171, 2166, 2171, 2173, 2176, 2173,
     2163, 2164, 2177, 2165, 2177, 2153, 2167, 2168, 2180, 2181,
     2169, 2166, 2171, 2170, 2179, 2173, 2179, 2172, 2174, 2182,
     2177, 2183, 2184, 2185, 2188, 2185, 2176, 2187, 2187, 2187,
     2189, 2197, 2179, 2190, 2198, 2190, 2180, 2181, 2199,    0,
     2203, 2185, 2192, 2193, 2192, 2193, 2195, 2182, 2195, 2183,

     2184, 2190, 2188,    0, 2204, 2187, 2187, 2187, 2189, 2197,
     2192, 2193, 2198, 2200, 2195, 2200, 2199, 2202, 2203, 2202,
     2205, 2206, 2208, 2206, 2208, 2209, 2211, 2209, 2211, 2212,
     2216, 2200, 2204, 2217, 2214, 2202, 2214, 2218, 2219, 2206,
     2208, 2220, 2225, 2209, 2211, 2222, 2226, 2222, 2205, 2223,
     2233, 2223, 2214, 2224, 2228, 2224, 2228, 2212, 2216, 2238,
     2239, 2217, 2236, 2222, 2236, 2218, 2219, 2223, 2240, 2220,
     2225, 2224, 2228, 2242, 2226, 2242, 2249, 2245, 2233, 2245,
     2236, 2247, 2250, 2247, 2251, 2252, 2253, 2238, 2239, 2260,
     2254, 2242, 2254, 2261, 2263, 2245, 2240, 2264, 2256, 2247,

     2256, 2258, 2265, 2258, 2249, 2269, 2274, 2275, 2254, 2272,
     2250, 2272, 2251, 2252, 2253, 2277, 2256, 2260, 2278, 2258,
     2282, 2261, 2263, 2284, 2283, 2264, 2283, 2272, 2286, 2285,
     2265, 2285, 2287, 2269, 2274, 2275, 2288, 2289, 2291, 2292,
     2293, 2294, 2283, 2277, 2295, 2296, 2278, 2285, 2282, 2299,
     2302, 2284, 2297, 2300, 2297, 2300, 2286, 2303, 2304, 2306,
     2287, 2305, 2307, 2305, 2288, 2289, 2291, 2292, 2293, 2294,
     2297, 2300, 2295, 2296, 2308, 2309, 2310, 2299, 2302, 2305,
     2311, 2313, 2315, 2316, 2317, 2303, 2304, 2306,    0, 2318,
     2307, 2318, 2324, 2325, 2326, 2320, 2327, 2320, 2328, 2322,

     2329, 2322, 2308, 2309, 2310,    0,    0, 2318, 2311, 2313,
     2315, 2316, 2317, 2320, 2321,    0, 2321, 2322, 2341,    0,
     2324, 2325, 2326, 2331, 2327, 2331, 2328, 2321, 2329, 2333,
        0, 2333, 2321, 2334, 2336, 2334, 2336, 2338, 2338, 2338,
     2339, 2331, 2339, 2340, 2342, 2340, 2341, 2333, 2343, 2344,
        0, 2334, 2336, 2346,    0, 2346, 2359, 2350, 2339, 2350,
     2351, 2340, 2351, 2360,    0, 2338, 2338, 2338, 2352,    0,
     2352, 2346, 2342,    0,    0, 2350, 2343, 2344, 2351, 2353,
     2355, 2353, 2355, 2357, 2359, 2357, 2352, 2358, 2362, 2358,
     2362, 2360, 2364, 2366, 2364, 2366,    0, 2353, 2355,    0,

     2370, 2357, 2370,    0,    0, 2358, 2362, 2372,    0, 2372,
     2364, 2366, 2374, 2375, 2374, 2375,    0, 2381, 2370, 2381,
     2383,    0, 2383,    0,    0, 2372,    0,    0,    0,    0,
     2374, 2375,    0,    0,    0, 2381,    0,    0, 2383, 2388,
     2388, 2388, 2388, 2388, 2389, 2389, 2389, 2389, 2389, 2390,
     2390, 2390, 2390, 2390, 2391, 2391, 2391, 2391, 2391, 2392,
     2392, 2392, 2392, 2392, 2393, 2393, 2393, 2393, 2393, 2394,
     2394, 2394, 2394, 2394, 2395, 2395, 2395, 2395, 2395, 2396,
     2396, 2396, 2396, 2396, 2397, 2397, 2397, 2397, 2397, 2398,
     2398, 2398, 2398, 2398, 2399, 2399, 2399, 2399, 2399, 2400,

     2400, 2400, 2400, 2400, 2401, 2401, 2401, 2401, 2401, 2402,
     2402, 2402, 2402, 2402, 2403, 2403, 2403, 2403, 2403, 2404,
     2404, 2404, 2404, 2404, 2405, 2405, 2405, 2405, 2405, 2406,
     2406, 2406, 2406, 2406, 2407, 2407, 2407, 2407, 2407, 2408,
     2408, 2408, 2408, 2408, 2409, 2409, 2409, 2409, 2409, 2410,
     2410, 2410, 2410, 2410, 2411, 2411, 2411, 2411, 2411, 2412,
     2412, 2412, 2412, 2412, 2413, 2413, 2413, 2413, 2413, 2414,
     2414, 2414, 2414, 2414, 2415, 2415, 2415, 2415, 2415, 2416,
     2416, 2416, 2416, 2416, 2417, 2417, 2417, 2417, 2417, 2418,
     2418, 2418, 2418, 2418, 2419, 2419, 2419, 2419, 2419, 2420,

     2420, 2420, 2420, 2420, 2421, 2421, 2421, 2421, 2421, 2422,
     2422, 2422, 2422, 2422, 2423, 2423, 2423, 2423, 2423, 2424,
     2424, 2424, 2424, 2424, 2425, 2425, 2425, 2425, 2425, 2426,
     2426, 2426, 2426, 2426, 2427, 2427, 2427, 2427, 2427, 2428,
     2428, 2428, 2428, 2428, 2429, 2429, 2430, 2430, 2431, 2431,
     2432, 2432, 2433, 2433, 2434, 2434, 2435, 2435, 2436, 2436,
     2438, 2438, 2439, 2439, 2440, 2440, 2441, 2441, 2442, 2442,
     2443, 2443, 2444, 2444, 2446, 2446, 2464, 2464, 2465, 2465,
     2466, 2466, 2467, 2467,    0, 2467, 2467, 2468,    0,    0,
     2468, 2468, 2469, 2469, 2470, 2470, 2471, 2471, 2472, 2472,

     2473, 2473, 2474, 2474, 2475, 2475, 2476, 2476, 2478, 2478,
     2479, 2479, 2480, 2480, 2481, 2481, 2482, 2482, 2483, 2483,
     2484, 2484, 2486, 2486, 2504, 2504, 2505, 2505, 2506, 2506,
     2507, 2507,    0, 2507, 2507, 2508,    0,    0, 2508, 2508,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,

     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 23 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}





















































































































































#line 4123 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define ASOVERA 115
#define NUMTHREADS 116
#define SRCMOM 117
#define SRCMOMX 118
#define SRCMOMY 119
#define SRCMOMZ 120
#define SNKMOM 121
#define SNKMOMX 122
#define SNKMOMY 123
#define SNKMOMZ 124
#define SEQSRCMOM 125
#define SEQSRCMOMX 126
#define SEQSRCMOMY 127
#define SEQSRCMOMZ 128
#define CPUPREC 129
#define GPUPREC 130
#define GPUPRECSLOPPY 131
#define INVERTERTYPE 132
#define MMSID 133
#define CHKINVERSION 134
#define LAPHSTIMEPROJTYPE 135
#define LAPHSSPINPROJTYPE 136
#define LAPHSEVECPROJTYPE 137
#define LAPHSEVECNUMBER 138
#define LAPHSRNDVECNUMBER 139
#define LAPHSEVECPATHPRFX 140
#define LAPHSEVECFILEPRFX 141
#define LAPHS_TIME_SRC_NUMBER 142
#define LAPHS_SPIN_SRC_NUMBER 143
#define LAPHS_EVEC_SRC_NUMBER 144
#define LAPHS_PERAMBULATOR_PATH_PREFIX 145
#define LAPHS_PERAMBULATOR_FILE_PREFIX 146
#define COMMENT 147
#define ERROR 148
#define M_M_TWOPT 149

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

int cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 208 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"

#line 4464 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2388 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2387 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 209 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 210 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 211 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 212 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 213 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 214 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 215 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 216 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 217 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 218 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 219 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 220 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 221 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 222 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 223 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 224 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 225 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 226 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 227 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 228 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 229 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 230 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 231 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 232 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 233 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 234 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 235 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 236 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 237 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 238 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 239 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 240 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 241 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 242 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 243 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 244 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 245 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 246 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 247 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 248 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 249 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 250 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 251 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 252 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 253 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 254 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 255 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 256 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 257 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 258 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 259 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 260 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 261 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 262 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 263 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 264 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 265 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 266 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 267 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 268 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 269 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 270 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 271 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 272 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 273 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 274 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 275 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 276 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 277 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 278 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 279 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 280 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 281 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 282 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 283 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 284 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 286 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 287 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 288 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 289 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 291 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 292 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 295 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 296 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 297 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 298 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 299 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 300 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 301 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 302 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 303 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 304 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 305 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 306 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 307 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 308 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 309 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 310 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 311 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 312 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 313 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 314 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 315 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 316 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 317 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 318 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 319 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 320 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 322 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 323 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 325 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 326 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 327 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 329 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 330 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 331 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 332 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 333 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 334 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 335 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 336 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOM);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 337 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 338 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 339 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 340 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 341 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 342 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 343 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 344 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 345 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 346 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 347 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 348 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 349 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 351 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 352 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 353 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 354 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 355 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 356 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 357 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 358 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 359 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 360 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 362 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 363 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 365 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M_M_TWOPT);
	YY_BREAK
/* start namespace inclusion here */
case 148:
YY_RULE_SETUP
#line 370 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 374 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 378 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 382 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 386 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 390 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 394 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 398 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 402 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 406 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 410 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 414 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 418 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 422 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 427 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 432 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 436 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 440 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 444 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 448 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 452 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 456 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 460 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 464 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 468 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 472 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 476 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 480 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 484 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 488 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 493 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 498 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 503 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 507 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 511 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 515 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 519 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 523 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 527 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 531 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 535 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 543 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 561 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 565 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 569 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 573 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 577 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 581 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 585 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 589 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 593 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 597 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 601 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 605 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 609 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 613 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 617 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 621 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 625 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 629 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 633 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 637 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 641 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 645 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 649 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 653 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 657 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 661 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 665 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 669 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 673 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 677 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 681 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 685 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 690 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 694 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 698 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 707 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 711 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 715 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 720 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 729 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 739 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 743 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 747 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 751 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 755 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 759 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 763 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 768 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 774 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 780 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 786 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 792 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 798 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 803 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 807 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 812 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 817 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 822 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 826 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 834 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 839 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 844 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 848 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 858 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 866 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 874 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 882 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 890 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 899 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 908 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 917 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 925 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 929 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 933 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 937 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 942 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 947 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 952 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 958 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 965 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 970 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 975 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 980 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_sink_momentum_list[cvc::g_sink_momentum_number],
      cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+1, cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+2);
  cvc::g_sink_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sink momentum %s to list; total number is now %d\n", cvc_text, cvc::g_sink_momentum_number);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 987 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 992 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 997 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1003 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1010 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1020 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1030 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1040 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1044 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1048 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1057 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1062 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1067 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1073 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1078 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1083 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1088 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1093 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1098 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1103 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1109 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1114 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{

  if ( cvc::g_m_m_2pt_num == MAX_M_M_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many m_m_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting m_m_2pt number %d\n", cvc::g_m_m_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gi),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+2,
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gf),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+2
  );

  cvc::g_m_m_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] m_m_2pt no. %d set to %s\n", cvc::g_m_m_2pt_num, cvc_text);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1141 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1145 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1149 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 1153 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1158 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1161 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 301:
YY_RULE_SETUP
#line 1168 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 6650 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOM):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
case YY_STATE_EOF(M_M_TWOPT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2388 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2388 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2387);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
int cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1168 "/opt/cvc_libwrapper/cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

