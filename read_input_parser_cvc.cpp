
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 266
#define YY_END_OF_BUFFER 267
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2047] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,  262,  265,  265,  267,  264,  264,  263,  261,  260,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      130,  133,  134,  135,  131,  132,  145,  264,  136,  264,

      264,  137,  264,  264,  139,  264,  264,  140,  264,  264,
      141,  264,  264,  138,  264,  264,  142,  264,  264,  143,
      264,  150,  151,  153,  154,  155,  264,  144,  167,  264,
      146,  264,  264,  147,  264,  264,  148,  264,  264,  149,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  164,
      165,  166,  168,  169,  264,  264,  171,  264,  173,  152,
      174,  175,  176,  179,  180,  181,  182,  264,  177,  264,
      264,  178,  264,  264,  183,  264,  264,  184,  264,  185,
      186,  264,  187,  264,  264,  188,  264,  264,  189,  264,
      264,  190,  264,  264,  191,  264,  264,  192,  264,  264,

      193,  264,  264,  194,  264,  264,  195,  264,  264,  196,
      264,  197,  198,  200,  199,  264,  201,  264,  264,  264,
      203,  264,  204,  264,  205,  264,  206,  264,  207,  264,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  264,
      264,  264,  264,  264,  222,  223,  224,  264,  172,  264,
      225,  226,  227,  228,  264,  264,  230,  232,  240,  241,
      233,  234,  235,  236,  237,  238,  239,  242,  264,  243,
      264,  244,  264,  245,  264,  246,  264,  247,  264,  248,
      264,  249,  264,  250,  264,  251,  264,  252,  264,  253,
      254,  255,  256,  257,  258,  259,  262,  262,  261,  260,

      264,  264,  261,  260,    0,  261,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,  130,  133,  134,  135,  131,  132,  145,  136,    0,
      136,    0,  137,    0,  137,    0,  139,    0,  139,    0,
      140,    0,  140,    0,  141,    0,  141,    0,  138,    0,
      138,    0,  142,    0,  142,    0,  143,    0,  143,    0,

      150,  151,  153,  154,  155,  144,    0,  167,  146,    0,
      146,    0,  147,    0,  147,    0,  148,    0,  148,    0,
      149,    0,  149,    0,  156,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  168,  169,  170,  171,    0,
      171,    0,  173,  152,  174,  175,  176,  179,  180,  181,
      182,  177,    0,  177,    0,  178,    0,  178,    0,  183,
        0,  183,    0,  184,    0,  184,    0,  185,  186,  187,
        0,  187,    0,  188,    0,  188,    0,  189,    0,  189,
        0,  190,    0,  190,    0,  191,    0,  191,    0,  192,
        0,  192,    0,  193,    0,  193,    0,  194,    0,  194,

        0,  195,    0,  195,    0,  196,    0,  196,    0,  197,
      198,  200,  199,  201,    0,  201,    0,  202,  203,    0,
      203,    0,  204,  205,    0,  206,    0,  207,    0,  208,
        0,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  172,    0,  172,
        0,  225,  226,  227,  228,  229,  231,  230,  232,  240,
      241,  233,  234,  235,  236,  237,  238,  239,  242,  243,
        0,  243,    0,  244,  245,    0,  246,    0,  247,    0,
      248,    0,  249,    0,  250,    0,  251,    0,  252,    0,
      253,    0,  254,  255,  256,  257,  258,  259,  262,  262,

      261,  265,  265,  261,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    3,    2,    0,    0,    4,    0,    5,
        0,    6,    0,   12,    0,   11,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    0,  136,
        0,  137,    0,  139,    0,  140,    0,  141,    0,  138,
        0,  142,    0,  143,    0,  146,    0,  147,    0,  148,

        0,  149,    0,  171,    0,  177,    0,  178,    0,  183,
        0,  184,    0,  187,    0,  188,    0,  189,    0,  190,
        0,  191,    0,  192,    0,  193,    0,  194,    0,  195,
        0,  196,    0,  201,    0,  203,    0,  172,    0,  243,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    4,    5,    6,   12,   11,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,    0,   54,    0,    0,
        0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
       60,    0,   10,    0,    0,    0,   14,    0,    0,   68,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   21,
        0,    0,   69,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   54,    0,    0,    0,
       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,    0,   22,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,  128,
       10,    0,    0,   14,    0,   68,    0,    0,    0,    0,

        0,    0,    0,    0,   21,    0,   69,   72,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,   22,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  128,    0,    9,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   35,    0,    0,

        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       23,    0,   24,    0,   25,    0,   26,    0,    0,    0,
        0,    0,   50,    0,   51,    0,   52,    0,   53,    0,
        0,    0,    0,    0,   61,    0,   62,    0,   63,    0,
       64,    0,    0,   19,   18,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    9,    8,    0,    0,    0,
        0,    0,    0,   84,    0,   85,    0,   86,    0,   87,
        0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  112,    0,    0,    0,    0,    0,

        0,    0,    0,   16,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,   71,    0,   73,    0,
      113,   23,   24,   25,   26,    0,    0,    0,    0,   48,
       50,   51,   52,   53,    0,    0,   59,    0,   58,    0,
       61,   62,   63,   64,    0,   19,    0,    0,    0,    0,
        0,    0,   47,    0,    0,    0,    0,    0,    0,   43,
        0,    0,    0,    0,   84,   85,   86,   87,    0,   70,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
       16,    0,    0,    0,    0,    0,    0,   36,    0,    0,

        0,   71,   73,  113,    0,    0,    0,   48,    0,   49,
       59,   58,    0,    0,    0,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,   43,    0,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   49,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,    0,   39,    0,
        0,    0,    0,  114,    0,    0,   34,    0,    0,    0,
        0,    0,   67,    0,   66,    0,    0,    0,  106,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   40,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,    0,   95,
        0,    0,    0,    0,    0,   74,   88,    0,    0,    0,
        0,  114,    0,   34,    0,    0,    0,    0,    0,   65,
       67,   66,    0,    0,  106,    0,    0,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   40,    0,    0,    0,  105,    0,    0,    0,  124,
        0,    0,   20,    0,    0,   95,    0,  125,    0,    0,
       46,    0,   45,    0,  127,   74,    0,   89,    0,    0,

        0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
      100,    0,    0,    0,    0,    0,    0,   90,    0,    0,
        0,   44,    0,    0,    0,    0,    0,    0,  105,    0,
        0,  124,    0,    0,    0,    0,  125,    0,   46,   45,
      127,   89,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,   90,    0,    0,   44,    0,  101,    0,    0,
        0,    0,    0,    0,  129,    0,   96,    0,    0,    0,
        0,   27,    0,    0,    0,    0,    0,   81,    0,   82,
        0,   33,    0,    0,    0,    0,    0,  108,    0,   42,

        0,    0,    0,    0,    0,  118,    0,  119,    0,  120,
        0,   91,    0,  101,    0,   37,    0,    0,    0,    0,
      129,   96,    0,    0,    0,   28,    0,   29,   27,    0,
        0,    0,    0,   81,   82,    0,    0,    0,    0,    0,
      108,    0,    0,    0,    0,    0,  118,  119,  120,   91,
        0,   41,   37,    0,    0,    0,    0,   75,    0,  107,
        0,    0,    0,   28,   29,    0,    0,   99,    0,   94,
        0,    0,   83,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,   41,    0,  115,    0,  116,    0,  117,
       75,  107,    0,    0,    0,    0,    0,   99,   94,    0,

       83,    0,  102,    0,    0,    0,    0,   92,    0,    0,
        0,    0,    0,  115,  116,  117,    0,    0,    0,    0,
        0,    0,  102,    0,    0,   93,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,    0,    0,   32,
        0,  126,    0,   93,    0,  104,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,    0,   98,   32,
      126,    0,  104,    0,    0,    0,    0,    0,    0,  121,
        0,  122,    0,  123,    0,    0,   98,    0,  103,    0,
        0,    0,    0,    0,  121,  122,  123,    0,    0,  103,
        0,    0,    0,    0,    0,    0,    0,  110,    0,    0,

        0,    0,    0,    0,  110,    0,    0,    0,    0,    0,
        0,    0,  109,    0,    0,   30,    0,   80,    0,    0,
        0,  109,    0,   31,   30,   80,    0,    0,    0,    0,
       76,    0,  111,   31,    0,   77,    0,   78,    0,   79,
       76,  111,   77,   78,   79,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    5,   10,   11,   12,
       13,   14,   15,   16,   16,   16,   16,    1,    1,    1,
       17,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   44,   44,   44,   45,   44,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    4,    5,
        5,    5,    5,    5,    5,    5,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static yyconst flex_int16_t yy_base[2150] =
    {   0,
        0,    6,   76,   91,  106,  121,  136,  151,  166,  181,
      196,  211,  226,  241,  256,  271,  286,  301,  316,  331,
      346,  361,  376,  391,  406,  421,  436,  451,  466,  481,
      496,  511,  526,  541,  556,  571,  586,  601,  616,  631,
      646,  661,  676,  691,  706,  721,  736,  751,  766,  781,
      796,  811,  826,  841,  857,  865,  877,  885,  909,  929,
      937,  954,  962,  982, 1001, 1013, 1021, 1033, 1045, 1065,
     1108, 1123, 1138, 1153, 1168, 1183, 1198, 1213, 1229, 1273,
     1084, 1241, 1316, 1331, 1346, 1361, 1376, 1391, 1406, 1421,
     1436, 1451, 1466, 1481, 1496, 1511, 1526, 1541, 1556, 1571,

     1586, 1601, 1616, 1631, 1646, 1661, 1676, 1691, 1706, 1721,
     1736, 1751, 1766, 1781, 1796, 1811, 1826, 1841, 1856, 1871,
     1886, 1901, 1916, 1931, 1946, 1961, 1976, 1991, 2006, 2021,
     2036, 2051, 2066, 2081, 2096, 2111, 2126, 2141, 2156, 2171,
     2186, 2201, 2216, 2231, 1249, 2247, 2290, 2305, 2320, 2335,
     2350, 2365, 2380, 2395, 2410, 2425, 2440, 2455, 2470, 2485,
     2500, 2515, 2530, 2545, 2560, 2575, 2590, 2605, 2620, 2635,
     2650, 2665, 2680, 2695, 2266, 2711, 2719, 2731, 2739, 2763,
     2783, 2791, 2808, 2816, 2859, 2874, 2889, 2904, 2919, 2934,
     2949, 2964, 2979, 2994, 3009, 3024, 3039, 3054, 3070, 3114,

     2837, 3082, 3157, 3172, 3188, 3232, 3276, 3320, 3363, 3378,
     3394, 3438, 3482, 3526, 3570, 3614, 3658, 3702, 3746, 3790,
     3834, 3878, 3922, 3966, 4009, 4024, 4039, 4054, 4069, 4084,
     4099, 4114, 4129, 4144, 4159, 4174, 4189, 4204, 4219, 4234,
     4249, 4264, 4279, 4294, 4309, 4324, 4339, 4354, 4370, 4414,
     4458, 4502, 4546, 4590, 4634, 4678, 4721, 4736, 4752, 4796,
      893,  901,  916,  921, 1012,10350,   79,10350,10350,10350,
     1231,   78, 3072,   80,   80, 3070,   97,  112,  129,  157,
     4839, 3188, 4891,  152,  215,  195, 1048, 4940,  529,  200,
      981, 1289, 1296, 2246, 2265, 2274, 3129, 3137, 3197, 3246,

     3254, 3284, 3298, 3329, 3336, 3403, 3411, 3446, 3419, 3460,
     3490, 3504, 3535, 3542, 3584, 3592, 3622, 3636, 3667, 3674,
     3716, 3276, 3394, 3438, 3570, 3614, 3702, 3726, 3746, 3755,
     3762, 3804, 3812, 3842, 3856, 3887, 3894, 3936, 3944, 3966,
     3980,    0,    0,    0,    0,    0,    0,    0,    0, 3790,
     3834, 3922, 3987,    0,    0, 4379, 4386, 4428, 4370, 4414,
     4435, 4458, 4466, 4473, 4480, 4502, 4510, 4518, 4554, 4526,
     4568, 4598, 4612, 4643, 4650, 4692, 4700, 4760, 4774, 4546,
     4678, 4805, 4812, 4835, 4854, 4862, 4876, 4891, 4969, 4998,
     5011, 5018, 5032, 5040, 5047, 5061, 5069, 5076, 5090, 5098,

     5105, 5119, 5127, 5134, 5148, 5156, 5163, 5177, 5185, 5192,
     5206, 4752, 5213, 5220, 5233, 5241, 5248, 5262,    0, 5270,
     5277, 5291, 5298, 5305, 5318, 5325, 5335, 5342, 5352, 5359,
     5369, 5376, 5383, 5390, 5397, 5404, 5411, 5418, 5425,    0,
        0,    0,    0,    0, 5432, 5439, 5446, 5454, 5461, 5475,
     5482, 5489, 5502,    0,    0, 5509, 5516,    0,    0, 5523,
        0,    0,    0,    0,    0,    0,    0, 5530, 5538, 5545,
     5559, 5566, 5573, 5586, 5593, 5603, 5610, 5620, 5627, 5637,
     5644, 5654, 5661, 5671, 5678, 5688, 5695, 5705, 5712, 5722,
        0,    0,    0,    0, 5729,    0,    0,  559,    0,    0,

        0,  574,    0,    0,  589,10350,  575,  956,  586,  605,
      603,  615,  647,  663,  830,  834,  871,  871,  955,  876,
      909,  926,  910,  917,  970, 1057,  546,  932, 1079, 1098,
     1128, 1156, 1173,  946, 1007, 1349, 1024, 1038, 1044, 1214,
     4932, 1174, 1211, 2726, 1224, 1226, 1232, 1268, 4895, 2742,
     1263, 1318, 1370, 3180, 1384, 1408, 2792, 1426, 1201,  873,
     1434, 5736, 5743, 5750, 5757, 5764, 5771, 5778, 5785, 5799,
     5806, 5826, 5833, 5848, 5855, 5874, 5881, 5897, 5904, 5922,
     5929, 5946, 5953, 5970, 5977, 5995, 6002, 6018, 6025, 6044,
     6051, 6069, 6076, 6093, 6100, 6117, 6124, 6142, 6149, 6165,

     6172, 6179, 6190, 6197, 6204, 6214, 6221, 6228, 6235, 6249,
     6256, 6276, 6283, 6298, 6305, 6324, 6331, 6347, 6354, 6372,
     6379, 6396, 6403, 6420,    0,    0,    0,    0,    0,    0,
        0,    0, 6427, 6434, 6444, 6451,    0,    0, 6458, 6472,
     6479, 6499, 6506, 6520, 6527, 6534, 6541, 6548, 6555, 6562,
     6569, 6576, 6590, 6597, 6617, 6624, 6639, 6646, 6665, 6672,
     6688, 6695, 6713, 6720, 6737, 6744, 6761, 6768, 6775, 6785,
     6799, 6806, 6826, 6833, 6848, 6855, 6874, 6881, 6897, 6904,
     6922, 6929, 6946, 6953, 6970, 6977, 6995, 7002, 7018, 7025,
     7044, 7051, 7069, 7076, 7093, 7100, 7117, 7124, 7142, 7149,

     7165, 7172, 7191, 7198, 7216, 7223, 7240, 7247, 7264, 7271,
     7278, 7288, 7295, 7302, 7316, 7323, 7343,    0, 7350, 7365,
     7372, 7391, 7398, 7413, 7420, 7430, 7437, 7447, 7454, 7464,
     7471, 7478, 7485, 7492, 7499, 7506, 7513, 7520, 7527,    0,
        0,    0,    0,    0, 7534, 7541, 7548, 7555, 7569, 7576,
     7596, 7603, 7617, 7624,    0,    0, 7631, 7638,    0,    0,
     7645,    0,    0,    0,    0,    0,    0,    0, 7652, 7659,
     7673, 7680, 7700, 7707, 7721, 7728, 7738, 7745, 7755, 7762,
     7772, 7779, 7789, 7796, 7806, 7813, 7823, 7830, 7840, 7847,
     7857, 7864,    0,    0,    0,    0, 7871,    0,    0, 1091,

        0,    0, 1499,    0, 1465, 1488, 2799, 1502, 1515, 1528,
      922,  914, 1543, 1561, 1721, 1715, 1723, 1736,  906,  863,
     2081, 2072, 2144, 1009, 1029, 2117, 2174, 1040, 2191, 1292,
     2323, 2114, 2473, 2261, 2490, 2340,  831, 2477, 2518, 2548,
     2521, 2532, 2543, 2553, 2577, 2583, 2593, 4892, 2611, 2626,
     2641, 2655, 2664,  801, 2691, 2687, 2712, 2726, 2725, 2721,
     2736, 2753, 2750, 2765, 2765, 2798,  786, 2833, 2822, 2845,
     3063, 2840, 2880, 2872, 2878, 2949, 2757, 2951, 7878, 7885,
     7892, 7899, 7906, 7913, 7920, 7927, 7934, 7941, 7948, 7955,
     7962, 7969, 7976, 7983, 7990, 7997, 8004, 8011, 8018, 8025,

     8032, 8039, 8046, 8053, 8060, 8067, 8074, 8081, 8088, 8095,
     8102, 8109, 8116, 8123, 8130, 8137, 8144, 8151, 8158, 8165,
     8172, 8179, 8186, 8193, 8200, 8207, 8214, 8221, 8228, 8235,
     8242, 8249, 8256, 8263, 8270, 8277, 8284, 8291, 8298, 8305,
     2983, 2964, 3042, 3078, 3009, 3035, 3046, 3067, 3446, 3083,
     3109, 3105, 3181, 3170, 3179, 4554, 3183, 3181, 3199, 2844,
     3191, 3090, 3109, 3152, 3175, 3202, 3196, 3299, 3269, 3189,
     3196, 3250, 3281, 3270, 3307, 3313, 3314, 3331, 3400, 3431,
     3444, 3445, 3458, 3475, 3473, 3489, 3504, 3521, 3534,  771,
     3544, 3527,  756, 3593, 3582, 3313, 3639, 3619, 3632, 3642,

     3651, 3651, 3656,  741, 3658, 3672, 3675, 3745, 3759,  726,
     3760, 3857, 3352, 3858, 3358, 3754,  711, 3841, 3854, 3859,
     3867, 3894, 3890, 3879, 3897, 3949, 3986, 4623, 3983, 4566,
     3996, 4039, 4628,  696, 4070, 4569, 3366, 4724, 4367, 4375,
     4775,  685, 4776,  684, 4369, 4383, 4509, 4542, 4557, 4573,
     4587, 4835, 4644, 4930, 4933, 4638, 4642, 4684, 4757, 4776,
     4774, 4796, 4811, 4809, 4936, 3520, 4959, 3557, 4807, 4833,
     4872, 8320, 3564, 4866, 4883, 4886, 4896, 4925, 4942, 4947,
      681, 6025, 4932, 3696, 3741, 4946, 4945, 4946, 4965, 4965,
     5001, 5016,  670, 8321, 5008, 8324, 4998, 5068, 5074, 5073,

     5086, 5117, 5132, 5160, 5161, 8325, 3783, 5183, 7014, 8328,
     3784, 8329, 3827, 5194, 5219, 8332, 3828, 5209, 8346, 3959,
     5204, 5231, 5243, 5277, 5458, 5459, 5460, 5461, 8349, 3960,
     5447, 8350, 3983, 8353, 4004, 5543, 5541, 5529, 5784, 5771,
     5769, 5788, 8336, 5795, 8357, 4005, 4407, 5796,  669, 5790,
     4408, 5813, 5834, 5841, 5853,  666, 5997, 5856, 5888, 5866,
     5880,  651, 8334, 5894, 5909, 5928, 5941, 8341, 5946, 8334,
     8377, 4450, 5951, 8383, 4451, 4486, 5965, 8405, 5994, 5995,
      636, 6024, 6024, 6033, 4541, 6051, 6061, 6065, 8391, 4716,
     4717, 8411, 8412, 4891, 6099, 4894, 6077, 6102, 6104, 6111,

     6132, 6216, 6217, 6218, 5014, 6251, 5320, 5825, 6248,  625,
     6253, 6239, 6265,  624, 6290, 6289, 6286, 6304, 8416, 5993,
     6327, 6349, 8417, 6346, 6339, 6345,  621, 6363, 6377, 8401,
     6386, 6440, 8403, 6454, 6444, 6478, 8422, 8439, 8440, 8443,
     6458,  610, 6472, 6477, 8444, 8447, 8450, 8466, 6462, 6563,
     6572, 6275,  609, 6418, 8467, 8470, 8471, 8474, 6573, 8475,
     8478, 6612, 6579, 6588, 6621, 6611, 6637, 6629,  594, 6645,
     6647, 6668, 6616, 8492, 6710, 8495, 6711, 6675, 6704,  579,
      576, 6715, 8496, 8499, 8500, 8503, 6746, 8504, 6769, 6780,
     6772, 6793, 6794, 6792, 6788, 6815,  564, 6736, 6841, 6836,

     8520, 6739, 6856, 6856, 6877, 7161, 6886, 8521, 6891, 6892,
     6893, 8485, 8524, 6914, 6914, 6932, 8527, 8528, 8532, 8544,
     6759, 8548, 6825, 8552, 6969, 8555, 6992, 6950, 6959, 6984,
     8556, 8560, 7017, 8566, 7040, 8572, 7047, 8576, 7066, 7010,
     8577, 8580, 7036, 8583, 7091, 8584, 7092, 8588, 7115, 8594,
     7116, 7041, 8600, 7119, 7139, 7105, 7145, 7146, 7157, 7155,
     8604, 7156, 7183, 7198, 7222, 7143, 7262, 8605, 7220, 7237,
     7289, 7298, 8608, 7319, 8611, 7338, 8612, 7339, 8616, 7342,
     7346, 8622, 7366, 7334, 7363, 7355, 7355, 8517, 7554, 7551,
     7554, 7572, 7576, 7565, 7595, 7567, 7654, 7646, 7646, 7667,

     7676, 8628, 8633, 7697, 8308, 8341, 8344, 8343, 8407, 8429,
     8634, 8387, 8453, 8481, 8532, 8638, 8538, 8639, 8549, 8642,
     8650, 8656, 8659, 8660, 8663, 8540, 8559, 8573, 8664, 8667,
     8668, 8671, 8672, 8675, 8676, 8680, 8681, 8684, 8685, 8655,
     8690, 8694, 8698, 8701, 8673, 8702, 8673,  561,  549, 8678,
     8681, 8707, 8706, 8682, 8671, 8695, 8686, 8681, 8728, 8718,
     8729, 8703, 8707,  534, 8724, 8732, 8735, 8746, 8693, 8750,
     8716, 8706,  519, 8717, 8714, 8725, 8734, 8728, 8738, 8739,
     8732, 8743,  504,  490, 8727, 8745, 8745, 8748, 8768, 8767,
     8772, 8736, 8751, 8760, 8758, 8759, 8760, 8795, 8776, 8776,

     8780, 8800, 8809, 8810, 8767, 8769, 8783, 8814, 8815, 8819,
     8823, 8832, 8798, 8794, 8796, 8807, 8802, 8815, 8806, 8837,
     8824, 8807, 8818, 8843, 8824, 8847, 8852, 8851, 8823, 8826,
     8833, 8869, 8841, 8877, 8856, 8832, 8880, 8881, 8858, 8840,
     8897, 8859, 8871,  489, 8873, 8870, 8864, 8888, 8889, 8884,
     8909, 8890, 8895, 8881, 8888, 8884, 8925, 8898, 8892, 8903,
     8900, 8896, 8901, 8937, 8910, 8914, 8953, 8912, 8907, 8954,
     8918, 8911, 8931, 8941, 8964, 8965, 8972, 8944, 8981, 8939,
     8942, 8961, 8982, 8985, 8962, 8992, 8993, 8972, 8980, 8969,
     8998, 9006, 9009, 9010, 9015, 8968, 8992, 9020, 9026, 8984,

     9034, 8987, 9005, 9002, 9003, 9009, 9011, 9006, 9006, 9010,
     9022, 9019, 9010, 9019, 9048, 9052, 9037, 9020, 9062, 9026,
     9040, 9076, 9035,  471, 9080, 9088, 9039, 9047, 9092, 9096,
     9097, 9102, 9106, 9109, 9113, 9114, 9118, 9123, 9081, 9085,
     9085, 9130, 9083, 9134,  456, 9098, 9093, 9111, 9137, 9141,
     9142, 9146, 9105, 9129, 9149, 9137, 9156, 9160, 9131, 9134,
     9128, 9137,  441, 9167, 9146, 9144, 9172, 9136, 9145, 9140,
     9153, 9178, 9144, 9159, 9184, 9188, 9162, 9175, 9200, 9206,
     9158, 9170, 9210, 9181, 9196, 9214, 9218, 9222, 9183, 9228,
     9232, 9236, 9240, 9244, 9247, 9248, 9252, 9253, 9201, 9222,

     9223, 9258, 9226, 9234, 9240, 9247, 9266, 9236, 9243, 9272,
     9275, 9239, 9256, 9245, 9259, 9241, 9286, 9294, 9264, 9261,
     9300, 9303, 9312, 9266, 9285, 9298, 9287, 9302, 9320, 9324,
     9328, 9329, 9338, 9299, 9317, 9314, 9335, 9309, 9350, 9354,
     9355, 9363, 9366, 9367, 9322, 9372, 9373, 9311, 9342, 9341,
     9353, 9378,  426, 9383, 9388, 9366, 9360, 9373, 9363, 9394,
     9395, 9399, 9400, 9406, 9374, 9411, 9422, 9416, 9423,  411,
     9387, 9382, 9399, 9427, 9428, 9432, 9439, 9427, 9448, 9449,
     9453, 9456, 9413, 9410, 9419, 9427, 9460, 9465, 9469, 9476,
     9425, 9477, 9435,  396, 9446, 9447, 9486, 9489, 9451, 9490,

     9464, 9477, 9475, 9461, 9497, 9500, 9503, 9504, 9513, 9514,
     9517, 9520, 9525, 9529, 9533, 9534, 9498, 9541, 9542,  381,
     9545, 9549, 9510, 9510, 9553, 9550, 9559, 9560, 9569, 9542,
     9570, 9573, 9533, 9576, 9577, 9580, 9561, 9566, 9554, 9562,
     9587, 9557, 9598, 9565,  366, 9558, 9597, 9601, 9602, 9605,
     9608, 9615, 9624, 9625, 9628, 9629, 9632, 9633, 9636, 9637,
     9611, 9586, 9614, 9650, 9653, 9622, 9656, 9657, 9660, 9661,
     9618, 9664, 9665, 9676, 9638, 9639, 9642, 9650, 9683, 9684,
     9661, 9666, 9659, 9690, 9695, 9702, 9703, 9711, 9712, 9717,
     9720, 9723, 9673, 9677, 9704, 9691, 9689, 9730, 9731, 9696,

     9737, 9738, 9741, 9708, 9744, 9716, 9716, 9748,  351, 9733,
     9721, 9731,  336, 9758, 9761, 9765, 9727, 9726, 9766, 9753,
     9772, 9776, 9780, 9747, 9786, 9792, 9793, 9768, 9758, 9768,
     9780, 9772, 9763, 9774, 9773, 9807, 9811, 9814, 9821, 9818,
     9825, 9835, 9776, 9839, 9842, 9843, 9797, 9813, 9820, 9833,
     9830, 9851, 9852, 9856, 9839, 9841, 9860, 9870, 9861, 9873,
     9879, 9880, 9884, 9848, 9845, 9852, 9834, 9854, 9889, 9898,
     9899, 9903, 9906, 9907, 9868, 9874, 9910, 9911, 9915, 9867,
     9898,  321, 9896, 9896, 9925, 9929, 9932, 9908, 9935, 9936,
     9898, 9909, 9915, 9910, 9917, 9907, 9943, 9944, 9916, 9914,

     9935, 9926, 9939, 9929, 9960, 9963, 9964, 9971,  306, 9952,
     9942, 9989, 9988, 9992, 9993, 9996, 9997,10009, 9974,10016,
    10017,10020,10021,10024,10025,10028,10033,10037,10038,10044,
    10045,10049,10054,10055,10058,10061,10065,10066,10069,10070,
    10074,10075,10079,10083,10086,10350,10090,10095,10100,10105,
    10110,10115,10120,10125,10130,10135,10140,10145,10150,10155,
    10160,10165,10170,10175,10180,10185,10190,10195,10200,10205,
    10210,10215,10220,10225,10230,10235,10240,10245,10250,10255,
    10260,10262,10264,10266,10268,10270,10272,10274,10276,  331,
    10278,10280,10282,10284,10286,10288,10290,  316,10292,  301,

      286,  275,  274,  271,  260,  259,  244,  241,  229,  226,
      214,  211,  200,10297,10302,10304,10306,10308,10310,10312,
    10314,10316,10318,  199,10320,10322,10324,10326,10328,10330,
    10332,  196,10334,  184,  181,  169,  166,  154,  151,  139,
      124,  109,  106,   94,   91,   79,    0,10339,10344
    } ;

static yyconst flex_int16_t yy_def[2150] =
    {   0,
     2047, 2046, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2048, 2048, 2049, 2049, 2050, 2050,
     2051, 2051, 2052, 2052, 2053, 2053, 2054, 2054, 2055, 2055,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2056, 2056,
     2057, 2057, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,

     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2058, 2058, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2059, 2059, 2060, 2060, 2061, 2061,
     2062, 2062, 2063, 2063, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2064, 2064,

     2065, 2065, 2047, 2047, 2066, 2066, 2067, 2067, 2047, 2047,
     2068, 2068, 2069, 2069, 2070, 2070, 2071, 2071, 2072, 2072,
     2073, 2073, 2074, 2074, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047,
     2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2075, 2075,
     2076, 2076, 2077, 2077, 2078, 2078, 2047, 2047, 2079, 2079,
     2080, 2080, 2081, 2081, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2046,
     2046, 2046, 2046, 2090, 2091, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2092, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2093,
     2094, 2095, 2096, 2097, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2098, 2099, 2046, 2046, 2100, 2101, 2046,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2109, 2110, 2111, 2112, 2046, 2113, 2114, 2114, 2114, 2114,

     2115, 2115, 2115, 2115, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2116, 2117, 2118, 2119, 2120, 2121,
     2122, 2123, 2046, 2046, 2046, 2046, 2124, 2125, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2126, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2127,
     2128, 2129, 2130, 2131, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2132, 2133, 2046, 2046, 2134, 2135,
     2046, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2143, 2144, 2145, 2146, 2046, 2147, 2148, 2148,

     2148, 2149, 2149, 2149, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046,    0, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046
    } ;

static yyconst flex_int16_t yy_nxt[10422] =
    {   0,
     2046,  267,  268,  267,  798,  269,  266,  267,  268,  267,
      266,  270,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  271,  272,  273,  274,  275,  276,  277,
      278,  279,  266,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  266,  266,  290,  266,  266,  266,  266,
      266,  271,  272,  273,  274,  275,  276,  277,  278,  279,
      266,  280,  281,  282,  283,  284,  285,  286,  287,  288,
      289,  266,  266,  290,  266,  266,  266,  267,  268,  267,
      505,  269,  505,  796,  506,  291,  291,  291,  291,  291,
      291,  291,  267,  268,  267,  795,  270,  510,  794,  515,

      291,  291,  291,  291,  291,  291,  291,  267,  268,  267,
      793,  269,  516,  768,  520,  292,  292,  292,  292,  292,
      292,  292,  267,  268,  267,  510,  270,  515,  767,  521,
      292,  292,  292,  292,  292,  292,  292,  267,  268,  267,
      516,  269,  520,  766,  522,  293,  293,  293,  293,  293,
      293,  293,  267,  268,  267,  765,  270,  521,  764,  523,
      293,  293,  293,  293,  293,  293,  293,  267,  268,  267,
      763,  269,  522,  762,  524,  294,  294,  294,  294,  294,
      294,  294,  267,  268,  267,  760,  270,  523,  759,  545,
      294,  294,  294,  294,  294,  294,  294,  267,  268,  267,

      755,  269,  524,  637,  798,  295,  295,  295,  295,  295,
      295,  295,  267,  268,  267,  796,  270,  545,  795,  548,
      295,  295,  295,  295,  295,  295,  295,  267,  268,  267,
      794,  269,  546,  793,  561,  296,  296,  296,  296,  296,
      296,  296,  267,  268,  267,  768,  270,  548,  767,  547,
      296,  296,  296,  296,  296,  296,  296,  267,  268,  267,
      546,  269,  561,  766,  765,  297,  297,  297,  297,  297,
      297,  297,  267,  268,  267,  764,  270,  547,  763,  762,
      297,  297,  297,  297,  297,  297,  297,  267,  268,  267,
      760,  269,  298,  298,  299,  300,  300,  300,  300,  300,

      300,  300,  267,  268,  267,  759,  270,  298,  298,  299,
      300,  300,  300,  300,  300,  300,  300,  267,  268,  267,
      755,  269,  301,  301,  302,  303,  303,  303,  303,  303,
      303,  303,  267,  268,  267,  637,  270,  301,  301,  302,
      303,  303,  303,  303,  303,  303,  303,  267,  268,  267,
     2019,  269,  304,  304,  305,  306,  306,  306,  306,  306,
      306,  306,  267,  268,  267, 1993,  270,  304,  304,  305,
      306,  306,  306,  306,  306,  306,  306,  267,  268,  267,
     1933,  269,  307,  307,  308,  309,  309,  309,  309,  309,
      309,  309,  267,  268,  267, 1929,  270,  307,  307,  308,

      309,  309,  309,  309,  309,  309,  309,  267,  268,  267,
     1882,  269,  310,  310,  311,  312,  312,  312,  312,  312,
      312,  312,  267,  268,  267, 1861,  270,  310,  310,  311,
      312,  312,  312,  312,  312,  312,  312,  267,  268,  267,
     1838,  269,  313,  313,  314,  315,  315,  315,  315,  315,
      315,  315,  267,  268,  267, 1817,  270,  313,  313,  314,
      315,  315,  315,  315,  315,  315,  315,  267,  268,  267,
     1799,  269,  316,  316,  317,  318,  318,  318,  318,  318,
      318,  318,  267,  268,  267, 1716,  270,  316,  316,  317,
      318,  318,  318,  318,  318,  318,  318,  267,  268,  267,

     1703,  269,  319,  319,  320,  321,  321,  321,  321,  321,
      321,  321,  267,  268,  267, 1682,  270,  319,  319,  320,
      321,  321,  321,  321,  321,  321,  321,  267,  268,  267,
      559,  269,  559, 1602, 1546,  322,  322,  322,  322,  322,
      322,  322,  267,  268,  267,  560,  270,  825, 1545,  825,
      322,  322,  322,  322,  322,  322,  322,  267,  268,  267,
      800,  269,  800, 1535,  801,  323,  323,  323,  323,  323,
      323,  323,  267,  268,  267,  505,  270,  803, 1531,  804,
      323,  323,  323,  323,  323,  323,  323,  267,  268,  267,
      505,  269,  505, 1517,  506,  324,  324,  324,  324,  324,

      324,  324,  267,  268,  267, 1516,  270,  805, 1392,  807,
      324,  324,  324,  324,  324,  324,  324,  267,  268,  267,
     1371,  269,  808, 1370,  809,  325,  325,  325,  325,  325,
      325,  325,  267,  268,  267,  805,  270,  807, 1362,  810,
      325,  325,  325,  325,  325,  325,  325,  267,  268,  267,
      808,  269,  809, 1343, 1329,  326,  326,  326,  326,  326,
      326,  326,  267,  268,  267, 1306,  270,  810, 1293, 1289,
      326,  326,  326,  326,  326,  326,  326,  267,  268,  267,
     1266,  269,  327,  327,  811,  328,  328,  328,  328,  328,
      328,  328,  267,  268,  267, 1236,  270,  327,  327,  812,

      328,  328,  328,  328,  328,  328,  328,  267,  268,  267,
     1228,  269,  811, 1222, 1170,  329,  329,  329,  329,  329,
      329,  329,  267,  268,  267, 1159,  270,  812, 1121, 1118,
      329,  329,  329,  329,  329,  329,  329,  267,  268,  267,
     1109,  269,  330,  330,  331,  332,  332,  332,  332,  332,
      332,  332,  267,  268,  267, 1087,  270,  330,  330,  331,
      332,  332,  332,  332,  332,  332,  332,  267,  268,  267,
     1082,  269,  333,  333,  334,  335,  335,  335,  335,  335,
      335,  335,  267,  268,  267, 1076,  270,  333,  333,  334,
      335,  335,  335,  335,  335,  335,  335,  267,  268,  267,

     1062,  269,  336,  336,  337,  338,  338,  338,  338,  338,
      338,  338,  267,  268,  267, 1058,  270,  336,  336,  337,
      338,  338,  338,  338,  338,  338,  338,  267,  268,  267,
      998,  269,  339,  339,  340,  341,  341,  341,  341,  341,
      341,  341,  267,  268,  267,  985,  270,  339,  339,  340,
      341,  341,  341,  341,  341,  341,  341,  266,  267,  268,
      267,  813,  269,  266,  266,  266,  267,  268,  267,  814,
      270,  266,  266,  266,  877,  967,  877,  266,  267,  268,
      267,  266,  269,  266,  266,  266,  267,  268,  267,  813,
      270,  266,  266,  266,  498,  268,  498,  814,  499,  815,

      266,  266,  498,  268,  498,  816,  500,  957,  266,  266,
      267,  268,  267,  818,  269,  266,  266,  267,  268,  502,
      266,  503,  267,  268,  502,  266,  504,  815,  266,  266,
      267,  268,  267,  816,  270,  266,  266,  266,  267,  268,
      267,  818,  269,  266,  266,  266,  819,  820,  821,  822,
      956,  826,  266,  266,  266,  267,  268,  267,  949,  270,
      266,  266,  266,  267,  268,  267,  948,  269,  266,  266,
      266,  525,  266,  525,  819,  820,  821,  822,  266,  826,
      266,  837,  266,  267,  268,  267,  527,  270,  266,  266,
      562,  562,  562,  562,  562,  562,  562,  266,  266,  817,

      806,  266,  267,  268,  267,  266,  269,  266,  266,  837,
      960, 2046,  960,  266,  267,  268,  267,  266,  270,  266,
      266,  266,  267,  268,  267,  266,  269,  266,  266,  266,
      825,  838,  825,  266,  267,  268,  267,  266,  270,  266,
      266,  962, 2046,  962,  266,  266,  267,  268,  267,  266,
      269,  266,  266, 2046, 2046,  844,  266, 2046,  823,  838,
      823,  266, 2046, 2046,  266,  266,  267,  268,  267,  549,
      270,  266,  266,  824,  845,  846,  266,  550,  551,  552,
      827,  266,  827,  844,  266,  267,  268,  267,  266,  269,
      266,  266,  800, 2046,  800,  828,  801,  549, 2046,  829,

      266,  829,  845,  846, 2046,  550,  551,  552,  266,  267,
      268,  267, 2046,  269,  830, 2046, 2046,  350,  350,  350,
      350,  350,  350,  350,  267,  268,  267,  266,  270,  831,
     2046,  831,  350,  350,  350,  350,  350,  350,  350,  267,
      268,  267, 2046,  269,  832, 2046, 2046,  351,  351,  351,
      351,  351,  351,  351,  267,  268,  267,  833,  270,  833,
     2046, 2046,  351,  351,  351,  351,  351,  351,  351,  267,
      268,  267,  834,  269,  835, 2046,  835,  352,  352,  352,
      352,  352,  352,  352,  267,  268,  267, 2046,  270,  836,
     2046,  853,  352,  352,  352,  352,  352,  352,  352,  267,

      268,  267,  559,  269,  559, 2046, 2046,  353,  353,  353,
      353,  353,  353,  353,  267,  268,  267,  560,  270,  853,
     2046, 2046,  353,  353,  353,  353,  353,  353,  353,  266,
      267,  268,  267,  266,  269,  266,  266,  266, 2046,  847,
      854,  266,  267,  268,  267,  266,  270,  266,  266,  266,
      267,  268,  267, 2046,  269,  266,  266,  266,  848,  507,
      858, 2046,  859,  860, 2046,  266,  508,  847,  854,  509,
     2046, 2046,  266,  266,  267,  268,  267,  266,  270,  266,
      266,  266, 2046, 2046,  266,  861,  867,  507,  858,  266,
      859,  860,  266,  963,  508,  963, 2046,  509,  563,  563,

      563,  563,  563,  563,  563,  564,  564,  564,  564,  564,
      564,  564, 2046,  861,  867, 2046,  266,  267,  268,  267,
     2046,  269,  356,  356,  357,  358,  358,  358,  358,  358,
      358,  358,  267,  268,  267, 2046,  270,  356,  356,  357,
      358,  358,  358,  358,  358,  358,  358,  267,  268,  267,
      839,  269,  839, 2046,  868,  359,  359,  359,  359,  359,
      359,  359,  267,  268,  267,  840,  270,  841, 2046,  842,
      359,  359,  359,  359,  359,  359,  359,  267,  268,  267,
     2046,  269,  868, 2046,  843,  360,  360,  360,  360,  360,
      360,  360,  267,  268,  267,  841,  270,  842, 2046,  869,

      360,  360,  360,  360,  360,  360,  360,  267,  268,  267,
     2046,  269,  843, 2046,  872,  361,  361,  361,  361,  361,
      361,  361,  267,  268,  267, 2046,  270,  869, 2046,  873,
      361,  361,  361,  361,  361,  361,  361,  267,  268,  267,
     2046,  269,  872, 2046,  876,  362,  362,  362,  362,  362,
      362,  362,  267,  268,  267, 2046,  270,  873, 2046,  878,
      362,  362,  362,  362,  362,  362,  362,  267,  268,  267,
     2046,  269,  876, 2046, 2046,  363,  363,  363,  363,  363,
      363,  363,  267,  268,  267, 2046,  270,  878, 2046,  941,
      363,  363,  363,  363,  363,  363,  363,  267,  268,  267,

      505,  269,  803, 2046,  804,  364,  364,  364,  364,  364,
      364,  364,  267,  268,  267, 2046,  270,  941, 2046,  942,
      364,  364,  364,  364,  364,  364,  364,  267,  268,  267,
     2046,  269,  945, 2046,  946,  365,  365,  365,  365,  365,
      365,  365,  267,  268,  267, 2046,  270,  942, 2046,  947,
      365,  365,  365,  365,  365,  365,  365,  267,  268,  267,
      945,  269,  946, 2046,  950,  366,  366,  366,  366,  366,
      366,  366,  267,  268,  267, 2046,  270,  947, 2046,  951,
      366,  366,  366,  366,  366,  366,  366,  267,  268,  267,
     2046,  269,  950, 2046, 2046,  367,  367,  367,  367,  367,

      367,  367,  267,  268,  267, 2046,  270,  951, 2046, 2046,
      367,  367,  367,  367,  367,  367,  367,  267,  268,  267,
     2046,  269,  368,  368,  369,  370,  370,  370,  370,  370,
      370,  370,  267,  268,  267, 2046,  270,  368,  368,  369,
      370,  370,  370,  370,  370,  370,  370,  267,  268,  267,
     2046,  269,  371,  371,  372,  373,  373,  373,  373,  373,
      373,  373,  267,  268,  267, 2046,  270,  371,  371,  372,
      373,  373,  373,  373,  373,  373,  373,  267,  268,  267,
     2046,  269,  374,  374,  375,  376,  376,  376,  376,  376,
      376,  376,  267,  268,  267, 2046,  270,  374,  374,  375,

      376,  376,  376,  376,  376,  376,  376,  267,  268,  267,
     2046,  269,  377,  377,  378,  379,  379,  379,  379,  379,
      379,  379,  267,  268,  267, 2046,  270,  377,  377,  378,
      379,  379,  379,  379,  379,  379,  379,  267,  268,  267,
     2046,  269,  952, 2046,  953,  380,  380,  380,  380,  380,
      380,  380,  267,  268,  267, 2046,  270,  954, 2046,  955,
      380,  380,  380,  380,  380,  380,  380,  267,  268,  267,
      952,  269,  953, 2046, 2046,  381,  381,  381,  381,  381,
      381,  381,  267,  268,  267,  954,  270,  955, 2046, 2046,
      381,  381,  381,  381,  381,  381,  381,  267,  268,  267,

     2046,  269,  382,  382,  383,  384,  384,  384,  384,  384,
      384,  384,  267,  268,  267, 2046,  270,  382,  382,  383,
      384,  384,  384,  384,  384,  384,  384,  267,  268,  267,
     2046,  269,  385,  385,  386,  387,  387,  387,  387,  387,
      387,  387,  267,  268,  267, 2046,  270,  385,  385,  386,
      387,  387,  387,  387,  387,  387,  387,  267,  268,  267,
     2046,  269,  388,  388,  389,  390,  390,  390,  390,  390,
      390,  390,  267,  268,  267, 2046,  270,  388,  388,  389,
      390,  390,  390,  390,  390,  390,  390,  267,  268,  267,
     2046,  269,  391,  391,  392,  393,  393,  393,  393,  393,

      393,  393,  267,  268,  267, 2046,  270,  391,  391,  392,
      393,  393,  393,  393,  393,  393,  393,  267,  268,  267,
     2046,  269,  394,  394,  395,  396,  396,  396,  396,  396,
      396,  396,  267,  268,  267, 2046,  270,  394,  394,  395,
      396,  396,  396,  396,  396,  396,  396,  267,  268,  267,
     2046,  269,  397,  397,  398,  399,  399,  399,  399,  399,
      399,  399,  267,  268,  267, 2046,  270,  397,  397,  398,
      399,  399,  399,  399,  399,  399,  399,  267,  268,  267,
     2046,  269,  400,  400,  401,  402,  402,  402,  402,  402,
      402,  402,  267,  268,  267, 2046,  270,  400,  400,  401,

      402,  402,  402,  402,  402,  402,  402,  267,  268,  267,
     2046,  269,  403,  403,  404,  405,  405,  405,  405,  405,
      405,  405,  267,  268,  267, 2046,  270,  403,  403,  404,
      405,  405,  405,  405,  405,  405,  405,  267,  268,  267,
     2046,  269,  406,  406,  407,  408,  408,  408,  408,  408,
      408,  408,  267,  268,  267, 2046,  270,  406,  406,  407,
      408,  408,  408,  408,  408,  408,  408,  267,  268,  267,
     2046,  269,  409,  409,  410,  411,  411,  411,  411,  411,
      411,  411,  267,  268,  267, 2046,  270,  409,  409,  410,
      411,  411,  411,  411,  411,  411,  411,  267,  268,  267,

     2046,  269,  958, 2046,  959,  412,  412,  412,  412,  412,
      412,  412,  267,  268,  267,  964,  270,  964, 2046, 2046,
      412,  412,  412,  412,  412,  412,  412,  267,  268,  267,
      958,  269,  959, 2046,  961,  413,  413,  413,  413,  413,
      413,  413,  267,  268,  267,  823,  270,  823, 2046, 2046,
      413,  413,  413,  413,  413,  413,  413,  267,  268,  267,
      824,  269,  961, 2046, 2046,  414,  414,  414,  414,  414,
      414,  414,  267,  268,  267,  827,  270,  827, 2046, 2046,
      414,  414,  414,  414,  414,  414,  414,  267,  268,  267,
      828,  269,  829, 2046,  829,  415,  415,  415,  415,  415,

      415,  415,  267,  268,  267, 2046,  270,  830, 2046, 2046,
      415,  415,  415,  415,  415,  415,  415,  267,  268,  267,
     2046,  269,  416,  416,  417,  418,  418,  418,  418,  418,
      418,  418,  267,  268,  267, 2046,  270,  416,  416,  417,
      418,  418,  418,  418,  418,  418,  418,  266,  267,  268,
      267, 2046,  270,  266,  266,  565,  565,  565,  565,  565,
      565,  565,  965,  266,  965, 2046,  266,  267,  268,  267,
     2046,  269,  266,  266,  566,  566,  566,  566,  566,  566,
      566, 2046,  266,  567,  567,  567,  567,  567,  567,  567,
      266,  267,  268,  267, 2046,  269,  420,  420,  421,  422,

      422,  422,  422,  422,  422,  422,  267,  268,  267,  266,
      270,  420,  420,  421,  422,  422,  422,  422,  422,  422,
      422,  267,  268,  267,  831,  269,  831, 2046, 2046,  423,
      423,  423,  423,  423,  423,  423,  267,  268,  267,  832,
      270,  966, 2046,  966,  423,  423,  423,  423,  423,  423,
      423,  267,  268,  267, 2046,  269,  424,  424, 2046,  425,
      425,  425,  425,  425,  425,  425,  267,  268,  267, 2046,
      270,  424,  424, 2046,  425,  425,  425,  425,  425,  425,
      425,  267,  268,  267, 2046,  269,  426,  426, 2046,  427,
      427,  427,  427,  427,  427,  427,  267,  268,  267, 2046,

      270,  426,  426, 2046,  427,  427,  427,  427,  427,  427,
      427,  267,  268,  267, 2046,  269,  428,  428, 2046,  429,
      429,  429,  429,  429,  429,  429,  267,  268,  267, 2046,
      270,  428,  428, 2046,  429,  429,  429,  429,  429,  429,
      429,  267,  268,  267, 2046,  269,  430,  430, 2046,  431,
      431,  431,  431,  431,  431,  431,  267,  268,  267, 2046,
      270,  430,  430, 2046,  431,  431,  431,  431,  431,  431,
      431,  267,  268,  267,  833,  269,  833, 2046, 2046,  432,
      432,  432,  432,  432,  432,  432,  267,  268,  267,  834,
      270,  835, 2046,  835,  432,  432,  432,  432,  432,  432,

      432,  267,  268,  267, 2046,  269,  836, 2046,  968,  433,
      433,  433,  433,  433,  433,  433,  267,  268,  267,  839,
      270,  839, 2046, 2046,  433,  433,  433,  433,  433,  433,
      433,  267,  268,  267,  840,  269,  968, 2046,  970,  434,
      434,  434,  434,  434,  434,  434,  267,  268,  267,  969,
      270,  969, 2046,  971,  434,  434,  434,  434,  434,  434,
      434,  267,  268,  267, 2046,  269,  970, 2046,  972,  435,
      435,  435,  435,  435,  435,  435,  267,  268,  267, 2046,
      270,  971, 2046,  973,  435,  435,  435,  435,  435,  435,
      435,  267,  268,  267, 2046,  269,  972, 2046,  974,  436,

      436,  436,  436,  436,  436,  436,  267,  268,  267, 2046,
      270,  973, 2046,  975,  436,  436,  436,  436,  436,  436,
      436,  267,  268,  267, 2046,  269,  974, 2046,  976,  437,
      437,  437,  437,  437,  437,  437,  267,  268,  267, 2046,
      270,  975, 2046,  980,  437,  437,  437,  437,  437,  437,
      437,  267,  268,  267, 2046,  269,  976, 2046,  981,  438,
      438,  438,  438,  438,  438,  438,  267,  268,  267, 2046,
      270,  980, 2046,  982,  438,  438,  438,  438,  438,  438,
      438,  267,  268,  267, 2046,  269,  981,  983, 2046,  439,
      439,  439,  439,  439,  439,  439,  267,  268,  267, 2046,

      270,  982,  984, 2046,  439,  439,  439,  439,  439,  439,
      439,  266,  267,  268,  267,  983,  270,  266,  266,  266,
      267,  268,  267,  986,  269,  266,  266,  266,  987,  988,
      984,  266,  267,  268,  267,  266,  270,  266,  266,  266,
      267,  268,  267,  855,  269,  266,  266,  266,  989,  990,
      856,  986,  857,  991,  266,  266,  987,  988,  877,  865,
      877, 2046,  266,  266,  267,  268,  267,  866,  270,  266,
      266,  855,  992,  993,  266,  994,  989,  990,  856,  266,
      857,  991,  266,  266,  267,  268,  267,  865,  269,  266,
      266,  266,  267,  268,  267,  866,  270,  266,  266,  266,

      992,  993,  995,  994, 2046,  996,  266,  266,  266,  267,
      268,  267, 2046,  269,  266,  266,  266,  267,  268,  267,
      874,  270,  266,  266,  266, 2046,  266,  943,  997,  875,
      995, 2046,  266,  996,  266,  944, 2046,  266,  267,  268,
      267, 2046,  269,  266,  266,  960, 2046,  960,  874, 2046,
      999,  266, 2046,  266, 1000,  943,  997,  875, 2046,  266,
      267,  268,  267,  944,  269, 1001, 2046, 1004,  445,  445,
      445,  445,  445,  445,  445,  267,  268,  267,  999,  270,
      266, 2046, 1000,  445,  445,  445,  445,  445,  445,  445,
      267,  268,  267, 1001,  269, 1004, 2046, 1005,  446,  446,

      446,  446,  446,  446,  446,  267,  268,  267, 2046,  270,
     1006, 2046, 1007,  446,  446,  446,  446,  446,  446,  446,
      267,  268,  267, 2046,  269, 1005, 2046, 2046,  447,  447,
      447,  447,  447,  447,  447,  267,  268,  267, 1006,  270,
     1007, 2046, 2046,  447,  447,  447,  447,  447,  447,  447,
      267,  268,  267, 2046,  269,  448,  448,  449,  450,  450,
      450,  450,  450,  450,  450,  267,  268,  267, 2046,  270,
      448,  448,  449,  450,  450,  450,  450,  450,  450,  450,
      267,  268,  267, 2046,  269, 1008, 2046, 1009,  451,  451,
      451,  451,  451,  451,  451,  267,  268,  267, 2046,  270,

     1010, 2046, 1011,  451,  451,  451,  451,  451,  451,  451,
      267,  268,  267, 1008,  269, 1009, 2046, 2046,  452,  452,
      452,  452,  452,  452,  452,  267,  268,  267, 1010,  270,
     1011, 2046, 1016,  452,  452,  452,  452,  452,  452,  452,
      267,  268,  267, 1012,  269, 1012, 2046, 2046,  453,  453,
      453,  453,  453,  453,  453,  267,  268,  267, 1013,  270,
     1016, 2046, 1017,  453,  453,  453,  453,  453,  453,  453,
      266,  267,  268,  267,  266,  269,  266,  266,  266, 1014,
     1018, 1014,  266,  267,  268,  267,  266,  270,  266,  266,
     1017,  962, 2046,  962, 1015,  517,  511, 2046,  266, 1019,

     1002,  518, 2046,  512,  513, 1023,  519, 1003, 1018,  514,
      963, 2046,  963,  266,  266,  267,  268,  267,  266,  270,
      266,  266,  266,  517,  511,  266, 1024, 1019, 1002,  518,
      266,  512,  513, 1023,  519, 1025, 2046,  514,  568,  568,
      568,  568,  568,  568,  568,  569,  570,  570,  570,  570,
      570,  570,  570,  964, 1024,  964, 2046,  266,  267,  268,
      267, 2046,  269, 1025,  456, 2046,  457,  457,  457,  457,
      457,  457,  457,  267,  268,  267,  965,  270,  965,  456,
     2046,  457,  457,  457,  457,  457,  457,  457,  266,  267,
      268,  267,  266,  269,  266,  266,  266,  532, 1026, 1027,

     1028,  870,  533,  966,  266,  966,  571,  571,  571,  571,
      571,  571,  571,  871, 1031, 1032, 1033,  534,  572, 1034,
     2046, 1035,  535, 1038, 1039,  536, 1026, 1027, 1028,  870,
     2046,  266,  266,  267,  268,  267,  266,  270,  266,  266,
      266,  871, 1031, 1032, 1033,  534,  572, 1034,  266, 1035,
      535, 1038, 1039,  536,  569,  570,  570,  570,  570,  570,
      570,  570,  573,  574,  574,  574,  574,  574,  574,  574,
      969, 2046,  969, 1040, 2046,  266,  266,  267,  268,  267,
      266,  269,  266,  266,  266,  601,  601,  601,  601,  601,
      601,  601,  266,  575,  575,  575,  575,  575,  575,  575,

     1036, 1040, 1036, 1041, 1042,  576,  573,  574,  574,  574,
      574,  574,  574,  574, 1065, 1037, 1065, 2046, 2046,  266,
      266,  267,  268,  267,  266,  270,  266,  266,  266, 1066,
     1043, 1041, 1042,  576, 1044, 2046,  266,  577,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579, 2046, 1084, 1045, 1084, 1046,  580, 1043, 1085,
     2046, 1085, 1044,  266,  267,  268,  267, 1111,  269, 1111,
     2046, 2046,  460,  460,  460,  460,  460,  460,  460,  267,
      268,  267, 1045,  270, 1046,  580, 2046,  460,  460,  460,
      460,  460,  460,  460,  266,  267,  268,  267,  266,  269,

      266,  266,  266,  602,  602,  602,  602,  602,  602,  602,
      266,  577,  578,  578,  578,  578,  578,  578,  578,  581,
      582,  582,  582,  582,  582,  582,  582,  581,  582,  582,
      582,  582,  582,  582,  582, 2046, 1047,  266,  266,  267,
      268,  267,  266,  270,  266,  266,  266,  603,  603,  603,
      603,  603,  603,  603,  266,  583,  583,  583,  583,  583,
      583,  583, 2046, 1020, 1047, 1048, 1021,  584,  585,  586,
      586,  586,  586,  586,  586,  586, 2046, 2046, 1049, 1050,
     1022,  266,  266,  267,  268,  267,  266,  269,  266,  266,
      266, 1020, 1051, 1048, 1021,  584, 1052, 2046,  266,  587,

      587,  587,  587,  587,  587,  587, 1049, 1050, 1022, 1053,
     1054,  588,  585,  586,  586,  586,  586,  586,  586,  586,
     1051, 1146, 2046, 1146, 1052,  266,  266,  267,  268,  267,
      266,  270,  266,  266,  266, 2046, 1055, 1053, 1054,  588,
     1056, 2046,  266,  589,  590,  590,  590,  590,  590,  590,
      590,  591,  591,  591,  591,  591,  591,  591, 1147, 1057,
     1147, 1059, 1061,  592, 1055, 1151, 2046, 1151, 1056,  266,
      266,  267,  268,  267,  266,  269,  266,  266,  266,  604,
      604,  604,  604,  604,  604,  604,  266, 1057, 1060, 1059,
     1061,  592,  589,  590,  590,  590,  590,  590,  590,  590,

      593,  594,  594,  594,  594,  594,  594,  594, 2046, 2046,
     1063, 1064, 2046,  266,  266,  267,  268,  267,  266,  270,
      266,  266,  266,  605,  605,  605,  605,  605,  605,  605,
      266,  595,  595,  595,  595,  595,  595,  595, 1063, 1064,
     1067, 1069, 1067,  596,  593,  594,  594,  594,  594,  594,
      594,  594, 1072, 2046, 1072, 1068, 2046,  266,  266,  267,
      268,  267,  266,  269,  266,  266,  266, 1073, 1070, 1069,
     1071,  596, 1074, 2046,  266,  597,  598,  598,  598,  598,
      598,  598,  598,  599,  599,  599,  599,  599,  599,  599,
     2046, 1075, 1077, 1078, 1079,  600, 1070, 1084, 1071, 1084,

     1074,  266,  266,  267,  268,  267,  266,  270,  266,  266,
      266,  606,  606,  606,  606,  606,  606,  606,  266, 1075,
     1077, 1078, 1079,  600,  597,  598,  598,  598,  598,  598,
      598,  598,  607,  607, 2046,  606,  606,  606,  606,  606,
      606,  606, 1085, 2046, 1085,  266,  266,  267,  268,  267,
      266,  269,  266,  266,  266,  608,  608,  608,  608,  608,
      608,  608,  266,  609,  610,  610,  610,  610,  610,  610,
      610,  611,  611,  611,  611,  611,  611,  611, 2046, 1080,
     1081, 1083, 1086,  612, 1185, 1111, 1185, 1111, 2046,  266,
      266,  267,  268,  267,  266,  270,  266,  266,  266,  633,

      633,  633,  633,  633,  633,  633,  266, 1080, 1081, 1083,
     1086,  612,  609,  610,  610,  610,  610,  610,  610,  610,
      613,  614,  614,  614,  614,  614,  614,  614, 1191, 1194,
     1191, 1194, 2046,  266,  266,  267,  268,  267,  266,  269,
      266,  266,  266,  634,  634,  634,  634,  634,  634,  634,
      266,  615,  615,  615,  615,  615,  615,  615, 1012, 1014,
     1012, 1014, 1088,  616,  613,  614,  614,  614,  614,  614,
      614,  614, 2046, 1013, 1015, 2046, 2046,  266,  266,  267,
      268,  267,  266,  270,  266,  266,  266, 2046, 1089, 1090,
     1088,  616, 1091, 2046,  266,  617,  618,  618,  618,  618,

      618,  618,  618,  619,  619,  619,  619,  619,  619,  619,
     2046, 1092, 1093, 1094, 1095,  620, 1089, 1090, 2046, 2046,
     1091,  266,  266,  267,  268,  267,  266,  269,  266,  266,
      266,  635,  635,  635,  635,  635,  635,  635,  266, 1092,
     1093, 1094, 1095,  620,  617,  618,  618,  618,  618,  618,
      618,  618,  621,  622,  622,  622,  622,  622,  622,  622,
     1196, 1205, 1196, 1205, 2046,  266,  266,  267,  268,  267,
      266,  270,  266,  266,  266,  623,  623,  623,  623,  623,
      623,  623,  266, 2046, 1207, 1096, 1207,  624,  621,  622,
      622,  622,  622,  622,  622,  622,  636,  636,  636,  636,

      636,  636,  636, 1097, 1101, 1208, 1146, 1208, 1146,  266,
      267,  268,  267, 1096,  269,  624, 2046, 2046,  468,  468,
      468,  468,  468,  468,  468,  267,  268,  267, 2046,  270,
     1104, 1097, 1101,  468,  468,  468,  468,  468,  468,  468,
      267,  268,  267, 2046,  269,  469,  469,  470,  471,  471,
      471,  471,  471,  471,  471,  267,  268,  267, 1104,  270,
      469,  469,  470,  471,  471,  471,  471,  471,  471,  471,
      267,  268,  267, 2046,  269, 1105, 2046, 2046,  472,  472,
      472,  472,  472,  472,  472,  267,  268,  267, 2046,  270,
     1110, 2046, 2046,  472,  472,  472,  472,  472,  472,  472,

      267,  268,  267, 1105,  269,  473,  473, 2046,  474,  474,
      474,  474,  474,  474,  474,  267,  268,  267, 1110,  270,
      473,  473, 2046,  474,  474,  474,  474,  474,  474,  474,
      267,  268,  267, 2046,  269,  475,  475, 2046,  476,  476,
      476,  476,  476,  476,  476,  267,  268,  267, 2046,  270,
      475,  475, 2046,  476,  476,  476,  476,  476,  476,  476,
      267,  268,  267, 2046,  269,  477,  477, 2046,  478,  478,
      478,  478,  478,  478,  478,  267,  268,  267, 2046,  270,
      477,  477, 2046,  478,  478,  478,  478,  478,  478,  478,
      267,  268,  267, 2046,  269,  479,  479, 2046,  480,  480,

      480,  480,  480,  480,  480,  267,  268,  267, 2046,  270,
      479,  479, 2046,  480,  480,  480,  480,  480,  480,  480,
      267,  268,  267, 2046,  269,  481,  481, 2046,  482,  482,
      482,  482,  482,  482,  482,  267,  268,  267, 2046,  270,
      481,  481, 2046,  482,  482,  482,  482,  482,  482,  482,
      267,  268,  267, 2046,  269,  483,  483, 2046,  484,  484,
      484,  484,  484,  484,  484,  267,  268,  267, 2046,  270,
      483,  483, 2046,  484,  484,  484,  484,  484,  484,  484,
      267,  268,  267, 2046,  269,  485,  485, 2046,  486,  486,
      486,  486,  486,  486,  486,  267,  268,  267, 2046,  270,

      485,  485, 2046,  486,  486,  486,  486,  486,  486,  486,
      267,  268,  267, 2046,  269,  487,  487, 2046,  488,  488,
      488,  488,  488,  488,  488,  267,  268,  267, 2046,  270,
      487,  487, 2046,  488,  488,  488,  488,  488,  488,  488,
      267,  268,  267, 2046,  269,  489,  489, 2046,  490,  490,
      490,  490,  490,  490,  490,  267,  268,  267, 2046,  270,
      489,  489, 2046,  490,  490,  490,  490,  490,  490,  490,
      266,  267,  268,  267,  266,  269,  266,  266,  266,  643,
      643,  643,  643,  643,  643,  643,  266,  639,  640,  640,
      640,  640,  640,  640,  640,  641,  641,  641,  641,  641,

      641,  641, 2046, 1114, 1115, 1122, 1123,  642, 1147, 1151,
     1147, 1151, 2046,  266,  266,  267,  268,  267,  266,  270,
      266,  266,  266,  644,  644,  644,  644,  644,  644,  644,
      266, 1114, 1115, 1122, 1123,  642,  639,  640,  640,  640,
      640,  640,  640,  640,  645,  645,  645,  645,  645,  645,
      645, 1252, 1254, 1252, 1254, 2046, 2046,  266,  266,  267,
      268,  267,  266,  269,  266,  266,  266,  646,  646,  646,
      646,  646,  646,  646,  266,  647,  647,  647,  647,  647,
      647,  647,  648,  648,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  649,  649,  649, 1255, 1256, 1257, 1258,

     2046,  266,  266,  267,  268,  267,  266,  270,  266,  266,
      266,  650,  650,  650,  650,  650,  650,  650,  266,  651,
      651,  651,  651,  651,  651,  651,  652,  653,  653,  653,
      653,  653,  653,  653,  652,  653,  653,  653,  653,  653,
      653,  653, 1185, 1124, 1185,  266,  266,  267,  268,  267,
      266,  269,  266,  266,  266,  668,  668,  668,  668,  668,
      668,  668,  266,  654,  654,  654,  654,  654,  654,  654,
     1036, 1124, 1036, 1125, 1029,  655,  656,  657,  657,  657,
      657,  657,  657,  657, 2046, 1037, 1030, 1102, 1126,  266,
      266,  267,  268,  267,  266,  270,  266,  266,  266, 2046,

     1103, 1125, 1029,  655, 1127, 2046,  266,  658,  658,  658,
      658,  658,  658,  658, 1030, 1102, 1126, 2046, 1128,  659,
      656,  657,  657,  657,  657,  657,  657,  657, 1103, 1106,
     2046, 1106, 1127,  266,  266,  267,  268,  267,  266,  269,
      266,  266,  266, 2046, 1107, 1098, 1128,  659, 1099, 2046,
      266,  660,  661,  661,  661,  661,  661,  661,  661,  662,
      662,  662,  662,  662,  662,  662, 2046, 1100, 1131, 1136,
     1137,  663, 1108, 1098, 2046, 2046, 1099,  266,  266,  267,
      268,  267,  266,  270,  266,  266,  266,  669,  669,  669,
      669,  669,  669,  669,  266, 2046, 1131, 1136, 1137,  663,

      660,  661,  661,  661,  661,  661,  661,  661,  664,  665,
      665,  665,  665,  665,  665,  665, 1138, 1273, 1191, 1273,
     1191,  266,  267,  268,  267, 1112,  269, 1112, 2046, 2046,
      495,  495,  495,  495,  495,  495,  495,  267,  268,  267,
     1113,  270, 2046, 2046, 1138,  495,  495,  495,  495,  495,
      495,  495,  266,  267,  268,  267,  266,  269,  266,  266,
      266,  710,  710,  710,  710,  710,  710,  710,  266,  666,
      666,  666,  666,  666,  666,  666, 1116, 1119, 1116, 1119,
     1139,  667,  664,  665,  665,  665,  665,  665,  665,  665,
     2046, 1117, 1120, 2046, 2046,  266,  266,  267,  268,  267,

      266,  270,  266,  266,  266, 2046, 1140, 1141, 1139,  667,
     2046, 2046,  266,  670,  671,  671,  671,  671,  671,  671,
      671,  672,  672,  672,  672,  672,  672,  672, 1142, 1144,
     1145, 1143, 1148,  673, 1140, 1141, 1129, 2046, 1129,  266,
      525, 2046,  525,  670,  671,  671,  671,  671,  671,  671,
      671, 1130, 2046,  526, 1149,  527, 1142, 1144, 1145, 1143,
     1148,  673,  674,  675,  675,  675,  675,  675,  675,  675,
      528,  676,  676,  676,  676,  676,  676,  676, 2046,  529,
      530,  531, 1149,  677,  674,  675,  675,  675,  675,  675,
      675,  675, 1194, 1150, 1194, 1196, 1152, 1196,  528,  678,

      679,  679,  679,  679,  679,  679,  679,  529,  530,  531,
      537,  677,  862,  977, 1153, 1154,  538, 1155, 2046,  539,
      978, 1150,  540,  863, 1152,  541,  542,  979,  543, 2046,
      864, 1132, 2046, 1132, 1134,  544, 1134, 1065,  537, 1065,
      862,  977, 1153, 1154,  538, 1155, 1133,  539,  978, 1135,
      540,  863, 1066,  541,  542,  979,  543,  553,  864, 1156,
     1067,  554, 1067, 1157, 1158,  555, 1162, 1163,  849,  556,
     1164,  557,  850,  851,  852, 1068, 1165,  558,  680,  680,
      680,  680,  680,  680,  680,  553, 1166, 1156, 1167,  554,
      681, 1157, 1158,  555, 1162, 1163,  849,  556, 1164,  557,

      850,  851,  852, 2046, 1165,  558,  678,  679,  679,  679,
      679,  679,  679,  679, 1166, 1205, 1167, 1205,  681,  682,
      683,  683,  683,  683,  683,  683,  683,  684,  684,  684,
      684,  684,  684,  684, 2046, 1168, 1169, 1173, 1176,  685,
      682,  683,  683,  683,  683,  683,  683,  683,  686,  687,
      687,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  688,  688, 1168, 1169, 1173, 1176,  685,  689,  686,
      687,  687,  687,  687,  687,  687,  687,  690,  691,  691,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,
      692,  692, 2046, 1177, 1178, 1179,  689,  693,  690,  691,

      691,  691,  691,  691,  691,  691,  694,  695,  695,  695,
      695,  695,  695,  695,  696,  696,  696,  696,  696,  696,
      696, 1177, 1178, 1179, 1180,  693,  697,  694,  695,  695,
      695,  695,  695,  695,  695,  698,  699,  699,  699,  699,
      699,  699,  699,  700,  700,  700,  700,  700,  700,  700,
     2046, 1181, 1180, 1182,  697,  701,  698,  699,  699,  699,
      699,  699,  699,  699,  702,  703,  703,  703,  703,  703,
      703,  703,  704,  704,  704,  704,  704,  704,  704, 1181,
     1183, 1182, 1184,  701,  705,  702,  703,  703,  703,  703,
      703,  703,  703,  706,  707,  707,  707,  707,  707,  707,

      707,  708,  708,  708,  708,  708,  708,  708, 1183, 1186,
     1184, 1192,  705,  709,  706,  707,  707,  707,  707,  707,
      707,  707,  711,  711,  711,  711,  711,  711,  711,  712,
      712,  712,  712,  712,  712,  712, 1193, 1186, 1195, 1192,
     1197,  709,  713,  713,  713,  713,  713,  713,  713,  714,
      715,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716, 1193, 1198, 1195, 1199, 1197,  717,
      714,  715,  715,  715,  715,  715,  715,  715,  719,  720,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  721,  721, 1198, 1200, 1199, 2046,  717,  722,  719,

      720,  720,  720,  720,  720,  720,  720,  723,  723,  723,
      723,  723,  723,  723,  724,  724,  724,  724,  724,  724,
      724, 1207, 1200, 1207,  725,  725,  722,  724,  724,  724,
      724,  724,  724,  724,  726,  726,  726,  726,  726,  726,
      726,  727,  727, 2046,  726,  726,  726,  726,  726,  726,
      726,  728,  728,  728,  728,  728,  728,  728,  729,  729,
     2046,  728,  728,  728,  728,  728,  728,  728,  730,  730,
      730,  730,  730,  730,  730,  731,  731, 2046,  730,  730,
      730,  730,  730,  730,  730,  732,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  734,

      734,  734,  734,  734,  734,  734,  735,  735,  735,  735,
      735,  735,  735,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  737,  738,  738,  738,
      738,  738,  738,  738,  739,  739,  739,  739,  739,  739,
      739,  745,  745,  745,  745,  745,  745,  745,  746,  746,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  747,
      747,  747,  748,  749,  749,  749,  749,  749,  749,  749,
      750,  750,  750,  750,  750,  750,  750, 1201, 1202, 1203,
     1204, 1206,  751,  748,  749,  749,  749,  749,  749,  749,
      749,  752,  752,  752,  752,  752,  752,  752,  753,  753,

      753,  753,  753,  753,  753, 1201, 1202, 1203, 1204, 1206,
      751,  754,  754,  754,  754,  754,  754,  754,  757,  757,
      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  758,  761,  761,  761,  761,  761,  761,  761,  769,
      769,  769,  769,  769,  769,  769,  770,  771,  771,  771,
      771,  771,  771,  771,  772,  772,  772,  772,  772,  772,
      772, 1209, 1210, 1211, 2046, 2046,  773,  770,  771,  771,
      771,  771,  771,  771,  771,  774,  774,  774,  774,  774,
      774,  774,  775,  775,  775,  775,  775,  775,  775, 1209,
     1210, 1211,  776,  776,  773,  775,  775,  775,  775,  775,

      775,  775,  777,  777,  777,  777,  777,  777,  777,  778,
      778, 2046,  777,  777,  777,  777,  777,  777,  777,  779,
      779,  779,  779,  779,  779,  779,  780,  780, 2046,  779,
      779,  779,  779,  779,  779,  779,  781,  781,  781,  781,
      781,  781,  781,  782,  782, 2046,  781,  781,  781,  781,
      781,  781,  781,  783,  783,  783,  783,  783,  783,  783,
      784,  784, 2046,  783,  783,  783,  783,  783,  783,  783,
      785,  785,  785,  785,  785,  785,  785,  786,  786, 2046,
      785,  785,  785,  785,  785,  785,  785,  787,  787,  787,
      787,  787,  787,  787,  788,  788, 2046,  787,  787,  787,

      787,  787,  787,  787,  789,  789,  789,  789,  789,  789,
      789,  790,  790, 2046,  789,  789,  789,  789,  789,  789,
      789,  791,  791,  791,  791,  791,  791,  791,  792,  792,
     2046,  791,  791,  791,  791,  791,  791,  791,  797,  797,
      797,  797,  797,  797,  797,  562,  562,  562,  562,  562,
      562,  562,  563,  563,  563,  563,  563,  563,  563,  564,
      564,  564,  564,  564,  564,  564,  565,  565,  565,  565,
      565,  565,  565,  566,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,  567,  567,  567,  568,  568,  568,
      568,  568,  568,  568,  571,  571,  571,  571,  571,  571,

      571, 1212, 1213, 1214, 2046, 2046,  572,  569,  570,  570,
      570,  570,  570,  570,  570,  571,  571,  571,  571,  571,
      571,  571, 1215, 1218, 1221, 1223, 1208,  572, 1208, 1212,
     1213, 1214,  879,  879,  572,  880,  880,  880,  880,  880,
      880,  880,  575,  575,  575,  575,  575,  575,  575, 1224,
     1215, 1218, 1221, 1223,  576,  572,  573,  574,  574,  574,
      574,  574,  574,  574,  575,  575,  575,  575,  575,  575,
      575, 1225, 1226, 1227, 2046, 1231,  576, 1224, 2046, 2046,
      881,  881,  576,  882,  882,  882,  882,  882,  882,  882,
      579,  579,  579,  579,  579,  579,  579, 2046, 1234, 1225,

     1226, 1227,  580, 1231,  576,  577,  578,  578,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  579,  579,
     1232, 1235, 2046, 1233, 1241,  580, 1234, 2046,  883,  883,
      580,  884,  884,  884,  884,  884,  884,  884,  583,  583,
      583,  583,  583,  583,  583, 1242, 2046, 1243, 1232, 1235,
      584, 1233, 1241,  580,  581,  582,  582,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  583,  583, 1244,
     2046, 1249, 1253, 1242,  584, 1243,  885,  885,  584,  886,
      886,  886,  886,  886,  886,  886,  587,  587,  587,  587,
      587,  587,  587, 1259, 1298, 2046, 1298, 1244,  588, 1249,

     1253, 2046,  584,  585,  586,  586,  586,  586,  586,  586,
      586,  587,  587,  587,  587,  587,  587,  587, 2046, 1264,
     1265, 1259, 1229,  588,  887,  887,  588,  888,  888,  888,
      888,  888,  888,  888,  591,  591,  591,  591,  591,  591,
      591, 1230, 1160, 1267, 2046, 1268,  592, 1264, 1265, 1161,
     1229,  588,  589,  590,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  591,  591, 1269, 1270, 2046,
     1160, 1267,  592, 1268,  592,  889,  889, 1161,  890,  890,
      890,  890,  890,  890,  890,  595,  595,  595,  595,  595,
      595,  595, 1271, 2046, 1272, 1269, 1270,  596, 2046, 2046,

      592,  593,  594,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595, 1278, 2046, 1279, 1280,
     1271,  596, 1272,  891,  891,  596,  892,  892,  892,  892,
      892,  892,  892,  599,  599,  599,  599,  599,  599,  599,
     1281, 1282, 2046, 2046, 1278,  600, 1279, 1280, 2046,  596,
      597,  598,  598,  598,  598,  598,  598,  598,  599,  599,
      599,  599,  599,  599,  599, 2046, 2046, 1283, 1281, 1282,
      600,  893,  893,  600,  894,  894,  894,  894,  894,  894,
      894,  601,  601,  601,  601,  601,  601,  601,  602,  602,
      602,  602,  602,  602,  602, 1283, 2046, 2046,  600,  603,

      603,  603,  603,  603,  603,  603,  604,  604,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  605,  605,
      607,  607, 2046,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  608,  608,  608,
      608,  608,  608,  608,  611,  611,  611,  611,  611,  611,
      611, 1284, 1285, 1286, 2046, 2046,  612,  609,  610,  610,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      611,  611, 1287, 1288, 1290, 1291, 1252,  612, 1252, 1284,
     1285, 1286,  895,  895,  612,  896,  896,  896,  896,  896,
      896,  896,  615,  615,  615,  615,  615,  615,  615, 1292,

     1287, 1288, 1290, 1291,  616,  612,  613,  614,  614,  614,
      614,  614,  614,  614,  615,  615,  615,  615,  615,  615,
      615, 1294, 1295, 1296, 2046, 1297,  616, 1292, 2046, 2046,
      897,  897,  616,  898,  898,  898,  898,  898,  898,  898,
      619,  619,  619,  619,  619,  619,  619, 2046, 1299, 1294,
     1295, 1296,  620, 1297,  616,  617,  618,  618,  618,  618,
      618,  618,  618,  619,  619,  619,  619,  619,  619,  619,
     1300, 1303, 2046, 1304, 1305,  620, 1299, 2046,  899,  899,
      620,  900,  900,  900,  900,  900,  900,  900,  623,  623,
      623,  623,  623,  623,  623, 1307, 2046, 1308, 1300, 1303,

      624, 1304, 1305,  620,  621,  622,  622,  622,  622,  622,
      622,  622,  623,  623,  623,  623,  623,  623,  623, 1254,
     2046, 1254, 1313, 1307,  624, 1308,  901,  901,  624,  902,
      902,  902,  902,  902,  902,  902,  633,  633,  633,  633,
      633,  633,  633,  634,  634,  634,  634,  634,  634,  634,
     1313, 2046,  624,  635,  635,  635,  635,  635,  635,  635,
      636,  636,  636,  636,  636,  636,  636,  641,  641,  641,
      641,  641,  641,  641, 1314, 1317, 1318, 2046, 2046,  642,
      639,  640,  640,  640,  640,  640,  640,  640,  641,  641,
      641,  641,  641,  641,  641, 1319, 1328, 1330, 1331, 1340,

      642, 2046, 1314, 1317, 1318,  903,  903,  642,  904,  904,
      904,  904,  904,  904,  904,  643,  643,  643,  643,  643,
      643,  643, 2046, 1319, 1328, 1330, 1331, 1340,  642,  644,
      644,  644,  644,  644,  644,  644,  645,  645,  645,  645,
      645,  645,  645,  646,  646,  646,  646,  646,  646,  646,
      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  649,  649,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  650,  650,  651,  651,
      651,  651,  651,  651,  651,  654,  654,  654,  654,  654,
      654,  654, 1341, 1342, 1352, 2046, 2046,  655,  652,  653,

      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654, 1355, 1356, 1355, 1357, 1273,  655, 1273,
     1341, 1342, 1352,  905,  905,  655,  906,  906,  906,  906,
      906,  906,  906,  658,  658,  658,  658,  658,  658,  658,
     1358, 1359, 1356, 2046, 1357,  659,  655,  656,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658, 1360, 1361, 1363, 2046, 1364,  659, 1358, 1359,
     2046,  907,  907,  659,  908,  908,  908,  908,  908,  908,
      908,  662,  662,  662,  662,  662,  662,  662, 2046, 1365,
     1360, 1361, 1363,  663, 1364,  659,  660,  661,  661,  661,

      661,  661,  661,  661,  662,  662,  662,  662,  662,  662,
      662, 1366, 1367, 1366, 1367, 1368,  663, 1365, 2046,  909,
      909,  663,  910,  910,  910,  910,  910,  910,  910,  666,
      666,  666,  666,  666,  666,  666, 1369, 1298, 1372, 1298,
     1395,  667, 1395, 1368,  663,  664,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
     1422, 2046, 1422, 1381, 1369,  667, 1372,  911,  911,  667,
      912,  912,  912,  912,  912,  912,  912,  668,  668,  668,
      668,  668,  668,  668,  669,  669,  669,  669,  669,  669,
      669, 1381, 2046,  667,  672,  672,  672,  672,  672,  672,

      672, 1384, 1385, 1386, 2046, 2046,  673,  670,  671,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672, 1387, 1388, 1389, 1390, 1423,  673, 1423, 1384,
     1385, 1386,  913,  913,  673,  914,  914,  914,  914,  914,
      914,  914,  676,  676,  676,  676,  676,  676,  676, 1391,
     1387, 1388, 1389, 1390,  677,  673,  674,  675,  675,  675,
      675,  675,  675,  675,  676,  676,  676,  676,  676,  676,
      676, 1393, 1394, 1396, 2046, 1397,  677, 1391, 2046, 2046,
      915,  915,  677,  916,  916,  916,  916,  916,  916,  916,
      680,  680,  680,  680,  680,  680,  680, 2046, 1398, 1393,

     1394, 1396,  681, 1397,  677,  678,  679,  679,  679,  679,
      679,  679,  679,  680,  680,  680,  680,  680,  680,  680,
     1401, 1406, 2046, 1407, 1408,  681, 1398, 2046,  917,  917,
      681,  918,  918,  918,  918,  918,  918,  918,  684,  684,
      684,  684,  684,  684,  684, 1413, 2046, 1414, 1401, 1406,
      685, 1407, 1408,  681,  682,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,  684,  684,  684,  684, 1415,
     1424, 1426, 1424, 1413,  685, 1414,  919,  919,  685,  920,
      920,  920,  920,  920,  920,  920,  688,  688,  688,  688,
      688,  688,  688, 1425, 1427, 1425, 2046, 1415,  689, 1426,

     2046, 2046,  685,  686,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688, 1431, 1428,
     1431, 2046, 1427,  689,  921,  921,  689,  922,  922,  922,
      922,  922,  922,  922,  692,  692,  692,  692,  692,  692,
      692, 1432, 1187, 1432, 2046, 1435,  693, 1428, 1433, 1188,
     1433,  689,  690,  691,  691,  691,  691,  691,  691,  691,
      692,  692,  692,  692,  692,  692,  692, 1434, 1440, 1434,
     1187, 1445,  693, 1435,  693,  923,  923, 1188,  924,  924,
      924,  924,  924,  924,  924,  696,  696,  696,  696,  696,
      696,  696, 1441, 1442, 1441, 1442, 1440,  697, 2046, 1445,

      693,  694,  695,  695,  695,  695,  695,  695,  695,  696,
      696,  696,  696,  696,  696,  696, 1443, 1444, 1443, 1444,
     1446,  697, 1446,  925,  925,  697,  926,  926,  926,  926,
      926,  926,  926,  700,  700,  700,  700,  700,  700,  700,
     1355, 1447, 1355, 2046, 1366,  701, 1366, 2046, 2046,  697,
      698,  699,  699,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700, 2046, 1448, 1449, 2046, 1447,
      701,  927,  927,  701,  928,  928,  928,  928,  928,  928,
      928,  704,  704,  704,  704,  704,  704,  704, 1450, 1399,
     1451, 2046, 1455,  705, 1448, 1449, 1400, 2046,  701,  702,

      703,  703,  703,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704, 1456, 1457, 1450, 1399, 1451,  705,
     1455,  705,  929,  929, 1400,  930,  930,  930,  930,  930,
      930,  930,  708,  708,  708,  708,  708,  708,  708, 1458,
     2046, 1461, 1456, 1457,  709, 2046, 2046,  705,  706,  707,
      707,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  708,  708, 1367, 2046, 1367, 1462, 1458,  709, 1461,
      931,  931,  709,  932,  932,  932,  932,  932,  932,  932,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711, 1462, 2046,  709,  712,  712,  712,

      712,  712,  712,  712,  713,  713,  713,  713,  713,  713,
      713,  716,  716,  716,  716,  716,  716,  716, 1463, 1464,
     1465, 2046, 1465,  717,  714,  715,  715,  715,  715,  715,
      715,  715,  716,  716,  716,  716,  716,  716,  716, 1466,
     1467, 1466, 1467, 1468,  717, 1468, 1463, 1464, 2046,  933,
      933,  717,  934,  934,  934,  934,  934,  934,  934,  721,
      721,  721,  721,  721,  721,  721, 1469, 1470, 1471, 1470,
     2046,  722,  717,  719,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721, 1472, 1473,
     1474, 2046, 2046,  722, 1469, 2046, 1471,  935,  935,  722,

      936,  936,  936,  936,  936,  936,  936,  723,  723,  723,
      723,  723,  723,  723, 2046, 2046, 1472, 1473, 1474,  725,
      725,  722,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  727,  727, 2046,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  729,  729, 2046,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      731,  731, 2046,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  732,  732,  732,
      732,  732,  732,  732,  733,  733,  733,  733,  733,  733,

      733,  734,  734,  734,  734,  734,  734,  734,  735,  735,
      735,  735,  735,  735,  735,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  737,  737,  738,
      738,  738,  738,  738,  738,  738,  739,  739,  739,  739,
      739,  739,  739,  745,  745,  745,  745,  745,  745,  745,
      746,  746,  746,  746,  746,  746,  746,  747,  747,  747,
      747,  747,  747,  747,  750,  750,  750,  750,  750,  750,
      750, 1477, 1478, 1479, 2046, 2046,  751,  748,  749,  749,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,
      750,  750, 1480, 1481, 1482, 1483, 1395,  751, 1395, 1477,

     1478, 1479,  937,  937,  751,  938,  938,  938,  938,  938,
      938,  938,  752,  752,  752,  752,  752,  752,  752, 2046,
     1480, 1481, 1482, 1483, 2046,  751,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
      757,  757,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  758,  758,  761,  761,  761,  761,  761,  761,
      761,  769,  769,  769,  769,  769,  769,  769,  772,  772,
      772,  772,  772,  772,  772, 1484, 1485, 1486, 2046, 2046,
      773,  770,  771,  771,  771,  771,  771,  771,  771,  772,
      772,  772,  772,  772,  772,  772, 1487, 1488, 1491, 2046,

     1491,  773, 2046, 1484, 1485, 1486,  939,  939,  773,  940,
      940,  940,  940,  940,  940,  940,  774,  774,  774,  774,
      774,  774,  774, 2046, 1487, 1488, 2046,  776,  776,  773,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  778,  778, 2046,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  780,  780, 2046,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  782,  782,
     2046,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  784,  784, 2046,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  786,  786, 2046,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  788,
      788, 2046,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  790,  790, 2046,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  792,  792, 2046,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      797,  797,  797,  797,  797,  797,  797,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,

      880,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  896,

      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  938,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940, 1072, 1171, 1072, 1171, 1174, 1106, 1174, 1106, 1189,
     1112, 1189, 1112, 1116, 2046, 1116, 1073, 1172, 2046, 2046,
     1175, 1107, 2046, 1492, 1190, 1113, 2046, 1119, 1117, 1119,
     1129, 1132, 1129, 1132, 1134, 2046, 1134, 1216, 1219, 1250,
     1219, 1493, 1120, 1494, 2046, 1130, 1133, 1217, 1251, 1135,
     1237, 1492, 1495, 1220, 1238, 1239, 1240, 1245, 1171, 2046,
     1171, 1246, 1247, 1248, 1174, 1216, 1174, 1250, 1498, 1493,
     1498, 1494, 1189, 1172, 1189, 1217, 1251, 2046, 1237, 1175,

     1495, 2046, 1238, 1239, 1240, 1245, 1260, 1190, 1260, 1246,
     1247, 1248, 1274, 1276, 1274, 1276, 1261, 1219, 1301, 1219,
     1301, 1262, 2046, 1320, 1315, 1320, 1309, 1275, 1277, 1310,
     1311, 2046, 1220, 1302, 1316, 2046, 1496, 1312, 1321, 2046,
     1322, 1324, 1322, 1324, 1326, 1332, 1326, 1332, 1334, 1263,
     1334, 1336, 1315, 1336, 1309, 1323, 1325, 1310, 1311, 1327,
     1333, 1497, 1316, 1335, 1496, 1312, 1337, 1338, 1344, 1338,
     1344, 1346, 1348, 1346, 1348, 1350, 1260, 1350, 1260, 1353,
     2046, 1353, 1339, 1345, 2046, 1499, 1347, 1349, 2046, 1497,
     1351, 1262, 2046, 1274, 1354, 1274, 1276, 1373, 1276, 1373,

     1375, 1377, 1375, 1377, 1379, 1382, 1379, 1382, 1275, 2046,
     1409, 1277, 1374, 1499, 2046, 1376, 1378, 2046, 1500, 1380,
     1383, 1301, 1402, 1301, 1402, 1411, 1410, 1411, 1416, 1418,
     1416, 1418, 1403, 1420, 1475, 1420, 1302, 1404, 1409, 1502,
     1412, 1502, 1476, 1417, 1419, 1320, 1500, 1320, 1421, 1322,
     1503, 1322, 1503, 1324, 1410, 1324, 1326, 1429, 1326, 1429,
     1321, 1332, 1475, 1332, 1323, 1405, 1501, 1334, 1325, 1334,
     1476, 1327, 1430, 1336, 1505, 1336, 1333, 1338, 1436, 1338,
     1436, 1438, 1335, 1438, 1344, 1346, 1344, 1346, 1337, 1348,
     1506, 1348, 1339, 1437, 1501, 1350, 1439, 1350, 1507, 1345,

     1347, 1353, 1505, 1353, 1349, 1452, 1459, 1452, 1459, 1373,
     1351, 1373, 1375, 1377, 1375, 1377, 1354, 1379, 1506, 1379,
     1453, 1460, 2046, 1382, 1374, 1382, 1507, 1376, 1378, 1402,
     2046, 1402, 1380, 2046, 1489, 1411, 1489, 1411, 1383, 1416,
     1418, 1416, 1418, 1420, 1404, 1420, 2046, 2046, 1454, 1490,
     1412, 1504, 2046, 1504, 1417, 1419, 2046, 1422, 1421, 1422,
     1423, 1424, 1423, 1424, 1425, 1429, 1425, 1429, 1508, 1431,
     1508, 1431, 1432, 1433, 1432, 1433, 1434, 1509, 1434, 1509,
     1430, 1436, 1511, 1436, 1511, 1438, 1512, 1438, 1512, 1513,
     1514, 1441, 1510, 1441, 1515, 1442, 1437, 1442, 1518, 1443,

     1439, 1443, 1444, 1446, 1444, 1446, 1519, 1520, 1452, 1520,
     1452, 1521, 1522, 1523, 1524, 1525, 2046, 1513, 1514, 1526,
     1529, 1526, 1515, 1453, 1530, 1465, 1518, 1465, 1532, 1459,
     1527, 1459, 1527, 1466, 1519, 1466, 1467, 1533, 1467, 1521,
     1522, 1523, 1524, 1525, 1460, 1528, 1534, 1468, 1529, 1468,
     1536, 1470, 1530, 1470, 1537, 1538, 1532, 1539, 1540, 1541,
     1542, 1543, 1544, 1547, 1548, 1533, 1549, 1550, 1551, 1489,
     1551, 1489, 1552, 1491, 1534, 1491, 1553, 1554, 1536, 1555,
     1556, 1557, 1537, 1538, 1490, 1539, 1540, 1541, 1542, 1543,
     1544, 1547, 1548, 1558, 1549, 1550, 1498, 1559, 1498, 1560,

     1552, 1502, 1561, 1502, 1553, 1554, 1562, 1555, 1556, 1557,
     1503, 1504, 1503, 1504, 1563, 1508, 1509, 1508, 1509, 1565,
     1564, 1558, 1564, 1566, 1511, 1559, 1511, 1560, 1567, 1568,
     1561, 1510, 1569, 1512, 1562, 1512, 1570, 1571, 1520, 1574,
     1520, 1572, 1563, 1575, 1576, 1578, 1576, 1565, 1526, 1573,
     1526, 1566, 1579, 1527, 1579, 1527, 1567, 1568, 1580, 1577,
     1569, 1581, 1582, 1585, 1570, 1571, 1591, 1574, 1528, 1572,
     1583, 1575, 1583, 1578, 1588, 1596, 1597, 1573, 1586, 1589,
     1586, 1592, 1594, 1592, 1594, 1584, 1580, 1600, 1590, 1581,
     1582, 1585, 1601, 1587, 1591, 1603, 1593, 1595, 1598, 1605,

     1598, 1606, 1588, 1596, 1597, 1607, 1608, 1589, 1604, 1609,
     1551, 1610, 1551, 1599, 1611, 1600, 1590, 1612, 1613, 1614,
     1601, 1617, 1618, 1603, 1619, 1620, 1615, 1605, 1615, 1606,
     1621, 1622, 1623, 1607, 1608, 1624, 1604, 1609, 1564, 1610,
     1564, 1616, 1611, 1627, 1628, 1612, 1613, 1614, 1631, 1617,
     1618, 1632, 1619, 1620, 1625, 1629, 1625, 1629, 1621, 1622,
     1623, 1633, 1634, 1624, 1638, 1635, 1576, 1635, 1576, 1626,
     1630, 1627, 1628, 1637, 1639, 1637, 1631, 1640, 1641, 1632,
     1636, 1577, 1579, 1583, 1579, 1583, 1642, 1643, 1642, 1633,
     1634, 1645, 1638, 1586, 1644, 1586, 1644, 1646, 1584, 1649,

     1647, 1649, 1639, 1648, 1653, 1640, 1641, 1592, 1587, 1592,
     1651, 1594, 1651, 1594, 1650, 1643, 1652, 1654, 1652, 1645,
     1656, 1598, 1593, 1598, 1659, 1646, 1595, 1655, 1647, 1655,
     1660, 1648, 1653, 1661, 1662, 1657, 1599, 1657, 1663, 1664,
     1665, 1666, 1667, 1668, 1669, 1654, 1670, 1671, 1656, 1615,
     1658, 1615, 1659, 1672, 1673, 1672, 1674, 1677, 1660, 1678,
     1681, 1661, 1662, 1675, 1616, 1675, 1663, 1664, 1665, 1666,
     1667, 1668, 1669, 1684, 1670, 1671, 1685, 1679, 1676, 1679,
     2046, 1625, 1673, 1625, 1674, 1677, 2046, 1678, 1681, 1683,
     2046, 1683, 1680, 1629, 2046, 1629, 1626, 1686, 1687, 1686,

     1687, 1684, 1699, 1690, 1685, 1690, 1700, 1692, 1630, 1692,
     1694, 2046, 1694, 1688, 1635, 1696, 1635, 1696, 1691, 1637,
     1701, 1637, 1693, 1702, 1697, 1695, 1697, 1704, 1705, 1636,
     1699, 1642, 1706, 1642, 1700, 1644, 1708, 1644, 1649, 1698,
     1649, 1689, 1707, 1651, 1707, 1651, 1709, 1652, 1701, 1652,
     1655, 1702, 1655, 1650, 1710, 1704, 1705, 1657, 1712, 1657,
     1706, 1711, 1713, 1711, 1708, 1714, 1715, 1719, 1717, 1720,
     1717, 1723, 1658, 1721, 1709, 1721, 1724, 1725, 1726, 1672,
     1727, 1672, 1710, 1718, 1728, 1675, 1712, 1675, 1722, 1729,
     1713, 1729, 1730, 1714, 1715, 1719, 1731, 1720, 1733, 1723,

     1676, 1679, 1734, 1679, 1724, 1725, 1726, 1732, 1727, 1732,
     1735, 1683, 1728, 1683, 1736, 1686, 1680, 1686, 1738, 1687,
     1730, 1687, 2046, 1737, 1731, 1737, 1733, 2046, 2046, 1690,
     1734, 1690, 2046, 1739, 1688, 1739, 1743, 1692, 1735, 1692,
     2046, 1740, 1736, 1740, 1691, 1694, 1738, 1694, 1741, 1696,
     1741, 1696, 1693, 1697, 1742, 1697, 1742, 1744, 1745, 1746,
     1695, 1746, 1748, 1749, 1743, 1750, 1751, 1707, 1698, 1707,
     1752, 1753, 1756, 1754, 1747, 1754, 1711, 1757, 1711, 1758,
     1759, 1760, 1761, 1762, 1764, 1744, 1745, 1717, 1755, 1717,
     1748, 1749, 1765, 1750, 1751, 1763, 1769, 1763, 1752, 1753,

     1756, 1721, 1718, 1721, 1766, 1757, 1766, 1758, 1759, 1760,
     1761, 1762, 1764, 1767, 1770, 1767, 1722, 1771, 1772, 1773,
     1765, 1729, 2046, 1729, 1769, 1774, 2046, 1774, 1768, 1776,
     1732, 1776, 1732, 1783, 1784, 1785, 1737, 1786, 1737, 1779,
     1775, 1779, 1770, 1791, 1777, 1771, 1772, 1773, 2046, 1780,
     1781, 1739, 1793, 1739, 1782, 1740, 1741, 1740, 1741, 1794,
     2046, 1783, 1784, 1785, 1742, 1786, 1742, 1787, 1789, 1787,
     1789, 1791, 1778, 1746, 1792, 1746, 1792, 1795, 1796, 1797,
     1793, 1797, 1788, 1790, 1754, 1801, 1754, 1794, 1747, 1800,
     1802, 1800, 1803, 1804, 1798, 1805, 1807, 1805, 1807, 1755,

     1809, 1763, 1809, 1763, 1813, 1795, 1796, 1811, 1818, 1811,
     1806, 1808, 1766, 1801, 1766, 1810, 1819, 1814, 1802, 1814,
     1803, 1804, 1812, 1767, 1815, 1767, 1815, 1820, 1774, 1821,
     1774, 1821, 1813, 1776, 1830, 1776, 1818, 2046, 1768, 1816,
     1822, 2046, 1822, 1775, 1819, 1823, 1831, 1824, 1777, 1779,
     1825, 1779, 1825, 1832, 1827, 1820, 1827, 1829, 1833, 1829,
     1836, 1787, 1830, 1787, 1782, 1826, 1834, 1837, 1834, 1828,
     1789, 1839, 1789, 1823, 1831, 1824, 1788, 1835, 1792, 1835,
     1792, 1832, 1840, 1842, 1843, 1790, 1833, 1797, 1836, 1797,
     1841, 1800, 1841, 1800, 1844, 1837, 1845, 1846, 1805, 1839,

     1805, 1847, 1798, 1847, 1807, 1848, 1807, 1848, 2046, 2046,
     1840, 1842, 1843, 1806, 1809, 1849, 1809, 1849, 1811, 1808,
     1811, 1850, 1844, 1850, 1845, 1846, 1851, 1862, 1851, 1810,
     1814, 1863, 1814, 1812, 1815, 1853, 1815, 1853, 1854, 1855,
     1856, 1852, 1857, 1859, 1857, 1859, 1821, 2046, 1821, 1816,
     1822, 1864, 1822, 1864, 1825, 1862, 1825, 1858, 1860, 1863,
     1827, 1865, 1827, 1865, 1866, 1871, 1854, 1855, 1856, 1826,
     1829, 1867, 1829, 1867, 1869, 1828, 1869, 1834, 1835, 1834,
     1835, 1872, 1874, 1872, 1875, 1876, 1868, 1877, 1841, 1870,
     1841, 1878, 1866, 1871, 1881, 1883, 1873, 2046, 1847, 1879,

     1847, 1879, 1848, 1849, 1848, 1849, 1850, 2046, 1850, 1851,
     1874, 1851, 1875, 1876, 1880, 1877, 1884, 2046, 1884, 1878,
     2046, 1895, 1881, 1883, 1852, 1853, 1885, 1853, 1885, 1887,
     1889, 1887, 1889, 1857, 1891, 1857, 1891, 1859, 1892, 1859,
     1892, 1886, 1896, 1893, 1888, 1890, 1894, 1897, 1858, 1895,
     1900, 1864, 1860, 1864, 1865, 1904, 1865, 1867, 1898, 1867,
     1898, 1869, 1899, 1869, 1899, 1872, 1901, 1872, 1901, 1905,
     1896, 1893, 1868, 1906, 1894, 1897, 1870, 1902, 1900, 1902,
     1873, 1907, 1909, 1904, 1879, 1908, 1879, 1908, 1913, 1910,
     2046, 1884, 1903, 1884, 1911, 2046, 1885, 1905, 1885, 1880,

     2046, 1906, 1912, 1914, 1887, 1914, 1887, 1917, 1918, 1907,
     1909, 1886, 1915, 1889, 1915, 1889, 1913, 1910, 1916, 1888,
     1916, 1891, 1911, 1891, 1892, 1919, 1892, 1920, 1890, 1921,
     1912, 1898, 1899, 1898, 1899, 1917, 1918, 1922, 1901, 1902,
     1901, 1902, 1923, 1924, 1923, 1925, 1927, 1925, 1928, 1908,
     1930, 1908, 1931, 1919, 1903, 1920, 1932, 1921, 1934, 1914,
     1926, 1914, 1915, 1935, 1915, 1922, 1916, 1936, 1916, 1936,
     1938, 1924, 1943, 1939, 1927, 1939, 1928, 1941, 1930, 1941,
     1931, 1923, 1937, 1923, 1932, 1947, 1934, 1925, 1940, 1925,
     1948, 1935, 1942, 1944, 1945, 1944, 1945, 1949, 1938, 1950,

     1943, 1951, 1926, 1952, 1953, 1954, 1955, 1956, 1936, 1946,
     1936, 1962, 1957, 1947, 1957, 1958, 2046, 1958, 1948, 1960,
     1964, 1960, 1939, 1937, 1939, 1949, 1941, 1950, 1941, 1951,
     1959, 1952, 1953, 1954, 1955, 1956, 1961, 1940, 1961, 1962,
     1944, 1942, 1944, 1945, 1963, 1945, 1963, 1965, 1964, 1966,
     1967, 1968, 1969, 1971, 1969, 1971, 1975, 1973, 1946, 1973,
     1976, 1957, 1977, 1957, 1977, 1980, 1981, 1970, 1972, 1982,
     1983, 1958, 1974, 1958, 1960, 1965, 1960, 1966, 1967, 1968,
     1961, 1978, 1961, 1978, 1975, 1963, 1959, 1963, 1976, 1984,
     1969, 1988, 1969, 1980, 1981, 1989, 1979, 1982, 1983, 1985,

     1971, 1985, 1971, 1991, 1986, 1970, 1986, 1973, 1987, 1973,
     1987, 1977, 1978, 1977, 1978, 1972, 1990, 1984, 1990, 1988,
     1992, 1994, 1974, 1989, 1995, 1996, 1985, 1979, 1985, 1999,
     1986, 1991, 1986, 1987, 2000, 1987, 1997, 1990, 1997, 1990,
     2001, 2002, 2003, 2004, 1997, 2005, 1997, 2005, 1992, 1994,
     2006, 1998, 1995, 1996, 2007, 2008, 2009, 1999, 2010, 1998,
     2011, 2005, 2000, 2005, 2012, 2014, 2012, 2014, 2001, 2002,
     2003, 2004, 2017, 2020, 2017, 2015, 2021, 2046, 2006, 2013,
     2016, 2046, 2007, 2008, 2009, 2046, 2010, 2018, 2011, 2022,
     2012, 2022, 2012, 2014, 2023, 2014, 2023, 2025, 2017, 2025,

     2017, 2020, 2046, 2046, 2021, 2013, 2046, 2046, 2016, 2024,
     2026, 2046, 2026, 2018, 2027, 2028, 2029, 2030, 2032, 2030,
     2032, 2022, 2023, 2022, 2023, 2034, 2025, 2034, 2025, 2026,
     2046, 2026, 2031, 2033, 2035, 2046, 2035, 2024, 2037, 2039,
     2037, 2039, 2027, 2028, 2029, 2030, 2041, 2030, 2041, 2036,
     2032, 2046, 2032, 2038, 2040, 2042, 2034, 2042, 2034, 2035,
     2031, 2035, 2043, 2046, 2043, 2033, 2037, 2044, 2037, 2044,
     2039, 2045, 2039, 2045, 2036, 2041, 2042, 2041, 2042, 2046,
     2043, 2038, 2043, 2046, 2044, 2040, 2044, 2045, 2046, 2045,
      266,  266,  266,  266,  266,  342,  342,  342,  342,  342,

      343,  343,  343,  343,  343,  344,  344,  344,  344,  344,
      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      347,  347,  347,  347,  347,  348,  348,  348,  348,  348,
      349,  349,  349,  349,  349,  354,  354,  354,  354,  354,
      355,  355,  355,  355,  355,  419,  419,  419,  419,  419,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,
      442,  442,  442,  442,  442,  443,  443,  443,  443,  443,
      444,  444,  444,  444,  444,  454,  454,  454,  454,  454,
      455,  455,  455,  455,  455,  458,  458,  458,  458,  458,
      459,  459,  459,  459,  459,  461,  461,  461,  461,  461,

      462,  462,  462,  462,  462,  463,  463,  463,  463,  463,
      464,  464,  464,  464,  464,  465,  465,  465,  465,  465,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,
      493,  493,  493,  493,  493,  494,  494,  494,  494,  494,
      496,  496,  496,  496,  496,  497,  497,  497,  497,  497,
      501,  501,  501,  501,  501,  625,  625,  626,  626,  627,
      627,  628,  628,  629,  629,  630,  630,  631,  631,  632,
      632,  638,  638,  718,  718,  740,  740,  741,  741,  742,
      742,  743,  743,  744,  744,  756,  756,  799,  799, 2046,

      799,  799,  802, 2046, 2046,  802,  802,  625,  625,  626,
      626,  627,  627,  628,  628,  629,  629,  630,  630,  631,
      631,  632,  632,  638,  638,  718,  718,  740,  740,  741,
      741,  742,  742,  743,  743,  744,  744,  756,  756,  799,
      799, 2046,  799,  799,  802, 2046, 2046,  802,  802,  265,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046
    } ;

static yyconst flex_int16_t yy_chk[10422] =
    {   0,
        0,    1,    1,    1, 2147,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    3,    3,    3,
      267,    3,  267, 2146,  267,    3,    3,    3,    3,    3,
        3,    3,    4,    4,    4, 2145,    4,  272, 2144,  274,

        4,    4,    4,    4,    4,    4,    4,    5,    5,    5,
     2143,    5,  275, 2142,  277,    5,    5,    5,    5,    5,
        5,    5,    6,    6,    6,  272,    6,  274, 2141,  277,
        6,    6,    6,    6,    6,    6,    6,    7,    7,    7,
      275,    7,  277, 2140,  278,    7,    7,    7,    7,    7,
        7,    7,    8,    8,    8, 2139,    8,  277, 2138,  279,
        8,    8,    8,    8,    8,    8,    8,    9,    9,    9,
     2137,    9,  278, 2136,  280,    9,    9,    9,    9,    9,
        9,    9,   10,   10,   10, 2135,   10,  279, 2134,  284,
       10,   10,   10,   10,   10,   10,   10,   11,   11,   11,

     2132,   11,  280, 2124, 2113,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12, 2112,   12,  284, 2111,  286,
       12,   12,   12,   12,   12,   12,   12,   13,   13,   13,
     2110,   13,  285, 2109,  290,   13,   13,   13,   13,   13,
       13,   13,   14,   14,   14, 2108,   14,  286, 2107,  285,
       14,   14,   14,   14,   14,   14,   14,   15,   15,   15,
      285,   15,  290, 2106, 2105,   15,   15,   15,   15,   15,
       15,   15,   16,   16,   16, 2104,   16,  285, 2103, 2102,
       16,   16,   16,   16,   16,   16,   16,   17,   17,   17,
     2101,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   18,   18,   18, 2100,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   19,   19,
     2098,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   20,   20,   20, 2090,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   21,   21,
     2009,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22, 1982,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   23,   23,
     1913,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   24,   24,   24, 1909,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   25,   25,   25,
     1845,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   26,   26,   26, 1820,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
     1794,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   28,   28,   28, 1770,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   29,   29,   29,
     1753,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   30,   30,   30, 1663,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   31,   31,   31,

     1645,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   32,   32,   32, 1624,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   33,   33,   33,
      289,   33,  289, 1544, 1484,   33,   33,   33,   33,   33,
       33,   33,   34,   34,   34,  289,   34,  527, 1483,  527,
       34,   34,   34,   34,   34,   34,   34,   35,   35,   35,
      498,   35,  498, 1473,  498,   35,   35,   35,   35,   35,
       35,   35,   36,   36,   36,  502,   36,  502, 1464,  502,
       36,   36,   36,   36,   36,   36,   36,   37,   37,   37,
      505,   37,  505, 1449,  505,   37,   37,   37,   37,   37,

       37,   37,   38,   38,   38, 1448,   38,  507, 1297,  509,
       38,   38,   38,   38,   38,   38,   38,   39,   39,   39,
     1281,   39,  510, 1280,  511,   39,   39,   39,   39,   39,
       39,   39,   40,   40,   40,  507,   40,  509, 1269,  512,
       40,   40,   40,   40,   40,   40,   40,   41,   41,   41,
      510,   41,  511, 1253, 1242,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1227,   42,  512, 1214, 1210,
       42,   42,   42,   42,   42,   42,   42,   43,   43,   43,
     1181,   43,   43,   43,  513,   43,   43,   43,   43,   43,
       43,   43,   44,   44,   44, 1162,   44,   44,   44,  514,

       44,   44,   44,   44,   44,   44,   44,   45,   45,   45,
     1156,   45,  513, 1149, 1093,   45,   45,   45,   45,   45,
       45,   45,   46,   46,   46, 1081,   46,  514, 1044, 1042,
       46,   46,   46,   46,   46,   46,   46,   47,   47,   47,
     1034,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   48,   48,   48, 1017,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   49,   49,   49,
     1010,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   50,   50, 1004,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   51,   51,   51,

      993,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52,  990,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   53,   53,   53,
      867,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   54,   54,   54,  854,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   55,   55,   55,
       55,  515,   55,   55,   55,   56,   56,   56,   56,  516,
       56,   56,   56,   55,  560,  837,  560,   57,   57,   57,
       57,   56,   57,   57,   57,   58,   58,   58,   58,  515,
       58,   58,   58,   57,  261,  261,  261,  516,  261,  517,

       55,   58,  262,  262,  262,  518,  262,  820,   56,   59,
       59,   59,   59,  520,   59,   59,   59,  263,  263,  263,
       57,  263,  264,  264,  264,   59,  264,  517,   58,   60,
       60,   60,   60,  518,   60,   60,   60,   61,   61,   61,
       61,  520,   61,   61,   61,   60,  521,  522,  523,  524,
      819,  528,   59,   61,   62,   62,   62,   62,  812,   62,
       62,   62,   63,   63,   63,   63,  811,   63,   63,   63,
       62,  525,   60,  525,  521,  522,  523,  524,   63,  528,
       61,  534,   64,   64,   64,   64,  525,   64,   64,   64,
      291,  291,  291,  291,  291,  291,  291,   62,   64,  519,

      508,   65,   65,   65,   65,   63,   65,   65,   65,  534,
      824,  265,  824,   66,   66,   66,   66,   65,   66,   66,
       66,   67,   67,   67,   67,   64,   67,   67,   67,   66,
      825,  535,  825,   68,   68,   68,   68,   67,   68,   68,
       68,  828,    0,  828,   65,   69,   69,   69,   69,   68,
       69,   69,   69,    0,    0,  537,   66,    0,  526,  535,
      526,   69,    0,    0,   67,   70,   70,   70,   70,  287,
       70,   70,   70,  526,  538,  539,   68,  287,  287,  287,
      529,   70,  529,  537,   81,   81,   81,   81,   69,   81,
       81,   81,  800,    0,  800,  529,  800,  287,    0,  530,

       81,  530,  538,  539,    0,  287,  287,  287,   70,   71,
       71,   71,    0,   71,  530,    0,    0,   71,   71,   71,
       71,   71,   71,   71,   72,   72,   72,   81,   72,  531,
        0,  531,   72,   72,   72,   72,   72,   72,   72,   73,
       73,   73,    0,   73,  531,    0,    0,   73,   73,   73,
       73,   73,   73,   73,   74,   74,   74,  532,   74,  532,
        0,    0,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,  532,   75,  533,    0,  533,   75,   75,   75,
       75,   75,   75,   75,   76,   76,   76,    0,   76,  533,
        0,  542,   76,   76,   76,   76,   76,   76,   76,   77,

       77,   77,  559,   77,  559,    0,    0,   77,   77,   77,
       77,   77,   77,   77,   78,   78,   78,  559,   78,  542,
        0,    0,   78,   78,   78,   78,   78,   78,   78,   79,
       79,   79,   79,   79,   79,   79,   79,   79,    0,  540,
      543,   82,   82,   82,   82,   79,   82,   82,   82,  145,
      145,  145,  145,    0,  145,  145,  145,   82,  540,  271,
      545,    0,  546,  547,    0,  145,  271,  540,  543,  271,
        0,    0,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,    0,    0,   82,  548,  551,  271,  545,   80,
      546,  547,  145,  830,  271,  830,    0,  271,  292,  292,

      292,  292,  292,  292,  292,  293,  293,  293,  293,  293,
      293,  293,    0,  548,  551,    0,   80,   83,   83,   83,
        0,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   84,   84,   84,    0,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   85,   85,   85,
      536,   85,  536,    0,  552,   85,   85,   85,   85,   85,
       85,   85,   86,   86,   86,  536,   86,  536,    0,  536,
       86,   86,   86,   86,   86,   86,   86,   87,   87,   87,
        0,   87,  552,    0,  536,   87,   87,   87,   87,   87,
       87,   87,   88,   88,   88,  536,   88,  536,    0,  553,

       88,   88,   88,   88,   88,   88,   88,   89,   89,   89,
        0,   89,  536,    0,  555,   89,   89,   89,   89,   89,
       89,   89,   90,   90,   90,    0,   90,  553,    0,  556,
       90,   90,   90,   90,   90,   90,   90,   91,   91,   91,
        0,   91,  555,    0,  558,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,    0,   92,  556,    0,  561,
       92,   92,   92,   92,   92,   92,   92,   93,   93,   93,
        0,   93,  558,    0,    0,   93,   93,   93,   93,   93,
       93,   93,   94,   94,   94,    0,   94,  561,    0,  805,
       94,   94,   94,   94,   94,   94,   94,   95,   95,   95,

      803,   95,  803,    0,  803,   95,   95,   95,   95,   95,
       95,   95,   96,   96,   96,    0,   96,  805,    0,  806,
       96,   96,   96,   96,   96,   96,   96,   97,   97,   97,
        0,   97,  808,    0,  809,   97,   97,   97,   97,   97,
       97,   97,   98,   98,   98,    0,   98,  806,    0,  810,
       98,   98,   98,   98,   98,   98,   98,   99,   99,   99,
      808,   99,  809,    0,  813,   99,   99,   99,   99,   99,
       99,   99,  100,  100,  100,    0,  100,  810,    0,  814,
      100,  100,  100,  100,  100,  100,  100,  101,  101,  101,
        0,  101,  813,    0,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102,    0,  102,  814,    0,    0,
      102,  102,  102,  102,  102,  102,  102,  103,  103,  103,
        0,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  104,  104,  104,    0,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  105,  105,  105,
        0,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  106,  106,  106,    0,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  107,  107,  107,
        0,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  108,  108,  108,    0,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  109,  109,  109,
        0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  110,  110,    0,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  111,  111,  111,
        0,  111,  815,    0,  816,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112,    0,  112,  817,    0,  818,
      112,  112,  112,  112,  112,  112,  112,  113,  113,  113,
      815,  113,  816,    0,    0,  113,  113,  113,  113,  113,
      113,  113,  114,  114,  114,  817,  114,  818,    0,    0,
      114,  114,  114,  114,  114,  114,  114,  115,  115,  115,

        0,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  116,  116,  116,    0,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  117,  117,
        0,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  118,  118,  118,    0,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  119,  119,  119,
        0,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  120,  120,  120,    0,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  121,  121,  121,
        0,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  122,  122,  122,    0,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  123,  123,  123,
        0,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  124,  124,  124,    0,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  125,  125,
        0,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  126,  126,  126,    0,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  127,  127,  127,
        0,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  128,  128,  128,    0,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  129,  129,  129,
        0,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  130,  130,  130,    0,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  131,  131,  131,
        0,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132,    0,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  133,  133,  133,
        0,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  134,  134,  134,    0,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  135,  135,  135,

        0,  135,  821,    0,  822,  135,  135,  135,  135,  135,
      135,  135,  136,  136,  136,  832,  136,  832,    0,    0,
      136,  136,  136,  136,  136,  136,  136,  137,  137,  137,
      821,  137,  822,    0,  826,  137,  137,  137,  137,  137,
      137,  137,  138,  138,  138,  823,  138,  823,    0,    0,
      138,  138,  138,  138,  138,  138,  138,  139,  139,  139,
      823,  139,  826,    0,    0,  139,  139,  139,  139,  139,
      139,  139,  140,  140,  140,  827,  140,  827,    0,    0,
      140,  140,  140,  140,  140,  140,  140,  141,  141,  141,
      827,  141,  829,    0,  829,  141,  141,  141,  141,  141,

      141,  141,  142,  142,  142,    0,  142,  829,    0,    0,
      142,  142,  142,  142,  142,  142,  142,  143,  143,  143,
        0,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  144,  144,  144,    0,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  146,  146,  146,
      146,    0,  146,  146,  146,  294,  294,  294,  294,  294,
      294,  294,  834,  146,  834,    0,  175,  175,  175,  175,
        0,  175,  175,  175,  295,  295,  295,  295,  295,  295,
      295,    0,  175,  296,  296,  296,  296,  296,  296,  296,
      146,  147,  147,  147,    0,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  148,  148,  148,  175,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  149,  149,  149,  831,  149,  831,    0,    0,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150,  831,
      150,  836,    0,  836,  150,  150,  150,  150,  150,  150,
      150,  151,  151,  151,    0,  151,  151,  151,    0,  151,
      151,  151,  151,  151,  151,  151,  152,  152,  152,    0,
      152,  152,  152,    0,  152,  152,  152,  152,  152,  152,
      152,  153,  153,  153,    0,  153,  153,  153,    0,  153,
      153,  153,  153,  153,  153,  153,  154,  154,  154,    0,

      154,  154,  154,    0,  154,  154,  154,  154,  154,  154,
      154,  155,  155,  155,    0,  155,  155,  155,    0,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,    0,
      156,  156,  156,    0,  156,  156,  156,  156,  156,  156,
      156,  157,  157,  157,    0,  157,  157,  157,    0,  157,
      157,  157,  157,  157,  157,  157,  158,  158,  158,    0,
      158,  158,  158,    0,  158,  158,  158,  158,  158,  158,
      158,  159,  159,  159,  833,  159,  833,    0,    0,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160,  833,
      160,  835,    0,  835,  160,  160,  160,  160,  160,  160,

      160,  161,  161,  161,    0,  161,  835,    0,  838,  161,
      161,  161,  161,  161,  161,  161,  162,  162,  162,  839,
      162,  839,    0,    0,  162,  162,  162,  162,  162,  162,
      162,  163,  163,  163,  839,  163,  838,    0,  841,  163,
      163,  163,  163,  163,  163,  163,  164,  164,  164,  840,
      164,  840,    0,  842,  164,  164,  164,  164,  164,  164,
      164,  165,  165,  165,    0,  165,  841,    0,  843,  165,
      165,  165,  165,  165,  165,  165,  166,  166,  166,    0,
      166,  842,    0,  844,  166,  166,  166,  166,  166,  166,
      166,  167,  167,  167,    0,  167,  843,    0,  845,  167,

      167,  167,  167,  167,  167,  167,  168,  168,  168,    0,
      168,  844,    0,  846,  168,  168,  168,  168,  168,  168,
      168,  169,  169,  169,    0,  169,  845,    0,  847,  169,
      169,  169,  169,  169,  169,  169,  170,  170,  170,    0,
      170,  846,    0,  849,  170,  170,  170,  170,  170,  170,
      170,  171,  171,  171,    0,  171,  847,    0,  850,  171,
      171,  171,  171,  171,  171,  171,  172,  172,  172,    0,
      172,  849,    0,  851,  172,  172,  172,  172,  172,  172,
      172,  173,  173,  173,    0,  173,  850,  852,    0,  173,
      173,  173,  173,  173,  173,  173,  174,  174,  174,    0,

      174,  851,  853,    0,  174,  174,  174,  174,  174,  174,
      174,  176,  176,  176,  176,  852,  176,  176,  176,  177,
      177,  177,  177,  855,  177,  177,  177,  176,  856,  857,
      853,  178,  178,  178,  178,  177,  178,  178,  178,  179,
      179,  179,  179,  544,  179,  179,  179,  178,  858,  859,
      544,  855,  544,  860,  176,  179,  856,  857,  877,  550,
      877,    0,  177,  180,  180,  180,  180,  550,  180,  180,
      180,  544,  861,  862,  178,  863,  858,  859,  544,  180,
      544,  860,  179,  181,  181,  181,  181,  550,  181,  181,
      181,  182,  182,  182,  182,  550,  182,  182,  182,  181,

      861,  862,  864,  863,    0,  865,  180,  182,  183,  183,
      183,  183,    0,  183,  183,  183,  184,  184,  184,  184,
      557,  184,  184,  184,  183,    0,  181,  807,  866,  557,
      864,    0,  184,  865,  182,  807,    0,  201,  201,  201,
      201,    0,  201,  201,  201,  960,    0,  960,  557,    0,
      868,  183,    0,  201,  869,  807,  866,  557,    0,  184,
      185,  185,  185,  807,  185,  870,    0,  872,  185,  185,
      185,  185,  185,  185,  185,  186,  186,  186,  868,  186,
      201,    0,  869,  186,  186,  186,  186,  186,  186,  186,
      187,  187,  187,  870,  187,  872,    0,  873,  187,  187,

      187,  187,  187,  187,  187,  188,  188,  188,    0,  188,
      874,    0,  875,  188,  188,  188,  188,  188,  188,  188,
      189,  189,  189,    0,  189,  873,    0,    0,  189,  189,
      189,  189,  189,  189,  189,  190,  190,  190,  874,  190,
      875,    0,    0,  190,  190,  190,  190,  190,  190,  190,
      191,  191,  191,    0,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  192,  192,  192,    0,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      193,  193,  193,    0,  193,  876,    0,  878,  193,  193,
      193,  193,  193,  193,  193,  194,  194,  194,    0,  194,

      941,    0,  942,  194,  194,  194,  194,  194,  194,  194,
      195,  195,  195,  876,  195,  878,    0,    0,  195,  195,
      195,  195,  195,  195,  195,  196,  196,  196,  941,  196,
      942,    0,  945,  196,  196,  196,  196,  196,  196,  196,
      197,  197,  197,  943,  197,  943,    0,    0,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198,  943,  198,
      945,    0,  946,  198,  198,  198,  198,  198,  198,  198,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  944,
      947,  944,  202,  202,  202,  202,  199,  202,  202,  202,
      946,  962,    0,  962,  944,  276,  273,    0,  202,  948,

      871,  276,    0,  273,  273,  950,  276,  871,  947,  273,
      963,    0,  963,  199,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  276,  273,  202,  951,  948,  871,  276,
      200,  273,  273,  950,  276,  952,    0,  273,  297,  297,
      297,  297,  297,  297,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  964,  951,  964,    0,  200,  203,  203,
      203,    0,  203,  952,  203,    0,  203,  203,  203,  203,
      203,  203,  203,  204,  204,  204,  965,  204,  965,  204,
        0,  204,  204,  204,  204,  204,  204,  204,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  282,  953,  954,

      955,  554,  282,  966,  205,  966,  299,  299,  299,  299,
      299,  299,  299,  554,  957,  958,  959,  282,  299,  961,
        0,  967,  282,  970,  971,  282,  953,  954,  955,  554,
        0,  205,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  554,  957,  958,  959,  282,  299,  961,  206,  967,
      282,  970,  971,  282,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
      969,    0,  969,  972,    0,  206,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  322,  322,  322,  322,  322,
      322,  322,  207,  302,  302,  302,  302,  302,  302,  302,

      968,  972,  968,  973,  974,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  996,  968,  996,    0,    0,  207,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  996,
      975,  973,  974,  302,  976,    0,  208,  304,  304,  304,
      304,  304,  304,  304,  304,  305,  305,  305,  305,  305,
      305,  305,    0, 1013,  977, 1013,  978,  305,  975, 1015,
        0, 1015,  976,  208,  209,  209,  209, 1037,  209, 1037,
        0,    0,  209,  209,  209,  209,  209,  209,  209,  210,
      210,  210,  977,  210,  978,  305,    0,  210,  210,  210,
      210,  210,  210,  210,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  323,  323,  323,  323,  323,  323,  323,
      211,  306,  306,  306,  306,  306,  306,  306,  306,  307,
      307,  307,  307,  307,  307,  307,  307,  309,  309,  309,
      309,  309,  309,  309,  309,    0,  979,  211,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  324,  324,  324,
      324,  324,  324,  324,  212,  308,  308,  308,  308,  308,
      308,  308,    0,  949,  979,  980,  949,  308,  310,  310,
      310,  310,  310,  310,  310,  310,    0,    0,  981,  982,
      949,  212,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  949,  983,  980,  949,  308,  984,    0,  213,  311,

      311,  311,  311,  311,  311,  311,  981,  982,  949,  985,
      986,  311,  312,  312,  312,  312,  312,  312,  312,  312,
      983, 1066,    0, 1066,  984,  213,  214,  214,  214,  214,
      214,  214,  214,  214,  214,    0,  987,  985,  986,  311,
      988,    0,  214,  313,  313,  313,  313,  313,  313,  313,
      313,  314,  314,  314,  314,  314,  314,  314, 1068,  989,
     1068,  991,  992,  314,  987, 1073,    0, 1073,  988,  214,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  325,
      325,  325,  325,  325,  325,  325,  215,  989,  991,  991,
      992,  314,  315,  315,  315,  315,  315,  315,  315,  315,

      316,  316,  316,  316,  316,  316,  316,  316,    0,    0,
      994,  995,    0,  215,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  326,  326,  326,  326,  326,  326,  326,
      216,  317,  317,  317,  317,  317,  317,  317,  994,  995,
      997,  998,  997,  317,  318,  318,  318,  318,  318,  318,
      318,  318, 1001,    0, 1001,  997,    0,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217, 1001,  999,  998,
     1000,  317, 1002,    0,  217,  319,  319,  319,  319,  319,
      319,  319,  319,  320,  320,  320,  320,  320,  320,  320,
        0, 1003, 1005, 1006, 1007,  320,  999, 1084, 1000, 1084,

     1002,  217,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  327,  327,  327,  327,  327,  327,  327,  218, 1003,
     1005, 1006, 1007,  320,  321,  321,  321,  321,  321,  321,
      321,  321,  328,  328,    0,  328,  328,  328,  328,  328,
      328,  328, 1085,    0, 1085,  218,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  329,  329,  329,  329,  329,
      329,  329,  219,  330,  330,  330,  330,  330,  330,  330,
      330,  331,  331,  331,  331,  331,  331,  331,    0, 1008,
     1009, 1011, 1016,  331, 1107, 1111, 1107, 1111,    0,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  350,

      350,  350,  350,  350,  350,  350,  220, 1008, 1009, 1011,
     1016,  331,  332,  332,  332,  332,  332,  332,  332,  332,
      333,  333,  333,  333,  333,  333,  333,  333, 1113, 1117,
     1113, 1117,    0,  220,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  351,  351,  351,  351,  351,  351,  351,
      221,  334,  334,  334,  334,  334,  334,  334, 1012, 1014,
     1012, 1014, 1018,  334,  335,  335,  335,  335,  335,  335,
      335,  335,    0, 1012, 1014,    0,    0,  221,  222,  222,
      222,  222,  222,  222,  222,  222,  222,    0, 1019, 1020,
     1018,  334, 1021,    0,  222,  336,  336,  336,  336,  336,

      336,  336,  336,  337,  337,  337,  337,  337,  337,  337,
        0, 1022, 1023, 1024, 1025,  337, 1019, 1020,    0,    0,
     1021,  222,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  352,  352,  352,  352,  352,  352,  352,  223, 1022,
     1023, 1024, 1025,  337,  338,  338,  338,  338,  338,  338,
      338,  338,  339,  339,  339,  339,  339,  339,  339,  339,
     1120, 1130, 1120, 1130,    0,  223,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  340,  340,  340,  340,  340,
      340,  340,  224,    0, 1133, 1026, 1133,  340,  341,  341,
      341,  341,  341,  341,  341,  341,  353,  353,  353,  353,

      353,  353,  353, 1027, 1029, 1135, 1146, 1135, 1146,  224,
      225,  225,  225, 1026,  225,  340,    0,    0,  225,  225,
      225,  225,  225,  225,  225,  226,  226,  226,    0,  226,
     1031, 1027, 1029,  226,  226,  226,  226,  226,  226,  226,
      227,  227,  227,    0,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  228,  228,  228, 1031,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      229,  229,  229,    0,  229, 1032,    0,    0,  229,  229,
      229,  229,  229,  229,  229,  230,  230,  230,    0,  230,
     1035,    0,    0,  230,  230,  230,  230,  230,  230,  230,

      231,  231,  231, 1032,  231,  231,  231,    0,  231,  231,
      231,  231,  231,  231,  231,  232,  232,  232, 1035,  232,
      232,  232,    0,  232,  232,  232,  232,  232,  232,  232,
      233,  233,  233,    0,  233,  233,  233,    0,  233,  233,
      233,  233,  233,  233,  233,  234,  234,  234,    0,  234,
      234,  234,    0,  234,  234,  234,  234,  234,  234,  234,
      235,  235,  235,    0,  235,  235,  235,    0,  235,  235,
      235,  235,  235,  235,  235,  236,  236,  236,    0,  236,
      236,  236,    0,  236,  236,  236,  236,  236,  236,  236,
      237,  237,  237,    0,  237,  237,  237,    0,  237,  237,

      237,  237,  237,  237,  237,  238,  238,  238,    0,  238,
      238,  238,    0,  238,  238,  238,  238,  238,  238,  238,
      239,  239,  239,    0,  239,  239,  239,    0,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,    0,  240,
      240,  240,    0,  240,  240,  240,  240,  240,  240,  240,
      241,  241,  241,    0,  241,  241,  241,    0,  241,  241,
      241,  241,  241,  241,  241,  242,  242,  242,    0,  242,
      242,  242,    0,  242,  242,  242,  242,  242,  242,  242,
      243,  243,  243,    0,  243,  243,  243,    0,  243,  243,
      243,  243,  243,  243,  243,  244,  244,  244,    0,  244,

      244,  244,    0,  244,  244,  244,  244,  244,  244,  244,
      245,  245,  245,    0,  245,  245,  245,    0,  245,  245,
      245,  245,  245,  245,  245,  246,  246,  246,    0,  246,
      246,  246,    0,  246,  246,  246,  246,  246,  246,  246,
      247,  247,  247,    0,  247,  247,  247,    0,  247,  247,
      247,  247,  247,  247,  247,  248,  248,  248,    0,  248,
      248,  248,    0,  248,  248,  248,  248,  248,  248,  248,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  359,
      359,  359,  359,  359,  359,  359,  249,  356,  356,  356,
      356,  356,  356,  356,  356,  357,  357,  357,  357,  357,

      357,  357,    0, 1039, 1040, 1045, 1046,  357, 1147, 1151,
     1147, 1151,    0,  249,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  360,  360,  360,  360,  360,  360,  360,
      250, 1039, 1040, 1045, 1046,  357,  358,  358,  358,  358,
      358,  358,  358,  358,  361,  361,  361,  361,  361,  361,
      361, 1172, 1175, 1172, 1175,    0,    0,  250,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  362,  362,  362,
      362,  362,  362,  362,  251,  363,  363,  363,  363,  363,
      363,  363,  364,  364,  364,  364,  364,  364,  364,  365,
      365,  365,  365,  365,  365,  365, 1176, 1176, 1176, 1176,

        0,  251,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  366,  366,  366,  366,  366,  366,  366,  252,  367,
      367,  367,  367,  367,  367,  367,  368,  368,  368,  368,
      368,  368,  368,  368,  370,  370,  370,  370,  370,  370,
      370,  370, 1185, 1047, 1185,  252,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  380,  380,  380,  380,  380,
      380,  380,  253,  369,  369,  369,  369,  369,  369,  369,
     1036, 1047, 1036, 1048,  956,  369,  371,  371,  371,  371,
      371,  371,  371,  371,    0, 1036,  956, 1030, 1049,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  254,    0,

     1030, 1048,  956,  369, 1050,    0,  254,  372,  372,  372,
      372,  372,  372,  372,  956, 1030, 1049,    0, 1051,  372,
      373,  373,  373,  373,  373,  373,  373,  373, 1030, 1033,
        0, 1033, 1050,  254,  255,  255,  255,  255,  255,  255,
      255,  255,  255,    0, 1033, 1028, 1051,  372, 1028,    0,
      255,  374,  374,  374,  374,  374,  374,  374,  374,  375,
      375,  375,  375,  375,  375,  375,    0, 1028, 1053, 1056,
     1057,  375, 1033, 1028,    0,    0, 1028,  255,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  381,  381,  381,
      381,  381,  381,  381,  256,    0, 1053, 1056, 1057,  375,

      376,  376,  376,  376,  376,  376,  376,  376,  377,  377,
      377,  377,  377,  377,  377,  377, 1058, 1190, 1191, 1190,
     1191,  256,  257,  257,  257, 1038,  257, 1038,    0,    0,
      257,  257,  257,  257,  257,  257,  257,  258,  258,  258,
     1038,  258,    0,    0, 1058,  258,  258,  258,  258,  258,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  412,  412,  412,  412,  412,  412,  412,  259,  378,
      378,  378,  378,  378,  378,  378, 1041, 1043, 1041, 1043,
     1059,  378,  379,  379,  379,  379,  379,  379,  379,  379,
        0, 1041, 1043,    0,    0,  259,  260,  260,  260,  260,

      260,  260,  260,  260,  260,    0, 1060, 1061, 1059,  378,
        0,    0,  260,  382,  382,  382,  382,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383, 1062, 1063,
     1064, 1062, 1069,  383, 1060, 1061, 1052,    0, 1052,  260,
      281,    0,  281,  384,  384,  384,  384,  384,  384,  384,
      384, 1052,    0,  281, 1070,  281, 1062, 1063, 1064, 1062,
     1069,  383,  385,  385,  385,  385,  385,  385,  385,  385,
      281,  386,  386,  386,  386,  386,  386,  386,    0,  281,
      281,  281, 1070,  386,  387,  387,  387,  387,  387,  387,
      387,  387, 1194, 1071, 1194, 1196, 1074, 1196,  281,  388,

      388,  388,  388,  388,  388,  388,  388,  281,  281,  281,
      283,  386,  549,  848, 1075, 1076,  283, 1077,    0,  283,
      848, 1071,  283,  549, 1074,  283,  283,  848,  283,    0,
      549, 1054,    0, 1054, 1055,  283, 1055, 1065,  283, 1065,
      549,  848, 1075, 1076,  283, 1077, 1054,  283,  848, 1055,
      283,  549, 1065,  283,  283,  848,  283,  288,  549, 1078,
     1067,  288, 1067, 1079, 1080,  288, 1083, 1086,  541,  288,
     1087,  288,  541,  541,  541, 1067, 1088,  288,  389,  389,
      389,  389,  389,  389,  389,  288, 1089, 1078, 1090,  288,
      389, 1079, 1080,  288, 1083, 1086,  541,  288, 1087,  288,

      541,  541,  541,    0, 1088,  288,  390,  390,  390,  390,
      390,  390,  390,  390, 1089, 1205, 1090, 1205,  389,  391,
      391,  391,  391,  391,  391,  391,  391,  392,  392,  392,
      392,  392,  392,  392,    0, 1091, 1092, 1095, 1097,  392,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  395,  395,
      395,  395,  395, 1091, 1092, 1095, 1097,  392,  395,  396,
      396,  396,  396,  396,  396,  396,  396,  397,  397,  397,
      397,  397,  397,  397,  397,  398,  398,  398,  398,  398,
      398,  398,    0, 1098, 1099, 1100,  395,  398,  399,  399,

      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  400,  400,  400,  401,  401,  401,  401,  401,  401,
      401, 1098, 1099, 1100, 1101,  398,  401,  402,  402,  402,
      402,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  403,  403,  404,  404,  404,  404,  404,  404,  404,
        0, 1102, 1101, 1103,  401,  404,  405,  405,  405,  405,
      405,  405,  405,  405,  406,  406,  406,  406,  406,  406,
      406,  406,  407,  407,  407,  407,  407,  407,  407, 1102,
     1104, 1103, 1105,  404,  407,  408,  408,  408,  408,  408,
      408,  408,  408,  409,  409,  409,  409,  409,  409,  409,

      409,  410,  410,  410,  410,  410,  410,  410, 1104, 1108,
     1105, 1114,  407,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  413,  413,  413,  413,  413,  413,  413,  414,
      414,  414,  414,  414,  414,  414, 1115, 1108, 1118, 1114,
     1121,  410,  415,  415,  415,  415,  415,  415,  415,  416,
      416,  416,  416,  416,  416,  416,  416,  417,  417,  417,
      417,  417,  417,  417, 1115, 1122, 1118, 1123, 1121,  417,
      418,  418,  418,  418,  418,  418,  418,  418,  420,  420,
      420,  420,  420,  420,  420,  420,  421,  421,  421,  421,
      421,  421,  421, 1122, 1124, 1123,    0,  417,  421,  422,

      422,  422,  422,  422,  422,  422,  422,  423,  423,  423,
      423,  423,  423,  423,  424,  424,  424,  424,  424,  424,
      424, 1207, 1124, 1207,  425,  425,  421,  425,  425,  425,
      425,  425,  425,  425,  426,  426,  426,  426,  426,  426,
      426,  427,  427,    0,  427,  427,  427,  427,  427,  427,
      427,  428,  428,  428,  428,  428,  428,  428,  429,  429,
        0,  429,  429,  429,  429,  429,  429,  429,  430,  430,
      430,  430,  430,  430,  430,  431,  431,    0,  431,  431,
      431,  431,  431,  431,  431,  432,  432,  432,  432,  432,
      432,  432,  433,  433,  433,  433,  433,  433,  433,  434,

      434,  434,  434,  434,  434,  434,  435,  435,  435,  435,
      435,  435,  435,  436,  436,  436,  436,  436,  436,  436,
      437,  437,  437,  437,  437,  437,  437,  438,  438,  438,
      438,  438,  438,  438,  439,  439,  439,  439,  439,  439,
      439,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446,  447,  447,  447,  447,  447,
      447,  447,  448,  448,  448,  448,  448,  448,  448,  448,
      449,  449,  449,  449,  449,  449,  449, 1125, 1126, 1127,
     1128, 1131,  449,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  451,  451,  451,  452,  452,

      452,  452,  452,  452,  452, 1125, 1126, 1127, 1128, 1131,
      449,  453,  453,  453,  453,  453,  453,  453,  456,  456,
      456,  456,  456,  456,  456,  457,  457,  457,  457,  457,
      457,  457,  460,  460,  460,  460,  460,  460,  460,  468,
      468,  468,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  470,
      470, 1136, 1137, 1138,    0,    0,  470,  471,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,  473,  473,  473,  473, 1136,
     1137, 1138,  474,  474,  470,  474,  474,  474,  474,  474,

      474,  474,  475,  475,  475,  475,  475,  475,  475,  476,
      476,    0,  476,  476,  476,  476,  476,  476,  476,  477,
      477,  477,  477,  477,  477,  477,  478,  478,    0,  478,
      478,  478,  478,  478,  478,  478,  479,  479,  479,  479,
      479,  479,  479,  480,  480,    0,  480,  480,  480,  480,
      480,  480,  480,  481,  481,  481,  481,  481,  481,  481,
      482,  482,    0,  482,  482,  482,  482,  482,  482,  482,
      483,  483,  483,  483,  483,  483,  483,  484,  484,    0,
      484,  484,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  485,  485,  486,  486,    0,  486,  486,  486,

      486,  486,  486,  486,  487,  487,  487,  487,  487,  487,
      487,  488,  488,    0,  488,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  490,  490,
        0,  490,  490,  490,  490,  490,  490,  490,  495,  495,
      495,  495,  495,  495,  495,  562,  562,  562,  562,  562,
      562,  562,  563,  563,  563,  563,  563,  563,  563,  564,
      564,  564,  564,  564,  564,  564,  565,  565,  565,  565,
      565,  565,  565,  566,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,  567,  567,  567,  568,  568,  568,
      568,  568,  568,  568,  569,  569,  569,  569,  569,  569,

      569, 1139, 1140, 1141,    0,    0,  569,  570,  570,  570,
      570,  570,  570,  570,  570,  571,  571,  571,  571,  571,
      571,  571, 1142, 1144, 1148, 1150, 1208,  571, 1208, 1139,
     1140, 1141,  572,  572,  569,  572,  572,  572,  572,  572,
      572,  572,  573,  573,  573,  573,  573,  573,  573, 1152,
     1142, 1144, 1148, 1150,  573,  571,  574,  574,  574,  574,
      574,  574,  574,  574,  575,  575,  575,  575,  575,  575,
      575, 1153, 1154, 1155,    0, 1158,  575, 1152,    0,    0,
      576,  576,  573,  576,  576,  576,  576,  576,  576,  576,
      577,  577,  577,  577,  577,  577,  577,    0, 1160, 1153,

     1154, 1155,  577, 1158,  575,  578,  578,  578,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  579,  579,
     1159, 1161,    0, 1159, 1164,  579, 1160,    0,  580,  580,
      577,  580,  580,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  581,  581, 1165,    0, 1166, 1159, 1161,
      581, 1159, 1164,  579,  582,  582,  582,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  583,  583, 1167,
        0, 1169, 1173, 1165,  583, 1166,  584,  584,  581,  584,
      584,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  585,  585, 1177, 1220,    0, 1220, 1167,  585, 1169,

     1173,    0,  583,  586,  586,  586,  586,  586,  586,  586,
      586,  587,  587,  587,  587,  587,  587,  587,    0, 1179,
     1180, 1177, 1157,  587,  588,  588,  585,  588,  588,  588,
      588,  588,  588,  588,  589,  589,  589,  589,  589,  589,
      589, 1157, 1082, 1182,    0, 1183,  589, 1179, 1180, 1082,
     1157,  587,  590,  590,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  591,  591, 1184, 1186,    0,
     1082, 1182,  591, 1183,  589,  592,  592, 1082,  592,  592,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      593,  593, 1187,    0, 1188, 1184, 1186,  593,    0,    0,

      591,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595, 1195,    0, 1197, 1198,
     1187,  595, 1188,  596,  596,  593,  596,  596,  596,  596,
      596,  596,  596,  597,  597,  597,  597,  597,  597,  597,
     1199, 1200,    0,    0, 1195,  597, 1197, 1198,    0,  595,
      598,  598,  598,  598,  598,  598,  598,  598,  599,  599,
      599,  599,  599,  599,  599,    0,    0, 1201, 1199, 1200,
      599,  600,  600,  597,  600,  600,  600,  600,  600,  600,
      600,  601,  601,  601,  601,  601,  601,  601,  602,  602,
      602,  602,  602,  602,  602, 1201,    0,    0,  599,  603,

      603,  603,  603,  603,  603,  603,  604,  604,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  605,  605,
      606,  606,    0,  606,  606,  606,  606,  606,  606,  606,
      607,  607,  607,  607,  607,  607,  607,  608,  608,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  609,
      609, 1202, 1203, 1204,    0,    0,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      611,  611, 1206, 1209, 1211, 1212, 1252,  611, 1252, 1202,
     1203, 1204,  612,  612,  609,  612,  612,  612,  612,  612,
      612,  612,  613,  613,  613,  613,  613,  613,  613, 1213,

     1206, 1209, 1211, 1212,  613,  611,  614,  614,  614,  614,
      614,  614,  614,  614,  615,  615,  615,  615,  615,  615,
      615, 1215, 1216, 1217,    0, 1218,  615, 1213,    0,    0,
      616,  616,  613,  616,  616,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  617,  617,    0, 1221, 1215,
     1216, 1217,  617, 1218,  615,  618,  618,  618,  618,  618,
      618,  618,  618,  619,  619,  619,  619,  619,  619,  619,
     1222, 1224,    0, 1225, 1226,  619, 1221,    0,  620,  620,
      617,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  621,  621, 1228,    0, 1229, 1222, 1224,

      621, 1225, 1226,  619,  622,  622,  622,  622,  622,  622,
      622,  622,  623,  623,  623,  623,  623,  623,  623, 1254,
        0, 1254, 1231, 1228,  623, 1229,  624,  624,  621,  624,
      624,  624,  624,  624,  624,  624,  633,  633,  633,  633,
      633,  633,  633,  634,  634,  634,  634,  634,  634,  634,
     1231,    0,  623,  635,  635,  635,  635,  635,  635,  635,
      636,  636,  636,  636,  636,  636,  636,  639,  639,  639,
      639,  639,  639,  639, 1232, 1234, 1235,    0,    0,  639,
      640,  640,  640,  640,  640,  640,  640,  640,  641,  641,
      641,  641,  641,  641,  641, 1236, 1241, 1243, 1244, 1249,

      641,    0, 1232, 1234, 1235,  642,  642,  639,  642,  642,
      642,  642,  642,  642,  642,  643,  643,  643,  643,  643,
      643,  643,    0, 1236, 1241, 1243, 1244, 1249,  641,  644,
      644,  644,  644,  644,  644,  644,  645,  645,  645,  645,
      645,  645,  645,  646,  646,  646,  646,  646,  646,  646,
      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  649,  649,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  650,  650,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
      652,  652, 1250, 1251, 1259,    0,    0,  652,  653,  653,

      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654, 1262, 1263, 1262, 1264, 1273,  654, 1273,
     1250, 1251, 1259,  655,  655,  652,  655,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
     1265, 1266, 1263,    0, 1264,  656,  654,  657,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658, 1267, 1268, 1270,    0, 1271,  658, 1265, 1266,
        0,  659,  659,  656,  659,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660,    0, 1272,
     1267, 1268, 1270,  660, 1271,  658,  661,  661,  661,  661,

      661,  661,  661,  661,  662,  662,  662,  662,  662,  662,
      662, 1275, 1277, 1275, 1277, 1278,  662, 1272,    0,  663,
      663,  660,  663,  663,  663,  663,  663,  663,  663,  664,
      664,  664,  664,  664,  664,  664, 1279, 1298, 1282, 1298,
     1302,  664, 1302, 1278,  662,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
     1321,    0, 1321, 1287, 1279,  666, 1282,  667,  667,  664,
      667,  667,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  668,  668,  668,  669,  669,  669,  669,  669,  669,
      669, 1287,    0,  666,  670,  670,  670,  670,  670,  670,

      670, 1289, 1290, 1291,    0,    0,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672, 1292, 1293, 1294, 1295, 1323,  672, 1323, 1289,
     1290, 1291,  673,  673,  670,  673,  673,  673,  673,  673,
      673,  673,  674,  674,  674,  674,  674,  674,  674, 1296,
     1292, 1293, 1294, 1295,  674,  672,  675,  675,  675,  675,
      675,  675,  675,  675,  676,  676,  676,  676,  676,  676,
      676, 1299, 1300, 1303,    0, 1304,  676, 1296,    0,    0,
      677,  677,  674,  677,  677,  677,  677,  677,  677,  677,
      678,  678,  678,  678,  678,  678,  678,    0, 1305, 1299,

     1300, 1303,  678, 1304,  676,  679,  679,  679,  679,  679,
      679,  679,  679,  680,  680,  680,  680,  680,  680,  680,
     1307, 1309,    0, 1310, 1311,  680, 1305,    0,  681,  681,
      678,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682, 1314,    0, 1315, 1307, 1309,
      682, 1310, 1311,  680,  683,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,  684,  684,  684,  684, 1316,
     1325, 1328, 1325, 1314,  684, 1315,  685,  685,  682,  685,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  686, 1327, 1329, 1327,    0, 1316,  686, 1328,

        0,    0,  684,  687,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688, 1333, 1330,
     1333,    0, 1329,  688,  689,  689,  686,  689,  689,  689,
      689,  689,  689,  689,  690,  690,  690,  690,  690,  690,
      690, 1335, 1109, 1335,    0, 1340,  690, 1330, 1337, 1109,
     1337,  688,  691,  691,  691,  691,  691,  691,  691,  691,
      692,  692,  692,  692,  692,  692,  692, 1339, 1343, 1339,
     1109, 1352,  692, 1340,  690,  693,  693, 1109,  693,  693,
      693,  693,  693,  693,  693,  694,  694,  694,  694,  694,
      694,  694, 1345, 1347, 1345, 1347, 1343,  694,    0, 1352,

      692,  695,  695,  695,  695,  695,  695,  695,  695,  696,
      696,  696,  696,  696,  696,  696, 1349, 1351, 1349, 1351,
     1354,  696, 1354,  697,  697,  694,  697,  697,  697,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
     1355, 1356, 1355,    0, 1366,  698, 1366,    0,    0,  696,
      699,  699,  699,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700,    0, 1357, 1358,    0, 1356,
      700,  701,  701,  698,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702, 1359, 1306,
     1360,    0, 1362,  702, 1357, 1358, 1306,    0,  700,  703,

      703,  703,  703,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704, 1363, 1364, 1359, 1306, 1360,  704,
     1362,  702,  705,  705, 1306,  705,  705,  705,  705,  705,
      705,  705,  706,  706,  706,  706,  706,  706,  706, 1365,
        0, 1369, 1363, 1364,  706,    0,    0,  704,  707,  707,
      707,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  708,  708, 1367,    0, 1367, 1370, 1365,  708, 1369,
      709,  709,  706,  709,  709,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711, 1370,    0,  708,  712,  712,  712,

      712,  712,  712,  712,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714, 1371, 1372,
     1374,    0, 1374,  714,  715,  715,  715,  715,  715,  715,
      715,  715,  716,  716,  716,  716,  716,  716,  716, 1376,
     1378, 1376, 1378, 1380,  716, 1380, 1371, 1372,    0,  717,
      717,  714,  717,  717,  717,  717,  717,  717,  717,  719,
      719,  719,  719,  719,  719,  719, 1381, 1383, 1384, 1383,
        0,  719,  716,  720,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721, 1385, 1386,
     1387,    0,    0,  721, 1381,    0, 1384,  722,  722,  719,

      722,  722,  722,  722,  722,  722,  722,  723,  723,  723,
      723,  723,  723,  723,    0,    0, 1385, 1386, 1387,  724,
      724,  721,  724,  724,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  725,  725,  725,  726,  726,    0,  726,
      726,  726,  726,  726,  726,  726,  727,  727,  727,  727,
      727,  727,  727,  728,  728,    0,  728,  728,  728,  728,
      728,  728,  728,  729,  729,  729,  729,  729,  729,  729,
      730,  730,    0,  730,  730,  730,  730,  730,  730,  730,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732,  733,  733,  733,  733,  733,  733,

      733,  734,  734,  734,  734,  734,  734,  734,  735,  735,
      735,  735,  735,  735,  735,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  737,  737,  738,
      738,  738,  738,  738,  738,  738,  739,  739,  739,  739,
      739,  739,  739,  745,  745,  745,  745,  745,  745,  745,
      746,  746,  746,  746,  746,  746,  746,  747,  747,  747,
      747,  747,  747,  747,  748,  748,  748,  748,  748,  748,
      748, 1389, 1390, 1391,    0,    0,  748,  749,  749,  749,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,
      750,  750, 1392, 1393, 1394, 1396, 1395,  750, 1395, 1389,

     1390, 1391,  751,  751,  748,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752,    0,
     1392, 1393, 1394, 1396,    0,  750,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
      757,  757,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  758,  758,  761,  761,  761,  761,  761,  761,
      761,  769,  769,  769,  769,  769,  769,  769,  770,  770,
      770,  770,  770,  770,  770, 1397, 1398, 1399,    0,    0,
      770,  771,  771,  771,  771,  771,  771,  771,  771,  772,
      772,  772,  772,  772,  772,  772, 1400, 1401, 1404,    0,

     1404,  772,    0, 1397, 1398, 1399,  773,  773,  770,  773,
      773,  773,  773,  773,  773,  773,  774,  774,  774,  774,
      774,  774,  774,    0, 1400, 1401,    0,  775,  775,  772,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  777,  777,    0,  777,  777,  777,
      777,  777,  777,  777,  778,  778,  778,  778,  778,  778,
      778,  779,  779,    0,  779,  779,  779,  779,  779,  779,
      779,  780,  780,  780,  780,  780,  780,  780,  781,  781,
        0,  781,  781,  781,  781,  781,  781,  781,  782,  782,
      782,  782,  782,  782,  782,  783,  783,    0,  783,  783,

      783,  783,  783,  783,  783,  784,  784,  784,  784,  784,
      784,  784,  785,  785,    0,  785,  785,  785,  785,  785,
      785,  785,  786,  786,  786,  786,  786,  786,  786,  787,
      787,    0,  787,  787,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  788,  788,  789,  789,    0,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  791,  791,    0,  791,  791,  791,  791,
      791,  791,  791,  792,  792,  792,  792,  792,  792,  792,
      797,  797,  797,  797,  797,  797,  797,  879,  879,  879,
      879,  879,  879,  879,  880,  880,  880,  880,  880,  880,

      880,  881,  881,  881,  881,  881,  881,  881,  882,  882,
      882,  882,  882,  882,  882,  883,  883,  883,  883,  883,
      883,  883,  884,  884,  884,  884,  884,  884,  884,  885,
      885,  885,  885,  885,  885,  885,  886,  886,  886,  886,
      886,  886,  886,  887,  887,  887,  887,  887,  887,  887,
      888,  888,  888,  888,  888,  888,  888,  889,  889,  889,
      889,  889,  889,  889,  890,  890,  890,  890,  890,  890,
      890,  891,  891,  891,  891,  891,  891,  891,  892,  892,
      892,  892,  892,  892,  892,  893,  893,  893,  893,  893,
      893,  893,  894,  894,  894,  894,  894,  894,  894,  895,

      895,  895,  895,  895,  895,  895,  896,  896,  896,  896,
      896,  896,  896,  897,  897,  897,  897,  897,  897,  897,
      898,  898,  898,  898,  898,  898,  898,  899,  899,  899,
      899,  899,  899,  899,  900,  900,  900,  900,  900,  900,
      900,  901,  901,  901,  901,  901,  901,  901,  902,  902,
      902,  902,  902,  902,  902,  903,  903,  903,  903,  903,
      903,  903,  904,  904,  904,  904,  904,  904,  904,  905,
      905,  905,  905,  905,  905,  905,  906,  906,  906,  906,
      906,  906,  906,  907,  907,  907,  907,  907,  907,  907,
      908,  908,  908,  908,  908,  908,  908,  909,  909,  909,

      909,  909,  909,  909,  910,  910,  910,  910,  910,  910,
      910,  911,  911,  911,  911,  911,  911,  911,  912,  912,
      912,  912,  912,  912,  912,  913,  913,  913,  913,  913,
      913,  913,  914,  914,  914,  914,  914,  914,  914,  915,
      915,  915,  915,  915,  915,  915,  916,  916,  916,  916,
      916,  916,  916,  917,  917,  917,  917,  917,  917,  917,
      918,  918,  918,  918,  918,  918,  918,  919,  919,  919,
      919,  919,  919,  919,  920,  920,  920,  920,  920,  920,
      920,  921,  921,  921,  921,  921,  921,  921,  922,  922,
      922,  922,  922,  922,  922,  923,  923,  923,  923,  923,

      923,  923,  924,  924,  924,  924,  924,  924,  924,  925,
      925,  925,  925,  925,  925,  925,  926,  926,  926,  926,
      926,  926,  926,  927,  927,  927,  927,  927,  927,  927,
      928,  928,  928,  928,  928,  928,  928,  929,  929,  929,
      929,  929,  929,  929,  930,  930,  930,  930,  930,  930,
      930,  931,  931,  931,  931,  931,  931,  931,  932,  932,
      932,  932,  932,  932,  932,  933,  933,  933,  933,  933,
      933,  933,  934,  934,  934,  934,  934,  934,  934,  935,
      935,  935,  935,  935,  935,  935,  936,  936,  936,  936,
      936,  936,  936,  937,  937,  937,  937,  937,  937,  937,

      938,  938,  938,  938,  938,  938,  938,  939,  939,  939,
      939,  939,  939,  939,  940,  940,  940,  940,  940,  940,
      940, 1072, 1094, 1072, 1094, 1096, 1106, 1096, 1106, 1110,
     1112, 1110, 1112, 1116,    0, 1116, 1072, 1094,    0,    0,
     1096, 1106,    0, 1405, 1110, 1112,    0, 1119, 1116, 1119,
     1129, 1132, 1129, 1132, 1134,    0, 1134, 1143, 1145, 1170,
     1145, 1406, 1119, 1407,    0, 1129, 1132, 1143, 1170, 1134,
     1163, 1405, 1408, 1145, 1163, 1163, 1163, 1168, 1171,    0,
     1171, 1168, 1168, 1168, 1174, 1143, 1174, 1170, 1412, 1406,
     1412, 1407, 1189, 1171, 1189, 1143, 1170,    0, 1163, 1174,

     1408,    0, 1163, 1163, 1163, 1168, 1178, 1189, 1178, 1168,
     1168, 1168, 1192, 1193, 1192, 1193, 1178, 1219, 1223, 1219,
     1223, 1178,    0, 1237, 1233, 1237, 1230, 1192, 1193, 1230,
     1230,    0, 1219, 1223, 1233,    0, 1409, 1230, 1237,    0,
     1238, 1239, 1238, 1239, 1240, 1245, 1240, 1245, 1246, 1178,
     1246, 1247, 1233, 1247, 1230, 1238, 1239, 1230, 1230, 1240,
     1245, 1410, 1233, 1246, 1409, 1230, 1247, 1248, 1255, 1248,
     1255, 1256, 1257, 1256, 1257, 1258, 1260, 1258, 1260, 1261,
        0, 1261, 1248, 1255,    0, 1413, 1256, 1257,    0, 1410,
     1258, 1260,    0, 1274, 1261, 1274, 1276, 1283, 1276, 1283,

     1284, 1285, 1284, 1285, 1286, 1288, 1286, 1288, 1274,    0,
     1312, 1276, 1283, 1413,    0, 1284, 1285,    0, 1414, 1286,
     1288, 1301, 1308, 1301, 1308, 1313, 1312, 1313, 1317, 1318,
     1317, 1318, 1308, 1319, 1388, 1319, 1301, 1308, 1312, 1417,
     1313, 1417, 1388, 1317, 1318, 1320, 1414, 1320, 1319, 1322,
     1419, 1322, 1419, 1324, 1312, 1324, 1326, 1331, 1326, 1331,
     1320, 1332, 1388, 1332, 1322, 1308, 1415, 1334, 1324, 1334,
     1388, 1326, 1331, 1336, 1426, 1336, 1332, 1338, 1341, 1338,
     1341, 1342, 1334, 1342, 1344, 1346, 1344, 1346, 1336, 1348,
     1427, 1348, 1338, 1341, 1415, 1350, 1342, 1350, 1428, 1344,

     1346, 1353, 1426, 1353, 1348, 1361, 1368, 1361, 1368, 1373,
     1350, 1373, 1375, 1377, 1375, 1377, 1353, 1379, 1427, 1379,
     1361, 1368,    0, 1382, 1373, 1382, 1428, 1375, 1377, 1402,
        0, 1402, 1379,    0, 1403, 1411, 1403, 1411, 1382, 1416,
     1418, 1416, 1418, 1420, 1402, 1420,    0,    0, 1361, 1403,
     1411, 1421,    0, 1421, 1416, 1418,    0, 1422, 1420, 1422,
     1423, 1424, 1423, 1424, 1425, 1429, 1425, 1429, 1430, 1431,
     1430, 1431, 1432, 1433, 1432, 1433, 1434, 1435, 1434, 1435,
     1429, 1436, 1437, 1436, 1437, 1438, 1439, 1438, 1439, 1440,
     1445, 1441, 1435, 1441, 1447, 1442, 1436, 1442, 1450, 1443,

     1438, 1443, 1444, 1446, 1444, 1446, 1451, 1453, 1452, 1453,
     1452, 1454, 1455, 1456, 1457, 1458,    0, 1440, 1445, 1460,
     1462, 1460, 1447, 1452, 1463, 1465, 1450, 1465, 1469, 1459,
     1461, 1459, 1461, 1466, 1451, 1466, 1467, 1471, 1467, 1454,
     1455, 1456, 1457, 1458, 1459, 1461, 1472, 1468, 1462, 1468,
     1474, 1470, 1463, 1470, 1475, 1476, 1469, 1477, 1478, 1479,
     1480, 1481, 1482, 1485, 1486, 1471, 1487, 1488, 1490, 1489,
     1490, 1489, 1492, 1491, 1472, 1491, 1493, 1494, 1474, 1495,
     1496, 1497, 1475, 1476, 1489, 1477, 1478, 1479, 1480, 1481,
     1482, 1485, 1486, 1499, 1487, 1488, 1498, 1500, 1498, 1501,

     1492, 1502, 1505, 1502, 1493, 1494, 1506, 1495, 1496, 1497,
     1503, 1504, 1503, 1504, 1507, 1508, 1509, 1508, 1509, 1513,
     1510, 1499, 1510, 1514, 1511, 1500, 1511, 1501, 1515, 1516,
     1505, 1509, 1517, 1512, 1506, 1512, 1518, 1519, 1520, 1522,
     1520, 1521, 1507, 1523, 1524, 1525, 1524, 1513, 1526, 1521,
     1526, 1514, 1528, 1527, 1528, 1527, 1515, 1516, 1529, 1524,
     1517, 1530, 1531, 1533, 1518, 1519, 1536, 1522, 1527, 1521,
     1532, 1523, 1532, 1525, 1535, 1539, 1540, 1521, 1534, 1535,
     1534, 1537, 1538, 1537, 1538, 1532, 1529, 1542, 1535, 1530,
     1531, 1533, 1543, 1534, 1536, 1545, 1537, 1538, 1541, 1546,

     1541, 1547, 1535, 1539, 1540, 1548, 1549, 1535, 1545, 1550,
     1551, 1552, 1551, 1541, 1553, 1542, 1535, 1554, 1555, 1556,
     1543, 1558, 1559, 1545, 1560, 1561, 1557, 1546, 1557, 1547,
     1562, 1563, 1565, 1548, 1549, 1566, 1545, 1550, 1564, 1552,
     1564, 1557, 1553, 1568, 1569, 1554, 1555, 1556, 1571, 1558,
     1559, 1572, 1560, 1561, 1567, 1570, 1567, 1570, 1562, 1563,
     1565, 1573, 1574, 1566, 1578, 1575, 1576, 1575, 1576, 1567,
     1570, 1568, 1569, 1577, 1580, 1577, 1571, 1581, 1582, 1572,
     1575, 1576, 1579, 1583, 1579, 1583, 1584, 1585, 1584, 1573,
     1574, 1588, 1578, 1586, 1587, 1586, 1587, 1589, 1583, 1591,

     1590, 1591, 1580, 1590, 1596, 1581, 1582, 1592, 1586, 1592,
     1593, 1594, 1593, 1594, 1591, 1585, 1595, 1597, 1595, 1588,
     1600, 1598, 1592, 1598, 1602, 1589, 1594, 1599, 1590, 1599,
     1603, 1590, 1596, 1604, 1605, 1601, 1598, 1601, 1606, 1607,
     1608, 1609, 1610, 1611, 1612, 1597, 1613, 1614, 1600, 1615,
     1601, 1615, 1602, 1616, 1617, 1616, 1618, 1620, 1603, 1621,
     1623, 1604, 1605, 1619, 1615, 1619, 1606, 1607, 1608, 1609,
     1610, 1611, 1612, 1627, 1613, 1614, 1628, 1622, 1619, 1622,
        0, 1625, 1617, 1625, 1618, 1620,    0, 1621, 1623, 1626,
        0, 1626, 1622, 1629,    0, 1629, 1625, 1630, 1631, 1630,

     1631, 1627, 1639, 1632, 1628, 1632, 1640, 1633, 1629, 1633,
     1634,    0, 1634, 1631, 1635, 1636, 1635, 1636, 1632, 1637,
     1641, 1637, 1633, 1643, 1638, 1634, 1638, 1646, 1647, 1635,
     1639, 1642, 1648, 1642, 1640, 1644, 1653, 1644, 1649, 1638,
     1649, 1631, 1650, 1651, 1650, 1651, 1654, 1652, 1641, 1652,
     1655, 1643, 1655, 1649, 1656, 1646, 1647, 1657, 1659, 1657,
     1648, 1658, 1660, 1658, 1653, 1661, 1662, 1665, 1664, 1666,
     1664, 1668, 1657, 1667, 1654, 1667, 1669, 1670, 1671, 1672,
     1673, 1672, 1656, 1664, 1674, 1675, 1659, 1675, 1667, 1676,
     1660, 1676, 1677, 1661, 1662, 1665, 1678, 1666, 1681, 1668,

     1675, 1679, 1682, 1679, 1669, 1670, 1671, 1680, 1673, 1680,
     1684, 1683, 1674, 1683, 1685, 1686, 1679, 1686, 1689, 1687,
     1677, 1687,    0, 1688, 1678, 1688, 1681,    0,    0, 1690,
     1682, 1690,    0, 1691, 1687, 1691, 1699, 1692, 1684, 1692,
        0, 1693, 1685, 1693, 1690, 1694, 1689, 1694, 1695, 1696,
     1695, 1696, 1692, 1697, 1698, 1697, 1698, 1700, 1701, 1702,
     1694, 1702, 1703, 1704, 1699, 1705, 1706, 1707, 1697, 1707,
     1708, 1709, 1712, 1710, 1702, 1710, 1711, 1713, 1711, 1714,
     1715, 1716, 1716, 1716, 1719, 1700, 1701, 1717, 1710, 1717,
     1703, 1704, 1720, 1705, 1706, 1718, 1724, 1718, 1708, 1709,

     1712, 1721, 1717, 1721, 1722, 1713, 1722, 1714, 1715, 1716,
     1716, 1716, 1719, 1723, 1725, 1723, 1721, 1726, 1727, 1728,
     1720, 1729,    0, 1729, 1724, 1730,    0, 1730, 1723, 1731,
     1732, 1731, 1732, 1734, 1735, 1736, 1737, 1738, 1737, 1733,
     1730, 1733, 1725, 1745, 1731, 1726, 1727, 1728,    0, 1733,
     1733, 1739, 1748, 1739, 1733, 1740, 1741, 1740, 1741, 1749,
        0, 1734, 1735, 1736, 1742, 1738, 1742, 1743, 1744, 1743,
     1744, 1745, 1731, 1746, 1747, 1746, 1747, 1750, 1751, 1752,
     1748, 1752, 1743, 1744, 1754, 1756, 1754, 1749, 1746, 1755,
     1757, 1755, 1758, 1759, 1752, 1760, 1761, 1760, 1761, 1754,

     1762, 1763, 1762, 1763, 1765, 1750, 1751, 1764, 1771, 1764,
     1760, 1761, 1766, 1756, 1766, 1762, 1772, 1768, 1757, 1768,
     1758, 1759, 1764, 1767, 1769, 1767, 1769, 1773, 1774, 1775,
     1774, 1775, 1765, 1776, 1783, 1776, 1771,    0, 1767, 1769,
     1777,    0, 1777, 1774, 1772, 1778, 1784, 1778, 1776, 1779,
     1780, 1779, 1780, 1785, 1781, 1773, 1781, 1782, 1786, 1782,
     1791, 1787, 1783, 1787, 1779, 1780, 1788, 1793, 1788, 1781,
     1789, 1795, 1789, 1778, 1784, 1778, 1787, 1790, 1792, 1790,
     1792, 1785, 1796, 1799, 1801, 1789, 1786, 1797, 1791, 1797,
     1798, 1800, 1798, 1800, 1802, 1793, 1803, 1804, 1805, 1795,

     1805, 1806, 1797, 1806, 1807, 1808, 1807, 1808,    0,    0,
     1796, 1799, 1801, 1805, 1809, 1810, 1809, 1810, 1811, 1807,
     1811, 1812, 1802, 1812, 1803, 1804, 1813, 1823, 1813, 1809,
     1814, 1824, 1814, 1811, 1815, 1816, 1815, 1816, 1817, 1817,
     1817, 1813, 1818, 1819, 1818, 1819, 1821,    0, 1821, 1815,
     1822, 1826, 1822, 1826, 1825, 1823, 1825, 1818, 1819, 1824,
     1827, 1828, 1827, 1828, 1830, 1833, 1817, 1817, 1817, 1825,
     1829, 1831, 1829, 1831, 1832, 1827, 1832, 1834, 1835, 1834,
     1835, 1836, 1837, 1836, 1838, 1839, 1831, 1840, 1841, 1832,
     1841, 1842, 1830, 1833, 1844, 1846, 1836,    0, 1847, 1843,

     1847, 1843, 1848, 1849, 1848, 1849, 1850,    0, 1850, 1851,
     1837, 1851, 1838, 1839, 1843, 1840, 1852,    0, 1852, 1842,
        0, 1862, 1844, 1846, 1851, 1853, 1854, 1853, 1854, 1855,
     1856, 1855, 1856, 1857, 1858, 1857, 1858, 1859, 1860, 1859,
     1860, 1854, 1863, 1861, 1855, 1856, 1861, 1866, 1857, 1862,
     1871, 1864, 1859, 1864, 1865, 1875, 1865, 1867, 1868, 1867,
     1868, 1869, 1870, 1869, 1870, 1872, 1873, 1872, 1873, 1876,
     1863, 1861, 1867, 1877, 1861, 1866, 1869, 1874, 1871, 1874,
     1872, 1878, 1881, 1875, 1879, 1880, 1879, 1880, 1883, 1882,
        0, 1884, 1874, 1884, 1882,    0, 1885, 1876, 1885, 1879,

        0, 1877, 1882, 1886, 1887, 1886, 1887, 1893, 1894, 1878,
     1881, 1885, 1888, 1889, 1888, 1889, 1883, 1882, 1890, 1887,
     1890, 1891, 1882, 1891, 1892, 1895, 1892, 1896, 1889, 1897,
     1882, 1898, 1899, 1898, 1899, 1893, 1894, 1900, 1901, 1902,
     1901, 1902, 1903, 1904, 1903, 1905, 1906, 1905, 1907, 1908,
     1910, 1908, 1911, 1895, 1902, 1896, 1912, 1897, 1917, 1914,
     1905, 1914, 1915, 1918, 1915, 1900, 1916, 1919, 1916, 1919,
     1920, 1904, 1924, 1921, 1906, 1921, 1907, 1922, 1910, 1922,
     1911, 1923, 1919, 1923, 1912, 1928, 1917, 1925, 1921, 1925,
     1929, 1918, 1922, 1926, 1927, 1926, 1927, 1930, 1920, 1931,

     1924, 1932, 1925, 1933, 1933, 1933, 1934, 1935, 1936, 1927,
     1936, 1943, 1937, 1928, 1937, 1938,    0, 1938, 1929, 1940,
     1947, 1940, 1939, 1936, 1939, 1930, 1941, 1931, 1941, 1932,
     1938, 1933, 1933, 1933, 1934, 1935, 1942, 1939, 1942, 1943,
     1944, 1941, 1944, 1945, 1946, 1945, 1946, 1948, 1947, 1949,
     1950, 1951, 1952, 1953, 1952, 1953, 1955, 1954, 1945, 1954,
     1956, 1957, 1959, 1957, 1959, 1964, 1965, 1952, 1953, 1966,
     1967, 1958, 1954, 1958, 1960, 1948, 1960, 1949, 1950, 1951,
     1961, 1962, 1961, 1962, 1955, 1963, 1958, 1963, 1956, 1968,
     1969, 1975, 1969, 1964, 1965, 1976, 1962, 1966, 1967, 1970,

     1971, 1970, 1971, 1980, 1972, 1969, 1972, 1973, 1974, 1973,
     1974, 1977, 1978, 1977, 1978, 1971, 1979, 1968, 1979, 1975,
     1981, 1983, 1973, 1976, 1984, 1988, 1985, 1978, 1985, 1991,
     1986, 1980, 1986, 1987, 1992, 1987, 1989, 1990, 1989, 1990,
     1993, 1994, 1995, 1996, 1997, 1998, 1997, 1998, 1981, 1983,
     1999, 1989, 1984, 1988, 2000, 2001, 2002, 1991, 2003, 1997,
     2004, 2005, 1992, 2005, 2006, 2007, 2006, 2007, 1993, 1994,
     1995, 1996, 2008, 2010, 2008, 2007, 2011,    0, 1999, 2006,
     2007,    0, 2000, 2001, 2002,    0, 2003, 2008, 2004, 2013,
     2012, 2013, 2012, 2014, 2015, 2014, 2015, 2016, 2017, 2016,

     2017, 2010,    0,    0, 2011, 2012,    0,    0, 2014, 2015,
     2018,    0, 2018, 2017, 2019, 2019, 2019, 2020, 2021, 2020,
     2021, 2022, 2023, 2022, 2023, 2024, 2025, 2024, 2025, 2026,
        0, 2026, 2020, 2021, 2027,    0, 2027, 2023, 2028, 2029,
     2028, 2029, 2019, 2019, 2019, 2030, 2031, 2030, 2031, 2027,
     2032,    0, 2032, 2028, 2029, 2033, 2034, 2033, 2034, 2035,
     2030, 2035, 2036,    0, 2036, 2032, 2037, 2038, 2037, 2038,
     2039, 2040, 2039, 2040, 2035, 2041, 2042, 2041, 2042,    0,
     2043, 2037, 2043,    0, 2044, 2039, 2044, 2045,    0, 2045,
     2047, 2047, 2047, 2047, 2047, 2048, 2048, 2048, 2048, 2048,

     2049, 2049, 2049, 2049, 2049, 2050, 2050, 2050, 2050, 2050,
     2051, 2051, 2051, 2051, 2051, 2052, 2052, 2052, 2052, 2052,
     2053, 2053, 2053, 2053, 2053, 2054, 2054, 2054, 2054, 2054,
     2055, 2055, 2055, 2055, 2055, 2056, 2056, 2056, 2056, 2056,
     2057, 2057, 2057, 2057, 2057, 2058, 2058, 2058, 2058, 2058,
     2059, 2059, 2059, 2059, 2059, 2060, 2060, 2060, 2060, 2060,
     2061, 2061, 2061, 2061, 2061, 2062, 2062, 2062, 2062, 2062,
     2063, 2063, 2063, 2063, 2063, 2064, 2064, 2064, 2064, 2064,
     2065, 2065, 2065, 2065, 2065, 2066, 2066, 2066, 2066, 2066,
     2067, 2067, 2067, 2067, 2067, 2068, 2068, 2068, 2068, 2068,

     2069, 2069, 2069, 2069, 2069, 2070, 2070, 2070, 2070, 2070,
     2071, 2071, 2071, 2071, 2071, 2072, 2072, 2072, 2072, 2072,
     2073, 2073, 2073, 2073, 2073, 2074, 2074, 2074, 2074, 2074,
     2075, 2075, 2075, 2075, 2075, 2076, 2076, 2076, 2076, 2076,
     2077, 2077, 2077, 2077, 2077, 2078, 2078, 2078, 2078, 2078,
     2079, 2079, 2079, 2079, 2079, 2080, 2080, 2080, 2080, 2080,
     2081, 2081, 2081, 2081, 2081, 2082, 2082, 2083, 2083, 2084,
     2084, 2085, 2085, 2086, 2086, 2087, 2087, 2088, 2088, 2089,
     2089, 2091, 2091, 2092, 2092, 2093, 2093, 2094, 2094, 2095,
     2095, 2096, 2096, 2097, 2097, 2099, 2099, 2114, 2114,    0,

     2114, 2114, 2115,    0,    0, 2115, 2115, 2116, 2116, 2117,
     2117, 2118, 2118, 2119, 2119, 2120, 2120, 2121, 2121, 2122,
     2122, 2123, 2123, 2125, 2125, 2126, 2126, 2127, 2127, 2128,
     2128, 2129, 2129, 2130, 2130, 2131, 2131, 2133, 2133, 2148,
     2148,    0, 2148, 2148, 2149,    0,    0, 2149, 2149, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 22 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "cvc_utils.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}



































































































































#line 3637 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define SOURCEID 16
#define SOURCEID2 17
#define GAUGEID 18
#define GAUGEID2 19
#define GAUGESTEP 20
#define NNSAVE 21
#define FFORMAT 22
#define BCT 23
#define BCX 24
#define BCY 25
#define BCZ 26
#define PREFIX 27
#define PREFIX2 28
#define PREFIX3 29
#define SEQPREFIX 30
#define SEQPREFIX2 31
#define GAUGEPREFIX 32
#define OUTPREFIX 33
#define PATHPREFIX 34
#define RESUME 35
#define SUBTRACT 36
#define SOURCELOC 37
#define SSEED 38
#define NOISETYPE 39
#define SRCTYPE 40
#define SPREC 41
#define MAXITER 42
#define SOURCEIDSTEP 43
#define HPEMIN 44
#define HPEMAX 45
#define HPEORD 46
#define CUTDIRT 47
#define CUTDIRX 48
#define CUTDIRY 49
#define CUTDIRZ 50
#define CUTANG 51
#define CUTRAD 52
#define RMIN 53
#define RMAX 54
#define AVGTT 55
#define AVGLL 56
#define MODEL_DCOEFFRE 57
#define MODEL_DCOEFFIM 58
#define MODEL_MRHO 59
#define FTRMAX1 60
#define FTRMAX2 61
#define FTRMAX3 62
#define FTRMAX4 63
#define PROPNORMSQR 64
#define QHATSQRMIN 65
#define QHATSQRMAX 66
#define NLONG 67
#define NAPE 68
#define NJACOBI 69
#define NHYP 70
#define ALPHAAPE 71
#define ALPHAHYP 72
#define KAPPAJACOBI 73
#define SRCTIMESLICE 74
#define SEQSRCTIMESLICE 75
#define SEQSRCLOCATIONX 76
#define SEQSRCLOCATIONY 77
#define SEQSRCLOCATIONZ 78
#define SEQSRCGAMMAID 79
#define MMSNOMASSES 80
#define NOLIGHTMASSES 81
#define NOSTRANGEMASSES 82
#define NOTPROCS 83
#define NOXPROCS 84
#define NOYPROCS 85
#define NOZPROCS 86
#define LOCLOC 87
#define LOCSME 88
#define SMELOC 89
#define SMESME 90
#define ROTATE 91
#define PROPPOS 92
#define GPUDEVICENUMBER 93
#define GPUPERNODE 94
#define RELDELTA 95
#define COHSRC 96
#define COHSRCBASE 97
#define COHSRCDELTA 98
#define GAUGEFILEFORMAT 99
#define RNGFILE 100
#define SRCINDEX 101
#define PROPBCTYPE 102
#define PROPGAMMA 103
#define PROPPREC 104
#define WRITESRC 105
#define READSRC 106
#define WRITEPROP 107
#define READPROP 108
#define READSEQPROP 109
#define WRITESEQSRC 110
#define WRITESEQPROP 111
#define NSAMPLE 112
#define ASOVERA 113
#define NUMTHREADS 114
#define SRCMOMX 115
#define SRCMOMY 116
#define SRCMOMZ 117
#define SNKMOMX 118
#define SNKMOMY 119
#define SNKMOMZ 120
#define SEQSRCMOMX 121
#define SEQSRCMOMY 122
#define SEQSRCMOMZ 123
#define CPUPREC 124
#define GPUPREC 125
#define GPUPRECSLOPPY 126
#define INVERTERTYPE 127
#define MMSID 128
#define CHKINVERSION 129
#define COMMENT 130
#define ERROR 131

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cvc_in))==0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 187 "/opt/cvc_libwrapper/read_input_parser_cvc.l"

#line 3987 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2047 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2046 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 188 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 189 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 190 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 191 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 192 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 193 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 194 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 195 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 196 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 197 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 198 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 199 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 200 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 201 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 202 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 203 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 204 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 205 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 206 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 207 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 208 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 209 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 210 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 211 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 212 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 213 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 214 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 215 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 216 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 217 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 218 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 219 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 220 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 221 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 222 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 223 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 224 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 225 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 226 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 227 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 228 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 229 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 230 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 231 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 232 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 233 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 234 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 235 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 236 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 237 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 238 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 239 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 240 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 241 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 242 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 243 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 244 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 245 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 246 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 247 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 248 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 249 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 250 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 251 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 252 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 253 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 254 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 255 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 256 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 257 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 258 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 259 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 260 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 261 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 262 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 264 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 265 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 266 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 267 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 269 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 270 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 271 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 272 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 273 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 274 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 275 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 276 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 277 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 278 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 279 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 280 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 281 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 282 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 283 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 284 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 285 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 286 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 287 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 288 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 289 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 290 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 291 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 292 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 293 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 294 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 295 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 297 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 298 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 300 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 301 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 302 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 304 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 305 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 306 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 307 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 308 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 309 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 310 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 311 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 312 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 313 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 314 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 315 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 316 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 317 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 318 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 319 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 320 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 321 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
/* start namespace inclusion here */
case 130:
YY_RULE_SETUP
#line 326 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 330 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 334 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 338 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 342 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 346 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 350 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 354 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 358 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 362 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 366 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 370 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 374 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 378 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 382 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 386 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 390 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 394 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 398 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 402 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 406 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 410 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 414 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 418 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 422 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 426 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 430 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 434 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 438 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 443 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 448 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 453 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 457 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 461 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 465 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 469 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 473 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 477 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 481 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 485 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 493 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 511 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 515 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 519 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 523 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 527 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 531 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 535 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 539 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 543 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 547 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 551 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 555 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 559 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 563 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 567 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 571 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 575 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 579 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 583 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 587 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 591 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 595 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 599 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 603 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 607 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 611 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 615 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 619 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 623 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 627 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 631 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 635 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 640 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 644 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 648 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 653 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 657 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 661 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 666 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source gamma id to %s\n", cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 671 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 675 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 679 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 683 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 687 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 691 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 695 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 700 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 706 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 712 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 718 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 724 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 730 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 735 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 739 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 744 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 749 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 754 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 758 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 766 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 771 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 776 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 780 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 790 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 798 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 806 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 814 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 822 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 831 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 840 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 849 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 857 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 861 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 865 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 869 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 873 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 878 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 883 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 888 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 893 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 898 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 903 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 908 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 913 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 918 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 928 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 938 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 948 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 952 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 956 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 965 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 969 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 973 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 977 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 982 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 985 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 266:
YY_RULE_SETUP
#line 992 "/opt/cvc_libwrapper/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 5884 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2047 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2047 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2046);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 991 "/opt/cvc_libwrapper/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

