
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cvc__create_buffer
#define yy_delete_buffer cvc__delete_buffer
#define yy_flex_debug cvc__flex_debug
#define yy_init_buffer cvc__init_buffer
#define yy_flush_buffer cvc__flush_buffer
#define yy_load_buffer_state cvc__load_buffer_state
#define yy_switch_to_buffer cvc__switch_to_buffer
#define yyin cvc_in
#define yyleng cvc_leng
#define yylex cvc_lex
#define yylineno cvc_lineno
#define yyout cvc_out
#define yyrestart cvc_restart
#define yytext cvc_text
#define yywrap cvc_wrap
#define yyalloc cvc_alloc
#define yyrealloc cvc_realloc
#define yyfree cvc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cvc_restart(cvc_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cvc_leng;

extern FILE *cvc_in, *cvc_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cvc_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cvc_restart()), so that the user can continue scanning by
	 * just pointing cvc_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cvc_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cvc_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cvc_wrap()'s to do buffer switches
 * instead of setting up a fresh cvc_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cvc_restart (FILE *input_file  );
void cvc__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cvc__create_buffer (FILE *file,int size  );
void cvc__delete_buffer (YY_BUFFER_STATE b  );
void cvc__flush_buffer (YY_BUFFER_STATE b  );
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cvc_pop_buffer_state (void );

static void cvc_ensure_buffer_stack (void );
static void cvc__load_buffer_state (void );
static void cvc__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cvc__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cvc__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cvc__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cvc__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cvc_alloc (yy_size_t  );
void *cvc_realloc (void *,yy_size_t  );
void cvc_free (void *  );

#define yy_new_buffer cvc__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cvc_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cvc__create_buffer(cvc_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cvc_in = (FILE *) 0, *cvc_out = (FILE *) 0;

typedef int yy_state_type;

extern int cvc_lineno;

int cvc_lineno = 1;

extern char *cvc_text;
#define yytext_ptr cvc_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cvc_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cvc_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 319
#define YY_END_OF_BUFFER 320
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2541] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  315,  315,  318,  318,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  320,  317,
      317,  316,  314,  313,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  157,  160,  161,  162,  158,  159,
      173,  317,  163,  317,  317,  164,  317,  317,  166,  317,
      317,  167,  317,  317,  168,  317,  317,  165,  317,  317,
      169,  317,  317,  170,  317,  317,  171,  317,  178,  179,
      181,  182,  183,  317,  172,  195,  317,  174,  317,  317,
      175,  317,  317,  176,  317,  317,  177,  317,  317,  317,

      317,  317,  317,  317,  317,  317,  192,  193,  194,  196,
      197,  317,  317,  199,  317,  201,  180,  202,  203,  204,
      207,  208,  209,  210,  317,  205,  317,  317,  206,  317,
      317,  211,  317,  317,  212,  317,  213,  214,  317,  215,
      317,  317,  216,  317,  317,  217,  317,  317,  218,  317,
      317,  219,  317,  317,  220,  317,  317,  221,  317,  317,
      222,  317,  317,  223,  317,  317,  224,  317,  225,  226,
      228,  227,  317,  229,  317,  317,  317,  231,  317,  232,
      317,  233,  317,  234,  317,  235,  317,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  317,  317,  317,

      317,  317,  251,  252,  253,  317,  200,  317,  254,  255,
      256,  257,  317,  317,  259,  261,  269,  270,  262,  263,
      264,  265,  266,  267,  268,  271,  317,  272,  317,  273,
      317,  317,  317,  274,  317,  275,  317,  276,  317,  317,
      317,  278,  317,  279,  317,  280,  317,  317,  317,  282,
      317,  283,  317,  284,  317,  317,  317,  286,  317,  287,
      317,  288,  290,  291,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  317,  317,  303,  304,  305,  317,  315,
      315,  314,  313,  317,  317,  314,  313,  317,  317,  317,
      317,  311,  312,    0,  314,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,  157,  160,  161,  162,
      158,  159,  173,  163,    0,  163,    0,  164,    0,  164,
        0,  166,    0,  166,    0,  167,    0,  167,    0,  168,
        0,  168,    0,  165,    0,  165,    0,  169,    0,  169,
        0,  170,    0,  170,    0,  171,    0,  171,    0,  178,

      179,  181,  182,  183,  172,    0,  195,  174,    0,  174,
        0,  175,    0,  175,    0,  176,    0,  176,    0,  177,
        0,  177,    0,  184,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  194,  196,  197,  198,  199,    0,  199,
        0,  201,  180,  202,  203,  204,  207,  208,  209,  210,
      205,    0,  205,    0,  206,    0,  206,    0,  211,    0,
      211,    0,  212,    0,  212,    0,  213,  214,  215,    0,
      215,    0,  216,    0,  216,    0,  217,    0,  217,    0,
      218,    0,  218,    0,  219,    0,  219,    0,  220,    0,
      220,    0,  221,    0,  221,    0,  222,    0,  222,    0,

      223,    0,  223,    0,  224,    0,  224,    0,  225,  226,
      228,  227,  229,    0,  229,    0,  230,  231,    0,  231,
        0,  232,  233,    0,  234,    0,  235,    0,  236,    0,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  200,    0,  200,
        0,  254,  255,  256,  257,  258,  260,  259,  261,  269,
      270,  262,  263,  264,  265,  266,  267,  268,  271,  272,
        0,  272,    0,  273,    0,    0,    0,  274,    0,  275,
        0,  276,    0,    0,    0,    0,  278,    0,  279,    0,
      280,    0,    0,    0,    0,  282,    0,  283,    0,  284,

        0,    0,    0,    0,  286,    0,  287,    0,  288,    0,
      290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
      300,  301,  302,  303,  304,  305,  306,  315,  315,  314,
      318,  318,  314,  307,  309,  310,  308,  311,  312,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    2,    0,    0,    0,    4,    0,    5,    0,    6,
        0,   12,    0,   11,    0,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
      163,    0,  164,    0,  166,    0,  167,    0,  168,    0,
      165,    0,  169,    0,  170,    0,  171,    0,  174,    0,
      175,    0,  176,    0,  177,    0,  199,    0,  205,    0,
      206,    0,  211,    0,  212,    0,  215,    0,  216,    0,
      217,    0,  218,    0,  219,    0,  220,    0,  221,    0,
      222,    0,  223,    0,  224,    0,  229,    0,  231,    0,
      200,    0,  272,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    4,    5,    6,   12,
       11,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,    0,   58,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,   56,    0,    0,    0,    0,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  277,    0,  281,    0,  285,    0,  289,    0,
        0,   59,   58,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
       62,    0,   10,    0,    0,    0,    0,    0,   15,    0,

        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   22,    0,    0,   71,    0,   74,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,   56,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    0,    0,    0,   23,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  138,
       10,    0,    0,    0,    0,   15,    0,   70,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,   71,   74,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    0,    0,   23,    0,
        0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  138,    0,    9,    0,    8,    0,    0,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   36,    0,    0,    0,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
       25,    0,   26,    0,   27,    0,    0,    0,    0,    0,
       52,    0,   53,    0,   54,    0,   55,    0,    0,    0,
        0,    0,    0,   63,    0,   64,    0,   65,    0,   66,
        0,    0,   20,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,    8,    0,  152,    0,    0,    0,    0,    0,    0,
       87,    0,   88,    0,   89,    0,   90,    0,    0,   72,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,    0,    0,    0,    0,   73,    0,   75,
        0,  116,   24,   25,   26,   27,    0,    0,    0,    0,
       50,   52,   53,   54,   55,    0,    0,   61,    0,   60,
        0,    0,   63,   64,   65,   66,    0,   20,    0,    0,
        0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,   87,   88,   89,   90,    0,   72,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,   73,   75,  116,    0,    0,    0,
       50,    0,   51,   61,   60,    0,    0,    0,    0,    0,
        0,    0,    0,   49,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   45,    0,   41,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   91,    0,    0,  153,   41,    0,    0,    0,    0,
      117,    0,    0,   35,    0,    0,    0,    0,    0,   69,
        0,   68,    0,    0,    0,  109,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,  154,    0,    0,    0,   21,    0,
        0,    0,   98,    0,    0,    0,    0,    0,   76,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
      153,    0,    0,    0,  117,    0,   35,    0,    0,    0,
        0,    0,   67,   69,   68,    0,    0,  109,    0,    0,
      103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
        0,    0,  108,    0,    0,    0,  134,  154,    0,    0,
       21,    0,    0,   98,    0,  135,    0,    0,   48,    0,
       47,    0,  137,   76,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,    0,    0,    0,    0,    0,
        0,    0,    0,   67,    0,    0,    0,  103,    0,    0,

        0,    0,    0,    0,  122,    0,    0,   93,    0,    0,
        0,   46,    0,   39,    0,    0,    0,    0,    0,    0,
        0,    0,  108,    0,    0,  134,    0,    0,    0,    0,
      135,    0,   48,   47,  137,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,    0,    0,    0,    0,   34,
        0,    0,    0,    0,    0,    0,    0,   44,    0,    0,
        0,    0,    0,  122,    0,    0,    0,   93,    0,    0,
       46,   39,    0,    0,  104,    0,    0,    0,    0,    0,
        0,    0,  139,    0,   99,    0,    0,    0,    0,   28,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   84,    0,   85,    0,   34,    0,
        0,    0,    0,    0,  111,    0,   44,    0,    0,    0,
        0,    0,    0,  123,    0,  124,    0,  125,    0,   94,
        0,    0,   83,  104,    0,   38,    0,  118,    0,    0,
        0,    0,    0,  139,   99,    0,    0,    0,    0,   29,
        0,   30,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,   85,    0,    0,
        0,    0,    0,  111,    0,    0,    0,    0,    0,    0,
      123,  124,  125,   94,    0,   43,   83,   38,  118,    0,
        0,    0,    0,   77,    0,    0,  110,    0,    0,    0,

        0,   29,   30,    0,    0,  102,    0,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
        0,   43,    0,  119,    0,  120,    0,  121,   77,    0,
      110,    0,    0,    0,    0,    0,    0,  102,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,    0,  105,    0,    0,    0,    0,   95,    0,
        0,    0,    0,    0,    0,  119,  120,  121,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,    0,

        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
      129,    0,    0,    0,    0,    0,  100,    0,    0,    0,
       33,    0,  136,    0,    0,    0,    0,  142,    0,    0,
        0,    0,    0,  141,    0,    0,  140,    0,    0,   96,
        0,  107,    0,    0,  133,    0,    0,    0,    0,    0,
      129,    0,    0,    0,    0,    0,    0,  100,    0,  101,
        0,   33,  136,    0,    0,    0,  142,    0,  149,    0,
        0,    0,  141,    0,  148,  140,    0,  147,    0,  107,
        0,  133,    0,    0,    0,    0,    0,    0,    0,    0,
      126,    0,  127,    0,  128,    0,    0,    0,  101,    0,

      156,    0,    0,    0,  149,    0,    0,    0,  148,  147,
        0,  106,    0,    0,  130,    0,  131,    0,  132,    0,
        0,    0,    0,  126,  127,  128,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,  106,    0,  130,  131,
      132,    0,    0,    0,    0,    0,  155,    0,    0,  113,
        0,    0,  143,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,    0,  113,    0,  143,    0,    0,    0,
        0,  144,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  144,    0,  112,    0,    0,   31,    0,   82,
        0,    0,    0,    0,    0,    0,    0,  112,    0,   32,

       31,   82,    0,    0,    0,    0,   78,    0,  114,    0,
        0,    0,    0,   32,    0,   79,    0,   80,    0,   81,
       78,  114,    0,  146,    0,  145,    0,    0,   79,   80,
       81,  146,  145,    0,  151,    0,  150,  151,  150,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    7,
        7,    1,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,    1,    7,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   47,   47,   47,   48,   47,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[2665] =
    {   0,
        0,    6,   79,   97,  115,  133,  151,  169,  187,  205,
      223,  241,  259,  277,  295,  313,  331,  349,  367,  385,
      403,  421,  439,  457,  475,  493,  511,  529,  547,  565,
      583,  601,  619,  637,  655,  673,  691,  709,  727,  745,
      763,  781,  799,  817,  835,  853,  871,  889,  907,  925,
      943,  961,  979,  997, 1015, 1033, 1052, 1061, 1076, 1085,
     1108, 1118, 1133, 1142, 1165, 1175, 1190, 1199, 1222, 1232,
     1247, 1256, 1268, 1293, 1311, 1329, 1347, 1365, 1383, 1401,
     1420, 1467, 1435, 1444, 1513, 1531, 1482, 1549, 1567, 1585,
     1603, 1621, 1639, 1657, 1675, 1693, 1711, 1729, 1747, 1765,

     1783, 1801, 1819, 1837, 1855, 1873, 1891, 1909, 1927, 1945,
     1963, 1981, 1999, 2017, 2035, 2053, 2071, 2089, 2107, 2125,
     2143, 2161, 2179, 2197, 2215, 2233, 2251, 2269, 2287, 2305,
     2323, 2341, 2359, 2377, 2395, 2413, 2431, 2449, 2467, 2485,
     2503, 2521, 2539, 2557, 2575, 2593, 2612, 2621, 2667, 2685,
     2631, 2703, 2721, 2739, 2757, 2775, 2793, 2811, 2829, 2847,
     2865, 2883, 2901, 2919, 2937, 2955, 2973, 2991, 3009, 3027,
     3045, 3063, 3081, 3099, 3117, 3135, 3153, 3171, 3190, 3199,
     3214, 3223, 3246, 3256, 3271, 3280, 3303, 3313, 3322, 3340,
     3359, 3377, 3395, 3413, 3431, 3449, 3467, 3485, 3503, 3521,

     3539, 3557, 3576, 3623, 3591, 3600, 3669, 3687, 3706, 3753,
     3800, 3847, 3638, 3717, 3894, 3941, 3988, 4035, 4082, 4129,
     4176, 4223, 4270, 4317, 4364, 4411, 4458, 4505, 3764, 3811,
     4551, 4569, 3858, 3905, 4587, 4605, 4623, 4641, 4659, 4677,
     4695, 4713, 4731, 4749, 4767, 4785, 4803, 4821, 4839, 4857,
     4875, 4893, 4911, 4929, 4947, 4965, 4983, 5001, 5019, 5037,
     5055, 5073, 5091, 5109, 5127, 5145, 5164, 5211, 5258, 5305,
     5352, 5399, 5446, 5493, 3952, 3999, 5540, 5587, 5634, 5681,
     5728, 5775, 5822, 5869, 4046, 4093, 4140, 4187, 4238, 4247,
     4294, 4341, 4376, 4422, 4469, 4516, 5175, 5222, 5273, 5282,

       84,  102,  120,  138,  156,  174, 5915, 1507, 2647, 5930,
     5329, 5376, 3732, 5945, 3779, 5411, 5457, 5504, 1489,12673,
      190,12673,12673,12673, 3607, 1015, 5498, 1022, 1038, 5940,
     1054, 1040, 1067, 1109, 6007, 5954, 6059, 1090, 1166, 1105,
     5547, 6108,   87, 1109, 1443, 1489, 3599, 3645, 3818, 3825,
     3865, 3874, 4523, 3914, 3961, 5560, 4008, 4055, 5602, 4102,
     4149, 5643, 4196, 4246, 5689, 4293, 4340, 5702, 4385, 4431,
     5743, 4478, 5184, 5784, 5231, 5281, 5830, 5328, 3921, 3968,
     4015, 4062, 4109, 4156, 5423, 4203, 5375, 5843, 5466, 5656,
     5885, 5797, 6018, 6030, 6046, 6058, 6137, 6165,    0,    0,

        0,    0,    0,    0,    0,    0, 4317, 4438, 4485, 5191,
        0,    0, 6178, 6185, 6198, 5238, 5352, 5473, 5634, 5775,
     6205, 6212, 6226, 6233, 6242, 6249, 6262, 6271, 6278, 6293,
     6302, 6309, 6322, 6331, 6338, 6353, 6360, 6367, 6379, 6386,
     6399, 6408, 6415, 6430, 6439, 6446, 6459, 6468, 6475, 6490,
     6499, 6506, 6519, 6528, 6535, 6550, 6559, 6566, 6579, 6588,
     6595, 6610, 6619, 6626, 6639, 6648, 6655, 6670, 6677, 6684,
     6696, 6703, 6712, 6719, 6732,    0, 6741, 6748, 6763, 6770,
     6777, 6789, 6796, 6808, 6815, 6827, 6834, 6846, 6853, 6860,
     6867, 6874, 6881, 6888, 6895, 6902, 6909,    0,    0,    0,

        0,    0, 6916, 6923, 6930, 6939, 6946, 6959, 6966, 6973,
     6987,    0,    0, 6994, 7001,    0,    0, 7008,    0,    0,
        0,    0,    0,    0,    0, 7015, 7024, 7031, 7044, 7051,
     7058, 7072, 7079, 7091, 7098, 7110, 7117, 7129, 7136, 7148,
     7155, 7167, 7174, 7186, 7193, 7205, 7212, 7224, 7231, 7243,
     7250, 7262, 7269, 7281, 7288, 7300, 7307, 7319, 7326, 7338,
     7345, 7357,    0,    0,    0,    0, 7364,    0,    0,    0,
        0, 7371, 7378,    0,    0, 7385, 7392, 7399,    0,    0,
      193,    0,    0,    0,  208,    0,    0, 7414, 7429,    0,
     7444, 7451, 7458,  211,12673, 1124, 1432, 1159, 1169, 1191,

     1189, 1206, 1218, 1233, 1242, 1249, 1252, 1259, 1254, 1406,
     1252, 1365, 1410, 1423, 1430,  123,  159,  226, 1445, 1460,
      229,  230,  244,  249,  264, 1451, 1464, 7476, 1488, 1479,
     2563, 2599, 2616, 3147, 5485, 3160, 3150, 5956, 3172, 3173,
     3179, 3207, 5950, 5506, 3212, 3228, 3236, 5688, 3237, 3260,
     5822, 3278, 3280,  283,  284, 3533, 7468, 7475, 7488, 7495,
     7503, 7516, 7523, 7531, 7544, 7551, 7564, 7572, 7592, 7599,
     7613, 7620, 7640, 7647, 7661, 7668, 7688, 7695, 7709, 7716,
     7736, 7743, 7757, 7764, 7784, 7791, 7805, 7812, 7832, 7839,
     7853, 7860, 7880, 7887, 7901, 7908, 7928, 7935, 7949, 7956,

     7963, 7976, 7983, 7990, 8002, 8009, 8016, 8023, 8036, 8043,
     8056, 8064, 8084, 8091, 8105, 8112, 8132, 8139, 8153, 8160,
     8180, 8187, 8201,    0,    0,    0,    0,    0,    0,    0,
        0, 8208, 8215, 8228, 8235,    0,    0, 8242, 8255, 8262,
     8275, 8283, 8290, 8303, 8310, 8317, 8324, 8331, 8338, 8345,
     8352, 8365, 8372, 8385, 8393, 8413, 8420, 8434, 8441, 8461,
     8468, 8482, 8489, 8509, 8516, 8530, 8537, 8544, 8557, 8570,
     8577, 8590, 8598, 8618, 8625, 8639, 8646, 8666, 8673, 8687,
     8694, 8714, 8721, 8735, 8742, 8762, 8769, 8783, 8790, 8810,
     8817, 8831, 8838, 8858, 8865, 8879, 8886, 8906, 8913, 8927,

     8934, 8954, 8961, 8975, 8982, 9002, 9009, 9023, 9030, 9037,
     9050, 9057, 9064, 9077, 9084, 9097,    0, 9105, 9125, 9132,
     9146, 9153, 9165, 9173, 9185, 9192, 9204, 9211, 9223, 9230,
     9237, 9244, 9251, 9258, 9265, 9272, 9279, 9286, 9293,    0,
        0,    0,    0,    0, 9300, 9307, 9314, 9321, 9334, 9341,
     9354, 9362, 9369, 9382,    0,    0, 9389, 9396,    0,    0,
     9403,    0,    0,    0,    0,    0,    0,    0, 9410, 9417,
     9430, 9437, 9450, 9458, 9470, 9478, 9490, 9502, 9509, 9521,
     9528, 9540, 9547, 9559, 9566, 9578, 9590, 9597, 9609, 9616,
     9628, 9635, 9647, 9654, 9666, 9678, 9685, 9697, 9704, 9716,

     9723, 9735, 9742, 9754, 9766, 9773, 9785, 9792, 9804, 9811,
        0,    0,    0,    0, 9818,    0,    0,    0,    0, 9825,
     9832,    0,    0, 9839, 9846, 9853,    0,    0,  298,    0,
        0,  316,    0, 9868, 9883,    0, 9898, 9905, 9912, 3563,
     3587, 5496, 3603, 3625, 3641, 1401,  303, 1385, 3643, 3677,
     3691, 3718, 3711, 3752, 3764, 1365, 1364, 4183, 4202,  334,
      354,  370, 4259, 4267,  388,  408,  424,  444,  460,  480,
      496,  516,  532,  552, 1347, 4342,  568,  588, 4360, 4381,
     4492, 1346, 1342, 4489, 4503, 4512, 4511, 6053, 5116, 5118,
     5121, 5207, 5231, 1329, 5286, 5278, 5395, 5408, 5510, 5547,

     5544, 5562, 5572, 5561, 5559, 5570, 1325, 5584, 5630, 5671,
     5953, 5667, 5701, 5682, 5705, 1310, 5704,  604, 5705, 9919,
     9926, 9933, 9940, 9947, 9954, 9961, 9968, 9975, 9982, 9989,
     9996,10003,10010,10017,10024,10031,10038,10045,10052,10059,
    10066,10073,10080,10087,10094,10101,10108,10115,10122,10129,
    10136,10143,10150,10157,10164,10171,10178,10185,10192,10199,
    10206,10213,10220,10227,10234,10241,10248,10255,10262,10269,
    10276,10283,10290,10297,10304,10311,10318,10325,10332,10339,
    10346,10353,10360,10367,10379,10386,10398,10405,10417,10424,
    10436, 5725, 5765,  622,  642, 5809, 5807, 5801, 5829,  661,

      662, 6065, 5858, 5864, 5857, 5853, 5874, 5909, 5928, 5952,
     5922, 5940, 5958,  676, 5951, 5959,  680,  681,  694,  697,
      698, 5967,  712,  715, 5975, 5998, 6011, 6006, 1339, 6014,
     6046, 6060, 6065, 6049, 6066, 6056, 6061, 6064, 6066, 6070,
     6086, 6095, 6113, 6104, 6119, 6115, 1293, 6137, 6106, 1275,
     6126, 6126,  716,  733, 6134, 6165, 6174,  748, 1274, 6182,
     6169, 1195, 6232, 6246, 6249, 6262, 6292, 6307,10448,10460,
    10472,10484, 1173, 6334,  752,  753,  769,  784, 6329, 1172,
     6382, 6370,  788, 6375, 6409, 6446, 6443, 6460, 6492, 6508,
     6518, 6566, 7593, 6564,10458, 6580, 6607,10502, 1165, 1116,

     6625,  789,  802,  806, 6636, 6645, 6696, 6705,  820, 1115,
      840, 1109, 6702, 6939, 6929, 6933, 6934, 7016, 7387,  860,
     7467,  874,  877, 7462, 7467, 7488, 7544, 7539, 7555, 7631,
     7618, 7663,  894,  823,  928,  897, 7661, 7690, 7711,  948,
      982, 7699, 7729, 7749, 7753, 7786, 7794, 7809, 7825, 7859,
     1108,10499,10513,10520,10538,10545,10557,10564,10576,10575,
     7844, 1000, 1018, 7882, 7899, 7896, 7930, 7958, 7948, 8039,
     1059, 1093, 8031, 8051, 1150, 8042, 8082, 8108, 8108, 8117,
     8142, 8157, 8183, 8211, 1207, 1038, 8207,10562,10565, 1332,
     1096, 1335, 1264, 8261, 8263, 8264, 8352, 1336, 1276, 8361,

     1355, 1296, 8373, 8377, 8412, 8440, 8440, 8465, 8486, 8488,
     1368, 1300, 8498, 1372, 1389, 1552, 1406, 8575, 8574, 8580,
     8599, 8610, 8628, 8630,10574, 8661, 1555, 1407, 1556, 8682,
     1058, 8677, 1572, 8706, 8722, 8723, 8754, 8786, 1023, 8811,
     8806, 8835, 8849, 8870, 8863, 1009,10566, 8899, 8914, 8933,
     8949,10573, 8973,10576, 1575, 1588,  979, 8979, 1592, 1606,
     1614, 8997,10646, 9029, 9030,  976, 9081, 9081, 9087, 1609,
     9106,10579, 9336, 9342, 9329, 9473, 9536, 9557, 1642, 1645,
     1646, 1662, 1663,  961, 1682, 1683, 9638, 1696, 9633, 9726,
     9726, 9842,10390,10442,10480,10501, 1699,10516, 1714, 1717,

    10559,  958,10582,10583,10605,  943,10609,10615,10612,10629,
     1718, 1732,10630,10631, 1735,10616,10629,10621,10627,  940,
    10626,10639,10672,  925,10624,10627,10643,10644,10634,10653,
     1750, 1754, 1755, 1786,10633,  922,10650,10664, 1789, 1790,
     1809, 1822,10659,10675,10684, 1826,10670,  918, 1842, 1858,
     1878, 1912, 1932,10686, 1966, 1986, 1843,10674,10682,10692,
    10682,10689,10681,  907,10697,10694,10697,10686,10691,10697,
    10697,10708,10709, 2005, 2006, 2020, 2023, 2038,  922, 2042,
     2043,10691,10709,  886,  871,10724, 2056, 2076, 2110, 2130,
    10734, 2164,10720,10731,10725,10728,10731,10729,10725,10729,

      868, 2059,10734,10729, 2184, 2218,10732,10750,10749,10749,
    10743,10738,10803,10743,10759,10747,10751,10752,10772,10751,
     2236,10776,10775,10772, 2256, 2290, 2310, 2344, 2364, 2380,
     2400, 2416, 2436, 2437, 2452,10791,10781,10782, 2456, 2457,
     2470, 2488, 2491, 2492, 2509, 2524, 2527,10783, 2528, 2545,
    10779,10789, 2560, 2564, 2580, 2565, 2638, 2634, 2670, 2651,
    10792, 2690, 2709, 2710,10787,10803,10805,10796,10793,10859,
    10794,10801,10812,10815,10821,10819,10812,10822,10836,10846,
     2724, 2728,10832, 2742, 2746,10844,10839,10840,10851, 2760,
     2780, 2796, 2800, 2816, 2836, 2850, 2854,10853, 2870, 2871,

    10840,10851,10843,10843,10862,10863,10861,10864,10864,10868,
    10857, 2889,10869,10861,10869,10864,10864,10869,10878, 2890,
     2904, 2907,10874,10888,10891,10901,10905,10896,10899,10897,
    10905, 2924, 2925,10899,10895,10899, 2943, 2944, 2958, 2962,
     2963, 2978, 2994, 2997, 2998, 3012,10900,10904,10911, 3015,
     3016, 3030, 3034, 3035, 3048, 3051, 3052, 3066, 3071, 3084,
    10906,10905, 3088, 3102, 3105, 3106,10923, 3120,10920,  864,
      852,10922,10918, 3123, 3124,10915,10904,10928,10920,  835,
    10922,10923,  834,  817,10927,10931,10939, 3138, 3142, 3143,
    10959,10960,  810, 3158, 3176, 3231, 3234,10945, 3288,10960,

    10944,  799,10952,10946,10957,10965,10959,10969,10970,10963,
    10975,10974,  798,  781,10960,10978,10977,10980, 3347, 3330,
     3343,10964,10967,10973,10981,10990,10989,10990,11000,11002,
     3362,11015,11012,11017, 3366, 3367, 3380,11002,11003,11010,
     3383, 3384, 3398, 3401, 3416,11021,11022,11015,11013,11024,
    11017,11027,11019, 3419,11037,11019,11027,11015,11023,11038,
    11028,11031,11057, 3420,11046, 3434, 3454, 3470, 3473,11042,
    11052,11059, 3474,11071, 3491,11078,11063, 3506, 3510,11081,
    11063, 3511,11072,11081,  780,  763,11084,11074,11067,11090,
    11091,11084, 3542,11090,11092,11096,11095,11082,11092,11088,

     3545,11112,11120,11114,11124,11123,11115,11122, 3546, 3866,
    11131,11133, 4543,11124,11119, 4590,11127,11118,11129,11139,
     4594,11141,11129,11130,11128,11128,11133,11134,11135,11136,
     4626, 3562,11154, 4630, 3565, 3676,11140,11143,11162, 4662,
     3736,11164, 4666, 3772,11180,11183,11170, 4698, 4702, 3783,
     4734, 3819,11169,11183, 4738, 3861,11173, 4770,11173,11182,
    11187,11182,11183,11186,11188,11184,11184,11188,11186,  759,
    11201,11198,11188,11197, 4774, 3908,  727,11209,11194, 4806,
    11200,11215, 4810, 4842, 3911,11210,  726, 4846, 3955,11211,
    11226, 4878, 3958,11266, 4882, 4914, 4918, 4950, 4002,11237,

    11226,11241,11233,11244,11236,11249,11238,11251, 4005, 4954,
     4049,11250,11251,11239, 4052,11235, 4096,  722,11247,11242,
    11257, 4986, 4099, 4143, 4146,11248,11263, 4190,11264, 4990,
     4193,11259,11256,11262,11254,11263,11313, 5022,11273,11287,
     5026, 5058,11291,11282,11290,11286,11299, 4282,11290,11290,
    11302, 5062, 4287,11298,11309, 5094, 4336, 4358,11291,11300,
     4381,11304,11316, 4406, 5098, 4425,11300, 5130, 4428, 5512,
     4472, 5745, 4475, 4522,11300,11311,  691,11321,11320,11315,
      690,11316,  686, 5886, 4556,11308,11311,11312, 5907,11312,
    11321,11343,11353, 5134,11339,11349,11381, 5225,11347,11353,

    11362,11350,11364,11388, 5228,11349,11409, 5317,11367,11361,
    11416, 5322,11423, 5371,11374,11426,11369,11373,11384,11385,
    11397,11412, 5393,11435,11438, 5416,11447,11403,11423,11420,
     5441,11415, 5463, 5507, 5566,11413,  673,11416,11412,11413,
      655,11420,  619,11422, 5567,11475,11481,11434,11486, 5620,
    11419,11444,11426,11439,11487,  612,11495, 5621,11447,11449,
    11466,11480,11470, 5624,11506,11507,11510, 5661,11514,11471,
     5674, 5675,11515,11518, 5695,11519,11538,11488,11488,11487,
    11497,11541, 5707,11542, 5708,11525,11546,11552,11561, 5762,
    11511,11511,11517,11525,11529,11528,11528,11535,11536,11533,

    11533,11536,11537,11580, 5765,11587, 5802,11541, 5815,11549,
      601,11561,11553,11601, 5816,11558, 5848,11585,11576,11590,
    11587,11574,11613, 5849,11621, 5890,11624, 5903,11625, 6703,
    11628,11632, 6796, 6815,11645, 6834,11649, 6853,11610,11655,
    11614,11656,  583, 7050, 7098,11622,11621,11609,11660, 7117,
    11666, 7136, 7174,11635,11675,11683,11630,  580,11627,11640,
    11643,11650,11645,11658,11647,11660, 7193, 7212,11694,11672,
    11677,11667,11675, 7250,11667,11704,11667,11677,  565,11670,
     7269, 7288, 7326, 7345,11711, 7364, 7433, 7549, 7591,11724,
    11732,11738,11739, 7592,11679,11744, 7596,11711,11684,11697,

    11704, 7640, 7644,11720,11751, 7687,11752, 7690,11724,11740,
    11725,11740,  562,  547,11727,11745,11732,11747,11778, 7735,
    11779,11752,11745,11749,11750,11801, 7738,11745,11762,11779,
    11759, 7742,11806, 7783,11820, 7786,11821, 7790, 7831,11779,
     7834,11771,11781,11792,11778,11805,11785, 7838, 7879,11785,
    11802,11791,11812,11810,11811,11812,11808,11818,11824,11825,
    11826, 7882,11852, 7886,11813,11863,11819,11826, 7927,11835,
      529,11848,11838,11845,11880, 7930, 7934, 8041,11835,11850,
    11845,11885,11867,11866,11890,11891,11866,11866,11864,11904,
    11869,11880,11891,11874,11916,11879,11919,11884, 8042,11896,

    11927, 8083,11940,11909,11944,11897,11901,11915,11908,11947,
     8086,11910,11923,11921,11921,11961, 8090,11966,11933,11970,
     8131,11971, 8134,11951,11955,11950,11991, 8138,11992,11947,
    11948,11956,11998, 8179,11999,12006, 8182,12011,11958, 8186,
    12018, 8309,11982,12019, 8370,11983,11976,11991,12009,12007,
     8371,12031,12039,12042,12001,12019,12022, 8412,12045, 8415,
    12046, 8419, 8460,  526,12028,  511, 8463,12059, 8467,12029,
    12039,12047, 8508,12068, 8511, 8515,12072, 8563,12073, 8564,
    12050, 8575,12076,12081,12082,12062,12068,12050,12052,12096,
     8576,12101, 8617,12102, 8620,12073,12081,12084, 8624,12108,

     8665,12075,12075,12078, 8668,  493,  490,12095, 8672, 8713,
    12123, 8716,12083,12127, 8720,12130, 8761,12136, 8764,12098,
      475,12097,12098, 8768, 8809, 8810,12142,12112,12151, 8814,
    12107,12155,12111,12124,12127,12126, 8858,12130, 8862, 8905,
     8908,12137,12138,12133,12140,12170, 8953,12130,12179, 8956,
    12151,12180, 8960,12153,12141,12142,12183,12148,12145,12177,
    12168,12182, 9001,12174, 9004,12184, 9008,12185,12187,12188,
    12214, 9124,12222,12241,12242,  457,12194,12182,12192,12193,
    12197,12199, 9127,12250, 9131,12253,12256, 9172,12261, 9192,
    12222,12267,12270,12187,12192,12246,12248, 9211,12278, 9230,

     9339, 9340,12281,12282,12287,12295, 9388,12302, 9435,12306,
    12307,12244,12248, 9436,12310, 9455,12315, 9497,12319, 9509,
     9547, 9585,12327, 9635,12330, 9673,12334,12338, 9723, 9761,
     9811, 9887,10467,12339,10491,12342,10503,10506,10540,12673,
    12362,12367,12372,12377,12382,12387,12392,12397,12402,12407,
    12412,12417,12422,12427,12432,12437,12442,12447,12452,12457,
    12462,12467,12472,12477,12482,12487,12492,12497,12502,12507,
    12512,12517,12522,12527,12532,12537,12542,12547,12552,12557,
    12562,12567,12569,12571,12573,12575,12577,12579,12581,12583,
      497,12585,12587,12589,12591,12593,12595,12597,  482,12599,

      464,  461,  446,  428,  425,  410,  392,  389,  374,  371,
      356,  338,  335,  320,  319,  316,  301,12601,12603,12605,
    12610,12615,12617,12619,12621,12623,12625,12627,12629,12631,
    12633,  284,12635,12637,12639,12641,12643,12645,12647,  277,
    12649,  266,  265,  262,  247,  230,  211,  193,  176,  169,
      151,  140,  133,  115,  104,   97,   79,    0,12651,12653,
    12655,12660,12665,12667
    } ;

static yyconst flex_int16_t yy_def[2665] =
    {   0,
     2541, 2540, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2542, 2542, 2543, 2543,
     2544, 2544, 2545, 2545, 2546, 2546, 2547, 2547, 2548, 2548,
     2549, 2549, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2550, 2550, 2551, 2551, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,

     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2552, 2552, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2553, 2553,
     2554, 2554, 2555, 2555, 2556, 2556, 2557, 2557, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,

     2541, 2541, 2558, 2558, 2559, 2559, 2541, 2541, 2560, 2560,
     2561, 2561, 2541, 2541, 2562, 2562, 2563, 2563, 2564, 2564,
     2565, 2565, 2566, 2566, 2567, 2567, 2568, 2568, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2569, 2569, 2570, 2570,
     2571, 2571, 2572, 2572, 2541, 2541, 2573, 2573, 2574, 2574,
     2575, 2575, 2576, 2576, 2541, 2541, 2541, 2541, 2577, 2577,
     2578, 2578, 2541, 2541, 2541, 2541, 2541, 2541, 2579, 2579,

     2541, 2541, 2580, 2580, 2581, 2581, 2541,  307,  307,  307,
     2582, 2582,  307,  307,  307, 2541, 2541, 2541, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2583, 2584,

     2585, 2586, 2587, 2588, 2589, 2590, 2540, 2540, 2540, 2540,
     2591, 2592, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2593, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2594, 2595, 2596,

     2597, 2598, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2599, 2600, 2540, 2540, 2601, 2602, 2540, 2603, 2604,
     2605, 2606, 2607, 2608, 2609, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2610, 2611, 2612, 2613, 2540, 2614, 2615, 2616,
     2617, 2540, 2540, 2618, 2619, 2540, 2540, 2540, 2620, 2621,
     2621, 2621, 2621, 2622, 2622, 2622, 2622, 2540, 2540, 2623,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
     2631, 2540, 2540, 2540, 2540, 2632, 2633, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2634, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2635,
     2636, 2637, 2638, 2639, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2640, 2641, 2540, 2540, 2642, 2643,
     2540, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2651, 2652, 2653, 2654, 2540, 2655, 2656, 2657, 2658, 2540,
     2540, 2659, 2660, 2540, 2540, 2540, 2661, 2662, 2662, 2662,
     2663, 2663, 2663, 2540, 2540, 2664, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,    0,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540
    } ;

static yyconst flex_int16_t yy_nxt[12748] =
    {   0,
     2540,  321,  322,  321,  919,  323,  320,  321,  322,  321,
      320,  324,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  325,  326,  327,  328,
      329,  330,  331,  332,  333,  320,  334,  335,  336,  337,
      338,  339,  340,  341,  342,  343,  320,  320,  344,  320,
      320,  320,  320,  320,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  320,  334,  335,  336,  337,  338,  339,
      340,  341,  342,  343,  320,  320,  344,  320,  320,  320,
      321,  322,  321,  918,  323,  321,  322,  321,  654,  323,
      654,  345,  345,  345,  345,  345,  345,  345,  321,  322,

      321,  917,  324,  321,  322,  321,  655,  324,  916,  345,
      345,  345,  345,  345,  345,  345,  321,  322,  321,  914,
      323,  581,  322,  581,  616,  582,  616,  346,  346,  346,
      346,  346,  346,  346,  321,  322,  321,  913,  324,  581,
      322,  581,  618,  583,  912,  346,  346,  346,  346,  346,
      346,  346,  321,  322,  321,  911,  323,  321,  322,  585,
      960,  586,  960,  347,  347,  347,  347,  347,  347,  347,
      321,  322,  321,  868,  324,  321,  322,  585,  961,  587,
      867,  347,  347,  347,  347,  347,  347,  347,  321,  322,
      321,  594,  323,  594,  929,  595,  929,  866,  930,  348,

      348,  348,  348,  348,  348,  348,  321,  322,  321,  594,
      324,  932,  594,  933,  594,  865,  595,  348,  348,  348,
      348,  348,  348,  348,  321,  322,  321,  962,  323,  962,
      965,  967,  965,  967,  864,  349,  349,  349,  349,  349,
      349,  349,  321,  322,  321,  969,  324,  969,  966,  968,
      971,  863,  971,  349,  349,  349,  349,  349,  349,  349,
      321,  322,  321,  970,  323,  973,  862,  973,  972,  860,
      859,  350,  350,  350,  350,  350,  350,  350,  321,  322,
      321,  855,  324,  974,  654, 1018,  654, 1018,  736,  350,
      350,  350,  350,  350,  350,  350,  321,  322,  321,  929,

      323,  929,  655,  930, 1100,  919, 1100,  351,  351,  351,
      351,  351,  351,  351,  321,  322,  321,  594,  324,  932,
      918,  933, 1101,  917,  916,  351,  351,  351,  351,  351,
      351,  351,  321,  322,  321,  960,  323,  960,  352,  914,
      352,  353,  913,  354,  354,  354,  354,  354,  354,  354,
      321,  322,  321,  961,  324, 1114,  352, 1114,  352,  353,
      912,  354,  354,  354,  354,  354,  354,  354,  321,  322,
      321,  962,  323,  962,  355,  911,  355,  356,  868,  357,
      357,  357,  357,  357,  357,  357,  321,  322,  321,  965,
      324,  965,  355,  867,  355,  356,  866,  357,  357,  357,

      357,  357,  357,  357,  321,  322,  321,  966,  323, 1117,
      358, 1117,  358,  359,  865,  360,  360,  360,  360,  360,
      360,  360,  321,  322,  321,  967,  324,  967,  358,  864,
      358,  359,  863,  360,  360,  360,  360,  360,  360,  360,
      321,  322,  321,  968,  323, 1118,  361, 1118,  361,  362,
      862,  363,  363,  363,  363,  363,  363,  363,  321,  322,
      321,  969,  324,  969,  361,  860,  361,  362,  859,  363,
      363,  363,  363,  363,  363,  363,  321,  322,  321,  970,
      323, 1119,  364, 1119,  364,  365,  855,  366,  366,  366,
      366,  366,  366,  366,  321,  322,  321,  971,  324,  971,

      364,  736,  364,  365, 2491,  366,  366,  366,  366,  366,
      366,  366,  321,  322,  321,  972,  323, 1120,  367, 1120,
      367,  368, 2443,  369,  369,  369,  369,  369,  369,  369,
      321,  322,  321,  973,  324,  973,  367, 2435,  367,  368,
     2434,  369,  369,  369,  369,  369,  369,  369,  321,  322,
      321,  974,  323, 1121,  370, 1121,  370,  371, 2404,  372,
      372,  372,  372,  372,  372,  372,  321,  322,  321,  977,
      324,  977,  370, 2402,  370,  371, 2306,  372,  372,  372,
      372,  372,  372,  372,  321,  322,  321,  978,  323, 1124,
      373, 1124,  373,  374, 2257,  375,  375,  375,  375,  375,

      375,  375,  321,  322,  321, 1018,  324, 1018,  373, 2256,
      373,  374, 2230,  375,  375,  375,  375,  375,  375,  375,
      321,  322,  321, 1175,  323, 1175,  376, 2210,  376,  377,
     2198,  378,  378,  378,  378,  378,  378,  378,  321,  322,
      321, 1176,  324, 1177,  376, 1177,  376,  377, 2171,  378,
      378,  378,  378,  378,  378,  378,  321,  322,  321, 2116,
      323, 1178, 1100, 1183, 1100, 1183, 2102,  379,  379,  379,
      379,  379,  379,  379,  321,  322,  321, 1114,  324, 1114,
     1101, 1117, 1118, 1117, 1118,  379,  379,  379,  379,  379,
      379,  379,  321,  322,  321, 1119,  323, 1119, 1120, 1121,

     1120, 1121, 2100,  380,  380,  380,  380,  380,  380,  380,
      321,  322,  321, 1202,  324, 1202, 1124, 1233, 1124, 1233,
     2096,  380,  380,  380,  380,  380,  380,  380,  321,  322,
      321, 1203,  323, 2044, 1235, 1234, 1235, 2042, 2038,  381,
      381,  381,  381,  381,  381,  381,  321,  322,  321, 1240,
      324, 1240, 1236, 1175, 1262, 1175, 1262,  381,  381,  381,
      381,  381,  381,  381,  321,  322,  321, 1241,  323, 1990,
     1177, 1176, 1177, 1960, 1949,  382,  382,  382,  382,  382,
      382,  382,  321,  322,  321, 1263,  324, 1263, 1178, 1183,
     1202, 1183, 1202,  382,  382,  382,  382,  382,  382,  382,

      321,  322,  321, 1291,  323, 1291, 1943, 1292, 1203, 1292,
     1860,  383,  383,  383,  383,  383,  383,  383,  321,  322,
      321, 1298,  324, 1298, 1328, 1293, 1328, 1859, 1788,  383,
      383,  383,  383,  383,  383,  383,  321,  322,  321, 1299,
      323, 1301,  384, 1301,  384, 1787, 1776,  385,  385,  385,
      385,  385,  385,  385,  321,  322,  321, 1772,  324, 1302,
      384, 1311,  384, 1311, 1763,  385,  385,  385,  385,  385,
      385,  385,  321,  322,  321, 1314,  323, 1314, 1316, 1312,
     1316, 1762, 1759,  386,  386,  386,  386,  386,  386,  386,
      321,  322,  321, 1315,  324, 1233, 1317, 1233, 1329, 1751,

     1329,  386,  386,  386,  386,  386,  386,  386,  321,  322,
      321, 1750,  323, 1234,  387, 1609,  387,  388, 1588,  389,
      389,  389,  389,  389,  389,  389,  321,  322,  321, 1235,
      324, 1235,  387, 1587,  387,  388, 1583,  389,  389,  389,
      389,  389,  389,  389,  321,  322,  321, 1236,  323, 1240,
      390, 1240,  390,  391, 1571,  392,  392,  392,  392,  392,
      392,  392,  321,  322,  321, 1552,  324, 1241,  390, 1537,
      390,  391, 1520,  392,  392,  392,  392,  392,  392,  392,
      321,  322,  321, 1333,  323, 1333,  393, 1511,  393,  394,
     1497,  395,  395,  395,  395,  395,  395,  395,  321,  322,

      321, 1262,  324, 1262,  393, 1493,  393,  394, 1479,  395,
      395,  395,  395,  395,  395,  395,  321,  322,  321, 1263,
      323, 1263,  396, 1461,  396,  397, 1447,  398,  398,  398,
      398,  398,  398,  398,  321,  322,  321,  599,  324, 1370,
      396, 1370,  396,  397,  605,  398,  398,  398,  398,  398,
      398,  398,  320,  321,  322,  321, 1430,  323,  320,  320,
      320,  320,  321,  322,  321,  599,  324,  320,  320,  320,
     1421,  320,  605,  606,  611,  613,  320,  321,  322,  321,
      320,  323,  320,  320,  320,  320,  321,  322,  321,  612,
      324,  320,  320,  320, 1355,  320, 1355, 1291,  320, 1291,

      614,  606,  611,  613,  320, 1414, 1354,  320,  320,  321,
      322,  321, 1356,  323,  320,  320,  320,  612,  320,  321,
      322,  321,  320,  324,  320,  320,  320,  320,  614,  615,
      639,  320,  642,  320,  321,  322,  321,  320,  323,  320,
      320,  320,  320,  321,  322,  321,  656,  324,  320,  320,
      320, 1359,  320, 1359,  320, 1343, 1303,  615,  639,  940,
      642,  320, 1300, 1289,  320,  320,  321,  322,  321, 1360,
      323,  320,  320,  320,  656,  320,  321,  322,  321,  320,
      324,  320,  320,  320,  320,  942,  640,  940,  320,  943,
      320,  321,  322,  321,  320,  323,  320,  320,  320,  320,

      321,  322,  321,  641,  324,  320,  320,  320, 1285,  320,
     1285,  320, 1288,  942,  640,  944,  945,  943,  320, 1265,
     1260,  320,  320,  321,  322,  321, 1286,  323,  320,  320,
      320,  641,  320,  321,  322,  321,  320,  324,  320,  320,
      320,  320, 1245,  944,  945,  320,  946,  320,  321,  322,
      321,  320,  323,  320,  320,  320,  320,  321,  322,  321,
      947,  324,  320,  320,  320, 1381,  320, 1381,  320,  321,
      322,  321,  948,  323,  946,  320,  949, 1386,  320, 1386,
      407,  407,  407,  407,  407,  407,  407,  950,  947,  951,
      952,  953,  955,  320,  321,  322,  321, 1388,  324, 1388,

      948, 1397,  320, 1397,  949,  407,  407,  407,  407,  407,
      407,  407,  321,  322,  321,  950,  323,  951,  952,  953,
      955, 1242, 1230,  408,  408,  408,  408,  408,  408,  408,
      321,  322,  321, 1379,  324, 1379, 1292, 1298, 1292, 1298,
     1226,  408,  408,  408,  408,  408,  408,  408,  321,  322,
      321, 1380,  323, 1208, 1293, 1299, 1301, 1166, 1301,  409,
      409,  409,  409,  409,  409,  409,  321,  322,  321, 1311,
      324, 1311, 1155, 1314, 1302, 1314, 1142,  409,  409,  409,
      409,  409,  409,  409,  321,  322,  321, 1312,  323, 1129,
     1399, 1315, 1399, 1128, 1122,  410,  410,  410,  410,  410,

      410,  410,  321,  322,  321,  956,  324, 1400, 1328, 1400,
     1328, 1111, 1110,  410,  410,  410,  410,  410,  410,  410,
      320,  321,  322,  321,  320,  323,  320,  320,  320,  320,
      320,  320, 1102,  956,  957,  320,  321,  322,  321,  320,
      323,  320,  320,  320,  320,  321,  322,  321, 1099,  324,
      320,  320,  320,  954,  320,  657,  657,  657,  657,  657,
      657,  657,  957,  320,  958,  959,  320,  320,  321,  322,
      321,  320,  324,  320,  320,  320,  320,  320,  320,  941,
      963,  320,  964,  321,  322,  321,  320,  323, 2540,  975,
      320,  976,  958,  959,  416,  416,  416,  416,  416,  416,

      416,  658,  658,  658,  658,  658,  658,  658,  963,  982,
      964,  983,  324,  320,  321,  322,  321,  975,  323,  976,
      413, 2540,  413,  414, 2540,  415,  415,  415,  415,  415,
      415,  415,  321,  322,  321, 2540,  324,  982,  413,  983,
      413,  414, 2540,  415,  415,  415,  415,  415,  415,  415,
      321,  322,  321, 1316,  324, 1316, 1411, 1329, 1411, 1329,
     2540,  416,  416,  416,  416,  416,  416,  416,  321,  322,
      321, 1317,  323, 1333, 1412, 1333, 1355, 2540, 1355,  417,
      417,  417,  417,  417,  417,  417,  321,  322,  321, 1446,
      324, 1446, 2540, 1359, 1356, 1359, 2540,  417,  417,  417,

      417,  417,  417,  417,  321,  322,  321, 1449,  323, 1449,
     1370, 1360, 1370, 2540, 2540,  418,  418,  418,  418,  418,
      418,  418,  321,  322,  321, 2540,  324, 1450, 1451, 1452,
     1453, 2540, 2540,  418,  418,  418,  418,  418,  418,  418,
      321,  322,  321, 1379,  323, 1379, 1474, 1381, 1474, 1381,
     2540,  419,  419,  419,  419,  419,  419,  419,  321,  322,
      321, 1380,  324, 1475, 1477, 1475, 1477, 2540, 2540,  419,
      419,  419,  419,  419,  419,  419,  321,  322,  321, 2540,
      323, 1476, 1478, 1480, 1386, 1480, 1386,  420,  420,  420,
      420,  420,  420,  420,  321,  322,  321, 1388,  324, 1388,

     1397, 1481, 1397, 2540, 2540,  420,  420,  420,  420,  420,
      420,  420,  321,  322,  321, 1399,  323, 1399, 1400, 1411,
     1400, 1411, 2540,  421,  421,  421,  421,  421,  421,  421,
      321,  322,  321, 1502,  324, 1502, 1505, 1412, 1505, 2540,
     2540,  421,  421,  421,  421,  421,  421,  421,  321,  322,
      321, 1528,  323, 1528, 1506, 1530, 1532, 1530, 1532,  422,
      422,  422,  422,  422,  422,  422,  321,  322,  321, 1529,
      324, 2540, 2540, 1531, 1533, 2540, 2540,  422,  422,  422,
      422,  422,  422,  422,  321,  322,  321, 1534,  323, 1534,
     1540, 1542, 1540, 1542, 2540,  423,  423,  423,  423,  423,

      423,  423,  321,  322,  321, 1535,  324, 2540, 1541, 1543,
     1544, 2540, 1544,  423,  423,  423,  423,  423,  423,  423,
      321,  322,  321, 1546,  323, 1546, 2540, 1446, 1545, 1446,
     2540,  424,  424,  424,  424,  424,  424,  424,  321,  322,
      321, 1547,  324, 1449, 1564, 1449, 1564, 2540, 2540,  424,
      424,  424,  424,  424,  424,  424,  321,  322,  321, 1553,
      323, 1553,  425, 2540,  425,  426, 2540,  427,  427,  427,
      427,  427,  427,  427,  321,  322,  321, 1554,  324, 1555,
      425, 1555,  425,  426, 2540,  427,  427,  427,  427,  427,
      427,  427,  321,  322,  321, 2540,  323, 1556,  428, 2540,

      428,  429, 2540,  430,  430,  430,  430,  430,  430,  430,
      321,  322,  321, 1557,  324, 1557,  428, 2540,  428,  429,
     2540,  430,  430,  430,  430,  430,  430,  430,  321,  322,
      321, 1558,  323, 1559,  431, 1559,  431,  432, 2540,  433,
      433,  433,  433,  433,  433,  433,  321,  322,  321, 2540,
      324, 1560,  431, 2540,  431,  432, 2540,  433,  433,  433,
      433,  433,  433,  433,  321,  322,  321, 1455,  323, 1455,
      434, 2540,  434,  435, 2540,  436,  436,  436,  436,  436,
      436,  436,  321,  322,  321, 1457,  324, 1562,  434, 1562,
      434,  435, 2540,  436,  436,  436,  436,  436,  436,  436,

      321,  322,  321, 2540,  323, 1563, 1474, 1475, 1474, 1475,
     2540,  437,  437,  437,  437,  437,  437,  437,  321,  322,
      321, 1581,  324, 1581, 1477, 1476, 1477, 2540, 2540,  437,
      437,  437,  437,  437,  437,  437,  321,  322,  321, 1582,
      323, 1582, 1478, 1480, 1584, 1480, 1584,  438,  438,  438,
      438,  438,  438,  438,  321,  322,  321, 1590,  324, 1590,
     1502, 1481, 1502, 2540, 2540,  438,  438,  438,  438,  438,
      438,  438,  321,  322,  321, 1591,  323, 1592,  439, 1592,
      439,  440, 2540,  441,  441,  441,  441,  441,  441,  441,
      321,  322,  321, 2540,  324, 1593,  439, 2540,  439,  440,

     2540,  441,  441,  441,  441,  441,  441,  441,  321,  322,
      321, 1594,  323, 1594,  442, 2540,  442,  443, 2540,  444,
      444,  444,  444,  444,  444,  444,  321,  322,  321, 1595,
      324, 1596,  442, 1596,  442,  443, 2540,  444,  444,  444,
      444,  444,  444,  444,  321,  322,  321, 2540,  323, 1597,
      445, 2540,  445,  446, 2540,  447,  447,  447,  447,  447,
      447,  447,  321,  322,  321, 1599,  324, 1599,  445, 2540,
      445,  446, 2540,  447,  447,  447,  447,  447,  447,  447,
      321,  322,  321, 1600,  323, 1505,  448, 1505,  448,  449,
     2540,  450,  450,  450,  450,  450,  450,  450,  321,  322,

      321, 2540,  324, 1506,  448, 2540,  448,  449, 2540,  450,
      450,  450,  450,  450,  450,  450,  321,  322,  321, 1612,
      323, 1612,  451, 2540,  451,  452, 2540,  453,  453,  453,
      453,  453,  453,  453,  321,  322,  321, 1632,  324, 1632,
      451, 2540,  451,  452, 2540,  453,  453,  453,  453,  453,
      453,  453,  321,  322,  321, 1633,  323, 1637,  454, 1637,
      454,  455, 2540,  456,  456,  456,  456,  456,  456,  456,
      321,  322,  321, 2540,  324, 1638,  454, 2540,  454,  455,
     2540,  456,  456,  456,  456,  456,  456,  456,  321,  322,
      321, 1639,  323, 1639,  457, 2540,  457,  458, 2540,  459,

      459,  459,  459,  459,  459,  459,  321,  322,  321, 1640,
      324, 1641,  457, 1641,  457,  458, 2540,  459,  459,  459,
      459,  459,  459,  459,  321,  322,  321, 2540,  323, 1642,
      460, 2540,  460,  461, 2540,  462,  462,  462,  462,  462,
      462,  462,  321,  322,  321, 1528,  324, 1528,  460, 2540,
      460,  461, 2540,  462,  462,  462,  462,  462,  462,  462,
      321,  322,  321, 1529,  323, 1643,  463, 1643,  463,  464,
     2540,  465,  465,  465,  465,  465,  465,  465,  321,  322,
      321, 1530,  324, 1530,  463, 2540,  463,  464, 2540,  465,
      465,  465,  465,  465,  465,  465,  321,  322,  321, 1531,

      323, 1644,  466, 1644,  466,  467, 2540,  468,  468,  468,
      468,  468,  468,  468,  321,  322,  321, 1532,  324, 1532,
      466, 2540,  466,  467, 2540,  468,  468,  468,  468,  468,
      468,  468,  321,  322,  321, 1533,  323, 1645, 1534, 1645,
     1534, 2540, 2540,  469,  469,  469,  469,  469,  469,  469,
      321,  322,  321, 1646,  324, 1646, 1535, 1650, 1540, 1650,
     1540,  469,  469,  469,  469,  469,  469,  469,  321,  322,
      321, 1652,  323, 1652, 2540, 1651, 1541, 2540, 2540,  470,
      470,  470,  470,  470,  470,  470,  321,  322,  321, 1542,
      324, 1542, 1653, 1544, 1653, 1544, 2540,  470,  470,  470,

      470,  470,  470,  470,  321,  322,  321, 1543,  323, 2540,
     1654, 1545, 1654, 2540, 2540,  471,  471,  471,  471,  471,
      471,  471,  321,  322,  321, 1546,  324, 1546, 1655, 1657,
     1655, 1657, 2540,  471,  471,  471,  471,  471,  471,  471,
      321,  322,  321, 1547,  323, 2540, 1659, 1658, 1659, 2540,
     2540,  472,  472,  472,  472,  472,  472,  472,  321,  322,
      321, 1553,  324, 1553, 1660, 1663, 1664, 1663, 1664,  472,
      472,  472,  472,  472,  472,  472,  321,  322,  321, 1554,
      323, 1555,  473, 1555,  473,  474, 2540,  475,  475,  475,
      475,  475,  475,  475,  321,  322,  321,  984,  324, 1556,

      473, 2540,  473,  474, 2540,  475,  475,  475,  475,  475,
      475,  475,  320,  321,  322,  321, 2540,  323,  320,  320,
      320,  320,  321,  322,  321,  984,  324,  320,  320,  320,
     2540,  320,  321,  322,  321, 1665,  323, 1665,  985, 1557,
      320, 1557, 2540,  480,  480,  480,  480,  480,  480,  480,
      986,  589, 1666,  589, 1666,  589,  589, 1558,  320,  589,
      589,  589,  589,  589,  589,  589,  985,  320,  321,  322,
      321, 1559,  323, 1559,  477, 2540,  477,  478,  986,  479,
      479,  479,  479,  479,  479,  479,  321,  322,  321, 1560,
      324, 1562,  477, 1562,  477,  478, 2540,  479,  479,  479,

      479,  479,  479,  479,  321,  322,  321, 2540,  324, 1563,
     1668, 1564, 1668, 1564, 2540,  480,  480,  480,  480,  480,
      480,  480,  321,  322,  321, 1581,  323, 1581,  481, 1582,
      481, 1582, 2540,  482,  482,  482,  482,  482,  482,  482,
      321,  322,  321, 1584,  324, 1584,  481, 1688,  481, 1688,
     2540,  482,  482,  482,  482,  482,  482,  482,  321,  322,
      321, 1590,  323, 1590,  483, 1689,  483, 2540, 2540,  484,
      484,  484,  484,  484,  484,  484,  321,  322,  321, 1591,
      324, 1694,  483, 1694,  483, 2540, 2540,  484,  484,  484,
      484,  484,  484,  484,  321,  322,  321, 1592,  323, 1592,

      485, 1695,  485, 1695, 2540,  486,  486,  486,  486,  486,
      486,  486,  321,  322,  321, 1593,  324, 1594,  485, 1594,
      485, 2540, 2540,  486,  486,  486,  486,  486,  486,  486,
      321,  322,  321, 2540,  323, 1595,  487, 1696,  487, 1696,
     2540,  488,  488,  488,  488,  488,  488,  488,  321,  322,
      321, 1596,  324, 1596,  487, 1697,  487, 1697, 2540,  488,
      488,  488,  488,  488,  488,  488,  321,  322,  321, 1597,
      323, 1599, 1699, 1599, 1699, 2540, 2540,  489,  489,  489,
      489,  489,  489,  489,  321,  322,  321, 2540,  324, 1600,
     1612, 1620, 1612, 1620, 2540,  489,  489,  489,  489,  489,

      489,  489,  321,  322,  321, 1719,  323, 1719, 1721, 1622,
     1721, 2540, 2540,  490,  490,  490,  490,  490,  490,  490,
      321,  322,  321, 1720,  324, 1632, 1731, 1632, 1731, 2540,
     2540,  490,  490,  490,  490,  490,  490,  490,  321,  322,
      321, 2540,  323, 1633, 1637, 1735, 1637, 1735, 2540,  491,
      491,  491,  491,  491,  491,  491,  321,  322,  321, 1639,
      324, 1639, 1638, 1736, 1641, 1736, 1641,  491,  491,  491,
      491,  491,  491,  491,  321,  322,  321, 1640,  323, 1737,
     2540, 1737, 1642, 2540, 2540,  492,  492,  492,  492,  492,
      492,  492,  321,  322,  321, 1643,  324, 1643, 1644, 1645,

     1644, 1645, 2540,  492,  492,  492,  492,  492,  492,  492,
      321,  322,  321, 1646,  323, 1646, 1650, 1741, 1650, 1741,
     2540,  493,  493,  493,  493,  493,  493,  493,  321,  322,
      321, 1652,  324, 1652, 1651, 1653, 1654, 1653, 1654,  493,
      493,  493,  493,  493,  493,  493,  321,  322,  321, 1655,
      323, 1655, 1742, 1657, 1742, 1657, 2540,  494,  494,  494,
      494,  494,  494,  494,  321,  322,  321, 1744,  324, 1744,
     1743, 1658, 1659, 2540, 1659,  494,  494,  494,  494,  494,
      494,  494,  321,  322,  321, 1745,  323, 1745, 2540, 1663,
     1660, 1663, 2540,  495,  495,  495,  495,  495,  495,  495,

      321,  322,  321, 1664,  324, 1664, 1665, 1666, 1665, 1666,
     2540,  495,  495,  495,  495,  495,  495,  495,  321,  322,
      321, 1668,  323, 1668, 1674, 1754, 1674, 1754, 2540,  496,
      496,  496,  496,  496,  496,  496,  321,  322,  321, 1688,
      324, 1688, 1675, 1767, 1768, 1767, 1768,  496,  496,  496,
      496,  496,  496,  496,  321,  322,  321, 1689,  323, 1694,
     2540, 1694, 1769, 2540, 2540,  497,  497,  497,  497,  497,
      497,  497,  321,  322,  321,  987,  324, 1695, 2540, 1695,
      993, 2540,  994,  497,  497,  497,  497,  497,  497,  497,
      320,  321,  322,  321,  988,  323,  320,  320,  320,  320,

      321,  322,  321,  987,  324,  320,  320,  320,  993,  320,
      994,  998,  999, 1000,  320,  321,  322,  321,  320,  323,
      320,  320,  320,  320,  321,  322,  321, 1001,  324,  320,
      320,  320, 1696,  320, 1696, 1697,  320, 1697, 1007,  998,
      999, 1000,  320, 2540, 2540,  320,  320,  321,  322,  321,
     2540,  323,  320,  320,  320, 1001,  320,  321,  322,  321,
      320,  324,  320,  320,  320,  320, 1007, 1008, 1009,  320,
     1012,  320,  321,  322,  321,  320,  323,  320,  320,  320,
      320,  321,  322,  321, 1013,  324,  320,  320,  320, 1699,
      320, 1699,  320, 2540, 2540, 1008, 1009, 2540, 1012,  320,

     1016, 1017,  320,  320,  321,  322,  321, 2540,  323,  320,
      320,  320, 1013,  320,  321,  322,  321,  320,  324,  320,
      320,  320,  320,  321,  322,  321,  320,  323, 1016, 1017,
     2540, 1793,  320, 1793,  503,  503,  503,  503,  503,  503,
      503,  321,  322,  321, 1721,  324, 1721, 2540, 1719,  320,
     1719, 2540,  503,  503,  503,  503,  503,  503,  503,  320,
      321,  322,  321, 1731,  323, 1731, 1720, 1735, 1736, 1735,
     1736,  504,  504,  504,  504,  504,  504,  504,  321,  322,
      321, 1737,  324, 1737, 1741, 1742, 1741, 1742, 2540,  504,
      504,  504,  504,  504,  504,  504,  321,  322,  321, 1809,

      323, 1809, 1744, 1743, 1744, 2540, 2540,  505,  505,  505,
      505,  505,  505,  505,  321,  322,  321, 1745,  324, 1745,
     1754, 1831, 1754, 1831, 2540,  505,  505,  505,  505,  505,
      505,  505,  321,  322,  321, 1834,  323, 1834,  506, 1832,
      506,  507, 2540,  508,  508,  508,  508,  508,  508,  508,
      321,  322,  321, 1835,  324, 1767,  506, 1767,  506,  507,
     2540,  508,  508,  508,  508,  508,  508,  508,  321,  322,
      321, 1768,  323, 1768, 1836, 1840, 1836, 1840, 2540,  509,
      509,  509,  509,  509,  509,  509,  321,  322,  321, 1769,
      324, 2540, 1843, 1841, 1843, 2540, 2540,  509,  509,  509,

      509,  509,  509,  509,  321,  322,  321, 1849,  323, 1849,
     1844, 1851, 1855, 1851, 1855,  510,  510,  510,  510,  510,
      510,  510,  321,  322,  321, 1850,  324, 2540, 2540, 1852,
     1856, 2540, 2540,  510,  510,  510,  510,  510,  510,  510,
      321,  322,  321, 1793,  323, 1793, 1875, 1809, 1875, 1809,
     2540,  511,  511,  511,  511,  511,  511,  511,  321,  322,
      321, 1019,  324, 1909, 1876, 1909, 1911, 2540, 1911,  511,
      511,  511,  511,  511,  511,  511,  320,  321,  322,  321,
      320,  323,  320,  320,  320,  320,  320,  320, 2540, 1019,
     1092,  320,  321,  322,  321,  320,  323,  320,  320,  320,

      320,  321,  322,  321, 2540,  324,  320,  320,  320, 2540,
      320,  659,  659,  659,  659,  659,  659,  659, 1092,  320,
     2540, 1093,  320,  320,  321,  322,  321,  320,  324,  320,
      320,  320,  320,  320,  320, 2540, 1096,  320,  596,  321,
      322,  321,  320,  323, 2540,  597,  320, 1097,  598, 1093,
      518,  518,  518,  518,  518,  518,  518,  660,  660,  660,
      660,  660,  660,  660, 1096, 1098,  596, 1103, 2540,  320,
      321,  322,  321,  597,  323, 1097,  598, 1836,  514, 1836,
     2540,  515,  515,  515,  515,  515,  515,  515,  321,  322,
      321, 2540,  324, 1098, 2540, 1103,  514, 2540, 1104,  515,

      515,  515,  515,  515,  515,  515,  320,  321,  322,  321,
      320,  323,  320,  320,  320,  320,  320,  320,  321,  322,
      321, 2540,  324, 1105, 2540,  320, 1104, 2540, 2540,  518,
      518,  518,  518,  518,  518,  518,  591, 1915,  591, 1915,
      591,  591, 1106, 1107,  591,  591,  591,  591,  591,  591,
      591, 1105,  320,  320,  321,  322,  321,  320,  324,  320,
      320,  320,  320,  320,  320,  321,  322,  321, 2540,  323,
     1106, 1107,  320, 1917, 2540, 1917,  526,  526,  526,  526,
      526,  526,  526,  320, 1924,  320, 1924,  320,  320, 1108,
     1109,  592,  592,  592,  592,  592,  592,  592, 2540,  320,

      320,  321,  322,  321,  320,  323,  320,  320,  320,  320,
      320,  320,  321,  322,  321, 2540,  324, 1108, 1109,  320,
     1925, 2540, 1925,  526,  526,  526,  526,  526,  526,  526,
      661,  661,  661,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  662,  662, 2540, 2540,  320,  320,  321,  322,
      321,  320,  324,  320,  320,  320,  320,  320,  320,  321,
      322,  321, 1928,  323, 1928, 2540,  320, 1884, 2540, 1884,
      530,  530,  530,  530,  530,  530,  530,  663,  663,  663,
      663,  663,  663,  663,  664, 1885,  665,  665,  665,  665,
      665,  665,  665,  320,  320,  321,  322,  321,  320,  323,

      320,  320,  320,  320,  320,  320,  321,  322,  321, 1948,
      324, 1948, 1958,  320, 1958, 2540, 2540,  530,  530,  530,
      530,  530,  530,  530,  664, 2540,  665,  665,  665,  665,
      665,  665,  665,  700,  700,  700,  700,  700,  700,  700,
      320,  320,  321,  322,  321,  320,  324,  320,  320,  320,
      320,  320,  320,  321,  322,  321, 1961,  323, 1961, 1964,
      320, 1964, 2540, 2540,  567,  567,  567,  567,  567,  567,
      567,  668, 2540,  669,  669,  669,  669,  669,  669,  669,
      701,  701,  701,  701,  701,  701,  701,  320,  320,  321,
      322,  321,  320,  323,  320,  320,  320,  320,  320,  320,

      321,  322,  321, 1974,  324, 1974, 1909,  320, 1909, 2540,
     2540,  567,  567,  567,  567,  567,  567,  567,  668, 2540,
      669,  669,  669,  669,  669,  669,  669,  702,  702,  702,
      702,  702,  702,  702,  320,  320,  321,  322,  321,  320,
      324,  320,  320,  320,  320,  320,  320,  321,  322,  321,
     1911,  323, 1911, 1915,  320, 1915, 2540, 2540,  572,  572,
      572,  572,  572,  572,  572,  672, 2540,  673,  673,  673,
      673,  673,  673,  673,  703,  703,  703,  703,  703,  703,
      703,  320,  320,  321,  322,  321,  320,  323,  320,  320,
      320,  320,  320,  320,  321,  322,  321, 1917,  324, 1917,

     1994,  320, 1994, 2540, 2540,  572,  572,  572,  572,  572,
      572,  572,  672, 2540,  673,  673,  673,  673,  673,  673,
      673,  704,  704,  704,  704,  704,  704,  704,  320,  320,
      321,  322,  321,  320,  324,  320,  320,  320,  320,  320,
      320,  321,  322,  321, 1924,  323, 1924, 1925,  320, 1925,
     2540, 2540,  573,  573,  573,  573,  573,  573,  573,  676,
     2540,  677,  677,  677,  677,  677,  677,  677,  705,  705,
      705,  705,  705,  705,  705,  320,  320,  321,  322,  321,
      320,  323,  320,  320,  320,  320,  320,  320,  321,  322,
      321, 1928,  324, 1928, 1998,  320, 1998, 2540, 2540,  573,

      573,  573,  573,  573,  573,  573,  676, 1112,  677,  677,
      677,  677,  677,  677,  677,  707,  707,  707,  707,  707,
      707,  707,  320,  320,  321,  322,  321,  320,  324,  320,
      320,  320,  320,  320,  320, 1112, 2540, 1113,  320,  321,
      322,  321,  320,  323,  320,  320,  320,  320,  321,  322,
      321, 2540,  324,  320,  320,  320,  680,  320,  681,  681,
      681,  681,  681,  681,  681, 1113,  320, 2540, 2540,  320,
      320,  321,  322,  321,  320,  323,  320,  320,  320,  320,
      320,  320, 2540, 1948,  320, 1948, 1115, 1116, 2023,  320,
     2023, 2540, 2540,  320,  320,  321,  322,  321, 2540,  323,

      320,  320,  320,  680, 2540,  681,  681,  681,  681,  681,
      681,  681, 2540,  320, 1115, 1116,  320,  320,  321,  322,
      321,  320,  324,  320,  320,  320,  320,  320,  320,  732,
      732,  732,  732,  732,  732,  732,  320, 2026, 2540, 2026,
      320,  320,  321,  322,  321, 2540,  324,  320,  320,  320,
      684, 2540,  685,  685,  685,  685,  685,  685,  685, 1958,
      320, 1958, 2540,  320,  320,  321,  322,  321,  320,  323,
      320,  320,  320,  320,  320,  320, 1123,  321,  322,  321,
     1125,  323, 1961,  320, 1961, 2540, 2540,  320,  576,  576,
      576,  576,  576,  576,  576,  684, 2540,  685,  685,  685,

      685,  685,  685,  685, 1123, 1126, 2540, 1964, 1125, 1964,
      320,  320,  321,  322,  321,  320,  324,  320,  320,  320,
      320,  320,  320,  321,  322,  321, 2031,  324, 2031, 2033,
      320, 2033, 2540, 1126,  576,  576,  576,  576,  576,  576,
      576,  688, 2540,  689,  689,  689,  689,  689,  689,  689,
      733,  733,  733,  733,  733,  733,  733,  320,  320,  321,
      322,  321,  320,  323,  320,  320,  320,  320,  320,  320,
      321,  322,  321, 2034,  323, 2034, 2035,  320, 2035, 2540,
     2540,  577,  577,  577,  577,  577,  577,  577,  688, 2540,
      689,  689,  689,  689,  689,  689,  689,  734,  734,  734,

      734,  734,  734,  734,  320,  320,  321,  322,  321,  320,
      324,  320,  320,  320,  320,  320,  320,  321,  322,  321,
     1127,  324, 1130, 1974,  320, 1974, 2540, 1131,  577,  577,
      577,  577,  577,  577,  577,  666,  666,  666,  666,  666,
      666,  666, 2540, 2540, 1888, 1132, 1888,  667, 1127, 1133,
     1130,  320,  321,  322,  321, 1131,  323, 2045,  527, 2045,
      527,  528, 1889,  529,  529,  529,  529,  529,  529,  529,
      321,  322,  321, 1132,  324,  667,  527, 1133,  527,  528,
     2540,  529,  529,  529,  529,  529,  529,  529,  321,  322,
      321, 1892,  323, 1892,  531, 1898,  531, 1898, 2540,  532,

      532,  532,  532,  532,  532,  532,  321,  322,  321, 1893,
      324, 2540,  531, 1899,  531, 2540, 2540,  532,  532,  532,
      532,  532,  532,  532,  321,  322,  321, 1831,  323, 1831,
      533, 1834,  533, 1834, 2540,  534,  534,  534,  534,  534,
      534,  534,  321,  322,  321, 1832,  324, 2540,  533, 1835,
      533, 2540, 2540,  534,  534,  534,  534,  534,  534,  534,
      321,  322,  321, 1840,  323, 1840,  535, 1843,  535, 1843,
     2540,  536,  536,  536,  536,  536,  536,  536,  321,  322,
      321, 1841,  324, 2540,  535, 1844,  535, 2540, 2540,  536,
      536,  536,  536,  536,  536,  536,  321,  322,  321, 1922,

      323, 1922,  537, 1849,  537, 1849, 2540,  538,  538,  538,
      538,  538,  538,  538,  321,  322,  321, 1923,  324, 2540,
      537, 1850,  537, 2540, 2540,  538,  538,  538,  538,  538,
      538,  538,  321,  322,  321, 1851,  323, 1851,  539, 1855,
      539, 1855, 2540,  540,  540,  540,  540,  540,  540,  540,
      321,  322,  321, 1852,  324, 2540,  539, 1856,  539, 2540,
     2540,  540,  540,  540,  540,  540,  540,  540,  321,  322,
      321, 1930,  323, 1930,  541, 1875,  541, 1875, 2540,  542,
      542,  542,  542,  542,  542,  542,  321,  322,  321, 1931,
      324, 2540,  541, 1876,  541, 2540, 2540,  542,  542,  542,

      542,  542,  542,  542,  321,  322,  321, 1952,  323, 1952,
      543, 1956,  543, 1956, 2540,  544,  544,  544,  544,  544,
      544,  544,  321,  322,  321, 1953,  324, 2540,  543, 1957,
      543, 2540, 2540,  544,  544,  544,  544,  544,  544,  544,
      321,  322,  321, 1884,  323, 1884,  545, 1888,  545, 1888,
     2540,  546,  546,  546,  546,  546,  546,  546,  321,  322,
      321, 1885,  324, 2540,  545, 1889,  545, 2540, 2540,  546,
      546,  546,  546,  546,  546,  546,  321,  322,  321, 1892,
      323, 1892,  547, 1968,  547, 1968, 2540,  548,  548,  548,
      548,  548,  548,  548,  321,  322,  321, 1893,  324, 2540,

      547, 1969,  547, 2540, 2540,  548,  548,  548,  548,  548,
      548,  548,  321,  322,  321, 1970,  323, 1970,  549, 1972,
      549, 1972, 2540,  550,  550,  550,  550,  550,  550,  550,
      321,  322,  321, 1971,  324, 2540,  549, 1973,  549, 2540,
     2540,  550,  550,  550,  550,  550,  550,  550,  321,  322,
      321, 1898,  323, 1898,  551, 1984,  551, 1984, 2540,  552,
      552,  552,  552,  552,  552,  552,  321,  322,  321, 1899,
      324, 2540,  551, 1985,  551, 2540, 2540,  552,  552,  552,
      552,  552,  552,  552,  321,  322,  321, 1922,  323, 1922,
      553, 1930,  553, 1930, 2540,  554,  554,  554,  554,  554,

      554,  554,  321,  322,  321, 1923,  324, 2540,  553, 1931,
      553, 2540, 2540,  554,  554,  554,  554,  554,  554,  554,
      321,  322,  321, 2007,  323, 2007,  555, 2011,  555, 2011,
     2540,  556,  556,  556,  556,  556,  556,  556,  321,  322,
      321, 2008,  324, 2540,  555, 2012,  555, 2540, 2540,  556,
      556,  556,  556,  556,  556,  556,  321,  322,  321, 2013,
      323, 2013,  557, 1952,  557, 1952, 2540,  558,  558,  558,
      558,  558,  558,  558,  321,  322,  321, 2014,  324, 2540,
      557, 1953,  557, 2540, 2540,  558,  558,  558,  558,  558,
      558,  558,  321,  322,  321, 1956,  323, 1956,  559, 1965,

      559, 1965, 2540,  560,  560,  560,  560,  560,  560,  560,
      321,  322,  321, 1957,  324, 2540,  559, 1966,  559, 2540,
     2540,  560,  560,  560,  560,  560,  560,  560,  321,  322,
      321, 1968,  323, 1968,  561, 1994,  561, 1994, 2540,  562,
      562,  562,  562,  562,  562,  562,  321,  322,  321, 1969,
      324, 1137,  561, 1138,  561, 2540, 1139,  562,  562,  562,
      562,  562,  562,  562,  320,  321,  322,  321,  320,  323,
      320,  320,  320,  320,  320,  320,  321,  322,  321, 1137,
      323, 1138, 2540,  320, 1139, 2540, 2540,  578,  578,  578,
      578,  578,  578,  578,  692, 2540,  693,  693,  693,  693,

      693,  693,  693,  735,  735,  735,  735,  735,  735,  735,
      320,  320,  321,  322,  321,  320,  324,  320,  320,  320,
      320,  320,  320,  321,  322,  321, 1998,  324, 1998, 2064,
      320, 2064, 2540, 2540,  578,  578,  578,  578,  578,  578,
      578,  692, 1140,  693,  693,  693,  693,  693,  693,  693,
      742,  742,  742,  742,  742,  742,  742,  320,  320,  321,
      322,  321,  320,  323,  320,  320,  320,  320,  320,  320,
     1140, 2540, 1141,  320,  321,  322,  321,  320,  323,  320,
      320,  320,  320,  321,  322,  321, 2540,  324,  320,  320,
      320,  696,  320,  697,  697,  697,  697,  697,  697,  697,

     1141,  320, 2540, 2540,  320,  320,  321,  322,  321,  320,
      324,  320,  320,  320,  320,  320,  320, 2540, 2068,  320,
     2068, 1143, 1144, 2071,  320, 2071, 2540, 2540,  320,  320,
      321,  322,  321, 2540,  323,  320,  320,  320,  696, 2540,
      697,  697,  697,  697,  697,  697,  697, 2540,  320, 1143,
     1144,  320,  320,  321,  322,  321,  320,  323,  320,  320,
      320,  320,  320,  320,  743,  743,  743,  743,  743,  743,
      743,  320, 2072, 2540, 2072,  320,  320,  321,  322,  321,
     2540,  324,  320,  320,  320,  708, 2540,  709,  709,  709,
      709,  709,  709,  709, 2023,  320, 2023, 2540,  320,  320,

      321,  322,  321,  320,  324,  320,  320,  320,  320,  320,
      320, 2540,  321,  322,  321, 1145,  324, 2026,  320, 2026,
     2540, 2540,  320,  592,  592,  592,  592,  592,  592,  592,
      706, 2540,  706, 1146, 2540,  705,  705,  705,  705,  705,
      705,  705, 2031, 1145, 2031,  320,  320,  321,  322,  321,
      320,  323,  320,  320,  320,  320,  320,  320,  321,  322,
      321, 1146,  323, 2540, 2033,  320, 2033, 2540, 2540,  593,
      593,  593,  593,  593,  593,  593,  708, 2540,  709,  709,
      709,  709,  709,  709,  709,  744,  744,  744,  744,  744,
      744,  744,  320,  320,  321,  322,  321,  320,  324,  320,

      320,  320,  320,  320,  320,  321,  322,  321, 2034,  324,
     2034, 2540,  320, 1970, 2540, 1970,  593,  593,  593,  593,
      593,  593,  593, 2540,  989,  600, 1005, 1094,  990,  991,
      992, 1971,  601,  602, 1006, 1095,  603, 1147,  604,  320,
      320,  321,  322,  321,  320,  323,  320,  320,  320,  320,
      320,  320,  989,  600, 1005, 1094,  990,  991,  992,  320,
      601,  602, 1006, 1095,  603, 1147,  604, 2035, 2045, 2035,
     2045,  643,  670,  670,  670,  670,  670,  670,  670,  644,
      645,  646, 1148, 1149,  671, 1150,  320,  320,  321,  322,
      321,  320,  324,  320,  320,  320,  320,  320,  320,  643,

     1151, 1152, 1153, 1154, 1156, 2540,  320,  644,  645,  646,
     1148, 1149,  671, 1150,  674,  674,  674,  674,  674,  674,
      674, 2109, 2117, 2109, 2117, 2064,  675, 2064, 1151, 1152,
     1153, 1154, 1156,  320,  320,  321,  322,  321,  320,  323,
      320,  320,  320,  320,  320,  320,  745,  745,  745,  745,
      745,  745,  745,  320,  675,  678,  678,  678,  678,  678,
      678,  678, 2068, 2540, 2068, 1157,  712,  679,  713,  713,
      713,  713,  713,  713,  713, 2071, 2072, 2071, 2072, 2540,
      320,  320,  321,  322,  321,  320,  324,  320,  320,  320,
      320,  320,  320, 1157, 1158,  679, 2134, 1162, 2134, 2540,

      320,  682,  682,  682,  682,  682,  682,  682, 2144, 2145,
     2144, 2145, 1010,  683,  686,  686,  686,  686,  686,  686,
      686, 1163, 1158, 1164, 1011, 1162,  687,  320,  320,  321,
      322,  321,  320,  323,  320,  320,  320,  320,  320,  320,
     1010,  683, 1165, 1167, 1168, 1173, 1972,  320, 1972, 1163,
     2540, 1164, 1011, 2540,  687,  690,  690,  690,  690,  690,
      690,  690, 2540, 2153, 1973, 2153, 2167,  691, 2167, 2540,
     1165, 1167, 1168, 1173,  320,  320,  321,  322,  321,  320,
      324,  320,  320,  320,  320,  320,  320,  746,  746,  746,
      746,  746,  746,  746,  320,  691,  694,  694,  694,  694,

      694,  694,  694, 2168, 2540, 2168, 1174,  712,  695,  713,
      713,  713,  713,  713,  713,  713, 2109, 2174, 2109, 2174,
     2540,  320,  320,  321,  322,  321,  320,  323,  320,  320,
      320,  320,  320,  320, 1174, 1179,  695, 1180, 1181, 2540,
     2540,  320,  698,  698,  698,  698,  698,  698,  698, 2117,
     2181, 2117, 2181, 1014,  699,  710,  710,  710,  710,  710,
      710,  710, 1015, 1179, 1182, 1180, 1181,  711,  320,  320,
      321,  322,  321,  320,  324,  320,  320,  320,  320,  320,
      320, 1014,  699, 1187, 1188, 1189, 1190, 1984,  320, 1984,
     1015, 2182, 1182, 2182, 1191,  711, 2540,  714,  714,  714,

      714,  714,  714,  714, 2183, 1985, 2183, 2540, 2049,  715,
     2049, 1187, 1188, 1189, 1190,  320,  321,  322,  321,  588,
      323,  588, 1191,  588,  588, 2540, 2050,  588,  588,  588,
      588,  588,  588,  588,  589,  324,  589,  715,  589,  589,
     2540, 1192,  589,  589,  589,  589,  589,  589,  589,  591,
      324,  591, 1193,  591,  591, 2540, 1196,  591,  591,  591,
      591,  591,  591,  591,  607, 2540,  624, 1159,  608, 1192,
     1002,  625, 2540, 2540,  609, 1194,  995, 1197, 1198,  610,
     1193, 1003, 2540,  996, 1196,  997,  626, 1195, 1004, 1199,
     1200,  627,  607, 1160,  628, 1201,  608,  629, 1002, 2540,

     1161,  630,  609, 1194,  995, 1197, 1198,  610,  616, 1003,
      616,  996, 1204,  997,  626, 1195, 1004, 1199, 1200,  627,
     2540, 1160,  628, 1201,  617,  629,  618,  619,  716, 1205,
      717,  717,  717,  717,  717,  717,  717, 1206, 1207, 1209,
     1204,  620,  718,  718,  718,  718,  718,  718,  718, 2540,
      621,  622,  623, 2540,  719,  619,  716, 1205,  717,  717,
      717,  717,  717,  717,  717, 1206, 1207, 1209,  720,  620,
      721,  721,  721,  721,  721,  721,  721, 1134,  621,  622,
      623,  631,  719, 1210, 1135, 1184, 1211,  632, 1185, 1212,
      633, 1136, 1213,  634, 1214, 1215,  635,  636, 1216,  637,

     2540, 1217, 1186, 1218, 2540, 1134,  638, 1219, 2540,  631,
     1220, 1210, 1135, 1184, 1211,  632, 1185, 1212,  633, 1136,
     1213,  634, 1214, 1215,  635,  636, 1216,  637,  647, 1217,
     1186, 1218,  648, 2540, 1221, 1219,  649, 1222, 1220, 1223,
      650, 1224,  651, 1225, 1229,  652, 1231, 2540,  653,  722,
      722,  722,  722,  722,  722,  722,  647, 1227, 1232, 1237,
      648,  723, 1221, 2540,  649, 1222, 2540, 1223,  650, 1224,
      651, 1225, 1229,  652, 1231,  720,  653,  721,  721,  721,
      721,  721,  721,  721, 1228, 1227, 1232, 1237,  738,  723,
      739,  739,  739,  739,  739,  739,  739,  740,  740,  740,

      740,  740,  740,  740, 1238, 1239, 1243, 1244,  738,  741,
      739,  739,  739,  739,  739,  739,  739,  747,  747,  747,
      747,  747,  747,  747,  748,  748,  748,  748,  748,  748,
      748, 2540, 1238, 1239, 1243, 1244, 2540,  741,  749,  749,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,
      750,  750,  751, 2540,  752,  752,  752,  752,  752,  752,
      752,  753,  753,  753,  753,  753,  753,  753, 2540, 1246,
     1247, 1248,  751,  754,  752,  752,  752,  752,  752,  752,
      752,  755, 2540,  756,  756,  756,  756,  756,  756,  756,
      757,  757,  757,  757,  757,  757,  757, 1246, 1247, 1248,

     1249,  754,  758,  755, 2540,  756,  756,  756,  756,  756,
      756,  756,  759, 2540,  760,  760,  760,  760,  760,  760,
      760,  761,  761,  761,  761,  761,  761,  761, 1249, 1250,
      758, 1251,  759,  762,  760,  760,  760,  760,  760,  760,
      760,  763, 2540,  764,  764,  764,  764,  764,  764,  764,
      765,  765,  765,  765,  765,  765,  765, 1250, 1261, 1251,
     1264,  762,  766,  763, 2540,  764,  764,  764,  764,  764,
      764,  764,  767,  767,  767,  767,  767,  767,  767,  768,
      768,  768,  768,  768,  768,  768, 1261, 2540, 1264,  769,
      766,  770,  770,  770,  770,  770,  770,  770,  771,  771,

      771,  771,  771,  771,  771, 2540, 1266, 1267, 1268,  769,
      772,  770,  770,  770,  770,  770,  770,  770,  773, 2540,
      774,  774,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  775,  775, 1266, 1267, 1268, 1269,  772,  776,
      773, 2540,  774,  774,  774,  774,  774,  774,  774,  777,
     2540,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779, 1269, 1270,  776, 1271,  777,
      780,  778,  778,  778,  778,  778,  778,  778,  781, 2540,
      782,  782,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  783,  783,  783, 1270, 2540, 1271, 1272,  780,  784,

      781, 2540,  782,  782,  782,  782,  782,  782,  782,  785,
     2540,  786,  786,  786,  786,  786,  786,  786,  787,  787,
      787,  787,  787,  787,  787, 1272, 1273,  784, 1274,  785,
      788,  786,  786,  786,  786,  786,  786,  786,  789, 2540,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  791,  791, 1273, 2540, 1274, 1275,  788,  792,
      789, 2540,  790,  790,  790,  790,  790,  790,  790,  793,
     2540,  794,  794,  794,  794,  794,  794,  794,  795,  795,
      795,  795,  795,  795,  795, 1275, 1276,  792, 1280,  793,
      796,  794,  794,  794,  794,  794,  794,  794,  797, 2540,

      798,  798,  798,  798,  798,  798,  798,  799,  799,  799,
      799,  799,  799,  799, 1276, 2540, 1280, 1283,  796,  800,
      797, 2540,  798,  798,  798,  798,  798,  798,  798,  801,
     2540,  802,  802,  802,  802,  802,  802,  802,  803,  803,
      803,  803,  803,  803,  803, 1283, 1284,  800, 1290,  801,
      804,  802,  802,  802,  802,  802,  802,  802,  805, 2540,
      806,  806,  806,  806,  806,  806,  806,  807,  807,  807,
      807,  807,  807,  807, 1284, 1294, 1290, 1295,  804,  808,
      805, 2540,  806,  806,  806,  806,  806,  806,  806,  809,
      809,  809,  809,  809,  809,  809,  810,  810,  810,  810,

      810,  810,  810, 1294, 2184, 1295, 2184,  808,  811,  811,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812,  813, 2540,  814,  814,  814,  814,  814,  814,
      814,  815,  815,  815,  815,  815,  815,  815, 2540, 1296,
     1297, 1304,  813,  816,  814,  814,  814,  814,  814,  814,
      814,  818, 2540,  819,  819,  819,  819,  819,  819,  819,
      820,  820,  820,  820,  820,  820,  820, 1296, 1297, 1304,
     2540,  816,  821,  818, 2540,  819,  819,  819,  819,  819,
      819,  819,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  824, 2187,  824, 2187,

      821,  823,  823,  823,  823,  823,  823,  823,  825,  825,
      825,  825,  825,  825,  825,  826, 2134,  826, 2134, 2540,
      825,  825,  825,  825,  825,  825,  825,  827,  827,  827,
      827,  827,  827,  827,  828, 2188,  828, 2188, 2540,  827,
      827,  827,  827,  827,  827,  827,  829,  829,  829,  829,
      829,  829,  829,  830, 2189,  830, 2189, 2540,  829,  829,
      829,  829,  829,  829,  829,  831,  831,  831,  831,  831,
      831,  831,  832,  832,  832,  832,  832,  832,  832,  833,
      833,  833,  833,  833,  833,  833,  834,  834,  834,  834,
      834,  834,  834,  835,  835,  835,  835,  835,  835,  835,

      836,  836,  836,  836,  836,  836,  836,  837,  837,  837,
      837,  837,  837,  837,  838,  838,  838,  838,  838,  838,
      838,  839,  839,  839,  839,  839,  839,  839,  845,  845,
      845,  845,  845,  845,  845,  846,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  847,  848,
     2540,  849,  849,  849,  849,  849,  849,  849,  850,  850,
      850,  850,  850,  850,  850, 1305, 1306, 1307, 1308,  848,
      851,  849,  849,  849,  849,  849,  849,  849,  852,  852,
      852,  852,  852,  852,  852,  853,  853,  853,  853,  853,
      853,  853, 2540, 1305, 1306, 1307, 1308, 2540,  851,  854,

      854,  854,  854,  854,  854,  854,  857,  857,  857,  857,
      857,  857,  857,  858,  858,  858,  858,  858,  858,  858,
      861,  861,  861,  861,  861,  861,  861,  869,  869,  869,
      869,  869,  869,  869,  870, 2540,  871,  871,  871,  871,
      871,  871,  871,  872,  872,  872,  872,  872,  872,  872,
     1309, 2144, 2540, 2144,  870,  873,  871,  871,  871,  871,
      871,  871,  871,  874,  874,  874,  874,  874,  874,  874,
      875,  875,  875,  875,  875,  875,  875, 2540, 1309,  876,
      877,  876, 2540,  873,  875,  875,  875,  875,  875,  875,
      875,  878,  878,  878,  878,  878,  878,  878,  879, 2145,

      879, 2145, 2540,  878,  878,  878,  878,  878,  878,  878,
      880,  880,  880,  880,  880,  880,  880,  881, 2202,  881,
     2202, 2540,  880,  880,  880,  880,  880,  880,  880,  882,
      882,  882,  882,  882,  882,  882,  883, 2203,  883, 2203,
     2540,  882,  882,  882,  882,  882,  882,  882,  884,  884,
      884,  884,  884,  884,  884,  885,  886,  885, 2540, 2540,
      884,  884,  884,  884,  884,  884,  884,  887,  887,  887,
      887,  887,  887,  887,  888, 2153,  888, 2153, 2540,  887,
      887,  887,  887,  887,  887,  887,  889,  889,  889,  889,
      889,  889,  889,  890, 2167,  890, 2167, 2540,  889,  889,

      889,  889,  889,  889,  889,  891,  891,  891,  891,  891,
      891,  891,  892, 2168,  892, 2168, 2540,  891,  891,  891,
      891,  891,  891,  891,  893,  893,  893,  893,  893,  893,
      893,  894,  895,  894, 2540, 2540,  893,  893,  893,  893,
      893,  893,  893,  896,  896,  896,  896,  896,  896,  896,
      897, 2174,  897, 2174, 2540,  896,  896,  896,  896,  896,
      896,  896,  898,  898,  898,  898,  898,  898,  898,  899,
     2181,  899, 2181, 2540,  898,  898,  898,  898,  898,  898,
      898,  900,  900,  900,  900,  900,  900,  900,  901, 2182,
      901, 2182, 2540,  900,  900,  900,  900,  900,  900,  900,

      902,  902,  902,  902,  902,  902,  902,  903,  904,  903,
     2540, 2540,  902,  902,  902,  902,  902,  902,  902,  905,
      905,  905,  905,  905,  905,  905,  906, 2183,  906, 2183,
     2540,  905,  905,  905,  905,  905,  905,  905,  907,  907,
      907,  907,  907,  907,  907,  908, 2184,  908, 2184, 2540,
      907,  907,  907,  907,  907,  907,  907,  909,  909,  909,
      909,  909,  909,  909,  910, 2232,  910, 2232, 2540,  909,
      909,  909,  909,  909,  909,  909,  915,  915,  915,  915,
      915,  915,  915,  920,  920,  920,  920,  920,  920,  920,
      921,  921,  921,  921,  921,  921,  921,  924,  924,  924,

      924,  924,  924,  924,  925,  925,  925,  925,  925,  925,
      925,  926,  926,  926,  926,  926,  926,  926,  934, 2540,
      934, 1310,  934,  934, 2540, 2540,  934,  934,  934,  934,
      934,  934,  934,  935, 2187,  935, 2187,  935,  935, 2540,
     2540,  935,  935,  935,  935,  935,  935,  935,  937, 1310,
      937, 2540,  937,  937, 2540, 2540,  937,  937,  937,  937,
      937,  937,  937,  938,  938,  938,  938,  938,  938,  938,
      939,  939,  939,  939,  939,  939,  939,  977, 2540,  977,
      657,  657,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  658,  658, 1313,  978, 1318,  979, 1319,  980,

      659,  659,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  660,  660,  981,  661,  661,  661,  661,  661,
      661,  661, 1313, 1320, 1318,  979, 1319,  980,  662,  662,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,
      663,  663,  981,  666,  666,  666,  666,  666,  666,  666,
     2188, 1320, 2188, 2540,  664,  667,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
     1321, 1020, 1322, 1020, 2540,  667, 1021, 1021, 1021, 1021,
     1021, 1021, 1021,  667,  670,  670,  670,  670,  670,  670,
      670, 1323, 2189, 2239, 2189, 2239,  671, 2241, 1321, 2241,

     1322, 2540,  668,  667,  669,  669,  669,  669,  669,  669,
      669,  670,  670,  670,  670,  670,  670,  670, 1277, 1323,
     1022, 1278, 1022,  671,  671, 1023, 1023, 1023, 1023, 1023,
     1023, 1023,  674,  674,  674,  674,  674,  674,  674, 1326,
     1279, 2202, 2540, 2202,  675, 2203, 1277, 2203, 2540, 1278,
      672,  671,  673,  673,  673,  673,  673,  673,  673,  674,
      674,  674,  674,  674,  674,  674, 1324, 1326, 1024, 1325,
     1024,  675,  675, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
      678,  678,  678,  678,  678,  678,  678, 1327, 2248, 1330,
     2248, 2249,  679, 2249, 1324, 2540, 2540, 1325,  676,  675,

      677,  677,  677,  677,  677,  677,  677,  678,  678,  678,
      678,  678,  678,  678, 1331, 1327, 1026, 1330, 1026,  679,
      679, 1027, 1027, 1027, 1027, 1027, 1027, 1027,  682,  682,
      682,  682,  682,  682,  682, 1332, 2262, 1334, 2262, 2269,
      683, 2269, 1331, 2232, 2540, 2232,  680,  679,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682, 1335, 1332, 1028, 1334, 1028,  683,  683, 1029,
     1029, 1029, 1029, 1029, 1029, 1029,  686,  686,  686,  686,
      686,  686,  686, 1336, 2276, 1337, 2276, 2277,  687, 2277,
     1335, 2278, 2540, 2278,  684,  683,  685,  685,  685,  685,

      685,  685,  685,  686,  686,  686,  686,  686,  686,  686,
     1338, 1336, 1030, 1337, 1030,  687,  687, 1031, 1031, 1031,
     1031, 1031, 1031, 1031,  690,  690,  690,  690,  690,  690,
      690, 1339, 2239, 1340, 2239, 2241,  691, 2241, 1338, 2248,
     2540, 2248,  688,  687,  689,  689,  689,  689,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690, 1341, 1339,
     1032, 1340, 1032,  691,  691, 1033, 1033, 1033, 1033, 1033,
     1033, 1033,  694,  694,  694,  694,  694,  694,  694, 1342,
     2249, 1346, 2249, 2262,  695, 2262, 1341, 2299, 2540, 2299,
      692,  691,  693,  693,  693,  693,  693,  693,  693,  694,

      694,  694,  694,  694,  694,  694, 1347, 1342, 1034, 1346,
     1034,  695,  695, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
      698,  698,  698,  698,  698,  698,  698, 1348, 2269, 1349,
     2269, 2276,  699, 2276, 1347, 2277, 2540, 2277,  696,  695,
      697,  697,  697,  697,  697,  697,  697,  698,  698,  698,
      698,  698,  698,  698, 1350, 1348, 1036, 1349, 1036,  699,
      699, 1037, 1037, 1037, 1037, 1037, 1037, 1037,  700,  700,
      700,  700,  700,  700,  700,  701,  701,  701,  701,  701,
      701,  701, 1350, 2540, 1351, 1352, 2540,  699,  702,  702,
      702,  702,  702,  702,  702,  703,  703,  703,  703,  703,

      703,  703,  704,  704,  704,  704,  704,  704,  704,  706,
     2540,  706, 1351, 1352,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  707,  707,
      707,  707,  707,  707,  707,  710,  710,  710,  710,  710,
      710,  710, 2278, 2299, 2278, 2299,  708,  711,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710, 1353, 1038, 1357, 1038, 2540,  711, 1039, 1039,
     1039, 1039, 1039, 1039, 1039,  711,  714,  714,  714,  714,
      714,  714,  714, 1358, 2340, 1361, 2340, 2351,  715, 2351,
     1353, 2358, 1357, 2358,  712,  711,  713,  713,  713,  713,

      713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
     1362, 1358, 1040, 1361, 1040,  715,  715, 1041, 1041, 1041,
     1041, 1041, 1041, 1041,  718,  718,  718,  718,  718,  718,
      718, 1363, 2362, 1364, 2362, 2363,  719, 2363, 1362, 2367,
     2540, 2367,  716,  715,  717,  717,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718,  718, 1365, 1363,
     1042, 1364, 1042,  719,  719, 1043, 1043, 1043, 1043, 1043,
     1043, 1043,  722,  722,  722,  722,  722,  722,  722, 1366,
     2373, 1367, 2373, 2376,  723, 2376, 1365, 2340, 2540, 2340,
      720,  719,  721,  721,  721,  721,  721,  721,  721,  722,

      722,  722,  722,  722,  722,  722, 1368, 1366, 1044, 1367,
     1044,  723,  723, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
      732,  732,  732,  732,  732,  732,  732,  733,  733,  733,
      733,  733,  733,  733, 1368, 1369, 1371, 2540, 2540,  723,
      734,  734,  734,  734,  734,  734,  734,  735,  735,  735,
      735,  735,  735,  735,  740,  740,  740,  740,  740,  740,
      740, 2540, 2540, 1369, 1371,  738,  741,  739,  739,  739,
      739,  739,  739,  739,  740,  740,  740,  740,  740,  740,
      740, 1382, 1046, 1383, 1046, 1384,  741, 1047, 1047, 1047,
     1047, 1047, 1047, 1047,  741,  742,  742,  742,  742,  742,

      742,  742,  743,  743,  743,  743,  743,  743,  743, 1382,
     2380, 1383, 2380, 1384,  741,  744,  744,  744,  744,  744,
      744,  744,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
      749,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  750,  750,  753,  753,  753,  753,  753,  753,
      753, 2382, 2351, 2382, 2351,  751,  754,  752,  752,  752,
      752,  752,  752,  752,  753,  753,  753,  753,  753,  753,
      753, 1385, 1048, 1387, 1048, 2540,  754, 1049, 1049, 1049,

     1049, 1049, 1049, 1049,  754,  757,  757,  757,  757,  757,
      757,  757, 1389, 2358, 1390, 2358, 2399,  758, 2399, 1385,
     2362, 1387, 2362,  755,  754,  756,  756,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  757,  757, 1391,
     1389, 1050, 1390, 1050,  758,  758, 1051, 1051, 1051, 1051,
     1051, 1051, 1051,  761,  761,  761,  761,  761,  761,  761,
     1392, 2363, 1393, 2363, 2367,  762, 2367, 1391, 2405, 2540,
     2405,  759,  758,  760,  760,  760,  760,  760,  760,  760,
      761,  761,  761,  761,  761,  761,  761, 1394, 1392, 1052,
     1393, 1052,  762,  762, 1053, 1053, 1053, 1053, 1053, 1053,

     1053,  765,  765,  765,  765,  765,  765,  765, 1395, 2373,
     1396, 2373, 2409,  766, 2409, 1394, 2376, 2540, 2376,  763,
      762,  764,  764,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  765,  765, 1398, 1395, 1054, 1396, 1054,
      766,  766, 1055, 1055, 1055, 1055, 1055, 1055, 1055,  767,
      767,  767,  767,  767,  767,  767,  768,  768,  768,  768,
      768,  768,  768, 1398, 2410, 2380, 2410, 2380,  766,  771,
      771,  771,  771,  771,  771,  771, 2382, 2424, 2382, 2424,
      769,  772,  770,  770,  770,  770,  770,  770,  770,  771,
      771,  771,  771,  771,  771,  771, 1401, 1056, 1402, 1056,

     2540,  772, 1057, 1057, 1057, 1057, 1057, 1057, 1057,  772,
      775,  775,  775,  775,  775,  775,  775, 1403, 2425, 1404,
     2425, 2426,  776, 2426, 1401, 2399, 1402, 2399,  773,  772,
      774,  774,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  775,  775, 1405, 1403, 1058, 1404, 1058,  776,
      776, 1059, 1059, 1059, 1059, 1059, 1059, 1059,  779,  779,
      779,  779,  779,  779,  779, 1406, 2430, 1407, 2430, 2405,
      780, 2405, 1405, 2409, 2540, 2409,  777,  776,  778,  778,
      778,  778,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779, 1410, 1406, 1060, 1407, 1060,  780,  780, 1061,

     1061, 1061, 1061, 1061, 1061, 1061,  783,  783,  783,  783,
      783,  783,  783, 1413, 2410, 1415, 2410, 2437,  784, 2437,
     1410, 2439, 2540, 2439,  781,  780,  782,  782,  782,  782,
      782,  782,  782,  783,  783,  783,  783,  783,  783,  783,
     1416, 1413, 1062, 1415, 1062,  784,  784, 1063, 1063, 1063,
     1063, 1063, 1063, 1063,  787,  787,  787,  787,  787,  787,
      787, 1417, 2440, 1418, 2440, 2441,  788, 2441, 1416, 2424,
     2540, 2424,  785,  784,  786,  786,  786,  786,  786,  786,
      786,  787,  787,  787,  787,  787,  787,  787, 1419, 1417,
     1064, 1418, 1064,  788,  788, 1065, 1065, 1065, 1065, 1065,

     1065, 1065,  791,  791,  791,  791,  791,  791,  791, 1420,
     2425, 2426, 2425, 2426,  792, 2430, 1419, 2430, 2540, 2540,
      789,  788,  790,  790,  790,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791, 1424, 1420, 1066, 1422,
     1066,  792,  792, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      795,  795,  795,  795,  795,  795,  795, 1425, 1423, 2437,
     2540, 2437,  796, 2439, 1424, 2439, 2540, 1422,  793,  792,
      794,  794,  794,  794,  794,  794,  794,  795,  795,  795,
      795,  795,  795,  795, 1426, 1425, 1068, 1427, 1068,  796,
      796, 1069, 1069, 1069, 1069, 1069, 1069, 1069,  799,  799,

      799,  799,  799,  799,  799, 1428, 2440, 1429, 2440, 2441,
      800, 2441, 1426, 2540, 2540, 1427,  797,  796,  798,  798,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
      799,  799, 1435, 1428, 1070, 1429, 1070,  800,  800, 1071,
     1071, 1071, 1071, 1071, 1071, 1071,  803,  803,  803,  803,
      803,  803,  803, 1436, 2463, 1437, 2463, 2465,  804, 2465,
     1435, 2467, 2540, 2467,  801,  800,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
     1438, 1436, 1072, 1437, 1072,  804,  804, 1073, 1073, 1073,
     1073, 1073, 1073, 1073,  807,  807,  807,  807,  807,  807,

      807, 1443, 2463, 1448, 2463, 2465,  808, 2465, 1438, 2467,
     2540, 2467,  805,  804,  806,  806,  806,  806,  806,  806,
      806,  807,  807,  807,  807,  807,  807,  807, 1454, 1443,
     1074, 1448, 1074,  808,  808, 1075, 1075, 1075, 1075, 1075,
     1075, 1075,  809,  809,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  810,  810,  810, 1454, 1459, 1460, 2540,
     2540,  808,  811,  811,  811,  811,  811,  811,  811,  812,
      812,  812,  812,  812,  812,  812,  815,  815,  815,  815,
      815,  815,  815, 2540, 2540, 1459, 1460,  813,  816,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,

      815,  815,  815, 1462, 1076, 1463, 1076, 2540,  816, 1077,
     1077, 1077, 1077, 1077, 1077, 1077,  816,  820,  820,  820,
      820,  820,  820,  820, 1464, 2483, 1465, 2483, 2483,  821,
     2483, 1462, 2498, 1463, 2498,  818,  816,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  820,  820,  820,  820,
      820, 2540, 1464, 1078, 1465, 1078,  821,  821, 1079, 1079,
     1079, 1079, 1079, 1079, 1079,  822,  822,  822,  822,  822,
      822,  822,  824, 2501,  824, 2501, 2540,  823,  823,  823,
      823,  823,  823,  823,  821,  823,  823,  823,  823,  823,
      823,  823,  826, 2502,  826, 2502, 2540,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  828, 2498,  828, 2498, 2540,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      830, 2514,  830, 2514, 2540,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  831,
      831,  831,  831,  831,  831,  831,  832,  832,  832,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  834,  834,  834,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  837,  838,  838,

      838,  838,  838,  838,  838,  839,  839,  839,  839,  839,
      839,  839,  845,  845,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,  846,  847,  847,  847,  847,
      847,  847,  847,  850,  850,  850,  850,  850,  850,  850,
     2501, 2502, 2501, 2502,  848,  851,  849,  849,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  850,  850,  850,
     1468, 1080, 1469, 1080, 1470,  851, 1081, 1081, 1081, 1081,
     1081, 1081, 1081,  851,  852,  852,  852,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853, 1468, 2521,
     1469, 2521, 1470,  851,  854,  854,  854,  854,  854,  854,

      854,  857,  857,  857,  857,  857,  857,  857,  858,  858,
      858,  858,  858,  858,  858,  861,  861,  861,  861,  861,
      861,  861,  869,  869,  869,  869,  869,  869,  869,  872,
      872,  872,  872,  872,  872,  872, 2522, 2514, 2522, 2514,
      870,  873,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  872,  872,  872, 2529, 1082, 2529, 1082,
     2540,  873, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  873,
      874,  874,  874,  874,  874,  874,  874,  876,  877,  876,
     2540, 2540,  875,  875,  875,  875,  875,  875,  875,  873,
      875,  875,  875,  875,  875,  875,  875, 1084, 2530, 1084,

     2530, 1471, 1085, 1085, 1085, 1085, 1085, 1085, 1085,  879,
     2531,  879, 2531, 2540,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  881, 1471,
      881, 2540, 2540,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  883, 2521,  883,
     2521, 2540,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  885,  886,  885, 2540,
     1472,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884, 1086, 2522, 1086, 2522, 1473,
     1087, 1087, 1087, 1087, 1087, 1087, 1087,  888, 1472,  888,

     2540, 2540,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  890, 1473,  890, 2540,
     2540,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  892, 2532,  892, 2532, 2540,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  894,  895,  894, 2540, 1482,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893, 1088, 2533, 1088, 2533, 1483, 1089, 1089,
     1089, 1089, 1089, 1089, 1089,  897, 1482,  897, 2540, 2540,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,

      896,  896,  896,  896,  899, 1483,  899, 2540, 2540,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  901, 2529,  901, 2529, 2540,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  903,  904,  903, 2540, 1484,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902, 1090, 2530, 1090, 2530, 1485, 1091, 1091, 1091, 1091,
     1091, 1091, 1091,  906, 1484,  906, 2540, 2540,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  908, 1485,  908, 2540, 2540,  907,  907,  907,

      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  910, 2531,  910, 2531, 2540,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      915,  915,  915,  915,  915,  915,  915,  920,  920,  920,
      920,  920,  920,  920,  921,  921,  921,  921,  921,  921,
      921,  924,  924,  924,  924,  924,  924,  924,  925,  925,
      925,  925,  925,  925,  925,  926,  926,  926,  926,  926,
      926,  926,  934, 2540,  934, 1486,  934,  934, 2540, 2540,
      934,  934,  934,  934,  934,  934,  934,  935, 2532,  935,
     2532,  935,  935, 2540, 2540,  935,  935,  935,  935,  935,

      935,  935,  937, 1486,  937, 2540,  937,  937, 2540, 2540,
      937,  937,  937,  937,  937,  937,  937,  938,  938,  938,
      938,  938,  938,  938,  939,  939,  939,  939,  939,  939,
      939, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045,

     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1059, 1059, 1059,

     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1073, 1073, 1073, 1073, 1073,

     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1084, 1169, 1084, 2540,
     2540, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1087, 1087,

     1087, 1087, 1087, 1087, 1087, 1086, 1170, 1086, 2540, 2540,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1088, 1171, 1088, 2540, 1487, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1090, 1172, 1090, 2540, 2540, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1252, 1487, 1252, 2540, 2540,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254, 2533, 1254,
     2533, 2540, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256,
     1488, 1256, 1281, 2540, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1258, 2538, 1258, 2538, 1282, 1259, 1259, 1259, 1259,

     1259, 1259, 1259, 1285, 2539, 1285, 2539, 2538, 1488, 2538,
     1281, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1489, 2540,
     1252, 1286, 1252, 1282, 2540, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1490,
     1491, 2539, 2540, 2539, 2540, 1254, 1489, 1254, 2540, 1287,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1256, 2540, 1256, 1490, 1491, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1258, 2540, 1258, 1372, 1492, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1344, 1377, 1373, 1408, 1374,

     1375, 1376, 1345, 1378, 1444, 1431, 1494, 1466, 1409, 1432,
     1433, 1434, 1439, 1445, 1372, 1492, 1440, 1441, 1442, 2540,
     1467, 2540, 1495, 1344, 1377, 1373, 1408, 1374, 1375, 1376,
     1345, 1378, 1444, 1431, 1494, 1466, 1409, 1432, 1433, 1434,
     1439, 1445, 1496, 1498, 1440, 1441, 1442, 1455, 1467, 1455,
     1495, 1499, 1500, 1501, 1503, 1504, 1507, 1508, 1509, 1510,
     1456, 1512, 1513, 1521, 1522, 1457, 2540, 1523, 1525, 1526,
     1496, 1498, 2540, 1527, 1536, 2540, 2540, 1524, 1538, 1499,
     1500, 1501, 1503, 1504, 1507, 1508, 1509, 1510, 1539, 1512,
     1513, 1521, 1522, 1458, 1514, 1523, 1525, 1526, 1515, 1548,

     1516, 1527, 1536, 1517, 1518, 1524, 1538, 1549, 1550, 1551,
     1561, 1519, 1565, 1566, 1567, 1568, 1539, 1569, 1570, 1572,
     1573, 1574, 1514, 1575, 1576, 1577, 1515, 1548, 1516, 1578,
     1579, 1517, 1518, 1580, 1585, 1549, 1550, 1551, 1561, 1519,
     1565, 1566, 1567, 1568, 1586, 1569, 1570, 1572, 1573, 1574,
     1589, 1575, 1576, 1577, 1598, 1601, 1602, 1578, 1579, 1603,
     1604, 1580, 1585, 1605, 1606, 1607, 1608, 1610, 1611, 1613,
     1614, 1615, 1586, 1616, 1617, 1619, 2540, 1624, 1589, 1625,
     1626, 1618, 1598, 1601, 1602, 1627, 1628, 1603, 1604, 2540,
     1631, 1605, 1606, 1607, 1608, 1610, 1611, 1613, 1614, 1615,

     1629, 1616, 1617, 1619, 1620, 1624, 1620, 1625, 1626, 1618,
     1634, 1635, 1636, 1627, 1628, 1647, 1630, 1621, 1631, 1648,
     1649, 1656, 1622, 1661, 1662, 1667, 1669, 1670, 1629, 1671,
     1672, 1673, 2540, 1677, 2540, 1678, 1679, 1680, 1634, 1635,
     1636, 1681, 1682, 1647, 1630, 1683, 1684, 1648, 1649, 1656,
     1623, 1661, 1662, 1667, 1669, 1670, 1685, 1671, 1672, 1673,
     1674, 1677, 1674, 1678, 1679, 1680, 1686, 1687, 1690, 1681,
     1682, 1691, 1692, 1683, 1684, 1693, 1698, 1700, 1675, 1701,
     1702, 1703, 1704, 1706, 1685, 1707, 1708, 1709, 1710, 1711,
     1705, 1712, 1713, 1714, 1686, 1687, 1690, 1715, 1716, 1691,

     1692, 1717, 1718, 1693, 1698, 1700, 1676, 1701, 1702, 1703,
     1704, 1706, 1722, 1707, 1708, 1709, 1710, 1711, 1705, 1712,
     1713, 1714, 1723, 1724, 1725, 1715, 1716, 1726, 1727, 1717,
     1718, 1728, 1729, 1730, 1732, 1733, 1734, 1738, 1739, 1740,
     1722, 1746, 1747, 1748, 1749, 1752, 1753, 1755, 1756, 1757,
     1723, 1724, 1725, 1758, 1760, 1726, 1727, 1761, 1764, 1728,
     1729, 1730, 1732, 1733, 1734, 1738, 1739, 1740, 1765, 1746,
     1747, 1748, 1749, 1752, 1753, 1755, 1756, 1757, 1766, 1770,
     1771, 1758, 1760, 1773, 1774, 1761, 1764, 1775, 1777, 1778,
     1779, 1780, 1781, 1782, 1783, 1784, 1765, 1785, 1786, 1789,

     1790, 1791, 1792, 1794, 1795, 1796, 1766, 1770, 1771, 1797,
     1798, 1773, 1774, 1799, 1800, 1775, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1801, 1785, 1786, 1789, 1790, 1791,
     1792, 1794, 1795, 1796, 1802, 1803, 1804, 1797, 1798, 1805,
     1806, 1799, 1800, 1807, 1808, 1810, 1811, 1812, 1813, 1814,
     1815, 1816, 1801, 1817, 1820, 1821, 1822, 1818, 1823, 1825,
     1826, 1824, 1802, 1803, 1804, 1819, 1827, 1805, 1806, 1828,
     1833, 1807, 1808, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
     1837, 1817, 1820, 1821, 1822, 1818, 1823, 1825, 1826, 1824,
     1838, 1839, 1829, 1819, 1827, 1830, 1842, 1828, 1833, 1845,

     1848, 1853, 1854, 1857, 1846, 1858, 1863, 1864, 1837, 1861,
     1865, 1866, 1867, 1847, 1868, 1869, 1870, 1871, 1838, 1839,
     1829, 1872, 1862, 1830, 1842, 1873, 1874, 1845, 1848, 1853,
     1854, 1857, 1846, 1858, 1863, 1864, 1877, 1861, 1865, 1866,
     1867, 1847, 1868, 1869, 1870, 1871, 1878, 1879, 1880, 1872,
     1862, 1881, 1882, 1873, 1874, 1883, 1886, 1887, 1890, 1891,
     1894, 1895, 1896, 1897, 1877, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1878, 1879, 1880, 1910, 1912, 1881,
     1882, 1913, 1914, 1883, 1886, 1887, 1890, 1891, 1894, 1895,
     1896, 1897, 1916, 1900, 1901, 1902, 1903, 1904, 1905, 1906,

     1907, 1908, 1918, 1919, 1920, 1910, 1912, 1921, 1926, 1913,
     1914, 1927, 1929, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
     1916, 1939, 1940, 1941, 1942, 1944, 1945, 1946, 1947, 1950,
     1918, 1919, 1920, 1951, 1954, 1921, 1926, 1955, 1959, 1927,
     1929, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1962, 1939,
     1940, 1941, 1942, 1944, 1945, 1946, 1947, 1950, 1963, 1975,
     1976, 1951, 1954, 1977, 1978, 1955, 1959, 1965, 1979, 1965,
     1980, 1981, 1982, 1983, 1986, 1987, 1962, 1988, 1989, 1991,
     1992, 1993, 1995, 1996, 1997, 1966, 1963, 1975, 1976, 1999,
     2000, 1977, 1978, 2001, 2002, 2003, 1979, 2009, 1980, 1981,

     1982, 1983, 1986, 1987, 2540, 1988, 1989, 1991, 1992, 1993,
     1995, 1996, 1997, 1967, 2004, 2010, 2004, 1999, 2000, 2015,
     2016, 2001, 2002, 2003, 2017, 2009, 2018, 2019, 2020, 2021,
     2022, 2024, 2005, 2025, 2027, 2028, 2029, 2030, 2032, 2036,
     2037, 2039, 2040, 2010, 2041, 2043, 2046, 2015, 2016, 2047,
     2048, 2051, 2017, 2052, 2018, 2019, 2020, 2021, 2022, 2024,
     2006, 2025, 2027, 2028, 2029, 2030, 2032, 2036, 2037, 2039,
     2040, 2053, 2041, 2043, 2046, 2054, 2055, 2047, 2048, 2051,
     2056, 2052, 2057, 2059, 2057, 2060, 2061, 2062, 2063, 2004,
     2069, 2004, 2065, 2066, 2067, 2070, 2540, 2073, 2540, 2053,

     2058, 2540, 2076, 2054, 2055, 2077, 2078, 2005, 2056, 2079,
     2007, 2059, 2007, 2060, 2061, 2062, 2063, 2011, 2069, 2011,
     2065, 2066, 2067, 2070, 2013, 2073, 2013, 2074, 2008, 2074,
     2076, 2080, 2081, 2077, 2078, 2012, 2082, 2079, 2082, 2084,
     2091, 2084, 2014, 2092, 2093, 2075, 2094, 2095, 2087, 2097,
     2087, 2098, 2099, 2101, 2083, 2103, 2540, 2085, 2108, 2080,
     2081, 2088, 2089, 2110, 2111, 2112, 2090, 2113, 2091, 2118,
     2540, 2092, 2093, 2119, 2094, 2095, 2104, 2097, 2104, 2098,
     2099, 2101, 2106, 2103, 2106, 2086, 2108, 2049, 2114, 2049,
     2114, 2110, 2111, 2112, 2105, 2113, 2057, 2118, 2057, 2120,

     2107, 2119, 2121, 2122, 2131, 2050, 2115, 2123, 2125, 2123,
     2125, 2127, 2140, 2127, 2058, 2129, 2132, 2129, 2132, 2074,
     2135, 2074, 2135, 2141, 2142, 2124, 2126, 2120, 2143, 2128,
     2121, 2122, 2131, 2130, 2133, 2154, 2540, 2075, 2136, 2137,
     2140, 2137, 2082, 2084, 2082, 2084, 2146, 2087, 2147, 2087,
     2155, 2141, 2142, 2149, 2156, 2149, 2143, 2138, 2148, 2157,
     2083, 2085, 2151, 2154, 2151, 2090, 2158, 2159, 2160, 2161,
     2162, 2150, 2163, 2164, 2146, 2165, 2147, 2166, 2155, 2169,
     2152, 2104, 2156, 2104, 2170, 2139, 2148, 2157, 2106, 2172,
     2106, 2173, 2540, 2175, 2158, 2159, 2160, 2161, 2162, 2105,

     2163, 2164, 2114, 2165, 2114, 2166, 2107, 2169, 2176, 2177,
     2178, 2179, 2170, 2180, 2123, 2540, 2123, 2172, 2540, 2173,
     2115, 2175, 2125, 2540, 2125, 2127, 2129, 2127, 2129, 2185,
     2540, 2185, 2124, 2132, 2195, 2132, 2176, 2177, 2178, 2179,
     2126, 2180, 2199, 2128, 2130, 2200, 2135, 2186, 2135, 2201,
     2137, 2133, 2137, 2190, 2191, 2192, 2193, 2196, 2193, 2196,
     2204, 2149, 2195, 2149, 2136, 2209, 2540, 2151, 2138, 2151,
     2199, 2211, 2212, 2200, 2194, 2197, 2205, 2201, 2205, 2150,
     2213, 2190, 2191, 2192, 2207, 2152, 2207, 2214, 2204, 2215,
     2216, 2217, 2218, 2209, 2206, 2219, 2221, 2219, 2222, 2211,

     2212, 2223, 2208, 2224, 2225, 2226, 2228, 2226, 2213, 2229,
     2231, 2540, 2185, 2220, 2185, 2214, 2240, 2215, 2216, 2217,
     2218, 2540, 2244, 2227, 2221, 2233, 2222, 2233, 2245, 2223,
     2186, 2224, 2225, 2235, 2228, 2235, 2246, 2229, 2231, 2237,
     2193, 2237, 2193, 2234, 2240, 2196, 2242, 2196, 2247, 2243,
     2244, 2236, 2205, 2207, 2205, 2207, 2245, 2238, 2194, 2250,
     2254, 2255, 2258, 2197, 2246, 2251, 2259, 2260, 2261, 2540,
     2206, 2208, 2265, 2252, 2242, 2253, 2247, 2243, 2266, 2219,
     2263, 2219, 2263, 2267, 2268, 2270, 2271, 2250, 2254, 2255,
     2258, 2275, 2540, 2251, 2259, 2260, 2261, 2220, 2264, 2279,

     2265, 2252, 2226, 2253, 2226, 2272, 2266, 2233, 2280, 2233,
     2273, 2267, 2268, 2270, 2271, 2281, 2282, 2283, 2274, 2275,
     2227, 2235, 2237, 2235, 2237, 2234, 2284, 2279, 2285, 2286,
     2287, 2288, 2289, 2272, 2290, 2291, 2280, 2292, 2273, 2236,
     2238, 2294, 2295, 2281, 2282, 2283, 2274, 2293, 2296, 2297,
     2298, 2300, 2303, 2263, 2284, 2263, 2285, 2286, 2287, 2288,
     2289, 2304, 2290, 2291, 2301, 2292, 2301, 2305, 2307, 2294,
     2295, 2264, 2308, 2309, 2313, 2293, 2296, 2297, 2298, 2300,
     2303, 2310, 2302, 2310, 2314, 2315, 2316, 2318, 2316, 2304,
     2319, 2320, 2322, 2320, 2322, 2305, 2307, 2324, 2325, 2311,

     2308, 2309, 2313, 2326, 2317, 2327, 2329, 2327, 2330, 2321,
     2323, 2331, 2314, 2315, 2332, 2318, 2335, 2333, 2319, 2333,
     2336, 2338, 2336, 2328, 2339, 2324, 2325, 2312, 2301, 2343,
     2301, 2326, 2347, 2348, 2329, 2334, 2330, 2349, 2337, 2331,
     2350, 2341, 2332, 2341, 2335, 2344, 2302, 2344, 2310, 2338,
     2310, 2355, 2339, 2352, 2353, 2354, 2356, 2343, 2357, 2342,
     2347, 2348, 2316, 2345, 2316, 2349, 2311, 2359, 2350, 2359,
     2361, 2320, 2322, 2320, 2322, 2364, 2365, 2366, 2370, 2355,
     2317, 2352, 2353, 2354, 2356, 2360, 2357, 2371, 2372, 2321,
     2323, 2346, 2327, 2368, 2327, 2368, 2379, 2540, 2361, 2333,

     2374, 2333, 2374, 2364, 2365, 2366, 2370, 2336, 2381, 2336,
     2328, 2369, 2377, 2386, 2377, 2371, 2372, 2334, 2375, 2341,
     2344, 2341, 2344, 2387, 2379, 2337, 2383, 2384, 2385, 2388,
     2378, 2389, 2390, 2540, 2390, 2396, 2381, 2342, 2345, 2397,
     2392, 2386, 2392, 2394, 2398, 2394, 2359, 2400, 2359, 2400,
     2391, 2387, 2403, 2406, 2383, 2384, 2385, 2388, 2393, 2389,
     2368, 2395, 2368, 2396, 2360, 2401, 2407, 2397, 2408, 2374,
     2413, 2374, 2398, 2377, 2411, 2377, 2411, 2414, 2369, 2414,
     2403, 2406, 2416, 2418, 2416, 2418, 2420, 2375, 2421, 2422,
     2423, 2378, 2412, 2540, 2407, 2415, 2408, 2390, 2413, 2390,

     2417, 2419, 2392, 2394, 2392, 2394, 2427, 2428, 2429, 2400,
     2431, 2400, 2432, 2433, 2420, 2391, 2421, 2422, 2423, 2436,
     2393, 2395, 2438, 2442, 2411, 2444, 2411, 2401, 2414, 2445,
     2414, 2416, 2448, 2416, 2427, 2428, 2429, 2418, 2431, 2418,
     2432, 2433, 2412, 2446, 2451, 2446, 2415, 2436, 2454, 2417,
     2438, 2442, 2449, 2444, 2449, 2419, 2452, 2445, 2452, 2455,
     2448, 2447, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2464,
     2450, 2446, 2451, 2446, 2453, 2466, 2454, 2468, 2469, 2470,
     2449, 2452, 2449, 2452, 2471, 2473, 2471, 2455, 2474, 2447,
     2456, 2457, 2458, 2459, 2460, 2461, 2462, 2464, 2450, 2453,

     2475, 2476, 2472, 2466, 2477, 2468, 2469, 2470, 2478, 2479,
     2480, 2481, 2482, 2473, 2540, 2471, 2474, 2471, 2492, 2493,
     2494, 2495, 2496, 2484, 2497, 2484, 2540, 2540, 2475, 2476,
     2510, 2540, 2477, 2472, 2540, 2511, 2478, 2479, 2480, 2481,
     2482, 2485, 2486, 2489, 2486, 2489, 2492, 2493, 2494, 2495,
     2496, 2484, 2497, 2484, 2486, 2487, 2486, 2499, 2510, 2499,
     2488, 2490, 2489, 2511, 2489, 2503, 2504, 2505, 2506, 2485,
     2506, 2508, 2488, 2508, 2512, 2500, 2513, 2540, 2540, 2499,
     2490, 2499, 2515, 2517, 2515, 2517, 2507, 2527, 2519, 2509,
     2519, 2528, 2540, 2503, 2504, 2505, 2506, 2500, 2506, 2540,

     2516, 2518, 2512, 2508, 2513, 2508, 2520, 2523, 2525, 2523,
     2525, 2515, 2540, 2515, 2507, 2527, 2517, 2540, 2517, 2528,
     2519, 2509, 2519, 2540, 2540, 2524, 2526, 2540, 2523, 2516,
     2523, 2525, 2540, 2525, 2518, 2534, 2540, 2534, 2520, 2536,
     2534, 2536, 2534, 2536, 2540, 2536, 2524, 2540, 2540, 2526,
     2540, 2540, 2540, 2535, 2540, 2540, 2540, 2537, 2535, 2540,
     2540, 2537,  320,  320,  320,  320,  320,  399,  399,  399,
      399,  399,  400,  400,  400,  400,  400,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  404,  404,  404,  404,  404,  405,  405,  405,

      405,  405,  406,  406,  406,  406,  406,  411,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  476,  476,  476,
      476,  476,  498,  498,  498,  498,  498,  499,  499,  499,
      499,  499,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  502,  502,  502,  502,  502,  512,  512,  512,
      512,  512,  513,  513,  513,  513,  513,  516,  516,  516,
      516,  516,  517,  517,  517,  517,  517,  519,  519,  519,
      519,  519,  520,  520,  520,  520,  520,  521,  521,  521,
      521,  521,  522,  522,  522,  522,  522,  523,  523,  523,
      523,  523,  524,  524,  524,  524,  524,  525,  525,  525,

      525,  525,  563,  563,  563,  563,  563,  564,  564,  564,
      564,  564,  565,  565,  565,  565,  565,  566,  566,  566,
      566,  566,  568,  568,  568,  568,  568,  569,  569,  569,
      569,  569,  570,  570,  570,  570,  570,  571,  571,  571,
      571,  571,  574,  574,  574,  574,  574,  575,  575,  575,
      575,  575,  579,  579,  579,  579,  579,  580,  580,  580,
      580,  580,  584,  584,  584,  584,  584,  590,  590,  590,
      590,  590,  724,  724,  725,  725,  726,  726,  727,  727,
      728,  728,  729,  729,  730,  730,  731,  731,  737,  737,
      817,  817,  840,  840,  841,  841,  842,  842,  843,  843,

      844,  844,  856,  856,  922,  922,  923,  923,  927,  927,
      928,  928, 2540,  928,  928,  931, 2540, 2540,  931,  931,
      936,  936,  724,  724,  725,  725,  726,  726,  727,  727,
      728,  728,  729,  729,  730,  730,  731,  731,  737,  737,
      817,  817,  840,  840,  841,  841,  842,  842,  843,  843,
      844,  844,  856,  856,  922,  922,  923,  923,  927,  927,
      928,  928, 2540,  928,  928,  931, 2540, 2540,  931,  931,
      936,  936,  319, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540
    } ;

static yyconst flex_int16_t yy_chk[12748] =
    {   0,
        0,    1,    1,    1, 2658,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,    3, 2657,    3,  301,  301,  301,  343,  301,
      343,    3,    3,    3,    3,    3,    3,    3,    4,    4,

        4, 2656,    4,  302,  302,  302,  343,  302, 2655,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5, 2654,
        5,  303,  303,  303,  616,  303,  616,    5,    5,    5,
        5,    5,    5,    5,    6,    6,    6, 2653,    6,  304,
      304,  304,  616,  304, 2652,    6,    6,    6,    6,    6,
        6,    6,    7,    7,    7, 2651,    7,  305,  305,  305,
      617,  305,  617,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8, 2650,    8,  306,  306,  306,  617,  306,
     2649,    8,    8,    8,    8,    8,    8,    8,    9,    9,
        9,  321,    9,  321,  581,  321,  581, 2648,  581,    9,

        9,    9,    9,    9,    9,    9,   10,   10,   10,  585,
       10,  585,  594,  585,  594, 2647,  594,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,  618,   11,  618,
      621,  622,  621,  622, 2646,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,  623,   12,  623,  621,  622,
      624, 2645,  624,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,  623,   13,  625, 2644,  625,  624, 2643,
     2642,   13,   13,   13,   13,   13,   13,   13,   14,   14,
       14, 2640,   14,  625,  654,  655,  654,  655, 2632,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  929,

       15,  929,  654,  929,  947, 2617,  947,   15,   15,   15,
       15,   15,   15,   15,   16,   16,   16,  932,   16,  932,
     2616,  932,  947, 2615, 2614,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,  960,   17,  960,   17, 2613,
       17,   17, 2612,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,  960,   18,  961,   18,  961,   18,   18,
     2611,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,  962,   19,  962,   19, 2610,   19,   19, 2609,   19,
       19,   19,   19,   19,   19,   19,   20,   20,   20,  965,
       20,  965,   20, 2608,   20,   20, 2607,   20,   20,   20,

       20,   20,   20,   20,   21,   21,   21,  965,   21,  966,
       21,  966,   21,   21, 2606,   21,   21,   21,   21,   21,
       21,   21,   22,   22,   22,  967,   22,  967,   22, 2605,
       22,   22, 2604,   22,   22,   22,   22,   22,   22,   22,
       23,   23,   23,  967,   23,  968,   23,  968,   23,   23,
     2603,   23,   23,   23,   23,   23,   23,   23,   24,   24,
       24,  969,   24,  969,   24, 2602,   24,   24, 2601,   24,
       24,   24,   24,   24,   24,   24,   25,   25,   25,  969,
       25,  970,   25,  970,   25,   25, 2599,   25,   25,   25,
       25,   25,   25,   25,   26,   26,   26,  971,   26,  971,

       26, 2591,   26,   26, 2476,   26,   26,   26,   26,   26,
       26,   26,   27,   27,   27,  971,   27,  972,   27,  972,
       27,   27, 2421,   27,   27,   27,   27,   27,   27,   27,
       28,   28,   28,  973,   28,  973,   28, 2407,   28,   28,
     2406,   28,   28,   28,   28,   28,   28,   28,   29,   29,
       29,  973,   29,  974,   29,  974,   29,   29, 2366,   29,
       29,   29,   29,   29,   29,   29,   30,   30,   30,  977,
       30,  977,   30, 2364,   30,   30, 2271,   30,   30,   30,
       30,   30,   30,   30,   31,   31,   31,  977,   31,  978,
       31,  978,   31,   31, 2214,   31,   31,   31,   31,   31,

       31,   31,   32,   32,   32, 1018,   32, 1018,   32, 2213,
       32,   32, 2179,   32,   32,   32,   32,   32,   32,   32,
       33,   33,   33, 1094,   33, 1094,   33, 2158,   33,   33,
     2143,   33,   33,   33,   33,   33,   33,   33,   34,   34,
       34, 1094,   34, 1095,   34, 1095,   34,   34, 2111,   34,
       34,   34,   34,   34,   34,   34,   35,   35,   35, 2056,
       35, 1095, 1100, 1101, 1100, 1101, 2043,   35,   35,   35,
       35,   35,   35,   35,   36,   36,   36, 1114,   36, 1114,
     1100, 1117, 1118, 1117, 1118,   36,   36,   36,   36,   36,
       36,   36,   37,   37,   37, 1119,   37, 1119, 1120, 1121,

     1120, 1121, 2041,   37,   37,   37,   37,   37,   37,   37,
       38,   38,   38, 1123,   38, 1123, 1124, 1153, 1124, 1153,
     2037,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39, 1123,   39, 1983, 1154, 1153, 1154, 1981, 1977,   39,
       39,   39,   39,   39,   39,   39,   40,   40,   40, 1158,
       40, 1158, 1154, 1175, 1176, 1175, 1176,   40,   40,   40,
       40,   40,   40,   40,   41,   41,   41, 1158,   41, 1918,
     1177, 1175, 1177, 1887, 1877,   41,   41,   41,   41,   41,
       41,   41,   42,   42,   42, 1178,   42, 1178, 1177, 1183,
     1202, 1183, 1202,   42,   42,   42,   42,   42,   42,   42,

       43,   43,   43, 1203,   43, 1203, 1870, 1204, 1202, 1204,
     1786,   43,   43,   43,   43,   43,   43,   43,   44,   44,
       44, 1209,   44, 1209, 1234, 1204, 1234, 1785, 1714,   44,
       44,   44,   44,   44,   44,   44,   45,   45,   45, 1209,
       45, 1211,   45, 1211,   45, 1713, 1702,   45,   45,   45,
       45,   45,   45,   45,   46,   46,   46, 1693,   46, 1211,
       46, 1220,   46, 1220, 1684,   46,   46,   46,   46,   46,
       46,   46,   47,   47,   47, 1222,   47, 1222, 1223, 1220,
     1223, 1683, 1680,   47,   47,   47,   47,   47,   47,   47,
       48,   48,   48, 1222,   48, 1233, 1223, 1233, 1236, 1671,

     1236,   48,   48,   48,   48,   48,   48,   48,   49,   49,
       49, 1670,   49, 1233,   49, 1501,   49,   49, 1485,   49,
       49,   49,   49,   49,   49,   49,   50,   50,   50, 1235,
       50, 1235,   50, 1484,   50,   50, 1479,   50,   50,   50,
       50,   50,   50,   50,   51,   51,   51, 1235,   51, 1240,
       51, 1240,   51,   51, 1464,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52, 1448,   52, 1240,   52, 1436,
       52,   52, 1424,   52,   52,   52,   52,   52,   52,   52,
       53,   53,   53, 1241,   53, 1241,   53, 1420,   53,   53,
     1406,   53,   53,   53,   53,   53,   53,   53,   54,   54,

       54, 1262,   54, 1262,   54, 1402,   54,   54, 1384,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55, 1263,
       55, 1263,   55, 1366,   55,   55, 1357,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,  326,   56, 1286,
       56, 1286,   56,   56,  328,   56,   56,   56,   56,   56,
       56,   56,   57,   57,   57,   57, 1346,   57,   57,   57,
       57,   58,   58,   58,   58,  326,   58,   58,   58,   58,
     1339,   57,  328,  329,  331,  332,   59,   59,   59,   59,
       58,   59,   59,   59,   59,   60,   60,   60,   60,  331,
       60,   60,   60,   60, 1272,   59, 1272, 1291,   57, 1291,

      333,  329,  331,  332,   60, 1331, 1271,   58,   61,   61,
       61,   61, 1272,   61,   61,   61,   61,  331,   62,   62,
       62,   62,   59,   62,   62,   62,   62,   61,  333,  334,
      338,   60,  340,   63,   63,   63,   63,   62,   63,   63,
       63,   63,   64,   64,   64,   64,  344,   64,   64,   64,
       64, 1275,   63, 1275,   61, 1251, 1212,  334,  338,  596,
      340,   64, 1210, 1200,   62,   65,   65,   65,   65, 1275,
       65,   65,   65,   65,  344,   66,   66,   66,   66,   63,
       66,   66,   66,   66,   65,  598,  339,  596,   64,  599,
       67,   67,   67,   67,   66,   67,   67,   67,   67,   68,

       68,   68,   68,  339,   68,   68,   68,   68, 1285,   67,
     1285,   65, 1199,  598,  339,  600,  601,  599,   68, 1180,
     1173,   66,   69,   69,   69,   69, 1285,   69,   69,   69,
       69,  339,   70,   70,   70,   70,   67,   70,   70,   70,
       70,   69, 1162,  600,  601,   68,  602,   71,   71,   71,
       71,   70,   71,   71,   71,   71,   72,   72,   72,   72,
      603,   72,   72,   72,   72, 1293,   71, 1293,   69,   73,
       73,   73,  604,   73,  602,   72,  605, 1299,   70, 1299,
       73,   73,   73,   73,   73,   73,   73,  606,  603,  607,
      608,  609,  611,   71,   74,   74,   74, 1302,   74, 1302,

      604, 1312,   72, 1312,  605,   74,   74,   74,   74,   74,
       74,   74,   75,   75,   75,  606,   75,  607,  608,  609,
      611, 1159, 1150,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76, 1290,   76, 1290, 1292, 1298, 1292, 1298,
     1147,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77, 1290,   77, 1129, 1292, 1298, 1301, 1016, 1301,   77,
       77,   77,   77,   77,   77,   77,   78,   78,   78, 1311,
       78, 1311, 1007, 1314, 1301, 1314,  994,   78,   78,   78,
       78,   78,   78,   78,   79,   79,   79, 1311,   79,  983,
     1315, 1314, 1315,  982,  975,   79,   79,   79,   79,   79,

       79,   79,   80,   80,   80,  612,   80, 1317, 1328, 1317,
     1328,  957,  956,   80,   80,   80,   80,   80,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  948,  612,  613,   83,   83,   83,   83,   81,
       83,   83,   83,   83,   84,   84,   84,   84,  946,   84,
       84,   84,   84,  610,   83,  345,  345,  345,  345,  345,
      345,  345,  613,   84,  614,  615,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  597,
      619,   83,  620,   87,   87,   87,   82,   87,  319,  626,
       84,  627,  614,  615,   87,   87,   87,   87,   87,   87,

       87,  346,  346,  346,  346,  346,  346,  346,  619,  629,
      620,  630,  308,   82,   85,   85,   85,  626,   85,  627,
       85,    0,   85,   85,    0,   85,   85,   85,   85,   85,
       85,   85,   86,   86,   86,    0,   86,  629,   86,  630,
       86,   86,    0,   86,   86,   86,   86,   86,   86,   86,
       88,   88,   88, 1316,   88, 1316, 1327, 1329, 1327, 1329,
        0,   88,   88,   88,   88,   88,   88,   88,   89,   89,
       89, 1316,   89, 1333, 1327, 1333, 1355,    0, 1355,   89,
       89,   89,   89,   89,   89,   89,   90,   90,   90, 1356,
       90, 1356,    0, 1359, 1355, 1359,    0,   90,   90,   90,

       90,   90,   90,   90,   91,   91,   91, 1360,   91, 1360,
     1370, 1359, 1370,    0,    0,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,    0,   92, 1361, 1361, 1361,
     1361,    0,    0,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93, 1379,   93, 1379, 1380, 1381, 1380, 1381,
        0,   93,   93,   93,   93,   93,   93,   93,   94,   94,
       94, 1379,   94, 1382, 1383, 1382, 1383,    0,    0,   94,
       94,   94,   94,   94,   94,   94,   95,   95,   95,    0,
       95, 1382, 1383, 1385, 1386, 1385, 1386,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96, 1388,   96, 1388,

     1397, 1385, 1397,    0,    0,   96,   96,   96,   96,   96,
       96,   96,   97,   97,   97, 1399,   97, 1399, 1400, 1411,
     1400, 1411,    0,   97,   97,   97,   97,   97,   97,   97,
       98,   98,   98, 1412,   98, 1412, 1415, 1411, 1415,    0,
        0,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99, 1431,   99, 1431, 1415, 1432, 1433, 1432, 1433,   99,
       99,   99,   99,   99,   99,   99,  100,  100,  100, 1431,
      100,    0,    0, 1432, 1433,    0,    0,  100,  100,  100,
      100,  100,  100,  100,  101,  101,  101, 1434,  101, 1434,
     1439, 1440, 1439, 1440,    0,  101,  101,  101,  101,  101,

      101,  101,  102,  102,  102, 1434,  102,    0, 1439, 1440,
     1441,    0, 1441,  102,  102,  102,  102,  102,  102,  102,
      103,  103,  103, 1442,  103, 1442,    0, 1446, 1441, 1446,
        0,  103,  103,  103,  103,  103,  103,  103,  104,  104,
      104, 1442,  104, 1449, 1457, 1449, 1457,    0,    0,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105, 1450,
      105, 1450,  105,    0,  105,  105,    0,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  106, 1450,  106, 1451,
      106, 1451,  106,  106,    0,  106,  106,  106,  106,  106,
      106,  106,  107,  107,  107,    0,  107, 1451,  107,    0,

      107,  107,    0,  107,  107,  107,  107,  107,  107,  107,
      108,  108,  108, 1452,  108, 1452,  108,    0,  108,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109, 1452,  109, 1453,  109, 1453,  109,  109,    0,  109,
      109,  109,  109,  109,  109,  109,  110,  110,  110,    0,
      110, 1453,  110,    0,  110,  110,    0,  110,  110,  110,
      110,  110,  110,  110,  111,  111,  111, 1455,  111, 1455,
      111,    0,  111,  111,    0,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112, 1455,  112, 1456,  112, 1456,
      112,  112,    0,  112,  112,  112,  112,  112,  112,  112,

      113,  113,  113,    0,  113, 1456, 1474, 1475, 1474, 1475,
        0,  113,  113,  113,  113,  113,  113,  113,  114,  114,
      114, 1476,  114, 1476, 1477, 1475, 1477,    0,    0,  114,
      114,  114,  114,  114,  114,  114,  115,  115,  115, 1478,
      115, 1478, 1477, 1480, 1481, 1480, 1481,  115,  115,  115,
      115,  115,  115,  115,  116,  116,  116, 1487,  116, 1487,
     1502, 1480, 1502,    0,    0,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117, 1487,  117, 1488,  117, 1488,
      117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  118,    0,  118, 1488,  118,    0,  118,  118,

        0,  118,  118,  118,  118,  118,  118,  118,  119,  119,
      119, 1489,  119, 1489,  119,    0,  119,  119,    0,  119,
      119,  119,  119,  119,  119,  119,  120,  120,  120, 1489,
      120, 1490,  120, 1490,  120,  120,    0,  120,  120,  120,
      120,  120,  120,  120,  121,  121,  121,    0,  121, 1490,
      121,    0,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122, 1492,  122, 1492,  122,    0,
      122,  122,    0,  122,  122,  122,  122,  122,  122,  122,
      123,  123,  123, 1492,  123, 1505,  123, 1505,  123,  123,
        0,  123,  123,  123,  123,  123,  123,  123,  124,  124,

      124,    0,  124, 1505,  124,    0,  124,  124,    0,  124,
      124,  124,  124,  124,  124,  124,  125,  125,  125, 1506,
      125, 1506,  125,    0,  125,  125,    0,  125,  125,  125,
      125,  125,  125,  125,  126,  126,  126, 1521,  126, 1521,
      126,    0,  126,  126,    0,  126,  126,  126,  126,  126,
      126,  126,  127,  127,  127, 1521,  127, 1525,  127, 1525,
      127,  127,    0,  127,  127,  127,  127,  127,  127,  127,
      128,  128,  128,    0,  128, 1525,  128,    0,  128,  128,
        0,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129, 1526,  129, 1526,  129,    0,  129,  129,    0,  129,

      129,  129,  129,  129,  129,  129,  130,  130,  130, 1526,
      130, 1527,  130, 1527,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  131,  131,  131,    0,  131, 1527,
      131,    0,  131,  131,    0,  131,  131,  131,  131,  131,
      131,  131,  132,  132,  132, 1528,  132, 1528,  132,    0,
      132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
      133,  133,  133, 1528,  133, 1529,  133, 1529,  133,  133,
        0,  133,  133,  133,  133,  133,  133,  133,  134,  134,
      134, 1530,  134, 1530,  134,    0,  134,  134,    0,  134,
      134,  134,  134,  134,  134,  134,  135,  135,  135, 1530,

      135, 1531,  135, 1531,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136, 1532,  136, 1532,
      136,    0,  136,  136,    0,  136,  136,  136,  136,  136,
      136,  136,  137,  137,  137, 1532,  137, 1533, 1534, 1533,
     1534,    0,    0,  137,  137,  137,  137,  137,  137,  137,
      138,  138,  138, 1535,  138, 1535, 1534, 1539, 1540, 1539,
     1540,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139, 1541,  139, 1541,    0, 1539, 1540,    0,    0,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140, 1542,
      140, 1542, 1543, 1544, 1543, 1544,    0,  140,  140,  140,

      140,  140,  140,  140,  141,  141,  141, 1542,  141,    0,
     1545, 1544, 1545,    0,    0,  141,  141,  141,  141,  141,
      141,  141,  142,  142,  142, 1546,  142, 1546, 1547, 1549,
     1547, 1549,    0,  142,  142,  142,  142,  142,  142,  142,
      143,  143,  143, 1546,  143,    0, 1550, 1549, 1550,    0,
        0,  143,  143,  143,  143,  143,  143,  143,  144,  144,
      144, 1553,  144, 1553, 1550, 1554, 1556, 1554, 1556,  144,
      144,  144,  144,  144,  144,  144,  145,  145,  145, 1553,
      145, 1555,  145, 1555,  145,  145,    0,  145,  145,  145,
      145,  145,  145,  145,  146,  146,  146,  631,  146, 1555,

      146,    0,  146,  146,    0,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  147,  147,    0,  147,  147,  147,
      147,  148,  148,  148,  148,  631,  148,  148,  148,  148,
        0,  147,  151,  151,  151, 1558,  151, 1558,  632, 1557,
      148, 1557,    0,  151,  151,  151,  151,  151,  151,  151,
      633,  309, 1560,  309, 1560,  309,  309, 1557,  147,  309,
      309,  309,  309,  309,  309,  309,  632,  148,  149,  149,
      149, 1559,  149, 1559,  149,    0,  149,  149,  633,  149,
      149,  149,  149,  149,  149,  149,  150,  150,  150, 1559,
      150, 1562,  150, 1562,  150,  150,    0,  150,  150,  150,

      150,  150,  150,  150,  152,  152,  152,    0,  152, 1562,
     1563, 1564, 1563, 1564,    0,  152,  152,  152,  152,  152,
      152,  152,  153,  153,  153, 1581,  153, 1581,  153, 1582,
      153, 1582,    0,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154, 1584,  154, 1584,  154, 1585,  154, 1585,
        0,  154,  154,  154,  154,  154,  154,  154,  155,  155,
      155, 1590,  155, 1590,  155, 1585,  155,    0,    0,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156, 1590,
      156, 1591,  156, 1591,  156,    0,    0,  156,  156,  156,
      156,  156,  156,  156,  157,  157,  157, 1592,  157, 1592,

      157, 1593,  157, 1593,    0,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  158, 1592,  158, 1594,  158, 1594,
      158,    0,    0,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159,    0,  159, 1594,  159, 1595,  159, 1595,
        0,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160, 1596,  160, 1596,  160, 1597,  160, 1597,    0,  160,
      160,  160,  160,  160,  160,  160,  161,  161,  161, 1596,
      161, 1599, 1600, 1599, 1600,    0,    0,  161,  161,  161,
      161,  161,  161,  161,  162,  162,  162,    0,  162, 1599,
     1612, 1620, 1612, 1620,    0,  162,  162,  162,  162,  162,

      162,  162,  163,  163,  163, 1621,  163, 1621, 1622, 1620,
     1622,    0,    0,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164, 1621,  164, 1632, 1633, 1632, 1633,    0,
        0,  164,  164,  164,  164,  164,  164,  164,  165,  165,
      165,    0,  165, 1632, 1637, 1638, 1637, 1638,    0,  165,
      165,  165,  165,  165,  165,  165,  166,  166,  166, 1639,
      166, 1639, 1637, 1640, 1641, 1640, 1641,  166,  166,  166,
      166,  166,  166,  166,  167,  167,  167, 1639,  167, 1642,
        0, 1642, 1641,    0,    0,  167,  167,  167,  167,  167,
      167,  167,  168,  168,  168, 1643,  168, 1643, 1644, 1645,

     1644, 1645,    0,  168,  168,  168,  168,  168,  168,  168,
      169,  169,  169, 1646,  169, 1646, 1650, 1651, 1650, 1651,
        0,  169,  169,  169,  169,  169,  169,  169,  170,  170,
      170, 1652,  170, 1652, 1650, 1653, 1654, 1653, 1654,  170,
      170,  170,  170,  170,  170,  170,  171,  171,  171, 1655,
      171, 1655, 1656, 1657, 1656, 1657,    0,  171,  171,  171,
      171,  171,  171,  171,  172,  172,  172, 1658,  172, 1658,
     1656, 1657, 1659,    0, 1659,  172,  172,  172,  172,  172,
      172,  172,  173,  173,  173, 1660,  173, 1660,    0, 1663,
     1659, 1663,    0,  173,  173,  173,  173,  173,  173,  173,

      174,  174,  174, 1664,  174, 1664, 1665, 1666, 1665, 1666,
        0,  174,  174,  174,  174,  174,  174,  174,  175,  175,
      175, 1668,  175, 1668, 1674, 1675, 1674, 1675,    0,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176, 1688,
      176, 1688, 1674, 1689, 1690, 1689, 1690,  176,  176,  176,
      176,  176,  176,  176,  177,  177,  177, 1688,  177, 1694,
        0, 1694, 1690,    0,    0,  177,  177,  177,  177,  177,
      177,  177,  178,  178,  178,  634,  178, 1695,    0, 1695,
      636,    0,  637,  178,  178,  178,  178,  178,  178,  178,
      179,  179,  179,  179,  634,  179,  179,  179,  179,  180,

      180,  180,  180,  634,  180,  180,  180,  180,  636,  179,
      637,  639,  640,  641,  181,  181,  181,  181,  180,  181,
      181,  181,  181,  182,  182,  182,  182,  642,  182,  182,
      182,  182, 1696,  181, 1696, 1697,  179, 1697,  645,  639,
      640,  641,  182,    0,    0,  180,  183,  183,  183,  183,
        0,  183,  183,  183,  183,  642,  184,  184,  184,  184,
      181,  184,  184,  184,  184,  183,  645,  646,  647,  182,
      649,  185,  185,  185,  185,  184,  185,  185,  185,  185,
      186,  186,  186,  186,  650,  186,  186,  186,  186, 1699,
      185, 1699,  183,    0,    0,  646,  647,    0,  649,  186,

      652,  653,  184,  187,  187,  187,  187,    0,  187,  187,
      187,  187,  650,  188,  188,  188,  188,  185,  188,  188,
      188,  188,  187,  189,  189,  189,  186,  189,  652,  653,
        0, 1720,  188, 1720,  189,  189,  189,  189,  189,  189,
      189,  190,  190,  190, 1721,  190, 1721,    0, 1719,  187,
     1719,    0,  190,  190,  190,  190,  190,  190,  190,  188,
      191,  191,  191, 1731,  191, 1731, 1719, 1735, 1736, 1735,
     1736,  191,  191,  191,  191,  191,  191,  191,  192,  192,
      192, 1737,  192, 1737, 1741, 1742, 1741, 1742,    0,  192,
      192,  192,  192,  192,  192,  192,  193,  193,  193, 1743,

      193, 1743, 1744, 1742, 1744,    0,    0,  193,  193,  193,
      193,  193,  193,  193,  194,  194,  194, 1745,  194, 1745,
     1754, 1764, 1754, 1764,    0,  194,  194,  194,  194,  194,
      194,  194,  195,  195,  195, 1766,  195, 1766,  195, 1764,
      195,  195,    0,  195,  195,  195,  195,  195,  195,  195,
      196,  196,  196, 1766,  196, 1767,  196, 1767,  196,  196,
        0,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197, 1768,  197, 1768, 1769, 1773, 1769, 1773,    0,  197,
      197,  197,  197,  197,  197,  197,  198,  198,  198, 1768,
      198,    0, 1775, 1773, 1775,    0,    0,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199, 1778,  199, 1778,
     1775, 1779, 1782, 1779, 1782,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200, 1778,  200,    0,    0, 1779,
     1782,    0,    0,  200,  200,  200,  200,  200,  200,  200,
      201,  201,  201, 1793,  201, 1793, 1801, 1809, 1801, 1809,
        0,  201,  201,  201,  201,  201,  201,  201,  202,  202,
      202,  656,  202, 1832, 1801, 1832, 1835,    0, 1835,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,    0,  656,
      940,  205,  205,  205,  205,  203,  205,  205,  205,  205,

      206,  206,  206,  206,    0,  206,  206,  206,  206,    0,
      205,  347,  347,  347,  347,  347,  347,  347,  940,  206,
        0,  941,  203,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,    0,  943,  205,  325,  213,
      213,  213,  204,  213,    0,  325,  206,  944,  325,  941,
      213,  213,  213,  213,  213,  213,  213,  348,  348,  348,
      348,  348,  348,  348,  943,  945,  325,  949,    0,  204,
      207,  207,  207,  325,  207,  944,  325, 1836,  207, 1836,
        0,  207,  207,  207,  207,  207,  207,  207,  208,  208,
      208,    0,  208,  945,    0,  949,  208,    0,  950,  208,

      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  214,  214,
      214,    0,  214,  951,    0,  209,  950,    0,    0,  214,
      214,  214,  214,  214,  214,  214,  313, 1841,  313, 1841,
      313,  313,  952,  953,  313,  313,  313,  313,  313,  313,
      313,  951,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  229,  229,  229,    0,  229,
      952,  953,  210, 1844,    0, 1844,  229,  229,  229,  229,
      229,  229,  229,  315, 1850,  315, 1850,  315,  315,  954,
      955,  315,  315,  315,  315,  315,  315,  315,    0,  210,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  230,  230,  230,    0,  230,  954,  955,  211,
     1852,    0, 1852,  230,  230,  230,  230,  230,  230,  230,
      349,  349,  349,  349,  349,  349,  349,  350,  350,  350,
      350,  350,  350,  350,    0,    0,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  233,
      233,  233, 1856,  233, 1856,    0,  212, 1810,    0, 1810,
      233,  233,  233,  233,  233,  233,  233,  351,  351,  351,
      351,  351,  351,  351,  352, 1810,  352,  352,  352,  352,
      352,  352,  352,  212,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  234,  234,  234, 1876,
      234, 1876, 1885,  215, 1885,    0,    0,  234,  234,  234,
      234,  234,  234,  234,  354,    0,  354,  354,  354,  354,
      354,  354,  354,  379,  379,  379,  379,  379,  379,  379,
      215,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  275,  275,  275, 1889,  275, 1889, 1893,
      216, 1893,    0,    0,  275,  275,  275,  275,  275,  275,
      275,  355,    0,  355,  355,  355,  355,  355,  355,  355,
      380,  380,  380,  380,  380,  380,  380,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      276,  276,  276, 1899,  276, 1899, 1909,  217, 1909,    0,
        0,  276,  276,  276,  276,  276,  276,  276,  357,    0,
      357,  357,  357,  357,  357,  357,  357,  381,  381,  381,
      381,  381,  381,  381,  217,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  285,  285,  285,
     1911,  285, 1911, 1915,  218, 1915,    0,    0,  285,  285,
      285,  285,  285,  285,  285,  358,    0,  358,  358,  358,
      358,  358,  358,  358,  382,  382,  382,  382,  382,  382,
      382,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  286,  286,  286, 1917,  286, 1917,

     1923,  219, 1923,    0,    0,  286,  286,  286,  286,  286,
      286,  286,  360,    0,  360,  360,  360,  360,  360,  360,
      360,  383,  383,  383,  383,  383,  383,  383,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  287,  287,  287, 1924,  287, 1924, 1925,  220, 1925,
        0,    0,  287,  287,  287,  287,  287,  287,  287,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  384,  384,
      384,  384,  384,  384,  384,  220,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  288,  288,
      288, 1928,  288, 1928, 1931,  221, 1931,    0,    0,  288,

      288,  288,  288,  288,  288,  288,  363,  958,  363,  363,
      363,  363,  363,  363,  363,  386,  386,  386,  386,  386,
      386,  386,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  958,    0,  959,  289,  289,
      289,  289,  222,  289,  289,  289,  289,  290,  290,  290,
      290,    0,  290,  290,  290,  290,  364,  289,  364,  364,
      364,  364,  364,  364,  364,  959,  290,    0,    0,  222,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,    0, 1948,  289, 1948,  963,  964, 1953,  223,
     1953,    0,    0,  290,  291,  291,  291,  291,    0,  291,

      291,  291,  291,  366,    0,  366,  366,  366,  366,  366,
      366,  366,    0,  291,  963,  964,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  407,
      407,  407,  407,  407,  407,  407,  224, 1957,    0, 1957,
      291,  292,  292,  292,  292,    0,  292,  292,  292,  292,
      367,    0,  367,  367,  367,  367,  367,  367,  367, 1958,
      292, 1958,    0,  224,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  976,  293,  293,  293,
      979,  293, 1961,  225, 1961,    0,    0,  292,  293,  293,
      293,  293,  293,  293,  293,  369,    0,  369,  369,  369,

      369,  369,  369,  369,  976,  980,    0, 1964,  979, 1964,
      225,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  294,  294,  294, 1966,  294, 1966, 1969,
      226, 1969,    0,  980,  294,  294,  294,  294,  294,  294,
      294,  370,    0,  370,  370,  370,  370,  370,  370,  370,
      408,  408,  408,  408,  408,  408,  408,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      295,  295,  295, 1971,  295, 1971, 1973,  227, 1973,    0,
        0,  295,  295,  295,  295,  295,  295,  295,  372,    0,
      372,  372,  372,  372,  372,  372,  372,  409,  409,  409,

      409,  409,  409,  409,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  296,  296,  296,
      981,  296,  984, 1974,  228, 1974,    0,  985,  296,  296,
      296,  296,  296,  296,  296,  353,  353,  353,  353,  353,
      353,  353,    0,    0, 1813,  986, 1813,  353,  981,  987,
      984,  228,  231,  231,  231,  985,  231, 1985,  231, 1985,
      231,  231, 1813,  231,  231,  231,  231,  231,  231,  231,
      232,  232,  232,  986,  232,  353,  232,  987,  232,  232,
        0,  232,  232,  232,  232,  232,  232,  232,  235,  235,
      235, 1816,  235, 1816,  235, 1821,  235, 1821,    0,  235,

      235,  235,  235,  235,  235,  235,  236,  236,  236, 1816,
      236,    0,  236, 1821,  236,    0,    0,  236,  236,  236,
      236,  236,  236,  236,  237,  237,  237, 1831,  237, 1831,
      237, 1834,  237, 1834,    0,  237,  237,  237,  237,  237,
      237,  237,  238,  238,  238, 1831,  238,    0,  238, 1834,
      238,    0,    0,  238,  238,  238,  238,  238,  238,  238,
      239,  239,  239, 1840,  239, 1840,  239, 1843,  239, 1843,
        0,  239,  239,  239,  239,  239,  239,  239,  240,  240,
      240, 1840,  240,    0,  240, 1843,  240,    0,    0,  240,
      240,  240,  240,  240,  240,  240,  241,  241,  241, 1848,

      241, 1848,  241, 1849,  241, 1849,    0,  241,  241,  241,
      241,  241,  241,  241,  242,  242,  242, 1848,  242,    0,
      242, 1849,  242,    0,    0,  242,  242,  242,  242,  242,
      242,  242,  243,  243,  243, 1851,  243, 1851,  243, 1855,
      243, 1855,    0,  243,  243,  243,  243,  243,  243,  243,
      244,  244,  244, 1851,  244,    0,  244, 1855,  244,    0,
        0,  244,  244,  244,  244,  244,  244,  244,  245,  245,
      245, 1858,  245, 1858,  245, 1875,  245, 1875,    0,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246, 1858,
      246,    0,  246, 1875,  246,    0,    0,  246,  246,  246,

      246,  246,  246,  246,  247,  247,  247, 1880,  247, 1880,
      247, 1883,  247, 1883,    0,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248, 1880,  248,    0,  248, 1883,
      248,    0,    0,  248,  248,  248,  248,  248,  248,  248,
      249,  249,  249, 1884,  249, 1884,  249, 1888,  249, 1888,
        0,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250, 1884,  250,    0,  250, 1888,  250,    0,    0,  250,
      250,  250,  250,  250,  250,  250,  251,  251,  251, 1892,
      251, 1892,  251, 1895,  251, 1895,    0,  251,  251,  251,
      251,  251,  251,  251,  252,  252,  252, 1892,  252,    0,

      252, 1895,  252,    0,    0,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253, 1896,  253, 1896,  253, 1897,
      253, 1897,    0,  253,  253,  253,  253,  253,  253,  253,
      254,  254,  254, 1896,  254,    0,  254, 1897,  254,    0,
        0,  254,  254,  254,  254,  254,  254,  254,  255,  255,
      255, 1898,  255, 1898,  255, 1910,  255, 1910,    0,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256, 1898,
      256,    0,  256, 1910,  256,    0,    0,  256,  256,  256,
      256,  256,  256,  256,  257,  257,  257, 1922,  257, 1922,
      257, 1930,  257, 1930,    0,  257,  257,  257,  257,  257,

      257,  257,  258,  258,  258, 1922,  258,    0,  258, 1930,
      258,    0,    0,  258,  258,  258,  258,  258,  258,  258,
      259,  259,  259, 1938,  259, 1938,  259, 1941,  259, 1941,
        0,  259,  259,  259,  259,  259,  259,  259,  260,  260,
      260, 1938,  260,    0,  260, 1941,  260,    0,    0,  260,
      260,  260,  260,  260,  260,  260,  261,  261,  261, 1942,
      261, 1942,  261, 1952,  261, 1952,    0,  261,  261,  261,
      261,  261,  261,  261,  262,  262,  262, 1942,  262,    0,
      262, 1952,  262,    0,    0,  262,  262,  262,  262,  262,
      262,  262,  263,  263,  263, 1956,  263, 1956,  263, 1965,

      263, 1965,    0,  263,  263,  263,  263,  263,  263,  263,
      264,  264,  264, 1956,  264,    0,  264, 1965,  264,    0,
        0,  264,  264,  264,  264,  264,  264,  264,  265,  265,
      265, 1968,  265, 1968,  265, 1994,  265, 1994,    0,  265,
      265,  265,  265,  265,  265,  265,  266,  266,  266, 1968,
      266,  989,  266,  990,  266,    0,  991,  266,  266,  266,
      266,  266,  266,  266,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  297,  297,  297,  989,
      297,  990,    0,  267,  991,    0,    0,  297,  297,  297,
      297,  297,  297,  297,  373,    0,  373,  373,  373,  373,

      373,  373,  373,  410,  410,  410,  410,  410,  410,  410,
      267,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  298,  298,  298, 1998,  298, 1998, 2005,
      268, 2005,    0,    0,  298,  298,  298,  298,  298,  298,
      298,  375,  992,  375,  375,  375,  375,  375,  375,  375,
      416,  416,  416,  416,  416,  416,  416,  268,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      992,    0,  993,  299,  299,  299,  299,  269,  299,  299,
      299,  299,  300,  300,  300,  300,    0,  300,  300,  300,
      300,  376,  299,  376,  376,  376,  376,  376,  376,  376,

      993,  300,    0,    0,  269,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,    0, 2008,  299,
     2008,  995,  996, 2012,  270, 2012,    0,    0,  300,  311,
      311,  311,  311,    0,  311,  311,  311,  311,  378,    0,
      378,  378,  378,  378,  378,  378,  378,    0,  311,  995,
      996,  270,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  417,  417,  417,  417,  417,  417,
      417,  271, 2014,    0, 2014,  311,  312,  312,  312,  312,
        0,  312,  312,  312,  312,  387,    0,  387,  387,  387,
      387,  387,  387,  387, 2023,  312, 2023,    0,  271,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,    0,  316,  316,  316,  997,  316, 2026,  272, 2026,
        0,    0,  312,  316,  316,  316,  316,  316,  316,  316,
      385,    0,  385,  998,    0,  385,  385,  385,  385,  385,
      385,  385, 2031,  997, 2031,  272,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  317,  317,
      317,  998,  317,    0, 2033,  273, 2033,    0,    0,  317,
      317,  317,  317,  317,  317,  317,  389,    0,  389,  389,
      389,  389,  389,  389,  389,  418,  418,  418,  418,  418,
      418,  418,  273,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  318,  318,  318, 2034,  318,
     2034,    0,  274, 1970,    0, 1970,  318,  318,  318,  318,
      318,  318,  318,    0,  635,  327,  644,  942,  635,  635,
      635, 1970,  327,  327,  644,  942,  327,  999,  327,  274,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  635,  327,  644,  942,  635,  635,  635,  277,
      327,  327,  644,  942,  327,  999,  327, 2035, 2045, 2035,
     2045,  341,  356,  356,  356,  356,  356,  356,  356,  341,
      341,  341, 1000, 1001,  356, 1002,  277,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  341,

     1003, 1004, 1005, 1006, 1008,    0,  278,  341,  341,  341,
     1000, 1001,  356, 1002,  359,  359,  359,  359,  359,  359,
      359, 2050, 2058, 2050, 2058, 2064,  359, 2064, 1003, 1004,
     1005, 1006, 1008,  278,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  419,  419,  419,  419,
      419,  419,  419,  279,  359,  362,  362,  362,  362,  362,
      362,  362, 2068,    0, 2068, 1009,  390,  362,  390,  390,
      390,  390,  390,  390,  390, 2071, 2072, 2071, 2072,    0,
      279,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280, 1009, 1010,  362, 2075, 1012, 2075,    0,

      280,  365,  365,  365,  365,  365,  365,  365, 2083, 2085,
     2083, 2085,  648,  365,  368,  368,  368,  368,  368,  368,
      368, 1013, 1010, 1014,  648, 1012,  368,  280,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      648,  365, 1015, 1017, 1019, 1092, 1972,  281, 1972, 1013,
        0, 1014,  648,    0,  368,  371,  371,  371,  371,  371,
      371,  371,    0, 2090, 1972, 2090, 2105,  371, 2105,    0,
     1015, 1017, 1019, 1092,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  420,  420,  420,
      420,  420,  420,  420,  282,  371,  374,  374,  374,  374,

      374,  374,  374, 2107,    0, 2107, 1093,  392,  374,  392,
      392,  392,  392,  392,  392,  392, 2109, 2115, 2109, 2115,
        0,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283, 1093, 1096,  374, 1097, 1098,    0,
        0,  283,  377,  377,  377,  377,  377,  377,  377, 2117,
     2124, 2117, 2124,  651,  377,  388,  388,  388,  388,  388,
      388,  388,  651, 1096, 1099, 1097, 1098,  388,  283,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  651,  377, 1103, 1104, 1105, 1106, 1984,  284, 1984,
      651, 2126, 1099, 2126, 1107,  388,    0,  391,  391,  391,

      391,  391,  391,  391, 2128, 1984, 2128,    0, 1989,  391,
     1989, 1103, 1104, 1105, 1106,  284,  307,  307,  307,  307,
      307,  307, 1107,  307,  307,    0, 1989,  307,  307,  307,
      307,  307,  307,  307,  310,  310,  310,  391,  310,  310,
        0, 1108,  310,  310,  310,  310,  310,  310,  310,  314,
      314,  314, 1109,  314,  314,    0, 1111,  314,  314,  314,
      314,  314,  314,  314,  330,    0,  336, 1011,  330, 1108,
      643,  336,    0,    0,  330, 1110,  638, 1112, 1113,  330,
     1109,  643,    0,  638, 1111,  638,  336, 1110,  643, 1115,
     1116,  336,  330, 1011,  336, 1122,  330,  336,  643,    0,

     1011,  336,  330, 1110,  638, 1112, 1113,  330,  335,  643,
      335,  638, 1125,  638,  336, 1110,  643, 1115, 1116,  336,
        0, 1011,  336, 1122,  335,  336,  335,  335,  393, 1126,
      393,  393,  393,  393,  393,  393,  393, 1127, 1128, 1130,
     1125,  335,  394,  394,  394,  394,  394,  394,  394,    0,
      335,  335,  335,    0,  394,  335,  395, 1126,  395,  395,
      395,  395,  395,  395,  395, 1127, 1128, 1130,  396,  335,
      396,  396,  396,  396,  396,  396,  396,  988,  335,  335,
      335,  337,  394, 1131,  988, 1102, 1132,  337, 1102, 1133,
      337,  988, 1134,  337, 1135, 1136,  337,  337, 1137,  337,

        0, 1138, 1102, 1139,    0,  988,  337, 1140,    0,  337,
     1141, 1131,  988, 1102, 1132,  337, 1102, 1133,  337,  988,
     1134,  337, 1135, 1136,  337,  337, 1137,  337,  342, 1138,
     1102, 1139,  342,    0, 1142, 1140,  342, 1143, 1141, 1144,
      342, 1145,  342, 1146, 1149,  342, 1151,    0,  342,  397,
      397,  397,  397,  397,  397,  397,  342, 1148, 1152, 1155,
      342,  397, 1142,    0,  342, 1143,    0, 1144,  342, 1145,
      342, 1146, 1149,  342, 1151,  398,  342,  398,  398,  398,
      398,  398,  398,  398, 1148, 1148, 1152, 1155,  413,  397,
      413,  413,  413,  413,  413,  413,  413,  414,  414,  414,

      414,  414,  414,  414, 1156, 1157, 1160, 1161,  415,  414,
      415,  415,  415,  415,  415,  415,  415,  421,  421,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,
      422,    0, 1156, 1157, 1160, 1161,    0,  414,  423,  423,
      423,  423,  423,  423,  423,  424,  424,  424,  424,  424,
      424,  424,  425,    0,  425,  425,  425,  425,  425,  425,
      425,  426,  426,  426,  426,  426,  426,  426,    0, 1163,
     1164, 1165,  427,  426,  427,  427,  427,  427,  427,  427,
      427,  428,    0,  428,  428,  428,  428,  428,  428,  428,
      429,  429,  429,  429,  429,  429,  429, 1163, 1164, 1165,

     1166,  426,  429,  430,    0,  430,  430,  430,  430,  430,
      430,  430,  431,    0,  431,  431,  431,  431,  431,  431,
      431,  432,  432,  432,  432,  432,  432,  432, 1166, 1167,
      429, 1168,  433,  432,  433,  433,  433,  433,  433,  433,
      433,  434,    0,  434,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  435, 1167, 1174, 1168,
     1179,  432,  435,  436,    0,  436,  436,  436,  436,  436,
      436,  436,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  438,  438,  438, 1174,    0, 1179,  439,
      435,  439,  439,  439,  439,  439,  439,  439,  440,  440,

      440,  440,  440,  440,  440,    0, 1181, 1182, 1184,  441,
      440,  441,  441,  441,  441,  441,  441,  441,  442,    0,
      442,  442,  442,  442,  442,  442,  442,  443,  443,  443,
      443,  443,  443,  443, 1181, 1182, 1184, 1185,  440,  443,
      444,    0,  444,  444,  444,  444,  444,  444,  444,  445,
        0,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446, 1185, 1186,  443, 1187,  447,
      446,  447,  447,  447,  447,  447,  447,  447,  448,    0,
      448,  448,  448,  448,  448,  448,  448,  449,  449,  449,
      449,  449,  449,  449, 1186,    0, 1187, 1188,  446,  449,

      450,    0,  450,  450,  450,  450,  450,  450,  450,  451,
        0,  451,  451,  451,  451,  451,  451,  451,  452,  452,
      452,  452,  452,  452,  452, 1188, 1189,  449, 1190,  453,
      452,  453,  453,  453,  453,  453,  453,  453,  454,    0,
      454,  454,  454,  454,  454,  454,  454,  455,  455,  455,
      455,  455,  455,  455, 1189,    0, 1190, 1191,  452,  455,
      456,    0,  456,  456,  456,  456,  456,  456,  456,  457,
        0,  457,  457,  457,  457,  457,  457,  457,  458,  458,
      458,  458,  458,  458,  458, 1191, 1192,  455, 1194,  459,
      458,  459,  459,  459,  459,  459,  459,  459,  460,    0,

      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461, 1192,    0, 1194, 1196,  458,  461,
      462,    0,  462,  462,  462,  462,  462,  462,  462,  463,
        0,  463,  463,  463,  463,  463,  463,  463,  464,  464,
      464,  464,  464,  464,  464, 1196, 1197,  461, 1201,  465,
      464,  465,  465,  465,  465,  465,  465,  465,  466,    0,
      466,  466,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  467,  467, 1197, 1205, 1201, 1206,  464,  467,
      468,    0,  468,  468,  468,  468,  468,  468,  468,  469,
      469,  469,  469,  469,  469,  469,  470,  470,  470,  470,

      470,  470,  470, 1205, 2130, 1206, 2130,  467,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  473,    0,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  474,  474,    0, 1207,
     1208, 1213,  475,  474,  475,  475,  475,  475,  475,  475,
      475,  477,    0,  477,  477,  477,  477,  477,  477,  477,
      478,  478,  478,  478,  478,  478,  478, 1207, 1208, 1213,
        0,  474,  478,  479,    0,  479,  479,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  480,  480,  481,
      481,  481,  481,  481,  481,  481,  482, 2133,  482, 2133,

      478,  482,  482,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  483,  483,  483,  484, 2134,  484, 2134,    0,
      484,  484,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  485,  485,  486, 2136,  486, 2136,    0,  486,
      486,  486,  486,  486,  486,  486,  487,  487,  487,  487,
      487,  487,  487,  488, 2138,  488, 2138,    0,  488,  488,
      488,  488,  488,  488,  488,  489,  489,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  490,  490,  491,
      491,  491,  491,  491,  491,  491,  492,  492,  492,  492,
      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,

      494,  494,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  495,  495,  496,  496,  496,  496,  496,  496,
      496,  497,  497,  497,  497,  497,  497,  497,  503,  503,
      503,  503,  503,  503,  503,  504,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  505,  505,  506,
        0,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507, 1214, 1215, 1216, 1217,  508,
      507,  508,  508,  508,  508,  508,  508,  508,  509,  509,
      509,  509,  509,  509,  509,  510,  510,  510,  510,  510,
      510,  510,    0, 1214, 1215, 1216, 1217,    0,  507,  511,

      511,  511,  511,  511,  511,  511,  514,  514,  514,  514,
      514,  514,  514,  515,  515,  515,  515,  515,  515,  515,
      518,  518,  518,  518,  518,  518,  518,  526,  526,  526,
      526,  526,  526,  526,  527,    0,  527,  527,  527,  527,
      527,  527,  527,  528,  528,  528,  528,  528,  528,  528,
     1218, 2144,    0, 2144,  529,  528,  529,  529,  529,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  530,  530,
      531,  531,  531,  531,  531,  531,  531,    0, 1218,  532,
      532,  532,    0,  528,  532,  532,  532,  532,  532,  532,
      532,  533,  533,  533,  533,  533,  533,  533,  534, 2145,

      534, 2145,    0,  534,  534,  534,  534,  534,  534,  534,
      535,  535,  535,  535,  535,  535,  535,  536, 2150,  536,
     2150,    0,  536,  536,  536,  536,  536,  536,  536,  537,
      537,  537,  537,  537,  537,  537,  538, 2152,  538, 2152,
        0,  538,  538,  538,  538,  538,  538,  538,  539,  539,
      539,  539,  539,  539,  539,  540,  540,  540,    0,    0,
      540,  540,  540,  540,  540,  540,  540,  541,  541,  541,
      541,  541,  541,  541,  542, 2153,  542, 2153,    0,  542,
      542,  542,  542,  542,  542,  542,  543,  543,  543,  543,
      543,  543,  543,  544, 2167,  544, 2167,    0,  544,  544,

      544,  544,  544,  544,  544,  545,  545,  545,  545,  545,
      545,  545,  546, 2168,  546, 2168,    0,  546,  546,  546,
      546,  546,  546,  546,  547,  547,  547,  547,  547,  547,
      547,  548,  548,  548,    0,    0,  548,  548,  548,  548,
      548,  548,  548,  549,  549,  549,  549,  549,  549,  549,
      550, 2174,  550, 2174,    0,  550,  550,  550,  550,  550,
      550,  550,  551,  551,  551,  551,  551,  551,  551,  552,
     2181,  552, 2181,    0,  552,  552,  552,  552,  552,  552,
      552,  553,  553,  553,  553,  553,  553,  553,  554, 2182,
      554, 2182,    0,  554,  554,  554,  554,  554,  554,  554,

      555,  555,  555,  555,  555,  555,  555,  556,  556,  556,
        0,    0,  556,  556,  556,  556,  556,  556,  556,  557,
      557,  557,  557,  557,  557,  557,  558, 2183,  558, 2183,
        0,  558,  558,  558,  558,  558,  558,  558,  559,  559,
      559,  559,  559,  559,  559,  560, 2184,  560, 2184,    0,
      560,  560,  560,  560,  560,  560,  560,  561,  561,  561,
      561,  561,  561,  561,  562, 2186,  562, 2186,    0,  562,
      562,  562,  562,  562,  562,  562,  567,  567,  567,  567,
      567,  567,  567,  572,  572,  572,  572,  572,  572,  572,
      573,  573,  573,  573,  573,  573,  573,  576,  576,  576,

      576,  576,  576,  576,  577,  577,  577,  577,  577,  577,
      577,  578,  578,  578,  578,  578,  578,  578,  588,    0,
      588, 1219,  588,  588,    0,    0,  588,  588,  588,  588,
      588,  588,  588,  589, 2187,  589, 2187,  589,  589,    0,
        0,  589,  589,  589,  589,  589,  589,  589,  591, 1219,
      591,    0,  591,  591,    0,    0,  591,  591,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  593,  593,  628,    0,  628,
      657,  657,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  658,  658, 1221,  628, 1224,  628, 1225,  628,

      659,  659,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  660,  660,  628,  661,  661,  661,  661,  661,
      661,  661, 1221, 1226, 1224,  628, 1225,  628,  662,  662,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,
      663,  663,  628,  664,  664,  664,  664,  664,  664,  664,
     2188, 1226, 2188,    0,  665,  664,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
     1227,  667, 1228,  667,    0,  666,  667,  667,  667,  667,
      667,  667,  667,  664,  668,  668,  668,  668,  668,  668,
      668, 1229, 2189, 2194, 2189, 2194,  668, 2197, 1227, 2197,

     1228,    0,  669,  666,  669,  669,  669,  669,  669,  669,
      669,  670,  670,  670,  670,  670,  670,  670, 1193, 1229,
      671, 1193,  671,  670,  668,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  672,  672,  672,  672,  672, 1231,
     1193, 2202,    0, 2202,  672, 2203, 1193, 2203,    0, 1193,
      673,  670,  673,  673,  673,  673,  673,  673,  673,  674,
      674,  674,  674,  674,  674,  674, 1230, 1231,  675, 1230,
      675,  674,  672,  675,  675,  675,  675,  675,  675,  675,
      676,  676,  676,  676,  676,  676,  676, 1232, 2206, 1237,
     2206, 2208,  676, 2208, 1230,    0,    0, 1230,  677,  674,

      677,  677,  677,  677,  677,  677,  677,  678,  678,  678,
      678,  678,  678,  678, 1238, 1232,  679, 1237,  679,  678,
      676,  679,  679,  679,  679,  679,  679,  679,  680,  680,
      680,  680,  680,  680,  680, 1239, 2220, 1242, 2220, 2227,
      680, 2227, 1238, 2232,    0, 2232,  681,  678,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682, 1243, 1239,  683, 1242,  683,  682,  680,  683,
      683,  683,  683,  683,  683,  683,  684,  684,  684,  684,
      684,  684,  684, 1244, 2234, 1245, 2234, 2236,  684, 2236,
     1243, 2238,    0, 2238,  685,  682,  685,  685,  685,  685,

      685,  685,  685,  686,  686,  686,  686,  686,  686,  686,
     1246, 1244,  687, 1245,  687,  686,  684,  687,  687,  687,
      687,  687,  687,  687,  688,  688,  688,  688,  688,  688,
      688, 1247, 2239, 1248, 2239, 2241,  688, 2241, 1246, 2248,
        0, 2248,  689,  686,  689,  689,  689,  689,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690, 1249, 1247,
      691, 1248,  691,  690,  688,  691,  691,  691,  691,  691,
      691,  691,  692,  692,  692,  692,  692,  692,  692, 1250,
     2249, 1261, 2249, 2262,  692, 2262, 1249, 2264,    0, 2264,
      693,  690,  693,  693,  693,  693,  693,  693,  693,  694,

      694,  694,  694,  694,  694,  694, 1264, 1250,  695, 1261,
      695,  694,  692,  695,  695,  695,  695,  695,  695,  695,
      696,  696,  696,  696,  696,  696,  696, 1265, 2269, 1266,
     2269, 2276,  696, 2276, 1264, 2277,    0, 2277,  697,  694,
      697,  697,  697,  697,  697,  697,  697,  698,  698,  698,
      698,  698,  698,  698, 1267, 1265,  699, 1266,  699,  698,
      696,  699,  699,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700,  701,  701,  701,  701,  701,
      701,  701, 1267,    0, 1268, 1269,    0,  698,  702,  702,
      702,  702,  702,  702,  702,  703,  703,  703,  703,  703,

      703,  703,  704,  704,  704,  704,  704,  704,  704,  705,
        0,  705, 1268, 1269,  705,  705,  705,  705,  705,  705,
      705,  706,  706,  706,  706,  706,  706,  706,  707,  707,
      707,  707,  707,  707,  707,  708,  708,  708,  708,  708,
      708,  708, 2278, 2299, 2278, 2299,  709,  708,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710, 1270,  711, 1273,  711,    0,  710,  711,  711,
      711,  711,  711,  711,  711,  708,  712,  712,  712,  712,
      712,  712,  712, 1274, 2302, 1276, 2302, 2311,  712, 2311,
     1270, 2317, 1273, 2317,  713,  710,  713,  713,  713,  713,

      713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
     1277, 1274,  715, 1276,  715,  714,  712,  715,  715,  715,
      715,  715,  715,  715,  716,  716,  716,  716,  716,  716,
      716, 1278, 2321, 1279, 2321, 2323,  716, 2323, 1277, 2328,
        0, 2328,  717,  714,  717,  717,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718,  718, 1280, 1278,
      719, 1279,  719,  718,  716,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720, 1281,
     2334, 1282, 2334, 2337,  720, 2337, 1280, 2340,    0, 2340,
      721,  718,  721,  721,  721,  721,  721,  721,  721,  722,

      722,  722,  722,  722,  722,  722, 1283, 1281,  723, 1282,
      723,  722,  720,  723,  723,  723,  723,  723,  723,  723,
      732,  732,  732,  732,  732,  732,  732,  733,  733,  733,
      733,  733,  733,  733, 1283, 1284, 1287,    0,    0,  722,
      734,  734,  734,  734,  734,  734,  734,  735,  735,  735,
      735,  735,  735,  735,  738,  738,  738,  738,  738,  738,
      738,    0,    0, 1284, 1287,  739,  738,  739,  739,  739,
      739,  739,  739,  739,  740,  740,  740,  740,  740,  740,
      740, 1294,  741, 1295,  741, 1296,  740,  741,  741,  741,
      741,  741,  741,  741,  738,  742,  742,  742,  742,  742,

      742,  742,  743,  743,  743,  743,  743,  743,  743, 1294,
     2342, 1295, 2342, 1296,  740,  744,  744,  744,  744,  744,
      744,  744,  745,  745,  745,  745,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  748,  748,  748,  748,  748,  748,  748,
      749,  749,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  750,  750,  751,  751,  751,  751,  751,  751,
      751, 2345, 2351, 2345, 2351,  752,  751,  752,  752,  752,
      752,  752,  752,  752,  753,  753,  753,  753,  753,  753,
      753, 1297,  754, 1300,  754,    0,  753,  754,  754,  754,

      754,  754,  754,  754,  751,  755,  755,  755,  755,  755,
      755,  755, 1303, 2358, 1304, 2358, 2360,  755, 2360, 1297,
     2362, 1300, 2362,  756,  753,  756,  756,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  757,  757, 1305,
     1303,  758, 1304,  758,  757,  755,  758,  758,  758,  758,
      758,  758,  758,  759,  759,  759,  759,  759,  759,  759,
     1306, 2363, 1307, 2363, 2367,  759, 2367, 1305, 2369,    0,
     2369,  760,  757,  760,  760,  760,  760,  760,  760,  760,
      761,  761,  761,  761,  761,  761,  761, 1308, 1306,  762,
     1307,  762,  761,  759,  762,  762,  762,  762,  762,  762,

      762,  763,  763,  763,  763,  763,  763,  763, 1309, 2373,
     1310, 2373, 2375,  763, 2375, 1308, 2376,    0, 2376,  764,
      761,  764,  764,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  765,  765, 1313, 1309,  766, 1310,  766,
      765,  763,  766,  766,  766,  766,  766,  766,  766,  767,
      767,  767,  767,  767,  767,  767,  768,  768,  768,  768,
      768,  768,  768, 1313, 2378, 2380, 2378, 2380,  765,  769,
      769,  769,  769,  769,  769,  769, 2382, 2391, 2382, 2391,
      770,  769,  770,  770,  770,  770,  770,  770,  770,  771,
      771,  771,  771,  771,  771,  771, 1318,  772, 1319,  772,

        0,  771,  772,  772,  772,  772,  772,  772,  772,  769,
      773,  773,  773,  773,  773,  773,  773, 1320, 2393, 1321,
     2393, 2395,  773, 2395, 1318, 2399, 1319, 2399,  774,  771,
      774,  774,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  775,  775, 1322, 1320,  776, 1321,  776,  775,
      773,  776,  776,  776,  776,  776,  776,  776,  777,  777,
      777,  777,  777,  777,  777, 1323, 2401, 1324, 2401, 2405,
      777, 2405, 1322, 2409,    0, 2409,  778,  775,  778,  778,
      778,  778,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779, 1326, 1323,  780, 1324,  780,  779,  777,  780,

      780,  780,  780,  780,  780,  780,  781,  781,  781,  781,
      781,  781,  781, 1330, 2410, 1332, 2410, 2412,  781, 2412,
     1326, 2415,    0, 2415,  782,  779,  782,  782,  782,  782,
      782,  782,  782,  783,  783,  783,  783,  783,  783,  783,
     1334, 1330,  784, 1332,  784,  783,  781,  784,  784,  784,
      784,  784,  784,  784,  785,  785,  785,  785,  785,  785,
      785, 1335, 2417, 1336, 2417, 2419,  785, 2419, 1334, 2424,
        0, 2424,  786,  783,  786,  786,  786,  786,  786,  786,
      786,  787,  787,  787,  787,  787,  787,  787, 1337, 1335,
      788, 1336,  788,  787,  785,  788,  788,  788,  788,  788,

      788,  788,  789,  789,  789,  789,  789,  789,  789, 1338,
     2425, 2426, 2425, 2426,  789, 2430, 1337, 2430,    0,    0,
      790,  787,  790,  790,  790,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791, 1341, 1338,  792, 1340,
      792,  791,  789,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  793,  793,  793, 1342, 1340, 2437,
        0, 2437,  793, 2439, 1341, 2439,    0, 1340,  794,  791,
      794,  794,  794,  794,  794,  794,  794,  795,  795,  795,
      795,  795,  795,  795, 1343, 1342,  796, 1343,  796,  795,
      793,  796,  796,  796,  796,  796,  796,  796,  797,  797,

      797,  797,  797,  797,  797, 1344, 2440, 1345, 2440, 2441,
      797, 2441, 1343,    0,    0, 1343,  798,  795,  798,  798,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
      799,  799, 1348, 1344,  800, 1345,  800,  799,  797,  800,
      800,  800,  800,  800,  800,  800,  801,  801,  801,  801,
      801,  801,  801, 1349, 2447, 1350, 2447, 2450,  801, 2450,
     1348, 2453,    0, 2453,  802,  799,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
     1351, 1349,  804, 1350,  804,  803,  801,  804,  804,  804,
      804,  804,  804,  804,  805,  805,  805,  805,  805,  805,

      805, 1353, 2463, 1358, 2463, 2465,  805, 2465, 1351, 2467,
        0, 2467,  806,  803,  806,  806,  806,  806,  806,  806,
      806,  807,  807,  807,  807,  807,  807,  807, 1362, 1353,
      808, 1358,  808,  807,  805,  808,  808,  808,  808,  808,
      808,  808,  809,  809,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  810,  810,  810, 1362, 1364, 1365,    0,
        0,  807,  811,  811,  811,  811,  811,  811,  811,  812,
      812,  812,  812,  812,  812,  812,  813,  813,  813,  813,
      813,  813,  813,    0,    0, 1364, 1365,  814,  813,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,

      815,  815,  815, 1367,  816, 1368,  816,    0,  815,  816,
      816,  816,  816,  816,  816,  816,  813,  818,  818,  818,
      818,  818,  818,  818, 1369, 2472, 1371, 2472, 2483,  818,
     2483, 1367, 2485, 1368, 2485,  819,  815,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  820,  820,  820,  820,
      820,    0, 1369,  821, 1371,  821,  820,  818,  821,  821,
      821,  821,  821,  821,  821,  822,  822,  822,  822,  822,
      822,  822,  823, 2488,  823, 2488,    0,  823,  823,  823,
      823,  823,  823,  823,  820,  824,  824,  824,  824,  824,
      824,  824,  825, 2490,  825, 2490,    0,  825,  825,  825,

      825,  825,  825,  825,  826,  826,  826,  826,  826,  826,
      826,  827, 2498,  827, 2498,    0,  827,  827,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  828,  828,  828,
      829, 2500,  829, 2500,    0,  829,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  831,
      831,  831,  831,  831,  831,  831,  832,  832,  832,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  834,  834,  834,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  837,  838,  838,

      838,  838,  838,  838,  838,  839,  839,  839,  839,  839,
      839,  839,  845,  845,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,  846,  847,  847,  847,  847,
      847,  847,  847,  848,  848,  848,  848,  848,  848,  848,
     2501, 2502, 2501, 2502,  849,  848,  849,  849,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  850,  850,  850,
     1373,  851, 1374,  851, 1375,  850,  851,  851,  851,  851,
      851,  851,  851,  848,  852,  852,  852,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853, 1373, 2507,
     1374, 2507, 1375,  850,  854,  854,  854,  854,  854,  854,

      854,  857,  857,  857,  857,  857,  857,  857,  858,  858,
      858,  858,  858,  858,  858,  861,  861,  861,  861,  861,
      861,  861,  869,  869,  869,  869,  869,  869,  869,  870,
      870,  870,  870,  870,  870,  870, 2509, 2514, 2509, 2514,
      871,  870,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  872,  872,  872, 2516,  873, 2516,  873,
        0,  872,  873,  873,  873,  873,  873,  873,  873,  870,
      874,  874,  874,  874,  874,  874,  874,  875,  875,  875,
        0,    0,  875,  875,  875,  875,  875,  875,  875,  872,
      876,  876,  876,  876,  876,  876,  876,  877, 2518,  877,

     2518, 1376,  877,  877,  877,  877,  877,  877,  877,  878,
     2520,  878, 2520,    0,  878,  878,  878,  878,  878,  878,
      878,  879,  879,  879,  879,  879,  879,  879,  880, 1376,
      880,    0,    0,  880,  880,  880,  880,  880,  880,  880,
      881,  881,  881,  881,  881,  881,  881,  882, 2521,  882,
     2521,    0,  882,  882,  882,  882,  882,  882,  882,  883,
      883,  883,  883,  883,  883,  883,  884,  884,  884,    0,
     1377,  884,  884,  884,  884,  884,  884,  884,  885,  885,
      885,  885,  885,  885,  885,  886, 2522,  886, 2522, 1378,
      886,  886,  886,  886,  886,  886,  886,  887, 1377,  887,

        0,    0,  887,  887,  887,  887,  887,  887,  887,  888,
      888,  888,  888,  888,  888,  888,  889, 1378,  889,    0,
        0,  889,  889,  889,  889,  889,  889,  889,  890,  890,
      890,  890,  890,  890,  890,  891, 2524,  891, 2524,    0,
      891,  891,  891,  891,  891,  891,  891,  892,  892,  892,
      892,  892,  892,  892,  893,  893,  893,    0, 1387,  893,
      893,  893,  893,  893,  893,  893,  894,  894,  894,  894,
      894,  894,  894,  895, 2526,  895, 2526, 1389,  895,  895,
      895,  895,  895,  895,  895,  896, 1387,  896,    0,    0,
      896,  896,  896,  896,  896,  896,  896,  897,  897,  897,

      897,  897,  897,  897,  898, 1389,  898,    0,    0,  898,
      898,  898,  898,  898,  898,  898,  899,  899,  899,  899,
      899,  899,  899,  900, 2529,  900, 2529,    0,  900,  900,
      900,  900,  900,  900,  900,  901,  901,  901,  901,  901,
      901,  901,  902,  902,  902,    0, 1390,  902,  902,  902,
      902,  902,  902,  902,  903,  903,  903,  903,  903,  903,
      903,  904, 2530,  904, 2530, 1391,  904,  904,  904,  904,
      904,  904,  904,  905, 1390,  905,    0,    0,  905,  905,
      905,  905,  905,  905,  905,  906,  906,  906,  906,  906,
      906,  906,  907, 1391,  907,    0,    0,  907,  907,  907,

      907,  907,  907,  907,  908,  908,  908,  908,  908,  908,
      908,  909, 2531,  909, 2531,    0,  909,  909,  909,  909,
      909,  909,  909,  910,  910,  910,  910,  910,  910,  910,
      915,  915,  915,  915,  915,  915,  915,  920,  920,  920,
      920,  920,  920,  920,  921,  921,  921,  921,  921,  921,
      921,  924,  924,  924,  924,  924,  924,  924,  925,  925,
      925,  925,  925,  925,  925,  926,  926,  926,  926,  926,
      926,  926,  934,    0,  934, 1392,  934,  934,    0,    0,
      934,  934,  934,  934,  934,  934,  934,  935, 2532,  935,
     2532,  935,  935,    0,    0,  935,  935,  935,  935,  935,

      935,  935,  937, 1392,  937,    0,  937,  937,    0,    0,
      937,  937,  937,  937,  937,  937,  937,  938,  938,  938,
      938,  938,  938,  938,  939,  939,  939,  939,  939,  939,
      939, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044,

     1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085,    0,
        0, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087,    0,    0,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1089, 1089, 1089,    0, 1393, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1091, 1091, 1091,    0,    0, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1169, 1393, 1169,    0,    0,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 2533, 1170,
     2533,    0, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,
     1394, 1171, 1195,    0, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1172, 2535, 1172, 2535, 1195, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1198, 2537, 1198, 2537, 2538, 1394, 2538,
     1195, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1395,    0,
     1253, 1198, 1253, 1195,    0, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1396,
     1398, 2539,    0, 2539,    0, 1255, 1395, 1255,    0, 1198,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1257,    0, 1257, 1396, 1398, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1259,    0, 1259, 1288, 1401, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1260, 1289, 1288, 1325, 1288,

     1288, 1288, 1260, 1289, 1354, 1347, 1403, 1372, 1325, 1347,
     1347, 1347, 1352, 1354, 1288, 1401, 1352, 1352, 1352,    0,
     1372,    0, 1404, 1260, 1289, 1288, 1325, 1288, 1288, 1288,
     1260, 1289, 1354, 1347, 1403, 1372, 1325, 1347, 1347, 1347,
     1352, 1354, 1405, 1407, 1352, 1352, 1352, 1363, 1372, 1363,
     1404, 1408, 1409, 1410, 1413, 1414, 1416, 1417, 1418, 1419,
     1363, 1421, 1422, 1425, 1426, 1363,    0, 1427, 1428, 1429,
     1405, 1407,    0, 1430, 1435,    0,    0, 1427, 1437, 1408,
     1409, 1410, 1413, 1414, 1416, 1417, 1418, 1419, 1438, 1421,
     1422, 1425, 1426, 1363, 1423, 1427, 1428, 1429, 1423, 1443,

     1423, 1430, 1435, 1423, 1423, 1427, 1437, 1444, 1445, 1447,
     1454, 1423, 1458, 1459, 1460, 1461, 1438, 1462, 1463, 1465,
     1466, 1467, 1423, 1468, 1469, 1470, 1423, 1443, 1423, 1471,
     1472, 1423, 1423, 1473, 1482, 1444, 1445, 1447, 1454, 1423,
     1458, 1459, 1460, 1461, 1483, 1462, 1463, 1465, 1466, 1467,
     1486, 1468, 1469, 1470, 1491, 1493, 1494, 1471, 1472, 1495,
     1496, 1473, 1482, 1497, 1498, 1499, 1500, 1503, 1504, 1507,
     1508, 1509, 1483, 1510, 1511, 1512,    0, 1514, 1486, 1515,
     1516, 1511, 1491, 1493, 1494, 1517, 1518, 1495, 1496,    0,
     1520, 1497, 1498, 1499, 1500, 1503, 1504, 1507, 1508, 1509,

     1519, 1510, 1511, 1512, 1513, 1514, 1513, 1515, 1516, 1511,
     1522, 1523, 1524, 1517, 1518, 1536, 1519, 1513, 1520, 1537,
     1538, 1548, 1513, 1551, 1552, 1561, 1565, 1566, 1519, 1567,
     1568, 1569,    0, 1571,    0, 1572, 1573, 1574, 1522, 1523,
     1524, 1575, 1576, 1536, 1519, 1577, 1578, 1537, 1538, 1548,
     1513, 1551, 1552, 1561, 1565, 1566, 1579, 1567, 1568, 1569,
     1570, 1571, 1570, 1572, 1573, 1574, 1580, 1583, 1586, 1575,
     1576, 1587, 1588, 1577, 1578, 1589, 1598, 1601, 1570, 1602,
     1603, 1604, 1605, 1606, 1579, 1607, 1608, 1609, 1610, 1611,
     1605, 1613, 1614, 1615, 1580, 1583, 1586, 1616, 1617, 1587,

     1588, 1618, 1619, 1589, 1598, 1601, 1570, 1602, 1603, 1604,
     1605, 1606, 1623, 1607, 1608, 1609, 1610, 1611, 1605, 1613,
     1614, 1615, 1624, 1625, 1626, 1616, 1617, 1627, 1628, 1618,
     1619, 1629, 1630, 1631, 1634, 1635, 1636, 1647, 1648, 1649,
     1623, 1661, 1662, 1667, 1669, 1672, 1673, 1676, 1677, 1678,
     1624, 1625, 1626, 1679, 1681, 1627, 1628, 1682, 1685, 1629,
     1630, 1631, 1634, 1635, 1636, 1647, 1648, 1649, 1686, 1661,
     1662, 1667, 1669, 1672, 1673, 1676, 1677, 1678, 1687, 1691,
     1692, 1679, 1681, 1698, 1700, 1682, 1685, 1701, 1703, 1704,
     1705, 1706, 1707, 1708, 1709, 1710, 1686, 1711, 1712, 1715,

     1716, 1717, 1718, 1722, 1723, 1724, 1687, 1691, 1692, 1725,
     1726, 1698, 1700, 1727, 1728, 1701, 1703, 1704, 1705, 1706,
     1707, 1708, 1709, 1710, 1729, 1711, 1712, 1715, 1716, 1717,
     1718, 1722, 1723, 1724, 1730, 1732, 1733, 1725, 1726, 1734,
     1738, 1727, 1728, 1739, 1740, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1729, 1753, 1756, 1757, 1758, 1755, 1759, 1760,
     1761, 1759, 1730, 1732, 1733, 1755, 1762, 1734, 1738, 1762,
     1765, 1739, 1740, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
     1770, 1753, 1756, 1757, 1758, 1755, 1759, 1760, 1761, 1759,
     1771, 1772, 1763, 1755, 1762, 1763, 1774, 1762, 1765, 1776,

     1777, 1780, 1781, 1783, 1776, 1784, 1788, 1789, 1770, 1787,
     1790, 1791, 1792, 1776, 1794, 1795, 1796, 1797, 1771, 1772,
     1763, 1798, 1787, 1763, 1774, 1799, 1800, 1776, 1777, 1780,
     1781, 1783, 1776, 1784, 1788, 1789, 1802, 1787, 1790, 1791,
     1792, 1776, 1794, 1795, 1796, 1797, 1803, 1804, 1805, 1798,
     1787, 1806, 1807, 1799, 1800, 1808, 1811, 1812, 1814, 1815,
     1817, 1818, 1819, 1820, 1802, 1822, 1823, 1824, 1825, 1826,
     1827, 1828, 1829, 1830, 1803, 1804, 1805, 1833, 1837, 1806,
     1807, 1838, 1839, 1808, 1811, 1812, 1814, 1815, 1817, 1818,
     1819, 1820, 1842, 1822, 1823, 1824, 1825, 1826, 1827, 1828,

     1829, 1830, 1845, 1846, 1847, 1833, 1837, 1847, 1853, 1838,
     1839, 1854, 1857, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
     1842, 1866, 1867, 1868, 1869, 1871, 1872, 1873, 1874, 1878,
     1845, 1846, 1847, 1879, 1881, 1847, 1853, 1882, 1886, 1854,
     1857, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1890, 1866,
     1867, 1868, 1869, 1871, 1872, 1873, 1874, 1878, 1891, 1900,
     1901, 1879, 1881, 1902, 1903, 1882, 1886, 1894, 1904, 1894,
     1905, 1906, 1907, 1908, 1912, 1913, 1890, 1914, 1916, 1919,
     1920, 1921, 1926, 1927, 1929, 1894, 1891, 1900, 1901, 1932,
     1933, 1902, 1903, 1934, 1935, 1936, 1904, 1939, 1905, 1906,

     1907, 1908, 1912, 1913,    0, 1914, 1916, 1919, 1920, 1921,
     1926, 1927, 1929, 1894, 1937, 1940, 1937, 1932, 1933, 1943,
     1944, 1934, 1935, 1936, 1945, 1939, 1946, 1947, 1949, 1950,
     1951, 1954, 1937, 1955, 1959, 1960, 1962, 1963, 1967, 1975,
     1976, 1978, 1979, 1940, 1980, 1982, 1986, 1943, 1944, 1987,
     1988, 1990, 1945, 1991, 1946, 1947, 1949, 1950, 1951, 1954,
     1937, 1955, 1959, 1960, 1962, 1963, 1967, 1975, 1976, 1978,
     1979, 1992, 1980, 1982, 1986, 1993, 1995, 1987, 1988, 1990,
     1996, 1991, 1997, 1999, 1997, 2000, 2001, 2002, 2003, 2004,
     2009, 2004, 2006, 2006, 2006, 2010,    0, 2015,    0, 1992,

     1997,    0, 2017, 1993, 1995, 2018, 2019, 2004, 1996, 2020,
     2007, 1999, 2007, 2000, 2001, 2002, 2003, 2011, 2009, 2011,
     2006, 2006, 2006, 2010, 2013, 2015, 2013, 2016, 2007, 2016,
     2017, 2021, 2022, 2018, 2019, 2011, 2024, 2020, 2024, 2025,
     2028, 2025, 2013, 2029, 2030, 2016, 2032, 2036, 2027, 2038,
     2027, 2039, 2040, 2042, 2024, 2044,    0, 2025, 2048, 2021,
     2022, 2027, 2027, 2051, 2052, 2053, 2027, 2054, 2028, 2059,
        0, 2029, 2030, 2060, 2032, 2036, 2046, 2038, 2046, 2039,
     2040, 2042, 2047, 2044, 2047, 2025, 2048, 2049, 2055, 2049,
     2055, 2051, 2052, 2053, 2046, 2054, 2057, 2059, 2057, 2061,

     2047, 2060, 2062, 2063, 2070, 2049, 2055, 2065, 2066, 2065,
     2066, 2067, 2078, 2067, 2057, 2069, 2073, 2069, 2073, 2074,
     2076, 2074, 2076, 2079, 2080, 2065, 2066, 2061, 2081, 2067,
     2062, 2063, 2070, 2069, 2073, 2091,    0, 2074, 2076, 2077,
     2078, 2077, 2082, 2084, 2082, 2084, 2086, 2087, 2086, 2087,
     2092, 2079, 2080, 2088, 2093, 2088, 2081, 2077, 2086, 2094,
     2082, 2084, 2089, 2091, 2089, 2087, 2095, 2096, 2097, 2098,
     2099, 2088, 2100, 2101, 2086, 2102, 2086, 2103, 2092, 2108,
     2089, 2104, 2093, 2104, 2110, 2077, 2086, 2094, 2106, 2112,
     2106, 2113,    0, 2116, 2095, 2096, 2097, 2098, 2099, 2104,

     2100, 2101, 2114, 2102, 2114, 2103, 2106, 2108, 2118, 2119,
     2120, 2121, 2110, 2122, 2123,    0, 2123, 2112,    0, 2113,
     2114, 2116, 2125,    0, 2125, 2127, 2129, 2127, 2129, 2131,
        0, 2131, 2123, 2132, 2141, 2132, 2118, 2119, 2120, 2121,
     2125, 2122, 2146, 2127, 2129, 2147, 2135, 2131, 2135, 2148,
     2137, 2132, 2137, 2139, 2139, 2139, 2140, 2142, 2140, 2142,
     2154, 2149, 2141, 2149, 2135, 2157,    0, 2151, 2137, 2151,
     2146, 2159, 2160, 2147, 2140, 2142, 2155, 2148, 2155, 2149,
     2161, 2139, 2139, 2139, 2156, 2151, 2156, 2162, 2154, 2163,
     2164, 2165, 2166, 2157, 2155, 2169, 2170, 2169, 2171, 2159,

     2160, 2172, 2156, 2173, 2175, 2176, 2177, 2176, 2161, 2178,
     2180,    0, 2185, 2169, 2185, 2162, 2195, 2163, 2164, 2165,
     2166,    0, 2199, 2176, 2170, 2190, 2171, 2190, 2200, 2172,
     2185, 2173, 2175, 2191, 2177, 2191, 2201, 2178, 2180, 2192,
     2193, 2192, 2193, 2190, 2195, 2196, 2198, 2196, 2204, 2198,
     2199, 2191, 2205, 2207, 2205, 2207, 2200, 2192, 2193, 2209,
     2211, 2212, 2215, 2196, 2201, 2210, 2216, 2217, 2218,    0,
     2205, 2207, 2222, 2210, 2198, 2210, 2204, 2198, 2223, 2219,
     2221, 2219, 2221, 2224, 2225, 2228, 2229, 2209, 2211, 2212,
     2215, 2231,    0, 2210, 2216, 2217, 2218, 2219, 2221, 2240,

     2222, 2210, 2226, 2210, 2226, 2230, 2223, 2233, 2242, 2233,
     2230, 2224, 2225, 2228, 2229, 2243, 2244, 2245, 2230, 2231,
     2226, 2235, 2237, 2235, 2237, 2233, 2246, 2240, 2247, 2250,
     2251, 2252, 2253, 2230, 2254, 2255, 2242, 2256, 2230, 2235,
     2237, 2257, 2258, 2243, 2244, 2245, 2230, 2256, 2259, 2260,
     2261, 2265, 2267, 2263, 2246, 2263, 2247, 2250, 2251, 2252,
     2253, 2268, 2254, 2255, 2266, 2256, 2266, 2270, 2272, 2257,
     2258, 2263, 2273, 2274, 2279, 2256, 2259, 2260, 2261, 2265,
     2267, 2275, 2266, 2275, 2280, 2281, 2282, 2283, 2282, 2268,
     2284, 2285, 2286, 2285, 2286, 2270, 2272, 2287, 2288, 2275,

     2273, 2274, 2279, 2289, 2282, 2290, 2291, 2290, 2292, 2285,
     2286, 2293, 2280, 2281, 2294, 2283, 2296, 2295, 2284, 2295,
     2297, 2298, 2297, 2290, 2300, 2287, 2288, 2275, 2301, 2304,
     2301, 2289, 2306, 2307, 2291, 2295, 2292, 2308, 2297, 2293,
     2309, 2303, 2294, 2303, 2296, 2305, 2301, 2305, 2310, 2298,
     2310, 2313, 2300, 2312, 2312, 2312, 2314, 2304, 2315, 2303,
     2306, 2307, 2316, 2305, 2316, 2308, 2310, 2318, 2309, 2318,
     2319, 2320, 2322, 2320, 2322, 2324, 2325, 2326, 2330, 2313,
     2316, 2312, 2312, 2312, 2314, 2318, 2315, 2331, 2332, 2320,
     2322, 2305, 2327, 2329, 2327, 2329, 2339,    0, 2319, 2333,

     2335, 2333, 2335, 2324, 2325, 2326, 2330, 2336, 2343, 2336,
     2327, 2329, 2338, 2347, 2338, 2331, 2332, 2333, 2335, 2341,
     2344, 2341, 2344, 2348, 2339, 2336, 2346, 2346, 2346, 2349,
     2338, 2350, 2352,    0, 2352, 2355, 2343, 2341, 2344, 2356,
     2353, 2347, 2353, 2354, 2357, 2354, 2359, 2361, 2359, 2361,
     2352, 2348, 2365, 2370, 2346, 2346, 2346, 2349, 2353, 2350,
     2368, 2354, 2368, 2355, 2359, 2361, 2371, 2356, 2372, 2374,
     2381, 2374, 2357, 2377, 2379, 2377, 2379, 2383, 2368, 2383,
     2365, 2370, 2384, 2385, 2384, 2385, 2386, 2374, 2387, 2388,
     2389, 2377, 2379,    0, 2371, 2383, 2372, 2390, 2381, 2390,

     2384, 2385, 2392, 2394, 2392, 2394, 2396, 2397, 2398, 2400,
     2402, 2400, 2403, 2404, 2386, 2390, 2387, 2388, 2389, 2408,
     2392, 2394, 2413, 2420, 2411, 2422, 2411, 2400, 2414, 2423,
     2414, 2416, 2428, 2416, 2396, 2397, 2398, 2418, 2402, 2418,
     2403, 2404, 2411, 2427, 2431, 2427, 2414, 2408, 2433, 2416,
     2413, 2420, 2429, 2422, 2429, 2418, 2432, 2423, 2432, 2434,
     2428, 2427, 2435, 2436, 2438, 2442, 2443, 2444, 2445, 2448,
     2429, 2446, 2431, 2446, 2432, 2451, 2433, 2454, 2455, 2456,
     2449, 2452, 2449, 2452, 2457, 2458, 2457, 2434, 2459, 2446,
     2435, 2436, 2438, 2442, 2443, 2444, 2445, 2448, 2449, 2452,

     2460, 2461, 2457, 2451, 2462, 2454, 2455, 2456, 2464, 2466,
     2468, 2469, 2470, 2458,    0, 2471, 2459, 2471, 2477, 2478,
     2479, 2480, 2481, 2473, 2482, 2473,    0,    0, 2460, 2461,
     2494,    0, 2462, 2471,    0, 2495, 2464, 2466, 2468, 2469,
     2470, 2473, 2474, 2475, 2474, 2475, 2477, 2478, 2479, 2480,
     2481, 2484, 2482, 2484, 2486, 2474, 2486, 2487, 2494, 2487,
     2474, 2475, 2489, 2495, 2489, 2491, 2491, 2491, 2492, 2484,
     2492, 2493, 2486, 2493, 2496, 2487, 2497,    0,    0, 2499,
     2489, 2499, 2503, 2504, 2503, 2504, 2492, 2512, 2505, 2493,
     2505, 2513,    0, 2491, 2491, 2491, 2506, 2499, 2506,    0,

     2503, 2504, 2496, 2508, 2497, 2508, 2505, 2510, 2511, 2510,
     2511, 2515,    0, 2515, 2506, 2512, 2517,    0, 2517, 2513,
     2519, 2508, 2519,    0,    0, 2510, 2511,    0, 2523, 2515,
     2523, 2525,    0, 2525, 2517, 2527,    0, 2527, 2519, 2528,
     2534, 2528, 2534, 2536,    0, 2536, 2523,    0,    0, 2525,
        0,    0,    0, 2527,    0,    0,    0, 2528, 2534,    0,
        0, 2536, 2541, 2541, 2541, 2541, 2541, 2542, 2542, 2542,
     2542, 2542, 2543, 2543, 2543, 2543, 2543, 2544, 2544, 2544,
     2544, 2544, 2545, 2545, 2545, 2545, 2545, 2546, 2546, 2546,
     2546, 2546, 2547, 2547, 2547, 2547, 2547, 2548, 2548, 2548,

     2548, 2548, 2549, 2549, 2549, 2549, 2549, 2550, 2550, 2550,
     2550, 2550, 2551, 2551, 2551, 2551, 2551, 2552, 2552, 2552,
     2552, 2552, 2553, 2553, 2553, 2553, 2553, 2554, 2554, 2554,
     2554, 2554, 2555, 2555, 2555, 2555, 2555, 2556, 2556, 2556,
     2556, 2556, 2557, 2557, 2557, 2557, 2557, 2558, 2558, 2558,
     2558, 2558, 2559, 2559, 2559, 2559, 2559, 2560, 2560, 2560,
     2560, 2560, 2561, 2561, 2561, 2561, 2561, 2562, 2562, 2562,
     2562, 2562, 2563, 2563, 2563, 2563, 2563, 2564, 2564, 2564,
     2564, 2564, 2565, 2565, 2565, 2565, 2565, 2566, 2566, 2566,
     2566, 2566, 2567, 2567, 2567, 2567, 2567, 2568, 2568, 2568,

     2568, 2568, 2569, 2569, 2569, 2569, 2569, 2570, 2570, 2570,
     2570, 2570, 2571, 2571, 2571, 2571, 2571, 2572, 2572, 2572,
     2572, 2572, 2573, 2573, 2573, 2573, 2573, 2574, 2574, 2574,
     2574, 2574, 2575, 2575, 2575, 2575, 2575, 2576, 2576, 2576,
     2576, 2576, 2577, 2577, 2577, 2577, 2577, 2578, 2578, 2578,
     2578, 2578, 2579, 2579, 2579, 2579, 2579, 2580, 2580, 2580,
     2580, 2580, 2581, 2581, 2581, 2581, 2581, 2582, 2582, 2582,
     2582, 2582, 2583, 2583, 2584, 2584, 2585, 2585, 2586, 2586,
     2587, 2587, 2588, 2588, 2589, 2589, 2590, 2590, 2592, 2592,
     2593, 2593, 2594, 2594, 2595, 2595, 2596, 2596, 2597, 2597,

     2598, 2598, 2600, 2600, 2618, 2618, 2619, 2619, 2620, 2620,
     2621, 2621,    0, 2621, 2621, 2622,    0,    0, 2622, 2622,
     2623, 2623, 2624, 2624, 2625, 2625, 2626, 2626, 2627, 2627,
     2628, 2628, 2629, 2629, 2630, 2630, 2631, 2631, 2633, 2633,
     2634, 2634, 2635, 2635, 2636, 2636, 2637, 2637, 2638, 2638,
     2639, 2639, 2641, 2641, 2659, 2659, 2660, 2660, 2661, 2661,
     2662, 2662,    0, 2662, 2662, 2663,    0,    0, 2663, 2663,
     2664, 2664, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,

     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2540, 2540, 2540, 2540, 2540, 2540, 2540
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cvc__flex_debug;
int cvc__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cvc_text;
#line 1 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
/***********************************************************************
 * read_input_parser.l
 * - parsing cvc.input to program
 * - use flex -P <prefix_> ...
 ***********************************************************************/
#line 23 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "global.h"
#include "read_input_parser.h"
#include "default_input_values.h"
#include "set_default.h"
#include "cvc_utils.h"
#include "laphs.h"

namespace cvc {

  /* Name of the parsing routine */
#define YY_DECL         int parse_config()
#define YY_NO_UNPUT

  /* declaration of input parameters */
  int i=0;
  int line_of_file=1;
  int comment_caller;
  int name_caller;
  int a,b;
  float c;
  int reread = 0;
  char name[100];
  char * type;
  double ft_rmax[4];

  int cvc_verbose = 1;
  int myverbose = 0;
}






























































































































































#line 4344 "<stdout>"

#define INITIAL 0
#define TT 1
#define LLX 2
#define LLY 3
#define LLZ 4
#define LL 5
#define LL5 6
#define NNCONF 7
#define KAPPA 8
#define MU 9
#define MUSIGMA 10
#define MUDELTA 11
#define MUBAR 12
#define M5 13
#define M0 14
#define EPSBAR 15
#define CSW 16
#define SOURCEID 17
#define SOURCEID2 18
#define GAUGEID 19
#define GAUGEID2 20
#define GAUGESTEP 21
#define NNSAVE 22
#define FFORMAT 23
#define BCT 24
#define BCX 25
#define BCY 26
#define BCZ 27
#define PREFIX 28
#define PREFIX2 29
#define PREFIX3 30
#define SEQPREFIX 31
#define SEQPREFIX2 32
#define GAUGEPREFIX 33
#define OUTPREFIX 34
#define PATHPREFIX 35
#define RESUME 36
#define SUBTRACT 37
#define SOURCELOC 38
#define SSEED 39
#define NOISETYPE 40
#define SRCTYPE 41
#define SPREC 42
#define MAXITER 43
#define SOURCEIDSTEP 44
#define HPEMIN 45
#define HPEMAX 46
#define HPEORD 47
#define CUTDIRT 48
#define CUTDIRX 49
#define CUTDIRY 50
#define CUTDIRZ 51
#define CUTANG 52
#define CUTRAD 53
#define RMIN 54
#define RMAX 55
#define AVGTT 56
#define AVGLL 57
#define MODEL_DCOEFFRE 58
#define MODEL_DCOEFFIM 59
#define MODEL_MRHO 60
#define FTRMAX1 61
#define FTRMAX2 62
#define FTRMAX3 63
#define FTRMAX4 64
#define PROPNORMSQR 65
#define QHATSQRMIN 66
#define QHATSQRMAX 67
#define NLONG 68
#define NAPE 69
#define NJACOBI 70
#define NHYP 71
#define ALPHAAPE 72
#define ALPHAHYP 73
#define KAPPAJACOBI 74
#define SRCTIMESLICE 75
#define SEQSRCTIMESLICE 76
#define SEQSRCLOCATIONX 77
#define SEQSRCLOCATIONY 78
#define SEQSRCLOCATIONZ 79
#define SEQSRCGAMMAID 80
#define SRCGAMMAID 81
#define MMSNOMASSES 82
#define NOLIGHTMASSES 83
#define NOSTRANGEMASSES 84
#define NOTPROCS 85
#define NOXPROCS 86
#define NOYPROCS 87
#define NOZPROCS 88
#define LOCLOC 89
#define LOCSME 90
#define SMELOC 91
#define SMESME 92
#define ROTATE 93
#define PROPPOS 94
#define GPUDEVICENUMBER 95
#define GPUPERNODE 96
#define RELDELTA 97
#define COHSRC 98
#define COHSRCBASE 99
#define COHSRCDELTA 100
#define GAUGEFILEFORMAT 101
#define RNGFILE 102
#define SRCINDEX 103
#define PROPBCTYPE 104
#define PROPGAMMA 105
#define PROPPREC 106
#define WRITESRC 107
#define READSRC 108
#define WRITEPROP 109
#define READPROP 110
#define READSEQPROP 111
#define WRITESEQSRC 112
#define WRITESEQPROP 113
#define NSAMPLE 114
#define ASOVERA 115
#define NUMTHREADS 116
#define SRCMOM 117
#define SRCMOMX 118
#define SRCMOMY 119
#define SRCMOMZ 120
#define SNKMOM 121
#define SNKMOMX 122
#define SNKMOMY 123
#define SNKMOMZ 124
#define SEQSRCMOM 125
#define SEQSRCMOMX 126
#define SEQSRCMOMY 127
#define SEQSRCMOMZ 128
#define SEQ2SRCMOM 129
#define SEQ2SRCMOMX 130
#define SEQ2SRCMOMY 131
#define SEQ2SRCMOMZ 132
#define CPUPREC 133
#define GPUPREC 134
#define GPUPRECSLOPPY 135
#define INVERTERTYPE 136
#define MMSID 137
#define CHKINVERSION 138
#define LAPHSTIMEPROJTYPE 139
#define LAPHSSPINPROJTYPE 140
#define LAPHSEVECPROJTYPE 141
#define LAPHSEVECNUMBER 142
#define LAPHSRNDVECNUMBER 143
#define LAPHSEVECPATHPRFX 144
#define LAPHSEVECFILEPRFX 145
#define LAPHS_TIME_SRC_NUMBER 146
#define LAPHS_SPIN_SRC_NUMBER 147
#define LAPHS_EVEC_SRC_NUMBER 148
#define LAPHS_PERAMBULATOR_PATH_PREFIX 149
#define LAPHS_PERAMBULATOR_FILE_PREFIX 150
#define COMMENT 151
#define ERROR 152
#define M_M_TWOPT 153
#define MXB_MXB_TWOPT 154
#define FERMION_TYPE 155
#define SOURCECOORDS 156
#define SRCSNKTIMESEP 157
#define COHERENTSOURCENUMBER 158

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cvc_lex_destroy (void );

int cvc_get_debug (void );

void cvc_set_debug (int debug_flag  );

YY_EXTRA_TYPE cvc_get_extra (void );

void cvc_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cvc_get_in (void );

void cvc_set_in  (FILE * in_str  );

FILE *cvc_get_out (void );

void cvc_set_out  (FILE * out_str  );

yy_size_t cvc_get_leng (void );

char *cvc_get_text (void );

int cvc_get_lineno (void );

void cvc_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cvc_wrap (void );
#else
extern int cvc_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cvc_text, cvc_leng, 1, cvc_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cvc_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cvc_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, (yy_size_t) max_size, cvc_in)) == 0 && ferror(cvc_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cvc_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cvc_lex (void);

#define YY_DECL int cvc_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cvc_text and cvc_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cvc_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cvc_text[cvc_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cvc_in )
			cvc_in = stdin;

		if ( ! cvc_out )
			cvc_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cvc_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cvc__create_buffer(cvc_in,YY_BUF_SIZE );
		}

		cvc__load_buffer_state( );
		}

	{
#line 217 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"

#line 4721 "<stdout>"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cvc_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2541 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2540 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 218 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(TT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 219 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 220 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LL5);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 221 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLX);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 222 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLY);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 223 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LLZ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 224 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MU);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 225 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUSIGMA);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 226 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUDELTA);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 227 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MUBAR);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 228 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M5);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 229 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 230 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(EPSBAR);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 231 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CSW);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 232 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNCONF);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 233 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPA);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEID2);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 237 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEID2);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 238 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGESTEP);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 239 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NNSAVE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 240 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FFORMAT);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCT);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 242 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCX);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 243 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCY);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(BCZ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 245 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 246 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX2);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 247 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PREFIX3);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 248 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 249 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQPREFIX2);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 250 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEPREFIX);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 251 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(OUTPREFIX);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 252 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PATHPREFIX);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 253 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RESUME);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 254 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SUBTRACT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 255 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCELOC);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 256 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCECOORDS);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 257 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SSEED);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOISETYPE);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTYPE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SPREC);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RELDELTA);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MAXITER);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SOURCEIDSTEP);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMIN);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEMAX);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(HPEORD);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTANG);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTRAD);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRT);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRX);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRY);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CUTDIRZ);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMIN);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RMAX);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGTT);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(AVGLL);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFRE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_DCOEFFIM);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MODEL_MRHO);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX1);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX2);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX3);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FTRMAX4);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPNORMSQR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMIN);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(QHATSQRMAX);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NLONG);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NAPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NJACOBI);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAAPE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NHYP);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ALPHAHYP);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(KAPPAJACOBI);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCTIMESLICE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 296 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCTIMESLICE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 297 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONX);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 298 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONY);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 299 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCLOCATIONZ);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 301 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCGAMMAID);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 302 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCGAMMAID);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 305 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSNOMASSES);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 306 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOLIGHTMASSES);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 307 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOSTRANGEMASSES);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 308 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOTPROCS);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 309 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOXPROCS);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 310 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOYPROCS);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 311 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NOZPROCS);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 312 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCLOC);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 313 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LOCSME);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 314 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMELOC);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 315 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SMESME);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 316 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ROTATE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 317 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPOS);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 318 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUDEVICENUMBER);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 319 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPERNODE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 320 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRC);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 321 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCBASE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 322 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHSRCDELTA);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 323 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GAUGEFILEFORMAT);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 324 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(RNGFILE);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 325 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCINDEX);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 326 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPBCTYPE);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 327 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPGAMMA);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 328 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(PROPPREC);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 329 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESRC);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 330 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSRC);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 332 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITEPROP);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 333 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READPROP);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 335 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(READSEQPROP);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 336 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQSRC);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 337 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(WRITESEQPROP);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 339 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NSAMPLE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 340 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(ASOVERA);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 341 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(NUMTHREADS);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 342 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOM);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 343 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMX);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 344 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMY);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 345 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCMOMZ);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 346 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOM);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 347 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMX);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 348 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMY);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 349 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SNKMOMZ);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 350 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMX);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 351 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 352 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOMZ);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 353 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQSRCMOM);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 354 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMX);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 355 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMY);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 356 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOMZ);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 357 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SEQ2SRCMOM);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 358 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CPUPREC);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 359 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPREC);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 360 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(GPUPRECSLOPPY);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 361 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(INVERTERTYPE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 362 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MMSID);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 363 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(CHKINVERSION);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 365 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSTIMEPROJTYPE);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 366 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSSPINPROJTYPE);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 367 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPROJTYPE);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 368 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECNUMBER);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 369 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSRNDVECNUMBER);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 370 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECPATHPRFX);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 371 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHSEVECFILEPRFX);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 372 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_TIME_SRC_NUMBER);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 373 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_SPIN_SRC_NUMBER);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 374 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_EVEC_SRC_NUMBER);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 376 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_PATH_PREFIX);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 377 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(LAPHS_PERAMBULATOR_FILE_PREFIX);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 379 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(M_M_TWOPT);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 380 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(MXB_MXB_TWOPT);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 381 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(FERMION_TYPE);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 382 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(SRCSNKTIMESEP);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 384 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
BEGIN(COHERENTSOURCENUMBER);
	YY_BREAK
/* start namespace inclusion here */
case 157:
YY_RULE_SETUP
#line 388 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::T_global = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::T_global =%s\n", cvc_text);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 392 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L =%s\n", cvc_text);
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 396 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::L5 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::L5 =%s\n", cvc_text);
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 400 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LX = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LX =%s\n", cvc_text);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 404 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LY = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LY =%s\n", cvc_text);
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 408 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::LZ = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::LZ =%s\n", cvc_text);
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 412 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_kappa=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] kappa=%s \n", cvc_text);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 416 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mu=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 420 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m5 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m5=%s \n", cvc_text);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 424 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_musigma=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] musigma=%s \n", cvc_text);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 428 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mudelta=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mudelta=%s \n", cvc_text);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 432 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mubar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mubar=%s \n", cvc_text);
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 436 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_m0 = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] m0=%s \n", cvc_text);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 440 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_epsbar=atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] mu=%s \n", cvc_text);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 445 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_csw = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] csw = %s \n", cvc_text);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 450 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nsave=atoi(cvc_text); 
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nsave= %s \n",cvc_text);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 454 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nconf=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::Nconf=%s\n", cvc_text);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 458 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[0]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[0] for bound. in time set to %e\n", cvc::BCangle[0]);
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 462 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[1]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[1] for bound. in x set to %e\n", cvc::BCangle[1]);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 466 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[2]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[2] for bound. in y set to %e\n", cvc::BCangle[2]);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 470 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::BCangle[3]=atof(cvc_text);
  if(cvc::myverbose != 0) printf("# [read_input_parser] cvc::BCangle[3] for bound. in z set to %e\n", cvc::BCangle[3]);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 474 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first source id set to %s\n", cvc_text);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 478 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second source id set to %s\n", cvc_text);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 482 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sourceid_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source id step set to %s\n", cvc_text);
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 486 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] first gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 490 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gaugeid2 = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] second gauge id set to %s\n", cvc_text);
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 494 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gauge_step = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge step size set to %s\n", cvc_text);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 498 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 502 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 2 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 506 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::filename_prefix3,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] prop. 3 filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 511 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 516 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_sequential_filename_prefix2,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] sequential prop. filename prefix 2 set to %s\n",cvc_text);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 521 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::gaugefilename_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] gauge filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 525 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_outfile_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] out filename prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 529 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_path_prefix,cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 533 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_resume=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_resume set to %s\n",cvc_text);
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 537 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_subtract=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_subtract set to %s\n",cvc_text);
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 541 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_location=atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] source location set to %s\n",cvc_text);
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 545 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::format = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::format set to %s\n",cvc_text);
}  
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 549 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seed = (unsigned int)atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_seed set to %s\n",cvc_text);
}  
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 553 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Gaussian")==0 ) {
    cvc::g_noise_type = 1;
  } else if(strcmp(cvc_text, "Z2")==0 ) {
    cvc::g_noise_type = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] noise type set to %s\n",cvc_text);
}  
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 561 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Point")==0) {
    cvc::g_source_type = 0;
  } else if (strcmp(cvc_text, "Volume")==0 ) {
    cvc::g_source_type = 1;
  } else if (strcmp(cvc_text, "Timeslice")==0 ) {
    cvc::g_source_type = 2;
  } else if (strcmp(cvc_text, "TimesliceOneEnd")==0 ) {
    cvc::g_source_type = 3;
  } else if (strcmp(cvc_text, "TimesliceOneEndColor")==0 ) {
    cvc::g_source_type = 4;
  } else if (strcmp(cvc_text, "SequentialPoint")==0 ) {
    cvc::g_source_type = 5;
  } else if (strcmp(cvc_text, "Other")==0 ) {
    cvc::g_source_type = -1;
  } 
  if(cvc::myverbose!=0) printf("# [read_input_parser] source type set to %s\n",cvc_text);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 579 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::solver_precision = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] solver precision set to %s\n",cvc_text);
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 583 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::reliable_delta = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] reliable delta set to %s\n",cvc_text);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 587 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::niter_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. number of iterations set to %s\n",cvc_text);
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 591 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_min = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] min. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 595 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order_max = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] max. HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 599 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::hpe_order = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] HPE order set to %s\n",cvc_text);
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 603 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutangle = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut angle set to %s\n",cvc_text);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 607 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutradius = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cone cut radius set to %s\n",cvc_text);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 611 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[0] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] t-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 615 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[1] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 619 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[2] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 623 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_cutdir[3] = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of cut dir angle set to %s\n",cvc_text);
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 627 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmin = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] minimal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 631 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_rmax = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] maximal distance set to %s\n",cvc_text);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 635 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgT = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgT =%s\n", cvc_text);
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 639 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::avgL = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::avgL =%s\n", cvc_text);
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 643 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_re = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] real part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 647 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_dcoeff_im = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] imaginary part of d-coeff. set to %s\n", cvc_text);
}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 651 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::model_mrho = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] rho-meson mass set to %s\n", cvc_text);
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 655 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[0] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 1st rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 659 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[1] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 2nd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 663 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[2] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 3rd rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 667 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::ft_rmax[3] = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] 4th rmax for FT set to %s\n", cvc_text);
}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 671 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_prop_normsqr = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator norm squared set to %s\n", cvc_text);
}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 675 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_min = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set minimal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 679 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_qhatsqr_max = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set maximal squared Qhat to %s\n", cvc_text);
}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 683 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::Nlong = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::Nlong to %s\n", cvc_text);
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 687 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_ape = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_ape to %s\n", cvc_text);
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 691 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_hyp = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_hyp to %s\n", cvc_text);
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 695 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::N_Jacobi = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::N_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 699 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::alpha_ape = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::alpha_ape to %s\n", cvc_text);
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 703 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%lf/%lf/%lf", cvc::alpha_hyp, cvc::alpha_hyp+1, cvc::alpha_hyp+2);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set alpha_hyp to %f, %f, %f\n", cvc::alpha_hyp[0], cvc::alpha_hyp[1], cvc::alpha_hyp[2]);
  /* if(cvc::myverbose!=0) printf("# [read_input_parser] cvc_text is %s\n", cvc_text); */
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 708 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::kappa_Jacobi = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::kappa_Jacobi to %s\n", cvc_text);
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 712 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_timeslice = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set source timeslice to %s\n", cvc_text);
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 716 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if( cvc::g_sequential_source_timeslice_number == 0) {
    cvc::g_sequential_source_timeslice = atoi(cvc_text);
  }
  cvc::g_sequential_source_timeslice_list[ cvc::g_sequential_source_timeslice_number ] = atoi(cvc_text);
  cvc::g_sequential_source_timeslice_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source timeslice  %s; total number is now %d\n", cvc_text, cvc::g_sequential_source_timeslice_number);
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 725 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location x to %s\n", cvc_text);
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 729 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location y to %s\n", cvc_text);
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 733 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_location_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set sequential source location z to %s\n", cvc_text);
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 738 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_sequential_source_gamma_id_number == 0 ) {
    cvc::g_sequential_source_gamma_id = cvc::g_sequential_source_gamma_id_list[cvc::g_sequential_source_gamma_id_number];
  }
  cvc::g_sequential_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in sequential source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_sequential_source_gamma_id_number);
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 747 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number] = atoi(cvc_text);
  if( cvc::g_source_gamma_id_number == 0 ) {
    cvc::g_source_gamma_id = cvc::g_source_gamma_id_list[cvc::g_source_gamma_id_number];
  }
  cvc::g_source_gamma_id_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] set new entry in source gamma id list to %s, total number is now %d\n", cvc_text, cvc::g_source_gamma_id_number);
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 757 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_extra_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of extra masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 761 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_light_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of light masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 765 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_no_strange_masses = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set no. of strange masses for mms to %s\n", cvc_text);
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 769 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_t = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_t to %s\n", cvc_text);
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 773 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_x = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_x to %s\n", cvc_text);
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 777 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_y = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_y to %s\n", cvc_text);
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 781 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nproc_z = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set cvc::g_nproc_z to %s\n", cvc_text);
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 786 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-local contraction\n");
  }
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 792 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_local_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do local-smeared contraction\n");
  }
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 798 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_local = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-local contraction\n");
  }
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 804 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_smeared_smeared = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] do smeared-smeared contraction\n");
  }
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 810 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_rotate_ETMC_UKQCD = 1;
    if(cvc::myverbose!=0) printf("# [read_input_parser] rotate propagators UKQCD -> ETMC\n");
  }
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 816 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_position = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator position to %s\n", cvc_text);
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 821 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_device_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set GPU device number to %s\n", cvc_text);
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 825 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_gpu_per_node = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of GPUs  per node to %s\n", cvc_text);
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 830 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source to %s\n", cvc_text);
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 835 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_base = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source base to %s\n", cvc_text);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 840 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_delta = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set coherent source delta to %s\n", cvc_text);
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 844 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "ildg")==0) {
    cvc::g_gauge_file_format = 0;
  } else if(strcmp(cvc_text, "nersc")==0) {
    cvc::g_gauge_file_format = 1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set gauge file cvc::format to %s\n", cvc_text);
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 852 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
//  cvc::g_rng_filename = (char*)malloc((strlen(cvc_text)+1)*sizeof(char));
  strcpy(cvc::g_rng_filename, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_rng_filename set to %s\n", cvc::g_rng_filename);
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 857 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_index[0] = atoi(cvc_text);
  cvc::g_source_index[1] = cvc::g_source_index[0];
  if(cvc::myverbose!=0) printf("# [read_input_parser] start index set to %d\n", cvc::g_source_index[0]);
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 862 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "-%d", cvc::g_source_index+1);
  if(cvc::myverbose!=0) printf("# [read_input_parser] end index set to %d\n", cvc::g_source_index[1]);
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 866 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "Phase")==0) {
    cvc::g_propagator_bc_type = 0;
  } else if(strcmp(cvc_text, "Sign")==0) {
    cvc::g_propagator_bc_type = 1;
  } else {
    cvc::g_propagator_bc_type = -1;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] propagator boundary condition type set to %d\n", cvc::g_propagator_bc_type);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 876 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 884 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write source to %d\n", cvc::g_write_source);  
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 892 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write propagator to %d\n", cvc::g_write_propagator);  
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 900 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read propagator to %d\n", cvc::g_read_propagator);  
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 908 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_read_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_read_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set read sequential propagator to %d\n", cvc::g_read_sequential_propagator);  
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 917 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_source = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_source = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential source  to %d\n", cvc::g_write_sequential_source);
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 926 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"yes")==0) {
    cvc::g_write_sequential_propagator = 1;
  } else if(strcmp(cvc_text,"no")==0) {
    cvc::g_write_sequential_propagator = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set write sequential propagator  to %d\n", cvc::g_write_sequential_propagator);
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 935 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text,"DeGrandRossi")==0) {
    cvc::g_propagator_gamma_basis = 1;
  } else if(strcmp(cvc_text,"UKQCD")==0) {
    cvc::g_propagator_gamma_basis = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator gamma basis type to %d\n", cvc::g_propagator_gamma_basis);
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 943 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_propagator_precision = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set propagator precision to %d\n", cvc::g_propagator_precision);
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 947 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_nsample = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set number of samples to %d\n", cvc::g_nsample);
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 951 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_as_over_a = atof(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] as / a set to  %s\n",cvc_text);
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 955 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_num_threads = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] number of threads =%d\n", cvc::g_num_threads);
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 960 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[0] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of source momentum set to %d\n", cvc::g_source_momentum[0]);
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 965 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[1] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of source momentum set to %d\n", cvc::g_source_momentum[1]);
}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 970 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_source_momentum[2] = atoi(cvc_text);
  cvc::g_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of source momentum set to %d\n", cvc::g_source_momentum[2]);
}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 976 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_source_momentum_list[cvc::g_source_momentum_number],
      cvc::g_source_momentum_list[cvc::g_source_momentum_number]+1, cvc::g_source_momentum_list[cvc::g_source_momentum_number]+2);
  cvc::g_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_source_momentum_number);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 983 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[0] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[0]);
}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 988 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[1] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[1]);
}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 993 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_sink_momentum[2] = atoi(cvc_text);
  cvc::g_sink_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sink momentum set to %d\n", cvc::g_sink_momentum[2]);
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 998 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_sink_momentum_list[cvc::g_sink_momentum_number],
      cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+1, cvc::g_sink_momentum_list[cvc::g_sink_momentum_number]+2);
  cvc::g_sink_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sink momentum %s to list; total number is now %d\n", cvc_text, cvc::g_sink_momentum_number);
}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1005 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[0]);
}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1010 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[1]);
}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1015 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential source momentum set to %d\n", cvc::g_seq_source_momentum[2]);
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1021 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number],
      cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+1, cvc::g_seq_source_momentum_list[cvc::g_seq_source_momentum_number]+2);
  cvc::g_seq_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq_source_momentum_number);
}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1028 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[0] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] x-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[0]);
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1033 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[1] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] y-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[1]);
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1038 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_seq2_source_momentum[2] = atoi(cvc_text);
  cvc::g_seq2_source_momentum_set = 1;
  if(cvc::myverbose!=0) printf("# [read_input_parser] z-comp. of sequential^2 source momentum set to %d\n", cvc::g_seq2_source_momentum[2]);
}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1044 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  sscanf(cvc_text, "%d,%d,%d", cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number],
      cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+1, cvc::g_seq2_source_momentum_list[cvc::g_seq2_source_momentum_number]+2);
  cvc::g_seq2_source_momentum_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] added sequential^2 source momentum %s to list; total number is now %d\n", cvc_text, cvc::g_seq2_source_momentum_number);
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1051 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_cpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_cpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_cpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] CPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 1061 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1071 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "half")==0 ) {
    cvc::g_gpu_prec_sloppy = 0;
  } else if(strcmp(cvc_text, "single")==0 ) {
    cvc::g_gpu_prec_sloppy = 1;
  } else if(strcmp(cvc_text, "double")==0 ) {
    cvc::g_gpu_prec_sloppy = 2;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] GPU sloppy precision (for QUDA library) set to %s\n",cvc_text);
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1081 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::g_inverter_type_name, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] inverter type name set to %s\n",cvc_text);
}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1085 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_mms_id = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] set mms id to %s\n", cvc_text);
}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1089 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "yes")==0) {
    cvc::g_check_inversion = 1;
  } else if(strcmp(cvc_text, "no")==0)  {
    cvc::g_check_inversion = 0;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] check inversion %d\n",cvc::g_check_inversion);
}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1098 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_time_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS time proj set to %s\n",cvc_text);
}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 1103 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_spin_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS spin proj set to %s\n",cvc_text);
}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 1108 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_evec_proj_type, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS evec pro set to %s\n",cvc_text);
}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1114 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_eigenvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of eigenvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1119 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_randomvector_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of randomvectors set to %s\n",cvc_text);
}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1124 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 1129 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_eigenvector_file_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS eigenvector file prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1134 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_time_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of times at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1139 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_spin_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of spin at source set to  %s\n",cvc_text);
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1144 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::laphs_evec_src_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS number of evec at set to  %s\n",cvc_text);
}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1150 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  strcpy(cvc::laphs_perambulator_path_prefix, cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] LAPHS perambulator path prefix set to %s\n",cvc_text);
}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1155 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_m_m_2pt_num == MAX_M_M_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many m_m_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting m_m_2pt number %d\n", cvc::g_m_m_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gi),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pi+2,
    &(cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].gf),
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+1,
    cvc::g_m_m_2pt_list[cvc::g_m_m_2pt_num].pf+2
  );

  cvc::g_m_m_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] m_m_2pt no. %d set to %s\n", cvc::g_m_m_2pt_num, cvc_text);
}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1179 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_source_location_number == MAX_SOURCE_LOCATION_NUMBER ) {
    fprintf(stderr, "[read_input_parser] Error, too many source locations\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting source coords %d\n", cvc::g_source_location_number);
  }

  sscanf(cvc_text, "%d,%d,%d,%d",
    cvc::g_source_coords_list[cvc::g_source_location_number],
    cvc::g_source_coords_list[cvc::g_source_location_number]+1,
    cvc::g_source_coords_list[cvc::g_source_location_number]+2,
    cvc::g_source_coords_list[cvc::g_source_location_number]+3);

  cvc::g_source_location_number++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] source coords no. %d set to %s\n", cvc::g_source_location_number, cvc_text);
}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1198 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{

  if ( cvc::g_mxb_mxb_2pt_num == MAX_MXB_MXB_2PT_NUM ) {
    fprintf(stderr, "[read_input_parser] Error, too many mxb_mxb_2pt\n");
    exit(1);
  } else {
    fprintf(stdout, "# [read_input_parser] extracting mxb_mxb_2pt number %d\n", cvc::g_mxb_mxb_2pt_num);
  }

  sscanf(cvc_text, "%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d);%d,(%d,%d,%d)",
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gi2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pi2+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf1),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf1+2,
    &(cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].gf2),
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+1,
      cvc::g_mxb_mxb_2pt_list[cvc::g_mxb_mxb_2pt_num].pf2+2
  );

  cvc::g_mxb_mxb_2pt_num++;
  if(cvc::myverbose!=0) printf("# [read_input_parser] mxb_mxb_2pt no. %d set to %s\n", cvc::g_mxb_mxb_2pt_num, cvc_text);
}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 1230 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  if(strcmp(cvc_text, "TwistedMass")==0) {
    cvc::g_fermion_type = _TM_FERMION;
  } else if (strcmp(cvc_text, "Wilson")==0 ) {
    cvc::g_fermion_type = _WILSON_FERMION;
  } else if (strcmp(cvc_text, "DomainWall")==0 ) {
    cvc::g_fermion_type = _DW_WILSON_FERMION;
  }
  if(cvc::myverbose!=0) printf("# [read_input_parser] fermion type set to %d\n", cvc::g_fermion_type);
}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 1241 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_src_snk_time_separation = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] cvc::g_src_snk_time_separation = %s\n", cvc_text);
}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1246 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::g_coherent_source_number = atoi(cvc_text);
  if(cvc::myverbose!=0) printf("# [read_input_parser] coherent source number set to =%d\n", cvc::g_coherent_source_number);
}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1252 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;   
   BEGIN(COMMENT);
}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1256 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
   cvc::comment_caller = YY_START;
   BEGIN(COMMENT);
}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1260 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(cvc::comment_caller);
}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 1264 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  cvc::line_of_file++;
  BEGIN(0);
}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1269 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  BEGIN(ERROR);
}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1272 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
{
  printf("# [read_input_parser] Parsing error in line %d\nAborting...!\n", cvc::line_of_file);
  exit(1);
}
	YY_BREAK
/* end namespace inclusion here */
case 319:
YY_RULE_SETUP
#line 1279 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"
ECHO;
	YY_BREAK
#line 7050 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(TT):
case YY_STATE_EOF(LLX):
case YY_STATE_EOF(LLY):
case YY_STATE_EOF(LLZ):
case YY_STATE_EOF(LL):
case YY_STATE_EOF(LL5):
case YY_STATE_EOF(NNCONF):
case YY_STATE_EOF(KAPPA):
case YY_STATE_EOF(MU):
case YY_STATE_EOF(MUSIGMA):
case YY_STATE_EOF(MUDELTA):
case YY_STATE_EOF(MUBAR):
case YY_STATE_EOF(M5):
case YY_STATE_EOF(M0):
case YY_STATE_EOF(EPSBAR):
case YY_STATE_EOF(CSW):
case YY_STATE_EOF(SOURCEID):
case YY_STATE_EOF(SOURCEID2):
case YY_STATE_EOF(GAUGEID):
case YY_STATE_EOF(GAUGEID2):
case YY_STATE_EOF(GAUGESTEP):
case YY_STATE_EOF(NNSAVE):
case YY_STATE_EOF(FFORMAT):
case YY_STATE_EOF(BCT):
case YY_STATE_EOF(BCX):
case YY_STATE_EOF(BCY):
case YY_STATE_EOF(BCZ):
case YY_STATE_EOF(PREFIX):
case YY_STATE_EOF(PREFIX2):
case YY_STATE_EOF(PREFIX3):
case YY_STATE_EOF(SEQPREFIX):
case YY_STATE_EOF(SEQPREFIX2):
case YY_STATE_EOF(GAUGEPREFIX):
case YY_STATE_EOF(OUTPREFIX):
case YY_STATE_EOF(PATHPREFIX):
case YY_STATE_EOF(RESUME):
case YY_STATE_EOF(SUBTRACT):
case YY_STATE_EOF(SOURCELOC):
case YY_STATE_EOF(SSEED):
case YY_STATE_EOF(NOISETYPE):
case YY_STATE_EOF(SRCTYPE):
case YY_STATE_EOF(SPREC):
case YY_STATE_EOF(MAXITER):
case YY_STATE_EOF(SOURCEIDSTEP):
case YY_STATE_EOF(HPEMIN):
case YY_STATE_EOF(HPEMAX):
case YY_STATE_EOF(HPEORD):
case YY_STATE_EOF(CUTDIRT):
case YY_STATE_EOF(CUTDIRX):
case YY_STATE_EOF(CUTDIRY):
case YY_STATE_EOF(CUTDIRZ):
case YY_STATE_EOF(CUTANG):
case YY_STATE_EOF(CUTRAD):
case YY_STATE_EOF(RMIN):
case YY_STATE_EOF(RMAX):
case YY_STATE_EOF(AVGTT):
case YY_STATE_EOF(AVGLL):
case YY_STATE_EOF(MODEL_DCOEFFRE):
case YY_STATE_EOF(MODEL_DCOEFFIM):
case YY_STATE_EOF(MODEL_MRHO):
case YY_STATE_EOF(FTRMAX1):
case YY_STATE_EOF(FTRMAX2):
case YY_STATE_EOF(FTRMAX3):
case YY_STATE_EOF(FTRMAX4):
case YY_STATE_EOF(PROPNORMSQR):
case YY_STATE_EOF(QHATSQRMIN):
case YY_STATE_EOF(QHATSQRMAX):
case YY_STATE_EOF(NLONG):
case YY_STATE_EOF(NAPE):
case YY_STATE_EOF(NJACOBI):
case YY_STATE_EOF(NHYP):
case YY_STATE_EOF(ALPHAAPE):
case YY_STATE_EOF(ALPHAHYP):
case YY_STATE_EOF(KAPPAJACOBI):
case YY_STATE_EOF(SRCTIMESLICE):
case YY_STATE_EOF(SEQSRCTIMESLICE):
case YY_STATE_EOF(SEQSRCLOCATIONX):
case YY_STATE_EOF(SEQSRCLOCATIONY):
case YY_STATE_EOF(SEQSRCLOCATIONZ):
case YY_STATE_EOF(SEQSRCGAMMAID):
case YY_STATE_EOF(SRCGAMMAID):
case YY_STATE_EOF(MMSNOMASSES):
case YY_STATE_EOF(NOLIGHTMASSES):
case YY_STATE_EOF(NOSTRANGEMASSES):
case YY_STATE_EOF(NOTPROCS):
case YY_STATE_EOF(NOXPROCS):
case YY_STATE_EOF(NOYPROCS):
case YY_STATE_EOF(NOZPROCS):
case YY_STATE_EOF(LOCLOC):
case YY_STATE_EOF(LOCSME):
case YY_STATE_EOF(SMELOC):
case YY_STATE_EOF(SMESME):
case YY_STATE_EOF(ROTATE):
case YY_STATE_EOF(PROPPOS):
case YY_STATE_EOF(GPUDEVICENUMBER):
case YY_STATE_EOF(GPUPERNODE):
case YY_STATE_EOF(RELDELTA):
case YY_STATE_EOF(COHSRC):
case YY_STATE_EOF(COHSRCBASE):
case YY_STATE_EOF(COHSRCDELTA):
case YY_STATE_EOF(GAUGEFILEFORMAT):
case YY_STATE_EOF(RNGFILE):
case YY_STATE_EOF(SRCINDEX):
case YY_STATE_EOF(PROPBCTYPE):
case YY_STATE_EOF(PROPGAMMA):
case YY_STATE_EOF(PROPPREC):
case YY_STATE_EOF(WRITESRC):
case YY_STATE_EOF(READSRC):
case YY_STATE_EOF(WRITEPROP):
case YY_STATE_EOF(READPROP):
case YY_STATE_EOF(READSEQPROP):
case YY_STATE_EOF(WRITESEQSRC):
case YY_STATE_EOF(WRITESEQPROP):
case YY_STATE_EOF(NSAMPLE):
case YY_STATE_EOF(ASOVERA):
case YY_STATE_EOF(NUMTHREADS):
case YY_STATE_EOF(SRCMOM):
case YY_STATE_EOF(SRCMOMX):
case YY_STATE_EOF(SRCMOMY):
case YY_STATE_EOF(SRCMOMZ):
case YY_STATE_EOF(SNKMOM):
case YY_STATE_EOF(SNKMOMX):
case YY_STATE_EOF(SNKMOMY):
case YY_STATE_EOF(SNKMOMZ):
case YY_STATE_EOF(SEQSRCMOM):
case YY_STATE_EOF(SEQSRCMOMX):
case YY_STATE_EOF(SEQSRCMOMY):
case YY_STATE_EOF(SEQSRCMOMZ):
case YY_STATE_EOF(SEQ2SRCMOM):
case YY_STATE_EOF(SEQ2SRCMOMX):
case YY_STATE_EOF(SEQ2SRCMOMY):
case YY_STATE_EOF(SEQ2SRCMOMZ):
case YY_STATE_EOF(CPUPREC):
case YY_STATE_EOF(GPUPREC):
case YY_STATE_EOF(GPUPRECSLOPPY):
case YY_STATE_EOF(INVERTERTYPE):
case YY_STATE_EOF(MMSID):
case YY_STATE_EOF(CHKINVERSION):
case YY_STATE_EOF(LAPHSTIMEPROJTYPE):
case YY_STATE_EOF(LAPHSSPINPROJTYPE):
case YY_STATE_EOF(LAPHSEVECPROJTYPE):
case YY_STATE_EOF(LAPHSEVECNUMBER):
case YY_STATE_EOF(LAPHSRNDVECNUMBER):
case YY_STATE_EOF(LAPHSEVECPATHPRFX):
case YY_STATE_EOF(LAPHSEVECFILEPRFX):
case YY_STATE_EOF(LAPHS_TIME_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_SPIN_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_EVEC_SRC_NUMBER):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_PATH_PREFIX):
case YY_STATE_EOF(LAPHS_PERAMBULATOR_FILE_PREFIX):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(ERROR):
case YY_STATE_EOF(M_M_TWOPT):
case YY_STATE_EOF(MXB_MXB_TWOPT):
case YY_STATE_EOF(FERMION_TYPE):
case YY_STATE_EOF(SOURCECOORDS):
case YY_STATE_EOF(SRCSNKTIMESEP):
case YY_STATE_EOF(COHERENTSOURCENUMBER):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cvc_in at a new source and called
			 * cvc_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cvc_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cvc_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cvc_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of cvc_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cvc_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cvc_restart(cvc_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cvc_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2541 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2541 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2540);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cvc_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cvc_restart(cvc_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cvc_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cvc_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cvc_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cvc_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cvc__create_buffer(cvc_in,YY_BUF_SIZE );
	}

	cvc__init_buffer(YY_CURRENT_BUFFER,input_file );
	cvc__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cvc__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cvc_pop_buffer_state();
	 *		cvc_push_buffer_state(new_buffer);
     */
	cvc_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cvc__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cvc_wrap()) processing, but the only time this flag
	 * is looked at is after cvc_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cvc__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cvc_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cvc__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cvc_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cvc__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cvc__create_buffer()
 * 
 */
    void cvc__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cvc_free((void *) b->yy_ch_buf  );

	cvc_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cvc_restart() or at EOF.
 */
    static void cvc__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cvc__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cvc__init_buffer was _probably_
     * called from cvc_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cvc__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cvc__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cvc_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cvc_ensure_buffer_stack();

	/* This block is copied from cvc__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cvc__switch_to_buffer. */
	cvc__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cvc_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cvc__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cvc__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cvc_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cvc_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cvc_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cvc__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cvc_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cvc__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cvc_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cvc__scan_bytes() instead.
 */
YY_BUFFER_STATE cvc__scan_string (yyconst char * yystr )
{
    
	return cvc__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cvc_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cvc__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cvc_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cvc__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cvc__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cvc__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cvc_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cvc_text[cvc_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cvc_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cvc_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cvc_get_lineno  (void)
{
        
    return cvc_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cvc_get_in  (void)
{
        return cvc_in;
}

/** Get the output stream.
 * 
 */
FILE *cvc_get_out  (void)
{
        return cvc_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cvc_get_leng  (void)
{
        return cvc_leng;
}

/** Get the current token.
 * 
 */

char *cvc_get_text  (void)
{
        return cvc_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cvc_set_lineno (int  line_number )
{
    
    cvc_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cvc__switch_to_buffer
 */
void cvc_set_in (FILE *  in_str )
{
        cvc_in = in_str ;
}

void cvc_set_out (FILE *  out_str )
{
        cvc_out = out_str ;
}

int cvc_get_debug  (void)
{
        return cvc__flex_debug;
}

void cvc_set_debug (int  bdebug )
{
        cvc__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cvc_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cvc_in = stdin;
    cvc_out = stdout;
#else
    cvc_in = (FILE *) 0;
    cvc_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cvc_lex_init()
     */
    return 0;
}

/* cvc_lex_destroy is for both reentrant and non-reentrant scanners. */
int cvc_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cvc__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cvc_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cvc_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cvc_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cvc_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cvc_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cvc_free (void * ptr )
{
	free( (char *) ptr );	/* see cvc_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1278 "/home/marcuspe/software/cvc/read_input_parser_cvc.l"



/*
 *  Dummy (but not dumb) routine - well, function
 */


int cvc_wrap()
{
  return(1);
}

namespace cvc {
/* 
 * This is the function to parse the input file.
 * default values for all paramters will be set
 * correspondig to settings in
 * default_input_values.h
 *
 * read_input expects the filename of the input file
 * as an input parameter.
 *
 * read_input returns 2 if the input file did not exist 
 */

int read_input_parser(char * conf_file){

  /********************************************
   * Setting default values!
   ********************************************/
  reread = 0;
  set_default_input_values();

  if( (g_proc_id == 0) && (cvc_verbose>0) ) {
    myverbose = 1;
  }
  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  
  
  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}


/* 
 * This is the function to parse the input file 
 * again. Only parameters are changed, that
 * are specified in the input file.
 * default values for paramters will not be set.
 *
 * reread_input expects the filename of the input file
 * as an input parameter.
 *
 * reread_input returns 2 if the input file did not exist 
 */

int reread_input_parser(char * conf_file){

  if(cvc_verbose && g_proc_id == 0) {
    myverbose = 1;
  }
  reread = 1;

  /********************************************
   * Setting default values!
   ********************************************/

  /********************************************/

  if ((cvc_in = fopen(conf_file, "rt")) == NULL){
    return(2);
  }
  cvc_out = fopen("/dev/null", "w");

  parse_config();  

  fclose(cvc_out);
  fclose(cvc_in);
  return(0);
}

}  /* of namespace cvc */

